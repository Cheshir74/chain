// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bc {

namespace {

const ::google::protobuf::Descriptor* Hash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hash_reflection_ = NULL;
const ::google::protobuf::Descriptor* Program_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Program_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssetID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssetAmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetAmount_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssetDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetDefinition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValueSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValueDestination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueDestination_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mux_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mux_reflection_ = NULL;
const ::google::protobuf::Descriptor* Nonce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nonce_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coinbase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coinbase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Output_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Output_reflection_ = NULL;
const ::google::protobuf::Descriptor* Retirement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Retirement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Issuance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Issuance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spend_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_bc_2eproto() {
  protobuf_AddDesc_bc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bc.proto");
  GOOGLE_CHECK(file != NULL);
  Hash_descriptor_ = file->message_type(0);
  static const int Hash_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, v0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, v1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, v2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, v3_),
  };
  Hash_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Hash_descriptor_,
      Hash::default_instance_,
      Hash_offsets_,
      -1,
      -1,
      -1,
      sizeof(Hash),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, _is_default_instance_));
  Program_descriptor_ = file->message_type(1);
  static const int Program_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program, vm_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program, code_),
  };
  Program_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Program_descriptor_,
      Program::default_instance_,
      Program_offsets_,
      -1,
      -1,
      -1,
      sizeof(Program),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program, _is_default_instance_));
  AssetID_descriptor_ = file->message_type(2);
  static const int AssetID_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetID, v0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetID, v1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetID, v2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetID, v3_),
  };
  AssetID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AssetID_descriptor_,
      AssetID::default_instance_,
      AssetID_offsets_,
      -1,
      -1,
      -1,
      sizeof(AssetID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetID, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetID, _is_default_instance_));
  AssetAmount_descriptor_ = file->message_type(3);
  static const int AssetAmount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetAmount, asset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetAmount, amount_),
  };
  AssetAmount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AssetAmount_descriptor_,
      AssetAmount::default_instance_,
      AssetAmount_offsets_,
      -1,
      -1,
      -1,
      sizeof(AssetAmount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetAmount, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetAmount, _is_default_instance_));
  AssetDefinition_descriptor_ = file->message_type(4);
  static const int AssetDefinition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetDefinition, initial_block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetDefinition, issuance_program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetDefinition, data_),
  };
  AssetDefinition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AssetDefinition_descriptor_,
      AssetDefinition::default_instance_,
      AssetDefinition_offsets_,
      -1,
      -1,
      -1,
      sizeof(AssetDefinition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetDefinition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetDefinition, _is_default_instance_));
  ValueSource_descriptor_ = file->message_type(5);
  static const int ValueSource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSource, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSource, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSource, position_),
  };
  ValueSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValueSource_descriptor_,
      ValueSource::default_instance_,
      ValueSource_offsets_,
      -1,
      -1,
      -1,
      sizeof(ValueSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSource, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSource, _is_default_instance_));
  ValueDestination_descriptor_ = file->message_type(6);
  static const int ValueDestination_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueDestination, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueDestination, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueDestination, position_),
  };
  ValueDestination_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValueDestination_descriptor_,
      ValueDestination::default_instance_,
      ValueDestination_offsets_,
      -1,
      -1,
      -1,
      sizeof(ValueDestination),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueDestination, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueDestination, _is_default_instance_));
  BlockHeader_descriptor_ = file->message_type(7);
  static const int BlockHeader_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, serialized_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, previous_block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, transactions_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, assets_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, transaction_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, bits_),
  };
  BlockHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockHeader_descriptor_,
      BlockHeader::default_instance_,
      BlockHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _is_default_instance_));
  TxHeader_descriptor_ = file->message_type(8);
  static const int TxHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHeader, serialized_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHeader, time_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHeader, result_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHeader, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHeader, ext_hash_),
  };
  TxHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TxHeader_descriptor_,
      TxHeader::default_instance_,
      TxHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(TxHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHeader, _is_default_instance_));
  TransactionStatus_descriptor_ = file->message_type(9);
  static const int TransactionStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, bitmap_),
  };
  TransactionStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionStatus_descriptor_,
      TransactionStatus::default_instance_,
      TransactionStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransactionStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, _is_default_instance_));
  Mux_descriptor_ = file->message_type(10);
  static const int Mux_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mux, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mux, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mux, ext_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mux, witness_destinations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mux, witness_arguments_),
  };
  Mux_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mux_descriptor_,
      Mux::default_instance_,
      Mux_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mux),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mux, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mux, _is_default_instance_));
  Nonce_descriptor_ = file->message_type(11);
  static const int Nonce_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, ext_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, witness_arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, witness_anchored_id_),
  };
  Nonce_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Nonce_descriptor_,
      Nonce::default_instance_,
      Nonce_offsets_,
      -1,
      -1,
      -1,
      sizeof(Nonce),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, _is_default_instance_));
  Coinbase_descriptor_ = file->message_type(12);
  static const int Coinbase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coinbase, witness_destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coinbase, arbitrary_),
  };
  Coinbase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Coinbase_descriptor_,
      Coinbase::default_instance_,
      Coinbase_offsets_,
      -1,
      -1,
      -1,
      sizeof(Coinbase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coinbase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coinbase, _is_default_instance_));
  Output_descriptor_ = file->message_type(13);
  static const int Output_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, control_program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, ext_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, ordinal_),
  };
  Output_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Output_descriptor_,
      Output::default_instance_,
      Output_offsets_,
      -1,
      -1,
      -1,
      sizeof(Output),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _is_default_instance_));
  Retirement_descriptor_ = file->message_type(14);
  static const int Retirement_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Retirement, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Retirement, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Retirement, ext_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Retirement, ordinal_),
  };
  Retirement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Retirement_descriptor_,
      Retirement::default_instance_,
      Retirement_offsets_,
      -1,
      -1,
      -1,
      sizeof(Retirement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Retirement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Retirement, _is_default_instance_));
  Issuance_descriptor_ = file->message_type(15);
  static const int Issuance_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, anchor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, ext_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, witness_destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, witness_asset_definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, witness_arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, witness_anchored_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, ordinal_),
  };
  Issuance_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Issuance_descriptor_,
      Issuance::default_instance_,
      Issuance_offsets_,
      -1,
      -1,
      -1,
      sizeof(Issuance),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Issuance, _is_default_instance_));
  Spend_descriptor_ = file->message_type(16);
  static const int Spend_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, spent_output_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, ext_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, witness_destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, witness_arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, witness_anchored_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, ordinal_),
  };
  Spend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Spend_descriptor_,
      Spend::default_instance_,
      Spend_offsets_,
      -1,
      -1,
      -1,
      sizeof(Spend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spend, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Hash_descriptor_, &Hash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Program_descriptor_, &Program::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AssetID_descriptor_, &AssetID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AssetAmount_descriptor_, &AssetAmount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AssetDefinition_descriptor_, &AssetDefinition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValueSource_descriptor_, &ValueSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValueDestination_descriptor_, &ValueDestination::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockHeader_descriptor_, &BlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TxHeader_descriptor_, &TxHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionStatus_descriptor_, &TransactionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mux_descriptor_, &Mux::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Nonce_descriptor_, &Nonce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Coinbase_descriptor_, &Coinbase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Output_descriptor_, &Output::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Retirement_descriptor_, &Retirement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Issuance_descriptor_, &Issuance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Spend_descriptor_, &Spend::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bc_2eproto() {
  delete Hash::default_instance_;
  delete Hash_reflection_;
  delete Program::default_instance_;
  delete Program_reflection_;
  delete AssetID::default_instance_;
  delete AssetID_reflection_;
  delete AssetAmount::default_instance_;
  delete AssetAmount_reflection_;
  delete AssetDefinition::default_instance_;
  delete AssetDefinition_reflection_;
  delete ValueSource::default_instance_;
  delete ValueSource_reflection_;
  delete ValueDestination::default_instance_;
  delete ValueDestination_reflection_;
  delete BlockHeader::default_instance_;
  delete BlockHeader_reflection_;
  delete TxHeader::default_instance_;
  delete TxHeader_reflection_;
  delete TransactionStatus::default_instance_;
  delete TransactionStatus_reflection_;
  delete Mux::default_instance_;
  delete Mux_reflection_;
  delete Nonce::default_instance_;
  delete Nonce_reflection_;
  delete Coinbase::default_instance_;
  delete Coinbase_reflection_;
  delete Output::default_instance_;
  delete Output_reflection_;
  delete Retirement::default_instance_;
  delete Retirement_reflection_;
  delete Issuance::default_instance_;
  delete Issuance_reflection_;
  delete Spend::default_instance_;
  delete Spend_reflection_;
}

void protobuf_AddDesc_bc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_bc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010bc.proto\022\002bc\"6\n\004Hash\022\n\n\002v0\030\001 \001(\006\022\n\n\002v1"
    "\030\002 \001(\006\022\n\n\002v2\030\003 \001(\006\022\n\n\002v3\030\004 \001(\006\"+\n\007Progra"
    "m\022\022\n\nvm_version\030\001 \001(\004\022\014\n\004code\030\002 \001(\014\"9\n\007A"
    "ssetID\022\n\n\002v0\030\001 \001(\006\022\n\n\002v1\030\002 \001(\006\022\n\n\002v2\030\003 \001"
    "(\006\022\n\n\002v3\030\004 \001(\006\"<\n\013AssetAmount\022\035\n\010asset_i"
    "d\030\001 \001(\0132\013.bc.AssetID\022\016\n\006amount\030\002 \001(\004\"t\n\017"
    "AssetDefinition\022\"\n\020initial_block_id\030\001 \001("
    "\0132\010.bc.Hash\022%\n\020issuance_program\030\002 \001(\0132\013."
    "bc.Program\022\026\n\004data\030\003 \001(\0132\010.bc.Hash\"V\n\013Va"
    "lueSource\022\025\n\003ref\030\001 \001(\0132\010.bc.Hash\022\036\n\005valu"
    "e\030\002 \001(\0132\017.bc.AssetAmount\022\020\n\010position\030\003 \001"
    "(\004\"[\n\020ValueDestination\022\025\n\003ref\030\001 \001(\0132\010.bc"
    ".Hash\022\036\n\005value\030\002 \001(\0132\017.bc.AssetAmount\022\020\n"
    "\010position\030\003 \001(\004\"\253\002\n\013BlockHeader\022\017\n\007versi"
    "on\030\001 \001(\004\022\027\n\017serialized_size\030\002 \001(\004\022\016\n\006hei"
    "ght\030\003 \001(\004\022#\n\021previous_block_id\030\004 \001(\0132\010.b"
    "c.Hash\022\026\n\004seed\030\005 \001(\0132\010.bc.Hash\022\021\n\ttimest"
    "amp\030\006 \001(\004\022#\n\021transactions_root\030\007 \001(\0132\010.b"
    "c.Hash\022\035\n\013assets_root\030\010 \001(\0132\010.bc.Hash\0221\n"
    "\022transaction_status\030\t \001(\0132\025.bc.Transacti"
    "onStatus\022\r\n\005nonce\030\n \001(\004\022\014\n\004bits\030\013 \001(\004\"\232\001"
    "\n\010TxHeader\022\017\n\007version\030\001 \001(\004\022\027\n\017serialize"
    "d_size\030\002 \001(\004\022\022\n\ntime_range\030\003 \001(\004\022\034\n\nresu"
    "lt_ids\030\004 \003(\0132\010.bc.Hash\022\026\n\004data\030\005 \001(\0132\010.b"
    "c.Hash\022\032\n\010ext_hash\030\006 \001(\0132\010.bc.Hash\"#\n\021Tr"
    "ansactionStatus\022\016\n\006bitmap\030\001 \001(\014\"\260\001\n\003Mux\022"
    " \n\007sources\030\001 \003(\0132\017.bc.ValueSource\022\034\n\007pro"
    "gram\030\002 \001(\0132\013.bc.Program\022\032\n\010ext_hash\030\003 \001("
    "\0132\010.bc.Hash\0222\n\024witness_destinations\030\004 \003("
    "\0132\024.bc.ValueDestination\022\031\n\021witness_argum"
    "ents\030\005 \003(\014\"\203\001\n\005Nonce\022\034\n\007program\030\001 \001(\0132\013."
    "bc.Program\022\032\n\010ext_hash\030\002 \001(\0132\010.bc.Hash\022\031"
    "\n\021witness_arguments\030\003 \003(\014\022%\n\023witness_anc"
    "hored_id\030\004 \001(\0132\010.bc.Hash\"P\n\010Coinbase\0221\n\023"
    "witness_destination\030\001 \001(\0132\024.bc.ValueDest"
    "ination\022\021\n\tarbitrary\030\002 \001(\014\"\224\001\n\006Output\022\037\n"
    "\006source\030\001 \001(\0132\017.bc.ValueSource\022$\n\017contro"
    "l_program\030\002 \001(\0132\013.bc.Program\022\026\n\004data\030\003 \001"
    "(\0132\010.bc.Hash\022\032\n\010ext_hash\030\004 \001(\0132\010.bc.Hash"
    "\022\017\n\007ordinal\030\005 \001(\004\"r\n\nRetirement\022\037\n\006sourc"
    "e\030\001 \001(\0132\017.bc.ValueSource\022\026\n\004data\030\002 \001(\0132\010"
    ".bc.Hash\022\032\n\010ext_hash\030\003 \001(\0132\010.bc.Hash\022\017\n\007"
    "ordinal\030\004 \001(\004\"\270\002\n\010Issuance\022\033\n\tanchor_id\030"
    "\001 \001(\0132\010.bc.Hash\022\036\n\005value\030\002 \001(\0132\017.bc.Asse"
    "tAmount\022\026\n\004data\030\003 \001(\0132\010.bc.Hash\022\032\n\010ext_h"
    "ash\030\004 \001(\0132\010.bc.Hash\0221\n\023witness_destinati"
    "on\030\005 \001(\0132\024.bc.ValueDestination\0225\n\030witnes"
    "s_asset_definition\030\006 \001(\0132\023.bc.AssetDefin"
    "ition\022\031\n\021witness_arguments\030\007 \003(\014\022%\n\023witn"
    "ess_anchored_id\030\010 \001(\0132\010.bc.Hash\022\017\n\007ordin"
    "al\030\t \001(\004\"\344\001\n\005Spend\022!\n\017spent_output_id\030\001 "
    "\001(\0132\010.bc.Hash\022\026\n\004data\030\002 \001(\0132\010.bc.Hash\022\032\n"
    "\010ext_hash\030\003 \001(\0132\010.bc.Hash\0221\n\023witness_des"
    "tination\030\004 \001(\0132\024.bc.ValueDestination\022\031\n\021"
    "witness_arguments\030\005 \003(\014\022%\n\023witness_ancho"
    "red_id\030\006 \001(\0132\010.bc.Hash\022\017\n\007ordinal\030\007 \001(\004b"
    "\006proto3", 2247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bc.proto", &protobuf_RegisterTypes);
  Hash::default_instance_ = new Hash();
  Program::default_instance_ = new Program();
  AssetID::default_instance_ = new AssetID();
  AssetAmount::default_instance_ = new AssetAmount();
  AssetDefinition::default_instance_ = new AssetDefinition();
  ValueSource::default_instance_ = new ValueSource();
  ValueDestination::default_instance_ = new ValueDestination();
  BlockHeader::default_instance_ = new BlockHeader();
  TxHeader::default_instance_ = new TxHeader();
  TransactionStatus::default_instance_ = new TransactionStatus();
  Mux::default_instance_ = new Mux();
  Nonce::default_instance_ = new Nonce();
  Coinbase::default_instance_ = new Coinbase();
  Output::default_instance_ = new Output();
  Retirement::default_instance_ = new Retirement();
  Issuance::default_instance_ = new Issuance();
  Spend::default_instance_ = new Spend();
  Hash::default_instance_->InitAsDefaultInstance();
  Program::default_instance_->InitAsDefaultInstance();
  AssetID::default_instance_->InitAsDefaultInstance();
  AssetAmount::default_instance_->InitAsDefaultInstance();
  AssetDefinition::default_instance_->InitAsDefaultInstance();
  ValueSource::default_instance_->InitAsDefaultInstance();
  ValueDestination::default_instance_->InitAsDefaultInstance();
  BlockHeader::default_instance_->InitAsDefaultInstance();
  TxHeader::default_instance_->InitAsDefaultInstance();
  TransactionStatus::default_instance_->InitAsDefaultInstance();
  Mux::default_instance_->InitAsDefaultInstance();
  Nonce::default_instance_->InitAsDefaultInstance();
  Coinbase::default_instance_->InitAsDefaultInstance();
  Output::default_instance_->InitAsDefaultInstance();
  Retirement::default_instance_->InitAsDefaultInstance();
  Issuance::default_instance_->InitAsDefaultInstance();
  Spend::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bc_2eproto {
  StaticDescriptorInitializer_bc_2eproto() {
    protobuf_AddDesc_bc_2eproto();
  }
} static_descriptor_initializer_bc_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hash::kV0FieldNumber;
const int Hash::kV1FieldNumber;
const int Hash::kV2FieldNumber;
const int Hash::kV3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hash::Hash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Hash)
}

void Hash::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Hash::Hash(const Hash& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Hash)
}

void Hash::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  v0_ = GOOGLE_ULONGLONG(0);
  v1_ = GOOGLE_ULONGLONG(0);
  v2_ = GOOGLE_ULONGLONG(0);
  v3_ = GOOGLE_ULONGLONG(0);
}

Hash::~Hash() {
  // @@protoc_insertion_point(destructor:bc.Hash)
  SharedDtor();
}

void Hash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hash_descriptor_;
}

const Hash& Hash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Hash* Hash::default_instance_ = NULL;

Hash* Hash::New(::google::protobuf::Arena* arena) const {
  Hash* n = new Hash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hash::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Hash)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Hash, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Hash*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(v0_, v3_);

#undef ZR_HELPER_
#undef ZR_

}

bool Hash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Hash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 v0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_v1;
        break;
      }

      // optional fixed64 v1 = 2;
      case 2: {
        if (tag == 17) {
         parse_v1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_v2;
        break;
      }

      // optional fixed64 v2 = 3;
      case 3: {
        if (tag == 25) {
         parse_v2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_v3;
        break;
      }

      // optional fixed64 v3 = 4;
      case 4: {
        if (tag == 33) {
         parse_v3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Hash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Hash)
  return false;
#undef DO_
}

void Hash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Hash)
  // optional fixed64 v0 = 1;
  if (this->v0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->v0(), output);
  }

  // optional fixed64 v1 = 2;
  if (this->v1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->v1(), output);
  }

  // optional fixed64 v2 = 3;
  if (this->v2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->v2(), output);
  }

  // optional fixed64 v3 = 4;
  if (this->v3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->v3(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Hash)
}

::google::protobuf::uint8* Hash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Hash)
  // optional fixed64 v0 = 1;
  if (this->v0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->v0(), target);
  }

  // optional fixed64 v1 = 2;
  if (this->v1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->v1(), target);
  }

  // optional fixed64 v2 = 3;
  if (this->v2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->v2(), target);
  }

  // optional fixed64 v3 = 4;
  if (this->v3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->v3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Hash)
  return target;
}

int Hash::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Hash)
  int total_size = 0;

  // optional fixed64 v0 = 1;
  if (this->v0() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 v1 = 2;
  if (this->v1() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 v2 = 3;
  if (this->v2() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 v3 = 4;
  if (this->v3() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Hash)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Hash* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Hash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Hash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Hash)
    MergeFrom(*source);
  }
}

void Hash::MergeFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Hash)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.v0() != 0) {
    set_v0(from.v0());
  }
  if (from.v1() != 0) {
    set_v1(from.v1());
  }
  if (from.v2() != 0) {
    set_v2(from.v2());
  }
  if (from.v3() != 0) {
    set_v3(from.v3());
  }
}

void Hash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hash::CopyFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hash::IsInitialized() const {

  return true;
}

void Hash::Swap(Hash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hash::InternalSwap(Hash* other) {
  std::swap(v0_, other->v0_);
  std::swap(v1_, other->v1_);
  std::swap(v2_, other->v2_);
  std::swap(v3_, other->v3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hash_descriptor_;
  metadata.reflection = Hash_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hash

// optional fixed64 v0 = 1;
void Hash::clear_v0() {
  v0_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Hash::v0() const {
  // @@protoc_insertion_point(field_get:bc.Hash.v0)
  return v0_;
}
 void Hash::set_v0(::google::protobuf::uint64 value) {
  
  v0_ = value;
  // @@protoc_insertion_point(field_set:bc.Hash.v0)
}

// optional fixed64 v1 = 2;
void Hash::clear_v1() {
  v1_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Hash::v1() const {
  // @@protoc_insertion_point(field_get:bc.Hash.v1)
  return v1_;
}
 void Hash::set_v1(::google::protobuf::uint64 value) {
  
  v1_ = value;
  // @@protoc_insertion_point(field_set:bc.Hash.v1)
}

// optional fixed64 v2 = 3;
void Hash::clear_v2() {
  v2_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Hash::v2() const {
  // @@protoc_insertion_point(field_get:bc.Hash.v2)
  return v2_;
}
 void Hash::set_v2(::google::protobuf::uint64 value) {
  
  v2_ = value;
  // @@protoc_insertion_point(field_set:bc.Hash.v2)
}

// optional fixed64 v3 = 4;
void Hash::clear_v3() {
  v3_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Hash::v3() const {
  // @@protoc_insertion_point(field_get:bc.Hash.v3)
  return v3_;
}
 void Hash::set_v3(::google::protobuf::uint64 value) {
  
  v3_ = value;
  // @@protoc_insertion_point(field_set:bc.Hash.v3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Program::kVmVersionFieldNumber;
const int Program::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Program::Program()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Program)
}

void Program::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Program::Program(const Program& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Program)
}

void Program::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vm_version_ = GOOGLE_ULONGLONG(0);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Program::~Program() {
  // @@protoc_insertion_point(destructor:bc.Program)
  SharedDtor();
}

void Program::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Program::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Program::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Program_descriptor_;
}

const Program& Program::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Program* Program::default_instance_ = NULL;

Program* Program::New(::google::protobuf::Arena* arena) const {
  Program* n = new Program;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Program)
  vm_version_ = GOOGLE_ULONGLONG(0);
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Program::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Program)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 vm_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vm_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // optional bytes code = 2;
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Program)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Program)
  return false;
#undef DO_
}

void Program::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Program)
  // optional uint64 vm_version = 1;
  if (this->vm_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->vm_version(), output);
  }

  // optional bytes code = 2;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->code(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Program)
}

::google::protobuf::uint8* Program::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Program)
  // optional uint64 vm_version = 1;
  if (this->vm_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->vm_version(), target);
  }

  // optional bytes code = 2;
  if (this->code().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Program)
  return target;
}

int Program::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Program)
  int total_size = 0;

  // optional uint64 vm_version = 1;
  if (this->vm_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vm_version());
  }

  // optional bytes code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Program::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Program)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Program* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Program>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Program)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Program)
    MergeFrom(*source);
  }
}

void Program::MergeFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Program)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.vm_version() != 0) {
    set_vm_version(from.vm_version());
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void Program::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {

  return true;
}

void Program::Swap(Program* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Program::InternalSwap(Program* other) {
  std::swap(vm_version_, other->vm_version_);
  code_.Swap(&other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Program::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Program_descriptor_;
  metadata.reflection = Program_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Program

// optional uint64 vm_version = 1;
void Program::clear_vm_version() {
  vm_version_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Program::vm_version() const {
  // @@protoc_insertion_point(field_get:bc.Program.vm_version)
  return vm_version_;
}
 void Program::set_vm_version(::google::protobuf::uint64 value) {
  
  vm_version_ = value;
  // @@protoc_insertion_point(field_set:bc.Program.vm_version)
}

// optional bytes code = 2;
void Program::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Program::code() const {
  // @@protoc_insertion_point(field_get:bc.Program.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Program::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bc.Program.code)
}
 void Program::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bc.Program.code)
}
 void Program::set_code(const void* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bc.Program.code)
}
 ::std::string* Program::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:bc.Program.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Program::release_code() {
  // @@protoc_insertion_point(field_release:bc.Program.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Program::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:bc.Program.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetID::kV0FieldNumber;
const int AssetID::kV1FieldNumber;
const int AssetID::kV2FieldNumber;
const int AssetID::kV3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetID::AssetID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.AssetID)
}

void AssetID::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AssetID::AssetID(const AssetID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.AssetID)
}

void AssetID::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  v0_ = GOOGLE_ULONGLONG(0);
  v1_ = GOOGLE_ULONGLONG(0);
  v2_ = GOOGLE_ULONGLONG(0);
  v3_ = GOOGLE_ULONGLONG(0);
}

AssetID::~AssetID() {
  // @@protoc_insertion_point(destructor:bc.AssetID)
  SharedDtor();
}

void AssetID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssetID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetID_descriptor_;
}

const AssetID& AssetID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

AssetID* AssetID::default_instance_ = NULL;

AssetID* AssetID::New(::google::protobuf::Arena* arena) const {
  AssetID* n = new AssetID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AssetID::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.AssetID)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AssetID, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AssetID*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(v0_, v3_);

#undef ZR_HELPER_
#undef ZR_

}

bool AssetID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.AssetID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 v0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_v1;
        break;
      }

      // optional fixed64 v1 = 2;
      case 2: {
        if (tag == 17) {
         parse_v1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_v2;
        break;
      }

      // optional fixed64 v2 = 3;
      case 3: {
        if (tag == 25) {
         parse_v2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_v3;
        break;
      }

      // optional fixed64 v3 = 4;
      case 4: {
        if (tag == 33) {
         parse_v3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.AssetID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.AssetID)
  return false;
#undef DO_
}

void AssetID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.AssetID)
  // optional fixed64 v0 = 1;
  if (this->v0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->v0(), output);
  }

  // optional fixed64 v1 = 2;
  if (this->v1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->v1(), output);
  }

  // optional fixed64 v2 = 3;
  if (this->v2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->v2(), output);
  }

  // optional fixed64 v3 = 4;
  if (this->v3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->v3(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.AssetID)
}

::google::protobuf::uint8* AssetID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.AssetID)
  // optional fixed64 v0 = 1;
  if (this->v0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->v0(), target);
  }

  // optional fixed64 v1 = 2;
  if (this->v1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->v1(), target);
  }

  // optional fixed64 v2 = 3;
  if (this->v2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->v2(), target);
  }

  // optional fixed64 v3 = 4;
  if (this->v3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->v3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.AssetID)
  return target;
}

int AssetID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.AssetID)
  int total_size = 0;

  // optional fixed64 v0 = 1;
  if (this->v0() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 v1 = 2;
  if (this->v1() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 v2 = 3;
  if (this->v2() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 v3 = 4;
  if (this->v3() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.AssetID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AssetID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AssetID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.AssetID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.AssetID)
    MergeFrom(*source);
  }
}

void AssetID::MergeFrom(const AssetID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.AssetID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.v0() != 0) {
    set_v0(from.v0());
  }
  if (from.v1() != 0) {
    set_v1(from.v1());
  }
  if (from.v2() != 0) {
    set_v2(from.v2());
  }
  if (from.v3() != 0) {
    set_v3(from.v3());
  }
}

void AssetID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.AssetID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetID::CopyFrom(const AssetID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.AssetID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetID::IsInitialized() const {

  return true;
}

void AssetID::Swap(AssetID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetID::InternalSwap(AssetID* other) {
  std::swap(v0_, other->v0_);
  std::swap(v1_, other->v1_);
  std::swap(v2_, other->v2_);
  std::swap(v3_, other->v3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AssetID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetID_descriptor_;
  metadata.reflection = AssetID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AssetID

// optional fixed64 v0 = 1;
void AssetID::clear_v0() {
  v0_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AssetID::v0() const {
  // @@protoc_insertion_point(field_get:bc.AssetID.v0)
  return v0_;
}
 void AssetID::set_v0(::google::protobuf::uint64 value) {
  
  v0_ = value;
  // @@protoc_insertion_point(field_set:bc.AssetID.v0)
}

// optional fixed64 v1 = 2;
void AssetID::clear_v1() {
  v1_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AssetID::v1() const {
  // @@protoc_insertion_point(field_get:bc.AssetID.v1)
  return v1_;
}
 void AssetID::set_v1(::google::protobuf::uint64 value) {
  
  v1_ = value;
  // @@protoc_insertion_point(field_set:bc.AssetID.v1)
}

// optional fixed64 v2 = 3;
void AssetID::clear_v2() {
  v2_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AssetID::v2() const {
  // @@protoc_insertion_point(field_get:bc.AssetID.v2)
  return v2_;
}
 void AssetID::set_v2(::google::protobuf::uint64 value) {
  
  v2_ = value;
  // @@protoc_insertion_point(field_set:bc.AssetID.v2)
}

// optional fixed64 v3 = 4;
void AssetID::clear_v3() {
  v3_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AssetID::v3() const {
  // @@protoc_insertion_point(field_get:bc.AssetID.v3)
  return v3_;
}
 void AssetID::set_v3(::google::protobuf::uint64 value) {
  
  v3_ = value;
  // @@protoc_insertion_point(field_set:bc.AssetID.v3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetAmount::kAssetIdFieldNumber;
const int AssetAmount::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetAmount::AssetAmount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.AssetAmount)
}

void AssetAmount::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  asset_id_ = const_cast< ::bc::AssetID*>(&::bc::AssetID::default_instance());
}

AssetAmount::AssetAmount(const AssetAmount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.AssetAmount)
}

void AssetAmount::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  asset_id_ = NULL;
  amount_ = GOOGLE_ULONGLONG(0);
}

AssetAmount::~AssetAmount() {
  // @@protoc_insertion_point(destructor:bc.AssetAmount)
  SharedDtor();
}

void AssetAmount::SharedDtor() {
  if (this != default_instance_) {
    delete asset_id_;
  }
}

void AssetAmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetAmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetAmount_descriptor_;
}

const AssetAmount& AssetAmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

AssetAmount* AssetAmount::default_instance_ = NULL;

AssetAmount* AssetAmount::New(::google::protobuf::Arena* arena) const {
  AssetAmount* n = new AssetAmount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AssetAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.AssetAmount)
  if (GetArenaNoVirtual() == NULL && asset_id_ != NULL) delete asset_id_;
  asset_id_ = NULL;
  amount_ = GOOGLE_ULONGLONG(0);
}

bool AssetAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.AssetAmount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.AssetID asset_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.AssetAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.AssetAmount)
  return false;
#undef DO_
}

void AssetAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.AssetAmount)
  // optional .bc.AssetID asset_id = 1;
  if (this->has_asset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->asset_id_, output);
  }

  // optional uint64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.AssetAmount)
}

::google::protobuf::uint8* AssetAmount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.AssetAmount)
  // optional .bc.AssetID asset_id = 1;
  if (this->has_asset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->asset_id_, false, target);
  }

  // optional uint64 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.AssetAmount)
  return target;
}

int AssetAmount::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.AssetAmount)
  int total_size = 0;

  // optional .bc.AssetID asset_id = 1;
  if (this->has_asset_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_id_);
  }

  // optional uint64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetAmount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.AssetAmount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AssetAmount* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AssetAmount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.AssetAmount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.AssetAmount)
    MergeFrom(*source);
  }
}

void AssetAmount::MergeFrom(const AssetAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.AssetAmount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_asset_id()) {
    mutable_asset_id()->::bc::AssetID::MergeFrom(from.asset_id());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void AssetAmount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.AssetAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetAmount::CopyFrom(const AssetAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.AssetAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetAmount::IsInitialized() const {

  return true;
}

void AssetAmount::Swap(AssetAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetAmount::InternalSwap(AssetAmount* other) {
  std::swap(asset_id_, other->asset_id_);
  std::swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AssetAmount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetAmount_descriptor_;
  metadata.reflection = AssetAmount_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AssetAmount

// optional .bc.AssetID asset_id = 1;
bool AssetAmount::has_asset_id() const {
  return !_is_default_instance_ && asset_id_ != NULL;
}
void AssetAmount::clear_asset_id() {
  if (GetArenaNoVirtual() == NULL && asset_id_ != NULL) delete asset_id_;
  asset_id_ = NULL;
}
const ::bc::AssetID& AssetAmount::asset_id() const {
  // @@protoc_insertion_point(field_get:bc.AssetAmount.asset_id)
  return asset_id_ != NULL ? *asset_id_ : *default_instance_->asset_id_;
}
::bc::AssetID* AssetAmount::mutable_asset_id() {
  
  if (asset_id_ == NULL) {
    asset_id_ = new ::bc::AssetID;
  }
  // @@protoc_insertion_point(field_mutable:bc.AssetAmount.asset_id)
  return asset_id_;
}
::bc::AssetID* AssetAmount::release_asset_id() {
  // @@protoc_insertion_point(field_release:bc.AssetAmount.asset_id)
  
  ::bc::AssetID* temp = asset_id_;
  asset_id_ = NULL;
  return temp;
}
void AssetAmount::set_allocated_asset_id(::bc::AssetID* asset_id) {
  delete asset_id_;
  asset_id_ = asset_id;
  if (asset_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.AssetAmount.asset_id)
}

// optional uint64 amount = 2;
void AssetAmount::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AssetAmount::amount() const {
  // @@protoc_insertion_point(field_get:bc.AssetAmount.amount)
  return amount_;
}
 void AssetAmount::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:bc.AssetAmount.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetDefinition::kInitialBlockIdFieldNumber;
const int AssetDefinition::kIssuanceProgramFieldNumber;
const int AssetDefinition::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetDefinition::AssetDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.AssetDefinition)
}

void AssetDefinition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  initial_block_id_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  issuance_program_ = const_cast< ::bc::Program*>(&::bc::Program::default_instance());
  data_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
}

AssetDefinition::AssetDefinition(const AssetDefinition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.AssetDefinition)
}

void AssetDefinition::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  initial_block_id_ = NULL;
  issuance_program_ = NULL;
  data_ = NULL;
}

AssetDefinition::~AssetDefinition() {
  // @@protoc_insertion_point(destructor:bc.AssetDefinition)
  SharedDtor();
}

void AssetDefinition::SharedDtor() {
  if (this != default_instance_) {
    delete initial_block_id_;
    delete issuance_program_;
    delete data_;
  }
}

void AssetDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetDefinition_descriptor_;
}

const AssetDefinition& AssetDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

AssetDefinition* AssetDefinition::default_instance_ = NULL;

AssetDefinition* AssetDefinition::New(::google::protobuf::Arena* arena) const {
  AssetDefinition* n = new AssetDefinition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AssetDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.AssetDefinition)
  if (GetArenaNoVirtual() == NULL && initial_block_id_ != NULL) delete initial_block_id_;
  initial_block_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && issuance_program_ != NULL) delete issuance_program_;
  issuance_program_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}

bool AssetDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.AssetDefinition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.Hash initial_block_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_block_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_issuance_program;
        break;
      }

      // optional .bc.Program issuance_program = 2;
      case 2: {
        if (tag == 18) {
         parse_issuance_program:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_issuance_program()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .bc.Hash data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.AssetDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.AssetDefinition)
  return false;
#undef DO_
}

void AssetDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.AssetDefinition)
  // optional .bc.Hash initial_block_id = 1;
  if (this->has_initial_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->initial_block_id_, output);
  }

  // optional .bc.Program issuance_program = 2;
  if (this->has_issuance_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->issuance_program_, output);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:bc.AssetDefinition)
}

::google::protobuf::uint8* AssetDefinition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.AssetDefinition)
  // optional .bc.Hash initial_block_id = 1;
  if (this->has_initial_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->initial_block_id_, false, target);
  }

  // optional .bc.Program issuance_program = 2;
  if (this->has_issuance_program()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->issuance_program_, false, target);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.AssetDefinition)
  return target;
}

int AssetDefinition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.AssetDefinition)
  int total_size = 0;

  // optional .bc.Hash initial_block_id = 1;
  if (this->has_initial_block_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initial_block_id_);
  }

  // optional .bc.Program issuance_program = 2;
  if (this->has_issuance_program()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->issuance_program_);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.AssetDefinition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AssetDefinition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AssetDefinition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.AssetDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.AssetDefinition)
    MergeFrom(*source);
  }
}

void AssetDefinition::MergeFrom(const AssetDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.AssetDefinition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_initial_block_id()) {
    mutable_initial_block_id()->::bc::Hash::MergeFrom(from.initial_block_id());
  }
  if (from.has_issuance_program()) {
    mutable_issuance_program()->::bc::Program::MergeFrom(from.issuance_program());
  }
  if (from.has_data()) {
    mutable_data()->::bc::Hash::MergeFrom(from.data());
  }
}

void AssetDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.AssetDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetDefinition::CopyFrom(const AssetDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.AssetDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetDefinition::IsInitialized() const {

  return true;
}

void AssetDefinition::Swap(AssetDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetDefinition::InternalSwap(AssetDefinition* other) {
  std::swap(initial_block_id_, other->initial_block_id_);
  std::swap(issuance_program_, other->issuance_program_);
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AssetDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetDefinition_descriptor_;
  metadata.reflection = AssetDefinition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AssetDefinition

// optional .bc.Hash initial_block_id = 1;
bool AssetDefinition::has_initial_block_id() const {
  return !_is_default_instance_ && initial_block_id_ != NULL;
}
void AssetDefinition::clear_initial_block_id() {
  if (GetArenaNoVirtual() == NULL && initial_block_id_ != NULL) delete initial_block_id_;
  initial_block_id_ = NULL;
}
const ::bc::Hash& AssetDefinition::initial_block_id() const {
  // @@protoc_insertion_point(field_get:bc.AssetDefinition.initial_block_id)
  return initial_block_id_ != NULL ? *initial_block_id_ : *default_instance_->initial_block_id_;
}
::bc::Hash* AssetDefinition::mutable_initial_block_id() {
  
  if (initial_block_id_ == NULL) {
    initial_block_id_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.AssetDefinition.initial_block_id)
  return initial_block_id_;
}
::bc::Hash* AssetDefinition::release_initial_block_id() {
  // @@protoc_insertion_point(field_release:bc.AssetDefinition.initial_block_id)
  
  ::bc::Hash* temp = initial_block_id_;
  initial_block_id_ = NULL;
  return temp;
}
void AssetDefinition::set_allocated_initial_block_id(::bc::Hash* initial_block_id) {
  delete initial_block_id_;
  initial_block_id_ = initial_block_id;
  if (initial_block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.AssetDefinition.initial_block_id)
}

// optional .bc.Program issuance_program = 2;
bool AssetDefinition::has_issuance_program() const {
  return !_is_default_instance_ && issuance_program_ != NULL;
}
void AssetDefinition::clear_issuance_program() {
  if (GetArenaNoVirtual() == NULL && issuance_program_ != NULL) delete issuance_program_;
  issuance_program_ = NULL;
}
const ::bc::Program& AssetDefinition::issuance_program() const {
  // @@protoc_insertion_point(field_get:bc.AssetDefinition.issuance_program)
  return issuance_program_ != NULL ? *issuance_program_ : *default_instance_->issuance_program_;
}
::bc::Program* AssetDefinition::mutable_issuance_program() {
  
  if (issuance_program_ == NULL) {
    issuance_program_ = new ::bc::Program;
  }
  // @@protoc_insertion_point(field_mutable:bc.AssetDefinition.issuance_program)
  return issuance_program_;
}
::bc::Program* AssetDefinition::release_issuance_program() {
  // @@protoc_insertion_point(field_release:bc.AssetDefinition.issuance_program)
  
  ::bc::Program* temp = issuance_program_;
  issuance_program_ = NULL;
  return temp;
}
void AssetDefinition::set_allocated_issuance_program(::bc::Program* issuance_program) {
  delete issuance_program_;
  issuance_program_ = issuance_program;
  if (issuance_program) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.AssetDefinition.issuance_program)
}

// optional .bc.Hash data = 3;
bool AssetDefinition::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void AssetDefinition::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::bc::Hash& AssetDefinition::data() const {
  // @@protoc_insertion_point(field_get:bc.AssetDefinition.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::bc::Hash* AssetDefinition::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.AssetDefinition.data)
  return data_;
}
::bc::Hash* AssetDefinition::release_data() {
  // @@protoc_insertion_point(field_release:bc.AssetDefinition.data)
  
  ::bc::Hash* temp = data_;
  data_ = NULL;
  return temp;
}
void AssetDefinition::set_allocated_data(::bc::Hash* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.AssetDefinition.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueSource::kRefFieldNumber;
const int ValueSource::kValueFieldNumber;
const int ValueSource::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueSource::ValueSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.ValueSource)
}

void ValueSource::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ref_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  value_ = const_cast< ::bc::AssetAmount*>(&::bc::AssetAmount::default_instance());
}

ValueSource::ValueSource(const ValueSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.ValueSource)
}

void ValueSource::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ref_ = NULL;
  value_ = NULL;
  position_ = GOOGLE_ULONGLONG(0);
}

ValueSource::~ValueSource() {
  // @@protoc_insertion_point(destructor:bc.ValueSource)
  SharedDtor();
}

void ValueSource::SharedDtor() {
  if (this != default_instance_) {
    delete ref_;
    delete value_;
  }
}

void ValueSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueSource_descriptor_;
}

const ValueSource& ValueSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

ValueSource* ValueSource::default_instance_ = NULL;

ValueSource* ValueSource::New(::google::protobuf::Arena* arena) const {
  ValueSource* n = new ValueSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueSource::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.ValueSource)
  if (GetArenaNoVirtual() == NULL && ref_ != NULL) delete ref_;
  ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
  position_ = GOOGLE_ULONGLONG(0);
}

bool ValueSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.ValueSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.Hash ref = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .bc.AssetAmount value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional uint64 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.ValueSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.ValueSource)
  return false;
#undef DO_
}

void ValueSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.ValueSource)
  // optional .bc.Hash ref = 1;
  if (this->has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ref_, output);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // optional uint64 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.ValueSource)
}

::google::protobuf::uint8* ValueSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.ValueSource)
  // optional .bc.Hash ref = 1;
  if (this->has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ref_, false, target);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // optional uint64 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.ValueSource)
  return target;
}

int ValueSource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.ValueSource)
  int total_size = 0;

  // optional .bc.Hash ref = 1;
  if (this->has_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ref_);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // optional uint64 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->position());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.ValueSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ValueSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.ValueSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.ValueSource)
    MergeFrom(*source);
  }
}

void ValueSource::MergeFrom(const ValueSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.ValueSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_ref()) {
    mutable_ref()->::bc::Hash::MergeFrom(from.ref());
  }
  if (from.has_value()) {
    mutable_value()->::bc::AssetAmount::MergeFrom(from.value());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void ValueSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.ValueSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueSource::CopyFrom(const ValueSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.ValueSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueSource::IsInitialized() const {

  return true;
}

void ValueSource::Swap(ValueSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueSource::InternalSwap(ValueSource* other) {
  std::swap(ref_, other->ref_);
  std::swap(value_, other->value_);
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueSource_descriptor_;
  metadata.reflection = ValueSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueSource

// optional .bc.Hash ref = 1;
bool ValueSource::has_ref() const {
  return !_is_default_instance_ && ref_ != NULL;
}
void ValueSource::clear_ref() {
  if (GetArenaNoVirtual() == NULL && ref_ != NULL) delete ref_;
  ref_ = NULL;
}
const ::bc::Hash& ValueSource::ref() const {
  // @@protoc_insertion_point(field_get:bc.ValueSource.ref)
  return ref_ != NULL ? *ref_ : *default_instance_->ref_;
}
::bc::Hash* ValueSource::mutable_ref() {
  
  if (ref_ == NULL) {
    ref_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.ValueSource.ref)
  return ref_;
}
::bc::Hash* ValueSource::release_ref() {
  // @@protoc_insertion_point(field_release:bc.ValueSource.ref)
  
  ::bc::Hash* temp = ref_;
  ref_ = NULL;
  return temp;
}
void ValueSource::set_allocated_ref(::bc::Hash* ref) {
  delete ref_;
  ref_ = ref;
  if (ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.ValueSource.ref)
}

// optional .bc.AssetAmount value = 2;
bool ValueSource::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void ValueSource::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::bc::AssetAmount& ValueSource::value() const {
  // @@protoc_insertion_point(field_get:bc.ValueSource.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::bc::AssetAmount* ValueSource::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::bc::AssetAmount;
  }
  // @@protoc_insertion_point(field_mutable:bc.ValueSource.value)
  return value_;
}
::bc::AssetAmount* ValueSource::release_value() {
  // @@protoc_insertion_point(field_release:bc.ValueSource.value)
  
  ::bc::AssetAmount* temp = value_;
  value_ = NULL;
  return temp;
}
void ValueSource::set_allocated_value(::bc::AssetAmount* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.ValueSource.value)
}

// optional uint64 position = 3;
void ValueSource::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ValueSource::position() const {
  // @@protoc_insertion_point(field_get:bc.ValueSource.position)
  return position_;
}
 void ValueSource::set_position(::google::protobuf::uint64 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:bc.ValueSource.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueDestination::kRefFieldNumber;
const int ValueDestination::kValueFieldNumber;
const int ValueDestination::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueDestination::ValueDestination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.ValueDestination)
}

void ValueDestination::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ref_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  value_ = const_cast< ::bc::AssetAmount*>(&::bc::AssetAmount::default_instance());
}

ValueDestination::ValueDestination(const ValueDestination& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.ValueDestination)
}

void ValueDestination::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ref_ = NULL;
  value_ = NULL;
  position_ = GOOGLE_ULONGLONG(0);
}

ValueDestination::~ValueDestination() {
  // @@protoc_insertion_point(destructor:bc.ValueDestination)
  SharedDtor();
}

void ValueDestination::SharedDtor() {
  if (this != default_instance_) {
    delete ref_;
    delete value_;
  }
}

void ValueDestination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueDestination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueDestination_descriptor_;
}

const ValueDestination& ValueDestination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

ValueDestination* ValueDestination::default_instance_ = NULL;

ValueDestination* ValueDestination::New(::google::protobuf::Arena* arena) const {
  ValueDestination* n = new ValueDestination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueDestination::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.ValueDestination)
  if (GetArenaNoVirtual() == NULL && ref_ != NULL) delete ref_;
  ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
  position_ = GOOGLE_ULONGLONG(0);
}

bool ValueDestination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.ValueDestination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.Hash ref = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .bc.AssetAmount value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional uint64 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.ValueDestination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.ValueDestination)
  return false;
#undef DO_
}

void ValueDestination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.ValueDestination)
  // optional .bc.Hash ref = 1;
  if (this->has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ref_, output);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // optional uint64 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.ValueDestination)
}

::google::protobuf::uint8* ValueDestination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.ValueDestination)
  // optional .bc.Hash ref = 1;
  if (this->has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ref_, false, target);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // optional uint64 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.ValueDestination)
  return target;
}

int ValueDestination::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.ValueDestination)
  int total_size = 0;

  // optional .bc.Hash ref = 1;
  if (this->has_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ref_);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // optional uint64 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->position());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueDestination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.ValueDestination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ValueDestination* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueDestination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.ValueDestination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.ValueDestination)
    MergeFrom(*source);
  }
}

void ValueDestination::MergeFrom(const ValueDestination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.ValueDestination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_ref()) {
    mutable_ref()->::bc::Hash::MergeFrom(from.ref());
  }
  if (from.has_value()) {
    mutable_value()->::bc::AssetAmount::MergeFrom(from.value());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void ValueDestination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.ValueDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueDestination::CopyFrom(const ValueDestination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.ValueDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueDestination::IsInitialized() const {

  return true;
}

void ValueDestination::Swap(ValueDestination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueDestination::InternalSwap(ValueDestination* other) {
  std::swap(ref_, other->ref_);
  std::swap(value_, other->value_);
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueDestination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueDestination_descriptor_;
  metadata.reflection = ValueDestination_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueDestination

// optional .bc.Hash ref = 1;
bool ValueDestination::has_ref() const {
  return !_is_default_instance_ && ref_ != NULL;
}
void ValueDestination::clear_ref() {
  if (GetArenaNoVirtual() == NULL && ref_ != NULL) delete ref_;
  ref_ = NULL;
}
const ::bc::Hash& ValueDestination::ref() const {
  // @@protoc_insertion_point(field_get:bc.ValueDestination.ref)
  return ref_ != NULL ? *ref_ : *default_instance_->ref_;
}
::bc::Hash* ValueDestination::mutable_ref() {
  
  if (ref_ == NULL) {
    ref_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.ValueDestination.ref)
  return ref_;
}
::bc::Hash* ValueDestination::release_ref() {
  // @@protoc_insertion_point(field_release:bc.ValueDestination.ref)
  
  ::bc::Hash* temp = ref_;
  ref_ = NULL;
  return temp;
}
void ValueDestination::set_allocated_ref(::bc::Hash* ref) {
  delete ref_;
  ref_ = ref;
  if (ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.ValueDestination.ref)
}

// optional .bc.AssetAmount value = 2;
bool ValueDestination::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void ValueDestination::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::bc::AssetAmount& ValueDestination::value() const {
  // @@protoc_insertion_point(field_get:bc.ValueDestination.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::bc::AssetAmount* ValueDestination::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::bc::AssetAmount;
  }
  // @@protoc_insertion_point(field_mutable:bc.ValueDestination.value)
  return value_;
}
::bc::AssetAmount* ValueDestination::release_value() {
  // @@protoc_insertion_point(field_release:bc.ValueDestination.value)
  
  ::bc::AssetAmount* temp = value_;
  value_ = NULL;
  return temp;
}
void ValueDestination::set_allocated_value(::bc::AssetAmount* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.ValueDestination.value)
}

// optional uint64 position = 3;
void ValueDestination::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ValueDestination::position() const {
  // @@protoc_insertion_point(field_get:bc.ValueDestination.position)
  return position_;
}
 void ValueDestination::set_position(::google::protobuf::uint64 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:bc.ValueDestination.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockHeader::kVersionFieldNumber;
const int BlockHeader::kSerializedSizeFieldNumber;
const int BlockHeader::kHeightFieldNumber;
const int BlockHeader::kPreviousBlockIdFieldNumber;
const int BlockHeader::kSeedFieldNumber;
const int BlockHeader::kTimestampFieldNumber;
const int BlockHeader::kTransactionsRootFieldNumber;
const int BlockHeader::kAssetsRootFieldNumber;
const int BlockHeader::kTransactionStatusFieldNumber;
const int BlockHeader::kNonceFieldNumber;
const int BlockHeader::kBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockHeader::BlockHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.BlockHeader)
}

void BlockHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  previous_block_id_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  seed_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  transactions_root_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  assets_root_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  transaction_status_ = const_cast< ::bc::TransactionStatus*>(&::bc::TransactionStatus::default_instance());
}

BlockHeader::BlockHeader(const BlockHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.BlockHeader)
}

void BlockHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  serialized_size_ = GOOGLE_ULONGLONG(0);
  height_ = GOOGLE_ULONGLONG(0);
  previous_block_id_ = NULL;
  seed_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  transactions_root_ = NULL;
  assets_root_ = NULL;
  transaction_status_ = NULL;
  nonce_ = GOOGLE_ULONGLONG(0);
  bits_ = GOOGLE_ULONGLONG(0);
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:bc.BlockHeader)
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  if (this != default_instance_) {
    delete previous_block_id_;
    delete seed_;
    delete transactions_root_;
    delete assets_root_;
    delete transaction_status_;
  }
}

void BlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockHeader_descriptor_;
}

const BlockHeader& BlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

BlockHeader* BlockHeader::default_instance_ = NULL;

BlockHeader* BlockHeader::New(::google::protobuf::Arena* arena) const {
  BlockHeader* n = new BlockHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.BlockHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BlockHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlockHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, height_);
  if (GetArenaNoVirtual() == NULL && previous_block_id_ != NULL) delete previous_block_id_;
  previous_block_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && seed_ != NULL) delete seed_;
  seed_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && transactions_root_ != NULL) delete transactions_root_;
  transactions_root_ = NULL;
  if (GetArenaNoVirtual() == NULL && assets_root_ != NULL) delete assets_root_;
  assets_root_ = NULL;
  ZR_(nonce_, bits_);
  if (GetArenaNoVirtual() == NULL && transaction_status_ != NULL) delete transaction_status_;
  transaction_status_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool BlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.BlockHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serialized_size;
        break;
      }

      // optional uint64 serialized_size = 2;
      case 2: {
        if (tag == 16) {
         parse_serialized_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serialized_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_previous_block_id;
        break;
      }

      // optional .bc.Hash previous_block_id = 4;
      case 4: {
        if (tag == 34) {
         parse_previous_block_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previous_block_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seed;
        break;
      }

      // optional .bc.Hash seed = 5;
      case 5: {
        if (tag == 42) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 6;
      case 6: {
        if (tag == 48) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_transactions_root;
        break;
      }

      // optional .bc.Hash transactions_root = 7;
      case 7: {
        if (tag == 58) {
         parse_transactions_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transactions_root()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_assets_root;
        break;
      }

      // optional .bc.Hash assets_root = 8;
      case 8: {
        if (tag == 66) {
         parse_assets_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assets_root()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_transaction_status;
        break;
      }

      // optional .bc.TransactionStatus transaction_status = 9;
      case 9: {
        if (tag == 74) {
         parse_transaction_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 10;
      case 10: {
        if (tag == 80) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bits;
        break;
      }

      // optional uint64 bits = 11;
      case 11: {
        if (tag == 88) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.BlockHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.BlockHeader)
  return false;
#undef DO_
}

void BlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.BlockHeader)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // optional uint64 serialized_size = 2;
  if (this->serialized_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->serialized_size(), output);
  }

  // optional uint64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  // optional .bc.Hash previous_block_id = 4;
  if (this->has_previous_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->previous_block_id_, output);
  }

  // optional .bc.Hash seed = 5;
  if (this->has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->seed_, output);
  }

  // optional uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }

  // optional .bc.Hash transactions_root = 7;
  if (this->has_transactions_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->transactions_root_, output);
  }

  // optional .bc.Hash assets_root = 8;
  if (this->has_assets_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->assets_root_, output);
  }

  // optional .bc.TransactionStatus transaction_status = 9;
  if (this->has_transaction_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->transaction_status_, output);
  }

  // optional uint64 nonce = 10;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->nonce(), output);
  }

  // optional uint64 bits = 11;
  if (this->bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->bits(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.BlockHeader)
}

::google::protobuf::uint8* BlockHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.BlockHeader)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // optional uint64 serialized_size = 2;
  if (this->serialized_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->serialized_size(), target);
  }

  // optional uint64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  // optional .bc.Hash previous_block_id = 4;
  if (this->has_previous_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->previous_block_id_, false, target);
  }

  // optional .bc.Hash seed = 5;
  if (this->has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->seed_, false, target);
  }

  // optional uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }

  // optional .bc.Hash transactions_root = 7;
  if (this->has_transactions_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->transactions_root_, false, target);
  }

  // optional .bc.Hash assets_root = 8;
  if (this->has_assets_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->assets_root_, false, target);
  }

  // optional .bc.TransactionStatus transaction_status = 9;
  if (this->has_transaction_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->transaction_status_, false, target);
  }

  // optional uint64 nonce = 10;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->nonce(), target);
  }

  // optional uint64 bits = 11;
  if (this->bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->bits(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.BlockHeader)
  return target;
}

int BlockHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.BlockHeader)
  int total_size = 0;

  // optional uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // optional uint64 serialized_size = 2;
  if (this->serialized_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serialized_size());
  }

  // optional uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->height());
  }

  // optional .bc.Hash previous_block_id = 4;
  if (this->has_previous_block_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->previous_block_id_);
  }

  // optional .bc.Hash seed = 5;
  if (this->has_seed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->seed_);
  }

  // optional uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional .bc.Hash transactions_root = 7;
  if (this->has_transactions_root()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transactions_root_);
  }

  // optional .bc.Hash assets_root = 8;
  if (this->has_assets_root()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->assets_root_);
  }

  // optional .bc.TransactionStatus transaction_status = 9;
  if (this->has_transaction_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_status_);
  }

  // optional uint64 nonce = 10;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nonce());
  }

  // optional uint64 bits = 11;
  if (this->bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bits());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.BlockHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlockHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.BlockHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.BlockHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.serialized_size() != 0) {
    set_serialized_size(from.serialized_size());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.has_previous_block_id()) {
    mutable_previous_block_id()->::bc::Hash::MergeFrom(from.previous_block_id());
  }
  if (from.has_seed()) {
    mutable_seed()->::bc::Hash::MergeFrom(from.seed());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_transactions_root()) {
    mutable_transactions_root()->::bc::Hash::MergeFrom(from.transactions_root());
  }
  if (from.has_assets_root()) {
    mutable_assets_root()->::bc::Hash::MergeFrom(from.assets_root());
  }
  if (from.has_transaction_status()) {
    mutable_transaction_status()->::bc::TransactionStatus::MergeFrom(from.transaction_status());
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
  if (from.bits() != 0) {
    set_bits(from.bits());
  }
}

void BlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {

  return true;
}

void BlockHeader::Swap(BlockHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockHeader::InternalSwap(BlockHeader* other) {
  std::swap(version_, other->version_);
  std::swap(serialized_size_, other->serialized_size_);
  std::swap(height_, other->height_);
  std::swap(previous_block_id_, other->previous_block_id_);
  std::swap(seed_, other->seed_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(transactions_root_, other->transactions_root_);
  std::swap(assets_root_, other->assets_root_);
  std::swap(transaction_status_, other->transaction_status_);
  std::swap(nonce_, other->nonce_);
  std::swap(bits_, other->bits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockHeader_descriptor_;
  metadata.reflection = BlockHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockHeader

// optional uint64 version = 1;
void BlockHeader::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BlockHeader::version() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.version)
  return version_;
}
 void BlockHeader::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:bc.BlockHeader.version)
}

// optional uint64 serialized_size = 2;
void BlockHeader::clear_serialized_size() {
  serialized_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BlockHeader::serialized_size() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.serialized_size)
  return serialized_size_;
}
 void BlockHeader::set_serialized_size(::google::protobuf::uint64 value) {
  
  serialized_size_ = value;
  // @@protoc_insertion_point(field_set:bc.BlockHeader.serialized_size)
}

// optional uint64 height = 3;
void BlockHeader::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BlockHeader::height() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.height)
  return height_;
}
 void BlockHeader::set_height(::google::protobuf::uint64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:bc.BlockHeader.height)
}

// optional .bc.Hash previous_block_id = 4;
bool BlockHeader::has_previous_block_id() const {
  return !_is_default_instance_ && previous_block_id_ != NULL;
}
void BlockHeader::clear_previous_block_id() {
  if (GetArenaNoVirtual() == NULL && previous_block_id_ != NULL) delete previous_block_id_;
  previous_block_id_ = NULL;
}
const ::bc::Hash& BlockHeader::previous_block_id() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.previous_block_id)
  return previous_block_id_ != NULL ? *previous_block_id_ : *default_instance_->previous_block_id_;
}
::bc::Hash* BlockHeader::mutable_previous_block_id() {
  
  if (previous_block_id_ == NULL) {
    previous_block_id_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.BlockHeader.previous_block_id)
  return previous_block_id_;
}
::bc::Hash* BlockHeader::release_previous_block_id() {
  // @@protoc_insertion_point(field_release:bc.BlockHeader.previous_block_id)
  
  ::bc::Hash* temp = previous_block_id_;
  previous_block_id_ = NULL;
  return temp;
}
void BlockHeader::set_allocated_previous_block_id(::bc::Hash* previous_block_id) {
  delete previous_block_id_;
  previous_block_id_ = previous_block_id;
  if (previous_block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.BlockHeader.previous_block_id)
}

// optional .bc.Hash seed = 5;
bool BlockHeader::has_seed() const {
  return !_is_default_instance_ && seed_ != NULL;
}
void BlockHeader::clear_seed() {
  if (GetArenaNoVirtual() == NULL && seed_ != NULL) delete seed_;
  seed_ = NULL;
}
const ::bc::Hash& BlockHeader::seed() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.seed)
  return seed_ != NULL ? *seed_ : *default_instance_->seed_;
}
::bc::Hash* BlockHeader::mutable_seed() {
  
  if (seed_ == NULL) {
    seed_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.BlockHeader.seed)
  return seed_;
}
::bc::Hash* BlockHeader::release_seed() {
  // @@protoc_insertion_point(field_release:bc.BlockHeader.seed)
  
  ::bc::Hash* temp = seed_;
  seed_ = NULL;
  return temp;
}
void BlockHeader::set_allocated_seed(::bc::Hash* seed) {
  delete seed_;
  seed_ = seed;
  if (seed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.BlockHeader.seed)
}

// optional uint64 timestamp = 6;
void BlockHeader::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.timestamp)
  return timestamp_;
}
 void BlockHeader::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:bc.BlockHeader.timestamp)
}

// optional .bc.Hash transactions_root = 7;
bool BlockHeader::has_transactions_root() const {
  return !_is_default_instance_ && transactions_root_ != NULL;
}
void BlockHeader::clear_transactions_root() {
  if (GetArenaNoVirtual() == NULL && transactions_root_ != NULL) delete transactions_root_;
  transactions_root_ = NULL;
}
const ::bc::Hash& BlockHeader::transactions_root() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.transactions_root)
  return transactions_root_ != NULL ? *transactions_root_ : *default_instance_->transactions_root_;
}
::bc::Hash* BlockHeader::mutable_transactions_root() {
  
  if (transactions_root_ == NULL) {
    transactions_root_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.BlockHeader.transactions_root)
  return transactions_root_;
}
::bc::Hash* BlockHeader::release_transactions_root() {
  // @@protoc_insertion_point(field_release:bc.BlockHeader.transactions_root)
  
  ::bc::Hash* temp = transactions_root_;
  transactions_root_ = NULL;
  return temp;
}
void BlockHeader::set_allocated_transactions_root(::bc::Hash* transactions_root) {
  delete transactions_root_;
  transactions_root_ = transactions_root;
  if (transactions_root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.BlockHeader.transactions_root)
}

// optional .bc.Hash assets_root = 8;
bool BlockHeader::has_assets_root() const {
  return !_is_default_instance_ && assets_root_ != NULL;
}
void BlockHeader::clear_assets_root() {
  if (GetArenaNoVirtual() == NULL && assets_root_ != NULL) delete assets_root_;
  assets_root_ = NULL;
}
const ::bc::Hash& BlockHeader::assets_root() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.assets_root)
  return assets_root_ != NULL ? *assets_root_ : *default_instance_->assets_root_;
}
::bc::Hash* BlockHeader::mutable_assets_root() {
  
  if (assets_root_ == NULL) {
    assets_root_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.BlockHeader.assets_root)
  return assets_root_;
}
::bc::Hash* BlockHeader::release_assets_root() {
  // @@protoc_insertion_point(field_release:bc.BlockHeader.assets_root)
  
  ::bc::Hash* temp = assets_root_;
  assets_root_ = NULL;
  return temp;
}
void BlockHeader::set_allocated_assets_root(::bc::Hash* assets_root) {
  delete assets_root_;
  assets_root_ = assets_root;
  if (assets_root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.BlockHeader.assets_root)
}

// optional .bc.TransactionStatus transaction_status = 9;
bool BlockHeader::has_transaction_status() const {
  return !_is_default_instance_ && transaction_status_ != NULL;
}
void BlockHeader::clear_transaction_status() {
  if (GetArenaNoVirtual() == NULL && transaction_status_ != NULL) delete transaction_status_;
  transaction_status_ = NULL;
}
const ::bc::TransactionStatus& BlockHeader::transaction_status() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.transaction_status)
  return transaction_status_ != NULL ? *transaction_status_ : *default_instance_->transaction_status_;
}
::bc::TransactionStatus* BlockHeader::mutable_transaction_status() {
  
  if (transaction_status_ == NULL) {
    transaction_status_ = new ::bc::TransactionStatus;
  }
  // @@protoc_insertion_point(field_mutable:bc.BlockHeader.transaction_status)
  return transaction_status_;
}
::bc::TransactionStatus* BlockHeader::release_transaction_status() {
  // @@protoc_insertion_point(field_release:bc.BlockHeader.transaction_status)
  
  ::bc::TransactionStatus* temp = transaction_status_;
  transaction_status_ = NULL;
  return temp;
}
void BlockHeader::set_allocated_transaction_status(::bc::TransactionStatus* transaction_status) {
  delete transaction_status_;
  transaction_status_ = transaction_status;
  if (transaction_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.BlockHeader.transaction_status)
}

// optional uint64 nonce = 10;
void BlockHeader::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BlockHeader::nonce() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.nonce)
  return nonce_;
}
 void BlockHeader::set_nonce(::google::protobuf::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:bc.BlockHeader.nonce)
}

// optional uint64 bits = 11;
void BlockHeader::clear_bits() {
  bits_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BlockHeader::bits() const {
  // @@protoc_insertion_point(field_get:bc.BlockHeader.bits)
  return bits_;
}
 void BlockHeader::set_bits(::google::protobuf::uint64 value) {
  
  bits_ = value;
  // @@protoc_insertion_point(field_set:bc.BlockHeader.bits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxHeader::kVersionFieldNumber;
const int TxHeader::kSerializedSizeFieldNumber;
const int TxHeader::kTimeRangeFieldNumber;
const int TxHeader::kResultIdsFieldNumber;
const int TxHeader::kDataFieldNumber;
const int TxHeader::kExtHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxHeader::TxHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.TxHeader)
}

void TxHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  data_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  ext_hash_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
}

TxHeader::TxHeader(const TxHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.TxHeader)
}

void TxHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  serialized_size_ = GOOGLE_ULONGLONG(0);
  time_range_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ext_hash_ = NULL;
}

TxHeader::~TxHeader() {
  // @@protoc_insertion_point(destructor:bc.TxHeader)
  SharedDtor();
}

void TxHeader::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete ext_hash_;
  }
}

void TxHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxHeader_descriptor_;
}

const TxHeader& TxHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

TxHeader* TxHeader::default_instance_ = NULL;

TxHeader* TxHeader::New(::google::protobuf::Arena* arena) const {
  TxHeader* n = new TxHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.TxHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TxHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TxHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, time_range_);
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  result_ids_.Clear();
}

bool TxHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.TxHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serialized_size;
        break;
      }

      // optional uint64 serialized_size = 2;
      case 2: {
        if (tag == 16) {
         parse_serialized_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serialized_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_range;
        break;
      }

      // optional uint64 time_range = 3;
      case 3: {
        if (tag == 24) {
         parse_time_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_range_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_ids;
        break;
      }

      // repeated .bc.Hash result_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_result_ids:
          DO_(input->IncrementRecursionDepth());
         parse_loop_result_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_result_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_result_ids;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .bc.Hash data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ext_hash;
        break;
      }

      // optional .bc.Hash ext_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_ext_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.TxHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.TxHeader)
  return false;
#undef DO_
}

void TxHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.TxHeader)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // optional uint64 serialized_size = 2;
  if (this->serialized_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->serialized_size(), output);
  }

  // optional uint64 time_range = 3;
  if (this->time_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_range(), output);
  }

  // repeated .bc.Hash result_ids = 4;
  for (unsigned int i = 0, n = this->result_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result_ids(i), output);
  }

  // optional .bc.Hash data = 5;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->data_, output);
  }

  // optional .bc.Hash ext_hash = 6;
  if (this->has_ext_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ext_hash_, output);
  }

  // @@protoc_insertion_point(serialize_end:bc.TxHeader)
}

::google::protobuf::uint8* TxHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.TxHeader)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // optional uint64 serialized_size = 2;
  if (this->serialized_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->serialized_size(), target);
  }

  // optional uint64 time_range = 3;
  if (this->time_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_range(), target);
  }

  // repeated .bc.Hash result_ids = 4;
  for (unsigned int i = 0, n = this->result_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->result_ids(i), false, target);
  }

  // optional .bc.Hash data = 5;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->data_, false, target);
  }

  // optional .bc.Hash ext_hash = 6;
  if (this->has_ext_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ext_hash_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.TxHeader)
  return target;
}

int TxHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.TxHeader)
  int total_size = 0;

  // optional uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // optional uint64 serialized_size = 2;
  if (this->serialized_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serialized_size());
  }

  // optional uint64 time_range = 3;
  if (this->time_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_range());
  }

  // optional .bc.Hash data = 5;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .bc.Hash ext_hash = 6;
  if (this->has_ext_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_hash_);
  }

  // repeated .bc.Hash result_ids = 4;
  total_size += 1 * this->result_ids_size();
  for (int i = 0; i < this->result_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.TxHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TxHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TxHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.TxHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.TxHeader)
    MergeFrom(*source);
  }
}

void TxHeader::MergeFrom(const TxHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.TxHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  result_ids_.MergeFrom(from.result_ids_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.serialized_size() != 0) {
    set_serialized_size(from.serialized_size());
  }
  if (from.time_range() != 0) {
    set_time_range(from.time_range());
  }
  if (from.has_data()) {
    mutable_data()->::bc::Hash::MergeFrom(from.data());
  }
  if (from.has_ext_hash()) {
    mutable_ext_hash()->::bc::Hash::MergeFrom(from.ext_hash());
  }
}

void TxHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.TxHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxHeader::CopyFrom(const TxHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.TxHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxHeader::IsInitialized() const {

  return true;
}

void TxHeader::Swap(TxHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxHeader::InternalSwap(TxHeader* other) {
  std::swap(version_, other->version_);
  std::swap(serialized_size_, other->serialized_size_);
  std::swap(time_range_, other->time_range_);
  result_ids_.UnsafeArenaSwap(&other->result_ids_);
  std::swap(data_, other->data_);
  std::swap(ext_hash_, other->ext_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxHeader_descriptor_;
  metadata.reflection = TxHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxHeader

// optional uint64 version = 1;
void TxHeader::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TxHeader::version() const {
  // @@protoc_insertion_point(field_get:bc.TxHeader.version)
  return version_;
}
 void TxHeader::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:bc.TxHeader.version)
}

// optional uint64 serialized_size = 2;
void TxHeader::clear_serialized_size() {
  serialized_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TxHeader::serialized_size() const {
  // @@protoc_insertion_point(field_get:bc.TxHeader.serialized_size)
  return serialized_size_;
}
 void TxHeader::set_serialized_size(::google::protobuf::uint64 value) {
  
  serialized_size_ = value;
  // @@protoc_insertion_point(field_set:bc.TxHeader.serialized_size)
}

// optional uint64 time_range = 3;
void TxHeader::clear_time_range() {
  time_range_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TxHeader::time_range() const {
  // @@protoc_insertion_point(field_get:bc.TxHeader.time_range)
  return time_range_;
}
 void TxHeader::set_time_range(::google::protobuf::uint64 value) {
  
  time_range_ = value;
  // @@protoc_insertion_point(field_set:bc.TxHeader.time_range)
}

// repeated .bc.Hash result_ids = 4;
int TxHeader::result_ids_size() const {
  return result_ids_.size();
}
void TxHeader::clear_result_ids() {
  result_ids_.Clear();
}
const ::bc::Hash& TxHeader::result_ids(int index) const {
  // @@protoc_insertion_point(field_get:bc.TxHeader.result_ids)
  return result_ids_.Get(index);
}
::bc::Hash* TxHeader::mutable_result_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bc.TxHeader.result_ids)
  return result_ids_.Mutable(index);
}
::bc::Hash* TxHeader::add_result_ids() {
  // @@protoc_insertion_point(field_add:bc.TxHeader.result_ids)
  return result_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::bc::Hash >*
TxHeader::mutable_result_ids() {
  // @@protoc_insertion_point(field_mutable_list:bc.TxHeader.result_ids)
  return &result_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::bc::Hash >&
TxHeader::result_ids() const {
  // @@protoc_insertion_point(field_list:bc.TxHeader.result_ids)
  return result_ids_;
}

// optional .bc.Hash data = 5;
bool TxHeader::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void TxHeader::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::bc::Hash& TxHeader::data() const {
  // @@protoc_insertion_point(field_get:bc.TxHeader.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::bc::Hash* TxHeader::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.TxHeader.data)
  return data_;
}
::bc::Hash* TxHeader::release_data() {
  // @@protoc_insertion_point(field_release:bc.TxHeader.data)
  
  ::bc::Hash* temp = data_;
  data_ = NULL;
  return temp;
}
void TxHeader::set_allocated_data(::bc::Hash* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.TxHeader.data)
}

// optional .bc.Hash ext_hash = 6;
bool TxHeader::has_ext_hash() const {
  return !_is_default_instance_ && ext_hash_ != NULL;
}
void TxHeader::clear_ext_hash() {
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
}
const ::bc::Hash& TxHeader::ext_hash() const {
  // @@protoc_insertion_point(field_get:bc.TxHeader.ext_hash)
  return ext_hash_ != NULL ? *ext_hash_ : *default_instance_->ext_hash_;
}
::bc::Hash* TxHeader::mutable_ext_hash() {
  
  if (ext_hash_ == NULL) {
    ext_hash_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.TxHeader.ext_hash)
  return ext_hash_;
}
::bc::Hash* TxHeader::release_ext_hash() {
  // @@protoc_insertion_point(field_release:bc.TxHeader.ext_hash)
  
  ::bc::Hash* temp = ext_hash_;
  ext_hash_ = NULL;
  return temp;
}
void TxHeader::set_allocated_ext_hash(::bc::Hash* ext_hash) {
  delete ext_hash_;
  ext_hash_ = ext_hash;
  if (ext_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.TxHeader.ext_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionStatus::kBitmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionStatus::TransactionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.TransactionStatus)
}

void TransactionStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransactionStatus::TransactionStatus(const TransactionStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.TransactionStatus)
}

void TransactionStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bitmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TransactionStatus::~TransactionStatus() {
  // @@protoc_insertion_point(destructor:bc.TransactionStatus)
  SharedDtor();
}

void TransactionStatus::SharedDtor() {
  bitmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionStatus_descriptor_;
}

const TransactionStatus& TransactionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

TransactionStatus* TransactionStatus::default_instance_ = NULL;

TransactionStatus* TransactionStatus::New(::google::protobuf::Arena* arena) const {
  TransactionStatus* n = new TransactionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.TransactionStatus)
  bitmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransactionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.TransactionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bitmap = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.TransactionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.TransactionStatus)
  return false;
#undef DO_
}

void TransactionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.TransactionStatus)
  // optional bytes bitmap = 1;
  if (this->bitmap().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bitmap(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.TransactionStatus)
}

::google::protobuf::uint8* TransactionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.TransactionStatus)
  // optional bytes bitmap = 1;
  if (this->bitmap().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bitmap(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.TransactionStatus)
  return target;
}

int TransactionStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.TransactionStatus)
  int total_size = 0;

  // optional bytes bitmap = 1;
  if (this->bitmap().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bitmap());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.TransactionStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransactionStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.TransactionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.TransactionStatus)
    MergeFrom(*source);
  }
}

void TransactionStatus::MergeFrom(const TransactionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.TransactionStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.bitmap().size() > 0) {

    bitmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitmap_);
  }
}

void TransactionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.TransactionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStatus::CopyFrom(const TransactionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.TransactionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStatus::IsInitialized() const {

  return true;
}

void TransactionStatus::Swap(TransactionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionStatus::InternalSwap(TransactionStatus* other) {
  bitmap_.Swap(&other->bitmap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionStatus_descriptor_;
  metadata.reflection = TransactionStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionStatus

// optional bytes bitmap = 1;
void TransactionStatus::clear_bitmap() {
  bitmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransactionStatus::bitmap() const {
  // @@protoc_insertion_point(field_get:bc.TransactionStatus.bitmap)
  return bitmap_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionStatus::set_bitmap(const ::std::string& value) {
  
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bc.TransactionStatus.bitmap)
}
 void TransactionStatus::set_bitmap(const char* value) {
  
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bc.TransactionStatus.bitmap)
}
 void TransactionStatus::set_bitmap(const void* value, size_t size) {
  
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bc.TransactionStatus.bitmap)
}
 ::std::string* TransactionStatus::mutable_bitmap() {
  
  // @@protoc_insertion_point(field_mutable:bc.TransactionStatus.bitmap)
  return bitmap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionStatus::release_bitmap() {
  // @@protoc_insertion_point(field_release:bc.TransactionStatus.bitmap)
  
  return bitmap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionStatus::set_allocated_bitmap(::std::string* bitmap) {
  if (bitmap != NULL) {
    
  } else {
    
  }
  bitmap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitmap);
  // @@protoc_insertion_point(field_set_allocated:bc.TransactionStatus.bitmap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mux::kSourcesFieldNumber;
const int Mux::kProgramFieldNumber;
const int Mux::kExtHashFieldNumber;
const int Mux::kWitnessDestinationsFieldNumber;
const int Mux::kWitnessArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mux::Mux()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Mux)
}

void Mux::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  program_ = const_cast< ::bc::Program*>(&::bc::Program::default_instance());
  ext_hash_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
}

Mux::Mux(const Mux& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Mux)
}

void Mux::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  program_ = NULL;
  ext_hash_ = NULL;
}

Mux::~Mux() {
  // @@protoc_insertion_point(destructor:bc.Mux)
  SharedDtor();
}

void Mux::SharedDtor() {
  if (this != default_instance_) {
    delete program_;
    delete ext_hash_;
  }
}

void Mux::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mux::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mux_descriptor_;
}

const Mux& Mux::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Mux* Mux::default_instance_ = NULL;

Mux* Mux::New(::google::protobuf::Arena* arena) const {
  Mux* n = new Mux;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mux::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Mux)
  if (GetArenaNoVirtual() == NULL && program_ != NULL) delete program_;
  program_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
  sources_.Clear();
  witness_destinations_.Clear();
  witness_arguments_.Clear();
}

bool Mux::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Mux)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bc.ValueSource sources = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_program;
        break;
      }

      // optional .bc.Program program = 2;
      case 2: {
        if (tag == 18) {
         parse_program:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_program()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ext_hash;
        break;
      }

      // optional .bc.Hash ext_hash = 3;
      case 3: {
        if (tag == 26) {
         parse_ext_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_witness_destinations;
        break;
      }

      // repeated .bc.ValueDestination witness_destinations = 4;
      case 4: {
        if (tag == 34) {
         parse_witness_destinations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_witness_destinations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_witness_destinations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_witness_destinations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_witness_arguments;
        break;
      }

      // repeated bytes witness_arguments = 5;
      case 5: {
        if (tag == 42) {
         parse_witness_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_witness_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_witness_arguments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Mux)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Mux)
  return false;
#undef DO_
}

void Mux::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Mux)
  // repeated .bc.ValueSource sources = 1;
  for (unsigned int i = 0, n = this->sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sources(i), output);
  }

  // optional .bc.Program program = 2;
  if (this->has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->program_, output);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ext_hash_, output);
  }

  // repeated .bc.ValueDestination witness_destinations = 4;
  for (unsigned int i = 0, n = this->witness_destinations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->witness_destinations(i), output);
  }

  // repeated bytes witness_arguments = 5;
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->witness_arguments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Mux)
}

::google::protobuf::uint8* Mux::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Mux)
  // repeated .bc.ValueSource sources = 1;
  for (unsigned int i = 0, n = this->sources_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sources(i), false, target);
  }

  // optional .bc.Program program = 2;
  if (this->has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->program_, false, target);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ext_hash_, false, target);
  }

  // repeated .bc.ValueDestination witness_destinations = 4;
  for (unsigned int i = 0, n = this->witness_destinations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->witness_destinations(i), false, target);
  }

  // repeated bytes witness_arguments = 5;
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->witness_arguments(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Mux)
  return target;
}

int Mux::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Mux)
  int total_size = 0;

  // optional .bc.Program program = 2;
  if (this->has_program()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->program_);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_hash_);
  }

  // repeated .bc.ValueSource sources = 1;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  // repeated .bc.ValueDestination witness_destinations = 4;
  total_size += 1 * this->witness_destinations_size();
  for (int i = 0; i < this->witness_destinations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->witness_destinations(i));
  }

  // repeated bytes witness_arguments = 5;
  total_size += 1 * this->witness_arguments_size();
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->witness_arguments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mux::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Mux)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mux* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mux>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Mux)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Mux)
    MergeFrom(*source);
  }
}

void Mux::MergeFrom(const Mux& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Mux)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sources_.MergeFrom(from.sources_);
  witness_destinations_.MergeFrom(from.witness_destinations_);
  witness_arguments_.MergeFrom(from.witness_arguments_);
  if (from.has_program()) {
    mutable_program()->::bc::Program::MergeFrom(from.program());
  }
  if (from.has_ext_hash()) {
    mutable_ext_hash()->::bc::Hash::MergeFrom(from.ext_hash());
  }
}

void Mux::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Mux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mux::CopyFrom(const Mux& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Mux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mux::IsInitialized() const {

  return true;
}

void Mux::Swap(Mux* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mux::InternalSwap(Mux* other) {
  sources_.UnsafeArenaSwap(&other->sources_);
  std::swap(program_, other->program_);
  std::swap(ext_hash_, other->ext_hash_);
  witness_destinations_.UnsafeArenaSwap(&other->witness_destinations_);
  witness_arguments_.UnsafeArenaSwap(&other->witness_arguments_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mux::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mux_descriptor_;
  metadata.reflection = Mux_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mux

// repeated .bc.ValueSource sources = 1;
int Mux::sources_size() const {
  return sources_.size();
}
void Mux::clear_sources() {
  sources_.Clear();
}
const ::bc::ValueSource& Mux::sources(int index) const {
  // @@protoc_insertion_point(field_get:bc.Mux.sources)
  return sources_.Get(index);
}
::bc::ValueSource* Mux::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:bc.Mux.sources)
  return sources_.Mutable(index);
}
::bc::ValueSource* Mux::add_sources() {
  // @@protoc_insertion_point(field_add:bc.Mux.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::bc::ValueSource >*
Mux::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:bc.Mux.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::bc::ValueSource >&
Mux::sources() const {
  // @@protoc_insertion_point(field_list:bc.Mux.sources)
  return sources_;
}

// optional .bc.Program program = 2;
bool Mux::has_program() const {
  return !_is_default_instance_ && program_ != NULL;
}
void Mux::clear_program() {
  if (GetArenaNoVirtual() == NULL && program_ != NULL) delete program_;
  program_ = NULL;
}
const ::bc::Program& Mux::program() const {
  // @@protoc_insertion_point(field_get:bc.Mux.program)
  return program_ != NULL ? *program_ : *default_instance_->program_;
}
::bc::Program* Mux::mutable_program() {
  
  if (program_ == NULL) {
    program_ = new ::bc::Program;
  }
  // @@protoc_insertion_point(field_mutable:bc.Mux.program)
  return program_;
}
::bc::Program* Mux::release_program() {
  // @@protoc_insertion_point(field_release:bc.Mux.program)
  
  ::bc::Program* temp = program_;
  program_ = NULL;
  return temp;
}
void Mux::set_allocated_program(::bc::Program* program) {
  delete program_;
  program_ = program;
  if (program) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Mux.program)
}

// optional .bc.Hash ext_hash = 3;
bool Mux::has_ext_hash() const {
  return !_is_default_instance_ && ext_hash_ != NULL;
}
void Mux::clear_ext_hash() {
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
}
const ::bc::Hash& Mux::ext_hash() const {
  // @@protoc_insertion_point(field_get:bc.Mux.ext_hash)
  return ext_hash_ != NULL ? *ext_hash_ : *default_instance_->ext_hash_;
}
::bc::Hash* Mux::mutable_ext_hash() {
  
  if (ext_hash_ == NULL) {
    ext_hash_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Mux.ext_hash)
  return ext_hash_;
}
::bc::Hash* Mux::release_ext_hash() {
  // @@protoc_insertion_point(field_release:bc.Mux.ext_hash)
  
  ::bc::Hash* temp = ext_hash_;
  ext_hash_ = NULL;
  return temp;
}
void Mux::set_allocated_ext_hash(::bc::Hash* ext_hash) {
  delete ext_hash_;
  ext_hash_ = ext_hash;
  if (ext_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Mux.ext_hash)
}

// repeated .bc.ValueDestination witness_destinations = 4;
int Mux::witness_destinations_size() const {
  return witness_destinations_.size();
}
void Mux::clear_witness_destinations() {
  witness_destinations_.Clear();
}
const ::bc::ValueDestination& Mux::witness_destinations(int index) const {
  // @@protoc_insertion_point(field_get:bc.Mux.witness_destinations)
  return witness_destinations_.Get(index);
}
::bc::ValueDestination* Mux::mutable_witness_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:bc.Mux.witness_destinations)
  return witness_destinations_.Mutable(index);
}
::bc::ValueDestination* Mux::add_witness_destinations() {
  // @@protoc_insertion_point(field_add:bc.Mux.witness_destinations)
  return witness_destinations_.Add();
}
::google::protobuf::RepeatedPtrField< ::bc::ValueDestination >*
Mux::mutable_witness_destinations() {
  // @@protoc_insertion_point(field_mutable_list:bc.Mux.witness_destinations)
  return &witness_destinations_;
}
const ::google::protobuf::RepeatedPtrField< ::bc::ValueDestination >&
Mux::witness_destinations() const {
  // @@protoc_insertion_point(field_list:bc.Mux.witness_destinations)
  return witness_destinations_;
}

// repeated bytes witness_arguments = 5;
int Mux::witness_arguments_size() const {
  return witness_arguments_.size();
}
void Mux::clear_witness_arguments() {
  witness_arguments_.Clear();
}
 const ::std::string& Mux::witness_arguments(int index) const {
  // @@protoc_insertion_point(field_get:bc.Mux.witness_arguments)
  return witness_arguments_.Get(index);
}
 ::std::string* Mux::mutable_witness_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:bc.Mux.witness_arguments)
  return witness_arguments_.Mutable(index);
}
 void Mux::set_witness_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bc.Mux.witness_arguments)
  witness_arguments_.Mutable(index)->assign(value);
}
 void Mux::set_witness_arguments(int index, const char* value) {
  witness_arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bc.Mux.witness_arguments)
}
 void Mux::set_witness_arguments(int index, const void* value, size_t size) {
  witness_arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bc.Mux.witness_arguments)
}
 ::std::string* Mux::add_witness_arguments() {
  // @@protoc_insertion_point(field_add_mutable:bc.Mux.witness_arguments)
  return witness_arguments_.Add();
}
 void Mux::add_witness_arguments(const ::std::string& value) {
  witness_arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bc.Mux.witness_arguments)
}
 void Mux::add_witness_arguments(const char* value) {
  witness_arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bc.Mux.witness_arguments)
}
 void Mux::add_witness_arguments(const void* value, size_t size) {
  witness_arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bc.Mux.witness_arguments)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mux::witness_arguments() const {
  // @@protoc_insertion_point(field_list:bc.Mux.witness_arguments)
  return witness_arguments_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Mux::mutable_witness_arguments() {
  // @@protoc_insertion_point(field_mutable_list:bc.Mux.witness_arguments)
  return &witness_arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nonce::kProgramFieldNumber;
const int Nonce::kExtHashFieldNumber;
const int Nonce::kWitnessArgumentsFieldNumber;
const int Nonce::kWitnessAnchoredIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nonce::Nonce()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Nonce)
}

void Nonce::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  program_ = const_cast< ::bc::Program*>(&::bc::Program::default_instance());
  ext_hash_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  witness_anchored_id_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
}

Nonce::Nonce(const Nonce& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Nonce)
}

void Nonce::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  program_ = NULL;
  ext_hash_ = NULL;
  witness_anchored_id_ = NULL;
}

Nonce::~Nonce() {
  // @@protoc_insertion_point(destructor:bc.Nonce)
  SharedDtor();
}

void Nonce::SharedDtor() {
  if (this != default_instance_) {
    delete program_;
    delete ext_hash_;
    delete witness_anchored_id_;
  }
}

void Nonce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nonce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nonce_descriptor_;
}

const Nonce& Nonce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Nonce* Nonce::default_instance_ = NULL;

Nonce* Nonce::New(::google::protobuf::Arena* arena) const {
  Nonce* n = new Nonce;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Nonce::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Nonce)
  if (GetArenaNoVirtual() == NULL && program_ != NULL) delete program_;
  program_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
  if (GetArenaNoVirtual() == NULL && witness_anchored_id_ != NULL) delete witness_anchored_id_;
  witness_anchored_id_ = NULL;
  witness_arguments_.Clear();
}

bool Nonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Nonce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.Program program = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_program()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ext_hash;
        break;
      }

      // optional .bc.Hash ext_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_ext_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_witness_arguments;
        break;
      }

      // repeated bytes witness_arguments = 3;
      case 3: {
        if (tag == 26) {
         parse_witness_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_witness_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_witness_arguments;
        if (input->ExpectTag(34)) goto parse_witness_anchored_id;
        break;
      }

      // optional .bc.Hash witness_anchored_id = 4;
      case 4: {
        if (tag == 34) {
         parse_witness_anchored_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_witness_anchored_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Nonce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Nonce)
  return false;
#undef DO_
}

void Nonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Nonce)
  // optional .bc.Program program = 1;
  if (this->has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->program_, output);
  }

  // optional .bc.Hash ext_hash = 2;
  if (this->has_ext_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ext_hash_, output);
  }

  // repeated bytes witness_arguments = 3;
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->witness_arguments(i), output);
  }

  // optional .bc.Hash witness_anchored_id = 4;
  if (this->has_witness_anchored_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->witness_anchored_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Nonce)
}

::google::protobuf::uint8* Nonce::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Nonce)
  // optional .bc.Program program = 1;
  if (this->has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->program_, false, target);
  }

  // optional .bc.Hash ext_hash = 2;
  if (this->has_ext_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ext_hash_, false, target);
  }

  // repeated bytes witness_arguments = 3;
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->witness_arguments(i), target);
  }

  // optional .bc.Hash witness_anchored_id = 4;
  if (this->has_witness_anchored_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->witness_anchored_id_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Nonce)
  return target;
}

int Nonce::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Nonce)
  int total_size = 0;

  // optional .bc.Program program = 1;
  if (this->has_program()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->program_);
  }

  // optional .bc.Hash ext_hash = 2;
  if (this->has_ext_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_hash_);
  }

  // optional .bc.Hash witness_anchored_id = 4;
  if (this->has_witness_anchored_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->witness_anchored_id_);
  }

  // repeated bytes witness_arguments = 3;
  total_size += 1 * this->witness_arguments_size();
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->witness_arguments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nonce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Nonce)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Nonce* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Nonce>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Nonce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Nonce)
    MergeFrom(*source);
  }
}

void Nonce::MergeFrom(const Nonce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Nonce)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  witness_arguments_.MergeFrom(from.witness_arguments_);
  if (from.has_program()) {
    mutable_program()->::bc::Program::MergeFrom(from.program());
  }
  if (from.has_ext_hash()) {
    mutable_ext_hash()->::bc::Hash::MergeFrom(from.ext_hash());
  }
  if (from.has_witness_anchored_id()) {
    mutable_witness_anchored_id()->::bc::Hash::MergeFrom(from.witness_anchored_id());
  }
}

void Nonce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Nonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nonce::CopyFrom(const Nonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Nonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nonce::IsInitialized() const {

  return true;
}

void Nonce::Swap(Nonce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nonce::InternalSwap(Nonce* other) {
  std::swap(program_, other->program_);
  std::swap(ext_hash_, other->ext_hash_);
  witness_arguments_.UnsafeArenaSwap(&other->witness_arguments_);
  std::swap(witness_anchored_id_, other->witness_anchored_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Nonce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nonce_descriptor_;
  metadata.reflection = Nonce_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Nonce

// optional .bc.Program program = 1;
bool Nonce::has_program() const {
  return !_is_default_instance_ && program_ != NULL;
}
void Nonce::clear_program() {
  if (GetArenaNoVirtual() == NULL && program_ != NULL) delete program_;
  program_ = NULL;
}
const ::bc::Program& Nonce::program() const {
  // @@protoc_insertion_point(field_get:bc.Nonce.program)
  return program_ != NULL ? *program_ : *default_instance_->program_;
}
::bc::Program* Nonce::mutable_program() {
  
  if (program_ == NULL) {
    program_ = new ::bc::Program;
  }
  // @@protoc_insertion_point(field_mutable:bc.Nonce.program)
  return program_;
}
::bc::Program* Nonce::release_program() {
  // @@protoc_insertion_point(field_release:bc.Nonce.program)
  
  ::bc::Program* temp = program_;
  program_ = NULL;
  return temp;
}
void Nonce::set_allocated_program(::bc::Program* program) {
  delete program_;
  program_ = program;
  if (program) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Nonce.program)
}

// optional .bc.Hash ext_hash = 2;
bool Nonce::has_ext_hash() const {
  return !_is_default_instance_ && ext_hash_ != NULL;
}
void Nonce::clear_ext_hash() {
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
}
const ::bc::Hash& Nonce::ext_hash() const {
  // @@protoc_insertion_point(field_get:bc.Nonce.ext_hash)
  return ext_hash_ != NULL ? *ext_hash_ : *default_instance_->ext_hash_;
}
::bc::Hash* Nonce::mutable_ext_hash() {
  
  if (ext_hash_ == NULL) {
    ext_hash_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Nonce.ext_hash)
  return ext_hash_;
}
::bc::Hash* Nonce::release_ext_hash() {
  // @@protoc_insertion_point(field_release:bc.Nonce.ext_hash)
  
  ::bc::Hash* temp = ext_hash_;
  ext_hash_ = NULL;
  return temp;
}
void Nonce::set_allocated_ext_hash(::bc::Hash* ext_hash) {
  delete ext_hash_;
  ext_hash_ = ext_hash;
  if (ext_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Nonce.ext_hash)
}

// repeated bytes witness_arguments = 3;
int Nonce::witness_arguments_size() const {
  return witness_arguments_.size();
}
void Nonce::clear_witness_arguments() {
  witness_arguments_.Clear();
}
 const ::std::string& Nonce::witness_arguments(int index) const {
  // @@protoc_insertion_point(field_get:bc.Nonce.witness_arguments)
  return witness_arguments_.Get(index);
}
 ::std::string* Nonce::mutable_witness_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:bc.Nonce.witness_arguments)
  return witness_arguments_.Mutable(index);
}
 void Nonce::set_witness_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bc.Nonce.witness_arguments)
  witness_arguments_.Mutable(index)->assign(value);
}
 void Nonce::set_witness_arguments(int index, const char* value) {
  witness_arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bc.Nonce.witness_arguments)
}
 void Nonce::set_witness_arguments(int index, const void* value, size_t size) {
  witness_arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bc.Nonce.witness_arguments)
}
 ::std::string* Nonce::add_witness_arguments() {
  // @@protoc_insertion_point(field_add_mutable:bc.Nonce.witness_arguments)
  return witness_arguments_.Add();
}
 void Nonce::add_witness_arguments(const ::std::string& value) {
  witness_arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bc.Nonce.witness_arguments)
}
 void Nonce::add_witness_arguments(const char* value) {
  witness_arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bc.Nonce.witness_arguments)
}
 void Nonce::add_witness_arguments(const void* value, size_t size) {
  witness_arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bc.Nonce.witness_arguments)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Nonce::witness_arguments() const {
  // @@protoc_insertion_point(field_list:bc.Nonce.witness_arguments)
  return witness_arguments_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Nonce::mutable_witness_arguments() {
  // @@protoc_insertion_point(field_mutable_list:bc.Nonce.witness_arguments)
  return &witness_arguments_;
}

// optional .bc.Hash witness_anchored_id = 4;
bool Nonce::has_witness_anchored_id() const {
  return !_is_default_instance_ && witness_anchored_id_ != NULL;
}
void Nonce::clear_witness_anchored_id() {
  if (GetArenaNoVirtual() == NULL && witness_anchored_id_ != NULL) delete witness_anchored_id_;
  witness_anchored_id_ = NULL;
}
const ::bc::Hash& Nonce::witness_anchored_id() const {
  // @@protoc_insertion_point(field_get:bc.Nonce.witness_anchored_id)
  return witness_anchored_id_ != NULL ? *witness_anchored_id_ : *default_instance_->witness_anchored_id_;
}
::bc::Hash* Nonce::mutable_witness_anchored_id() {
  
  if (witness_anchored_id_ == NULL) {
    witness_anchored_id_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Nonce.witness_anchored_id)
  return witness_anchored_id_;
}
::bc::Hash* Nonce::release_witness_anchored_id() {
  // @@protoc_insertion_point(field_release:bc.Nonce.witness_anchored_id)
  
  ::bc::Hash* temp = witness_anchored_id_;
  witness_anchored_id_ = NULL;
  return temp;
}
void Nonce::set_allocated_witness_anchored_id(::bc::Hash* witness_anchored_id) {
  delete witness_anchored_id_;
  witness_anchored_id_ = witness_anchored_id;
  if (witness_anchored_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Nonce.witness_anchored_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coinbase::kWitnessDestinationFieldNumber;
const int Coinbase::kArbitraryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coinbase::Coinbase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Coinbase)
}

void Coinbase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  witness_destination_ = const_cast< ::bc::ValueDestination*>(&::bc::ValueDestination::default_instance());
}

Coinbase::Coinbase(const Coinbase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Coinbase)
}

void Coinbase::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  witness_destination_ = NULL;
  arbitrary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Coinbase::~Coinbase() {
  // @@protoc_insertion_point(destructor:bc.Coinbase)
  SharedDtor();
}

void Coinbase::SharedDtor() {
  arbitrary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete witness_destination_;
  }
}

void Coinbase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coinbase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coinbase_descriptor_;
}

const Coinbase& Coinbase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Coinbase* Coinbase::default_instance_ = NULL;

Coinbase* Coinbase::New(::google::protobuf::Arena* arena) const {
  Coinbase* n = new Coinbase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Coinbase::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Coinbase)
  if (GetArenaNoVirtual() == NULL && witness_destination_ != NULL) delete witness_destination_;
  witness_destination_ = NULL;
  arbitrary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Coinbase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Coinbase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.ValueDestination witness_destination = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_witness_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arbitrary;
        break;
      }

      // optional bytes arbitrary = 2;
      case 2: {
        if (tag == 18) {
         parse_arbitrary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arbitrary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Coinbase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Coinbase)
  return false;
#undef DO_
}

void Coinbase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Coinbase)
  // optional .bc.ValueDestination witness_destination = 1;
  if (this->has_witness_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->witness_destination_, output);
  }

  // optional bytes arbitrary = 2;
  if (this->arbitrary().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->arbitrary(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Coinbase)
}

::google::protobuf::uint8* Coinbase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Coinbase)
  // optional .bc.ValueDestination witness_destination = 1;
  if (this->has_witness_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->witness_destination_, false, target);
  }

  // optional bytes arbitrary = 2;
  if (this->arbitrary().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->arbitrary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Coinbase)
  return target;
}

int Coinbase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Coinbase)
  int total_size = 0;

  // optional .bc.ValueDestination witness_destination = 1;
  if (this->has_witness_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->witness_destination_);
  }

  // optional bytes arbitrary = 2;
  if (this->arbitrary().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->arbitrary());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coinbase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Coinbase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Coinbase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Coinbase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Coinbase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Coinbase)
    MergeFrom(*source);
  }
}

void Coinbase::MergeFrom(const Coinbase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Coinbase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_witness_destination()) {
    mutable_witness_destination()->::bc::ValueDestination::MergeFrom(from.witness_destination());
  }
  if (from.arbitrary().size() > 0) {

    arbitrary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arbitrary_);
  }
}

void Coinbase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Coinbase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coinbase::CopyFrom(const Coinbase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Coinbase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coinbase::IsInitialized() const {

  return true;
}

void Coinbase::Swap(Coinbase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coinbase::InternalSwap(Coinbase* other) {
  std::swap(witness_destination_, other->witness_destination_);
  arbitrary_.Swap(&other->arbitrary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Coinbase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coinbase_descriptor_;
  metadata.reflection = Coinbase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Coinbase

// optional .bc.ValueDestination witness_destination = 1;
bool Coinbase::has_witness_destination() const {
  return !_is_default_instance_ && witness_destination_ != NULL;
}
void Coinbase::clear_witness_destination() {
  if (GetArenaNoVirtual() == NULL && witness_destination_ != NULL) delete witness_destination_;
  witness_destination_ = NULL;
}
const ::bc::ValueDestination& Coinbase::witness_destination() const {
  // @@protoc_insertion_point(field_get:bc.Coinbase.witness_destination)
  return witness_destination_ != NULL ? *witness_destination_ : *default_instance_->witness_destination_;
}
::bc::ValueDestination* Coinbase::mutable_witness_destination() {
  
  if (witness_destination_ == NULL) {
    witness_destination_ = new ::bc::ValueDestination;
  }
  // @@protoc_insertion_point(field_mutable:bc.Coinbase.witness_destination)
  return witness_destination_;
}
::bc::ValueDestination* Coinbase::release_witness_destination() {
  // @@protoc_insertion_point(field_release:bc.Coinbase.witness_destination)
  
  ::bc::ValueDestination* temp = witness_destination_;
  witness_destination_ = NULL;
  return temp;
}
void Coinbase::set_allocated_witness_destination(::bc::ValueDestination* witness_destination) {
  delete witness_destination_;
  witness_destination_ = witness_destination;
  if (witness_destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Coinbase.witness_destination)
}

// optional bytes arbitrary = 2;
void Coinbase::clear_arbitrary() {
  arbitrary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Coinbase::arbitrary() const {
  // @@protoc_insertion_point(field_get:bc.Coinbase.arbitrary)
  return arbitrary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Coinbase::set_arbitrary(const ::std::string& value) {
  
  arbitrary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bc.Coinbase.arbitrary)
}
 void Coinbase::set_arbitrary(const char* value) {
  
  arbitrary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bc.Coinbase.arbitrary)
}
 void Coinbase::set_arbitrary(const void* value, size_t size) {
  
  arbitrary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bc.Coinbase.arbitrary)
}
 ::std::string* Coinbase::mutable_arbitrary() {
  
  // @@protoc_insertion_point(field_mutable:bc.Coinbase.arbitrary)
  return arbitrary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Coinbase::release_arbitrary() {
  // @@protoc_insertion_point(field_release:bc.Coinbase.arbitrary)
  
  return arbitrary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Coinbase::set_allocated_arbitrary(::std::string* arbitrary) {
  if (arbitrary != NULL) {
    
  } else {
    
  }
  arbitrary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arbitrary);
  // @@protoc_insertion_point(field_set_allocated:bc.Coinbase.arbitrary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Output::kSourceFieldNumber;
const int Output::kControlProgramFieldNumber;
const int Output::kDataFieldNumber;
const int Output::kExtHashFieldNumber;
const int Output::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Output::Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Output)
}

void Output::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  source_ = const_cast< ::bc::ValueSource*>(&::bc::ValueSource::default_instance());
  control_program_ = const_cast< ::bc::Program*>(&::bc::Program::default_instance());
  data_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  ext_hash_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
}

Output::Output(const Output& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Output)
}

void Output::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  source_ = NULL;
  control_program_ = NULL;
  data_ = NULL;
  ext_hash_ = NULL;
  ordinal_ = GOOGLE_ULONGLONG(0);
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:bc.Output)
  SharedDtor();
}

void Output::SharedDtor() {
  if (this != default_instance_) {
    delete source_;
    delete control_program_;
    delete data_;
    delete ext_hash_;
  }
}

void Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Output::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_descriptor_;
}

const Output& Output::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Output* Output::default_instance_ = NULL;

Output* Output::New(::google::protobuf::Arena* arena) const {
  Output* n = new Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Output)
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
  if (GetArenaNoVirtual() == NULL && control_program_ != NULL) delete control_program_;
  control_program_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
  ordinal_ = GOOGLE_ULONGLONG(0);
}

bool Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.ValueSource source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_control_program;
        break;
      }

      // optional .bc.Program control_program = 2;
      case 2: {
        if (tag == 18) {
         parse_control_program:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_program()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .bc.Hash data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ext_hash;
        break;
      }

      // optional .bc.Hash ext_hash = 4;
      case 4: {
        if (tag == 34) {
         parse_ext_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ordinal;
        break;
      }

      // optional uint64 ordinal = 5;
      case 5: {
        if (tag == 40) {
         parse_ordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ordinal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Output)
  return false;
#undef DO_
}

void Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Output)
  // optional .bc.ValueSource source = 1;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->source_, output);
  }

  // optional .bc.Program control_program = 2;
  if (this->has_control_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->control_program_, output);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // optional .bc.Hash ext_hash = 4;
  if (this->has_ext_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ext_hash_, output);
  }

  // optional uint64 ordinal = 5;
  if (this->ordinal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ordinal(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Output)
}

::google::protobuf::uint8* Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Output)
  // optional .bc.ValueSource source = 1;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->source_, false, target);
  }

  // optional .bc.Program control_program = 2;
  if (this->has_control_program()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->control_program_, false, target);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // optional .bc.Hash ext_hash = 4;
  if (this->has_ext_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ext_hash_, false, target);
  }

  // optional uint64 ordinal = 5;
  if (this->ordinal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ordinal(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Output)
  return target;
}

int Output::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Output)
  int total_size = 0;

  // optional .bc.ValueSource source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);
  }

  // optional .bc.Program control_program = 2;
  if (this->has_control_program()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->control_program_);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .bc.Hash ext_hash = 4;
  if (this->has_ext_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_hash_);
  }

  // optional uint64 ordinal = 5;
  if (this->ordinal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ordinal());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Output)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Output* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Output)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_source()) {
    mutable_source()->::bc::ValueSource::MergeFrom(from.source());
  }
  if (from.has_control_program()) {
    mutable_control_program()->::bc::Program::MergeFrom(from.control_program());
  }
  if (from.has_data()) {
    mutable_data()->::bc::Hash::MergeFrom(from.data());
  }
  if (from.has_ext_hash()) {
    mutable_ext_hash()->::bc::Hash::MergeFrom(from.ext_hash());
  }
  if (from.ordinal() != 0) {
    set_ordinal(from.ordinal());
  }
}

void Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {

  return true;
}

void Output::Swap(Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Output::InternalSwap(Output* other) {
  std::swap(source_, other->source_);
  std::swap(control_program_, other->control_program_);
  std::swap(data_, other->data_);
  std::swap(ext_hash_, other->ext_hash_);
  std::swap(ordinal_, other->ordinal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Output::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Output_descriptor_;
  metadata.reflection = Output_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Output

// optional .bc.ValueSource source = 1;
bool Output::has_source() const {
  return !_is_default_instance_ && source_ != NULL;
}
void Output::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
}
const ::bc::ValueSource& Output::source() const {
  // @@protoc_insertion_point(field_get:bc.Output.source)
  return source_ != NULL ? *source_ : *default_instance_->source_;
}
::bc::ValueSource* Output::mutable_source() {
  
  if (source_ == NULL) {
    source_ = new ::bc::ValueSource;
  }
  // @@protoc_insertion_point(field_mutable:bc.Output.source)
  return source_;
}
::bc::ValueSource* Output::release_source() {
  // @@protoc_insertion_point(field_release:bc.Output.source)
  
  ::bc::ValueSource* temp = source_;
  source_ = NULL;
  return temp;
}
void Output::set_allocated_source(::bc::ValueSource* source) {
  delete source_;
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Output.source)
}

// optional .bc.Program control_program = 2;
bool Output::has_control_program() const {
  return !_is_default_instance_ && control_program_ != NULL;
}
void Output::clear_control_program() {
  if (GetArenaNoVirtual() == NULL && control_program_ != NULL) delete control_program_;
  control_program_ = NULL;
}
const ::bc::Program& Output::control_program() const {
  // @@protoc_insertion_point(field_get:bc.Output.control_program)
  return control_program_ != NULL ? *control_program_ : *default_instance_->control_program_;
}
::bc::Program* Output::mutable_control_program() {
  
  if (control_program_ == NULL) {
    control_program_ = new ::bc::Program;
  }
  // @@protoc_insertion_point(field_mutable:bc.Output.control_program)
  return control_program_;
}
::bc::Program* Output::release_control_program() {
  // @@protoc_insertion_point(field_release:bc.Output.control_program)
  
  ::bc::Program* temp = control_program_;
  control_program_ = NULL;
  return temp;
}
void Output::set_allocated_control_program(::bc::Program* control_program) {
  delete control_program_;
  control_program_ = control_program;
  if (control_program) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Output.control_program)
}

// optional .bc.Hash data = 3;
bool Output::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void Output::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::bc::Hash& Output::data() const {
  // @@protoc_insertion_point(field_get:bc.Output.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::bc::Hash* Output::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Output.data)
  return data_;
}
::bc::Hash* Output::release_data() {
  // @@protoc_insertion_point(field_release:bc.Output.data)
  
  ::bc::Hash* temp = data_;
  data_ = NULL;
  return temp;
}
void Output::set_allocated_data(::bc::Hash* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Output.data)
}

// optional .bc.Hash ext_hash = 4;
bool Output::has_ext_hash() const {
  return !_is_default_instance_ && ext_hash_ != NULL;
}
void Output::clear_ext_hash() {
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
}
const ::bc::Hash& Output::ext_hash() const {
  // @@protoc_insertion_point(field_get:bc.Output.ext_hash)
  return ext_hash_ != NULL ? *ext_hash_ : *default_instance_->ext_hash_;
}
::bc::Hash* Output::mutable_ext_hash() {
  
  if (ext_hash_ == NULL) {
    ext_hash_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Output.ext_hash)
  return ext_hash_;
}
::bc::Hash* Output::release_ext_hash() {
  // @@protoc_insertion_point(field_release:bc.Output.ext_hash)
  
  ::bc::Hash* temp = ext_hash_;
  ext_hash_ = NULL;
  return temp;
}
void Output::set_allocated_ext_hash(::bc::Hash* ext_hash) {
  delete ext_hash_;
  ext_hash_ = ext_hash;
  if (ext_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Output.ext_hash)
}

// optional uint64 ordinal = 5;
void Output::clear_ordinal() {
  ordinal_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Output::ordinal() const {
  // @@protoc_insertion_point(field_get:bc.Output.ordinal)
  return ordinal_;
}
 void Output::set_ordinal(::google::protobuf::uint64 value) {
  
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:bc.Output.ordinal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Retirement::kSourceFieldNumber;
const int Retirement::kDataFieldNumber;
const int Retirement::kExtHashFieldNumber;
const int Retirement::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Retirement::Retirement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Retirement)
}

void Retirement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  source_ = const_cast< ::bc::ValueSource*>(&::bc::ValueSource::default_instance());
  data_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  ext_hash_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
}

Retirement::Retirement(const Retirement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Retirement)
}

void Retirement::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  source_ = NULL;
  data_ = NULL;
  ext_hash_ = NULL;
  ordinal_ = GOOGLE_ULONGLONG(0);
}

Retirement::~Retirement() {
  // @@protoc_insertion_point(destructor:bc.Retirement)
  SharedDtor();
}

void Retirement::SharedDtor() {
  if (this != default_instance_) {
    delete source_;
    delete data_;
    delete ext_hash_;
  }
}

void Retirement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Retirement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Retirement_descriptor_;
}

const Retirement& Retirement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Retirement* Retirement::default_instance_ = NULL;

Retirement* Retirement::New(::google::protobuf::Arena* arena) const {
  Retirement* n = new Retirement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Retirement::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Retirement)
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
  ordinal_ = GOOGLE_ULONGLONG(0);
}

bool Retirement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Retirement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.ValueSource source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .bc.Hash data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ext_hash;
        break;
      }

      // optional .bc.Hash ext_hash = 3;
      case 3: {
        if (tag == 26) {
         parse_ext_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ordinal;
        break;
      }

      // optional uint64 ordinal = 4;
      case 4: {
        if (tag == 32) {
         parse_ordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ordinal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Retirement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Retirement)
  return false;
#undef DO_
}

void Retirement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Retirement)
  // optional .bc.ValueSource source = 1;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->source_, output);
  }

  // optional .bc.Hash data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ext_hash_, output);
  }

  // optional uint64 ordinal = 4;
  if (this->ordinal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ordinal(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Retirement)
}

::google::protobuf::uint8* Retirement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Retirement)
  // optional .bc.ValueSource source = 1;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->source_, false, target);
  }

  // optional .bc.Hash data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ext_hash_, false, target);
  }

  // optional uint64 ordinal = 4;
  if (this->ordinal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ordinal(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Retirement)
  return target;
}

int Retirement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Retirement)
  int total_size = 0;

  // optional .bc.ValueSource source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);
  }

  // optional .bc.Hash data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_hash_);
  }

  // optional uint64 ordinal = 4;
  if (this->ordinal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ordinal());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Retirement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Retirement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Retirement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Retirement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Retirement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Retirement)
    MergeFrom(*source);
  }
}

void Retirement::MergeFrom(const Retirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Retirement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_source()) {
    mutable_source()->::bc::ValueSource::MergeFrom(from.source());
  }
  if (from.has_data()) {
    mutable_data()->::bc::Hash::MergeFrom(from.data());
  }
  if (from.has_ext_hash()) {
    mutable_ext_hash()->::bc::Hash::MergeFrom(from.ext_hash());
  }
  if (from.ordinal() != 0) {
    set_ordinal(from.ordinal());
  }
}

void Retirement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Retirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Retirement::CopyFrom(const Retirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Retirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Retirement::IsInitialized() const {

  return true;
}

void Retirement::Swap(Retirement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Retirement::InternalSwap(Retirement* other) {
  std::swap(source_, other->source_);
  std::swap(data_, other->data_);
  std::swap(ext_hash_, other->ext_hash_);
  std::swap(ordinal_, other->ordinal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Retirement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Retirement_descriptor_;
  metadata.reflection = Retirement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Retirement

// optional .bc.ValueSource source = 1;
bool Retirement::has_source() const {
  return !_is_default_instance_ && source_ != NULL;
}
void Retirement::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
}
const ::bc::ValueSource& Retirement::source() const {
  // @@protoc_insertion_point(field_get:bc.Retirement.source)
  return source_ != NULL ? *source_ : *default_instance_->source_;
}
::bc::ValueSource* Retirement::mutable_source() {
  
  if (source_ == NULL) {
    source_ = new ::bc::ValueSource;
  }
  // @@protoc_insertion_point(field_mutable:bc.Retirement.source)
  return source_;
}
::bc::ValueSource* Retirement::release_source() {
  // @@protoc_insertion_point(field_release:bc.Retirement.source)
  
  ::bc::ValueSource* temp = source_;
  source_ = NULL;
  return temp;
}
void Retirement::set_allocated_source(::bc::ValueSource* source) {
  delete source_;
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Retirement.source)
}

// optional .bc.Hash data = 2;
bool Retirement::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void Retirement::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::bc::Hash& Retirement::data() const {
  // @@protoc_insertion_point(field_get:bc.Retirement.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::bc::Hash* Retirement::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Retirement.data)
  return data_;
}
::bc::Hash* Retirement::release_data() {
  // @@protoc_insertion_point(field_release:bc.Retirement.data)
  
  ::bc::Hash* temp = data_;
  data_ = NULL;
  return temp;
}
void Retirement::set_allocated_data(::bc::Hash* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Retirement.data)
}

// optional .bc.Hash ext_hash = 3;
bool Retirement::has_ext_hash() const {
  return !_is_default_instance_ && ext_hash_ != NULL;
}
void Retirement::clear_ext_hash() {
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
}
const ::bc::Hash& Retirement::ext_hash() const {
  // @@protoc_insertion_point(field_get:bc.Retirement.ext_hash)
  return ext_hash_ != NULL ? *ext_hash_ : *default_instance_->ext_hash_;
}
::bc::Hash* Retirement::mutable_ext_hash() {
  
  if (ext_hash_ == NULL) {
    ext_hash_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Retirement.ext_hash)
  return ext_hash_;
}
::bc::Hash* Retirement::release_ext_hash() {
  // @@protoc_insertion_point(field_release:bc.Retirement.ext_hash)
  
  ::bc::Hash* temp = ext_hash_;
  ext_hash_ = NULL;
  return temp;
}
void Retirement::set_allocated_ext_hash(::bc::Hash* ext_hash) {
  delete ext_hash_;
  ext_hash_ = ext_hash;
  if (ext_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Retirement.ext_hash)
}

// optional uint64 ordinal = 4;
void Retirement::clear_ordinal() {
  ordinal_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Retirement::ordinal() const {
  // @@protoc_insertion_point(field_get:bc.Retirement.ordinal)
  return ordinal_;
}
 void Retirement::set_ordinal(::google::protobuf::uint64 value) {
  
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:bc.Retirement.ordinal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Issuance::kAnchorIdFieldNumber;
const int Issuance::kValueFieldNumber;
const int Issuance::kDataFieldNumber;
const int Issuance::kExtHashFieldNumber;
const int Issuance::kWitnessDestinationFieldNumber;
const int Issuance::kWitnessAssetDefinitionFieldNumber;
const int Issuance::kWitnessArgumentsFieldNumber;
const int Issuance::kWitnessAnchoredIdFieldNumber;
const int Issuance::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Issuance::Issuance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Issuance)
}

void Issuance::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  anchor_id_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  value_ = const_cast< ::bc::AssetAmount*>(&::bc::AssetAmount::default_instance());
  data_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  ext_hash_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  witness_destination_ = const_cast< ::bc::ValueDestination*>(&::bc::ValueDestination::default_instance());
  witness_asset_definition_ = const_cast< ::bc::AssetDefinition*>(&::bc::AssetDefinition::default_instance());
  witness_anchored_id_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
}

Issuance::Issuance(const Issuance& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Issuance)
}

void Issuance::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  anchor_id_ = NULL;
  value_ = NULL;
  data_ = NULL;
  ext_hash_ = NULL;
  witness_destination_ = NULL;
  witness_asset_definition_ = NULL;
  witness_anchored_id_ = NULL;
  ordinal_ = GOOGLE_ULONGLONG(0);
}

Issuance::~Issuance() {
  // @@protoc_insertion_point(destructor:bc.Issuance)
  SharedDtor();
}

void Issuance::SharedDtor() {
  if (this != default_instance_) {
    delete anchor_id_;
    delete value_;
    delete data_;
    delete ext_hash_;
    delete witness_destination_;
    delete witness_asset_definition_;
    delete witness_anchored_id_;
  }
}

void Issuance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Issuance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Issuance_descriptor_;
}

const Issuance& Issuance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Issuance* Issuance::default_instance_ = NULL;

Issuance* Issuance::New(::google::protobuf::Arena* arena) const {
  Issuance* n = new Issuance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Issuance::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Issuance)
  if (GetArenaNoVirtual() == NULL && anchor_id_ != NULL) delete anchor_id_;
  anchor_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
  if (GetArenaNoVirtual() == NULL && witness_destination_ != NULL) delete witness_destination_;
  witness_destination_ = NULL;
  if (GetArenaNoVirtual() == NULL && witness_asset_definition_ != NULL) delete witness_asset_definition_;
  witness_asset_definition_ = NULL;
  if (GetArenaNoVirtual() == NULL && witness_anchored_id_ != NULL) delete witness_anchored_id_;
  witness_anchored_id_ = NULL;
  ordinal_ = GOOGLE_ULONGLONG(0);
  witness_arguments_.Clear();
}

bool Issuance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Issuance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.Hash anchor_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .bc.AssetAmount value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .bc.Hash data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ext_hash;
        break;
      }

      // optional .bc.Hash ext_hash = 4;
      case 4: {
        if (tag == 34) {
         parse_ext_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_witness_destination;
        break;
      }

      // optional .bc.ValueDestination witness_destination = 5;
      case 5: {
        if (tag == 42) {
         parse_witness_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_witness_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_witness_asset_definition;
        break;
      }

      // optional .bc.AssetDefinition witness_asset_definition = 6;
      case 6: {
        if (tag == 50) {
         parse_witness_asset_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_witness_asset_definition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_witness_arguments;
        break;
      }

      // repeated bytes witness_arguments = 7;
      case 7: {
        if (tag == 58) {
         parse_witness_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_witness_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_witness_arguments;
        if (input->ExpectTag(66)) goto parse_witness_anchored_id;
        break;
      }

      // optional .bc.Hash witness_anchored_id = 8;
      case 8: {
        if (tag == 66) {
         parse_witness_anchored_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_witness_anchored_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ordinal;
        break;
      }

      // optional uint64 ordinal = 9;
      case 9: {
        if (tag == 72) {
         parse_ordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ordinal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Issuance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Issuance)
  return false;
#undef DO_
}

void Issuance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Issuance)
  // optional .bc.Hash anchor_id = 1;
  if (this->has_anchor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->anchor_id_, output);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // optional .bc.Hash ext_hash = 4;
  if (this->has_ext_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ext_hash_, output);
  }

  // optional .bc.ValueDestination witness_destination = 5;
  if (this->has_witness_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->witness_destination_, output);
  }

  // optional .bc.AssetDefinition witness_asset_definition = 6;
  if (this->has_witness_asset_definition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->witness_asset_definition_, output);
  }

  // repeated bytes witness_arguments = 7;
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->witness_arguments(i), output);
  }

  // optional .bc.Hash witness_anchored_id = 8;
  if (this->has_witness_anchored_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->witness_anchored_id_, output);
  }

  // optional uint64 ordinal = 9;
  if (this->ordinal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ordinal(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Issuance)
}

::google::protobuf::uint8* Issuance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Issuance)
  // optional .bc.Hash anchor_id = 1;
  if (this->has_anchor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->anchor_id_, false, target);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // optional .bc.Hash ext_hash = 4;
  if (this->has_ext_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ext_hash_, false, target);
  }

  // optional .bc.ValueDestination witness_destination = 5;
  if (this->has_witness_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->witness_destination_, false, target);
  }

  // optional .bc.AssetDefinition witness_asset_definition = 6;
  if (this->has_witness_asset_definition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->witness_asset_definition_, false, target);
  }

  // repeated bytes witness_arguments = 7;
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->witness_arguments(i), target);
  }

  // optional .bc.Hash witness_anchored_id = 8;
  if (this->has_witness_anchored_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->witness_anchored_id_, false, target);
  }

  // optional uint64 ordinal = 9;
  if (this->ordinal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ordinal(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Issuance)
  return target;
}

int Issuance::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Issuance)
  int total_size = 0;

  // optional .bc.Hash anchor_id = 1;
  if (this->has_anchor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->anchor_id_);
  }

  // optional .bc.AssetAmount value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // optional .bc.Hash data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .bc.Hash ext_hash = 4;
  if (this->has_ext_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_hash_);
  }

  // optional .bc.ValueDestination witness_destination = 5;
  if (this->has_witness_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->witness_destination_);
  }

  // optional .bc.AssetDefinition witness_asset_definition = 6;
  if (this->has_witness_asset_definition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->witness_asset_definition_);
  }

  // optional .bc.Hash witness_anchored_id = 8;
  if (this->has_witness_anchored_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->witness_anchored_id_);
  }

  // optional uint64 ordinal = 9;
  if (this->ordinal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ordinal());
  }

  // repeated bytes witness_arguments = 7;
  total_size += 1 * this->witness_arguments_size();
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->witness_arguments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Issuance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Issuance)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Issuance* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Issuance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Issuance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Issuance)
    MergeFrom(*source);
  }
}

void Issuance::MergeFrom(const Issuance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Issuance)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  witness_arguments_.MergeFrom(from.witness_arguments_);
  if (from.has_anchor_id()) {
    mutable_anchor_id()->::bc::Hash::MergeFrom(from.anchor_id());
  }
  if (from.has_value()) {
    mutable_value()->::bc::AssetAmount::MergeFrom(from.value());
  }
  if (from.has_data()) {
    mutable_data()->::bc::Hash::MergeFrom(from.data());
  }
  if (from.has_ext_hash()) {
    mutable_ext_hash()->::bc::Hash::MergeFrom(from.ext_hash());
  }
  if (from.has_witness_destination()) {
    mutable_witness_destination()->::bc::ValueDestination::MergeFrom(from.witness_destination());
  }
  if (from.has_witness_asset_definition()) {
    mutable_witness_asset_definition()->::bc::AssetDefinition::MergeFrom(from.witness_asset_definition());
  }
  if (from.has_witness_anchored_id()) {
    mutable_witness_anchored_id()->::bc::Hash::MergeFrom(from.witness_anchored_id());
  }
  if (from.ordinal() != 0) {
    set_ordinal(from.ordinal());
  }
}

void Issuance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Issuance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Issuance::CopyFrom(const Issuance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Issuance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Issuance::IsInitialized() const {

  return true;
}

void Issuance::Swap(Issuance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Issuance::InternalSwap(Issuance* other) {
  std::swap(anchor_id_, other->anchor_id_);
  std::swap(value_, other->value_);
  std::swap(data_, other->data_);
  std::swap(ext_hash_, other->ext_hash_);
  std::swap(witness_destination_, other->witness_destination_);
  std::swap(witness_asset_definition_, other->witness_asset_definition_);
  witness_arguments_.UnsafeArenaSwap(&other->witness_arguments_);
  std::swap(witness_anchored_id_, other->witness_anchored_id_);
  std::swap(ordinal_, other->ordinal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Issuance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Issuance_descriptor_;
  metadata.reflection = Issuance_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Issuance

// optional .bc.Hash anchor_id = 1;
bool Issuance::has_anchor_id() const {
  return !_is_default_instance_ && anchor_id_ != NULL;
}
void Issuance::clear_anchor_id() {
  if (GetArenaNoVirtual() == NULL && anchor_id_ != NULL) delete anchor_id_;
  anchor_id_ = NULL;
}
const ::bc::Hash& Issuance::anchor_id() const {
  // @@protoc_insertion_point(field_get:bc.Issuance.anchor_id)
  return anchor_id_ != NULL ? *anchor_id_ : *default_instance_->anchor_id_;
}
::bc::Hash* Issuance::mutable_anchor_id() {
  
  if (anchor_id_ == NULL) {
    anchor_id_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Issuance.anchor_id)
  return anchor_id_;
}
::bc::Hash* Issuance::release_anchor_id() {
  // @@protoc_insertion_point(field_release:bc.Issuance.anchor_id)
  
  ::bc::Hash* temp = anchor_id_;
  anchor_id_ = NULL;
  return temp;
}
void Issuance::set_allocated_anchor_id(::bc::Hash* anchor_id) {
  delete anchor_id_;
  anchor_id_ = anchor_id;
  if (anchor_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Issuance.anchor_id)
}

// optional .bc.AssetAmount value = 2;
bool Issuance::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void Issuance::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::bc::AssetAmount& Issuance::value() const {
  // @@protoc_insertion_point(field_get:bc.Issuance.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::bc::AssetAmount* Issuance::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::bc::AssetAmount;
  }
  // @@protoc_insertion_point(field_mutable:bc.Issuance.value)
  return value_;
}
::bc::AssetAmount* Issuance::release_value() {
  // @@protoc_insertion_point(field_release:bc.Issuance.value)
  
  ::bc::AssetAmount* temp = value_;
  value_ = NULL;
  return temp;
}
void Issuance::set_allocated_value(::bc::AssetAmount* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Issuance.value)
}

// optional .bc.Hash data = 3;
bool Issuance::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void Issuance::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::bc::Hash& Issuance::data() const {
  // @@protoc_insertion_point(field_get:bc.Issuance.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::bc::Hash* Issuance::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Issuance.data)
  return data_;
}
::bc::Hash* Issuance::release_data() {
  // @@protoc_insertion_point(field_release:bc.Issuance.data)
  
  ::bc::Hash* temp = data_;
  data_ = NULL;
  return temp;
}
void Issuance::set_allocated_data(::bc::Hash* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Issuance.data)
}

// optional .bc.Hash ext_hash = 4;
bool Issuance::has_ext_hash() const {
  return !_is_default_instance_ && ext_hash_ != NULL;
}
void Issuance::clear_ext_hash() {
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
}
const ::bc::Hash& Issuance::ext_hash() const {
  // @@protoc_insertion_point(field_get:bc.Issuance.ext_hash)
  return ext_hash_ != NULL ? *ext_hash_ : *default_instance_->ext_hash_;
}
::bc::Hash* Issuance::mutable_ext_hash() {
  
  if (ext_hash_ == NULL) {
    ext_hash_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Issuance.ext_hash)
  return ext_hash_;
}
::bc::Hash* Issuance::release_ext_hash() {
  // @@protoc_insertion_point(field_release:bc.Issuance.ext_hash)
  
  ::bc::Hash* temp = ext_hash_;
  ext_hash_ = NULL;
  return temp;
}
void Issuance::set_allocated_ext_hash(::bc::Hash* ext_hash) {
  delete ext_hash_;
  ext_hash_ = ext_hash;
  if (ext_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Issuance.ext_hash)
}

// optional .bc.ValueDestination witness_destination = 5;
bool Issuance::has_witness_destination() const {
  return !_is_default_instance_ && witness_destination_ != NULL;
}
void Issuance::clear_witness_destination() {
  if (GetArenaNoVirtual() == NULL && witness_destination_ != NULL) delete witness_destination_;
  witness_destination_ = NULL;
}
const ::bc::ValueDestination& Issuance::witness_destination() const {
  // @@protoc_insertion_point(field_get:bc.Issuance.witness_destination)
  return witness_destination_ != NULL ? *witness_destination_ : *default_instance_->witness_destination_;
}
::bc::ValueDestination* Issuance::mutable_witness_destination() {
  
  if (witness_destination_ == NULL) {
    witness_destination_ = new ::bc::ValueDestination;
  }
  // @@protoc_insertion_point(field_mutable:bc.Issuance.witness_destination)
  return witness_destination_;
}
::bc::ValueDestination* Issuance::release_witness_destination() {
  // @@protoc_insertion_point(field_release:bc.Issuance.witness_destination)
  
  ::bc::ValueDestination* temp = witness_destination_;
  witness_destination_ = NULL;
  return temp;
}
void Issuance::set_allocated_witness_destination(::bc::ValueDestination* witness_destination) {
  delete witness_destination_;
  witness_destination_ = witness_destination;
  if (witness_destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Issuance.witness_destination)
}

// optional .bc.AssetDefinition witness_asset_definition = 6;
bool Issuance::has_witness_asset_definition() const {
  return !_is_default_instance_ && witness_asset_definition_ != NULL;
}
void Issuance::clear_witness_asset_definition() {
  if (GetArenaNoVirtual() == NULL && witness_asset_definition_ != NULL) delete witness_asset_definition_;
  witness_asset_definition_ = NULL;
}
const ::bc::AssetDefinition& Issuance::witness_asset_definition() const {
  // @@protoc_insertion_point(field_get:bc.Issuance.witness_asset_definition)
  return witness_asset_definition_ != NULL ? *witness_asset_definition_ : *default_instance_->witness_asset_definition_;
}
::bc::AssetDefinition* Issuance::mutable_witness_asset_definition() {
  
  if (witness_asset_definition_ == NULL) {
    witness_asset_definition_ = new ::bc::AssetDefinition;
  }
  // @@protoc_insertion_point(field_mutable:bc.Issuance.witness_asset_definition)
  return witness_asset_definition_;
}
::bc::AssetDefinition* Issuance::release_witness_asset_definition() {
  // @@protoc_insertion_point(field_release:bc.Issuance.witness_asset_definition)
  
  ::bc::AssetDefinition* temp = witness_asset_definition_;
  witness_asset_definition_ = NULL;
  return temp;
}
void Issuance::set_allocated_witness_asset_definition(::bc::AssetDefinition* witness_asset_definition) {
  delete witness_asset_definition_;
  witness_asset_definition_ = witness_asset_definition;
  if (witness_asset_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Issuance.witness_asset_definition)
}

// repeated bytes witness_arguments = 7;
int Issuance::witness_arguments_size() const {
  return witness_arguments_.size();
}
void Issuance::clear_witness_arguments() {
  witness_arguments_.Clear();
}
 const ::std::string& Issuance::witness_arguments(int index) const {
  // @@protoc_insertion_point(field_get:bc.Issuance.witness_arguments)
  return witness_arguments_.Get(index);
}
 ::std::string* Issuance::mutable_witness_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:bc.Issuance.witness_arguments)
  return witness_arguments_.Mutable(index);
}
 void Issuance::set_witness_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bc.Issuance.witness_arguments)
  witness_arguments_.Mutable(index)->assign(value);
}
 void Issuance::set_witness_arguments(int index, const char* value) {
  witness_arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bc.Issuance.witness_arguments)
}
 void Issuance::set_witness_arguments(int index, const void* value, size_t size) {
  witness_arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bc.Issuance.witness_arguments)
}
 ::std::string* Issuance::add_witness_arguments() {
  // @@protoc_insertion_point(field_add_mutable:bc.Issuance.witness_arguments)
  return witness_arguments_.Add();
}
 void Issuance::add_witness_arguments(const ::std::string& value) {
  witness_arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bc.Issuance.witness_arguments)
}
 void Issuance::add_witness_arguments(const char* value) {
  witness_arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bc.Issuance.witness_arguments)
}
 void Issuance::add_witness_arguments(const void* value, size_t size) {
  witness_arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bc.Issuance.witness_arguments)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Issuance::witness_arguments() const {
  // @@protoc_insertion_point(field_list:bc.Issuance.witness_arguments)
  return witness_arguments_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Issuance::mutable_witness_arguments() {
  // @@protoc_insertion_point(field_mutable_list:bc.Issuance.witness_arguments)
  return &witness_arguments_;
}

// optional .bc.Hash witness_anchored_id = 8;
bool Issuance::has_witness_anchored_id() const {
  return !_is_default_instance_ && witness_anchored_id_ != NULL;
}
void Issuance::clear_witness_anchored_id() {
  if (GetArenaNoVirtual() == NULL && witness_anchored_id_ != NULL) delete witness_anchored_id_;
  witness_anchored_id_ = NULL;
}
const ::bc::Hash& Issuance::witness_anchored_id() const {
  // @@protoc_insertion_point(field_get:bc.Issuance.witness_anchored_id)
  return witness_anchored_id_ != NULL ? *witness_anchored_id_ : *default_instance_->witness_anchored_id_;
}
::bc::Hash* Issuance::mutable_witness_anchored_id() {
  
  if (witness_anchored_id_ == NULL) {
    witness_anchored_id_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Issuance.witness_anchored_id)
  return witness_anchored_id_;
}
::bc::Hash* Issuance::release_witness_anchored_id() {
  // @@protoc_insertion_point(field_release:bc.Issuance.witness_anchored_id)
  
  ::bc::Hash* temp = witness_anchored_id_;
  witness_anchored_id_ = NULL;
  return temp;
}
void Issuance::set_allocated_witness_anchored_id(::bc::Hash* witness_anchored_id) {
  delete witness_anchored_id_;
  witness_anchored_id_ = witness_anchored_id;
  if (witness_anchored_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Issuance.witness_anchored_id)
}

// optional uint64 ordinal = 9;
void Issuance::clear_ordinal() {
  ordinal_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Issuance::ordinal() const {
  // @@protoc_insertion_point(field_get:bc.Issuance.ordinal)
  return ordinal_;
}
 void Issuance::set_ordinal(::google::protobuf::uint64 value) {
  
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:bc.Issuance.ordinal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Spend::kSpentOutputIdFieldNumber;
const int Spend::kDataFieldNumber;
const int Spend::kExtHashFieldNumber;
const int Spend::kWitnessDestinationFieldNumber;
const int Spend::kWitnessArgumentsFieldNumber;
const int Spend::kWitnessAnchoredIdFieldNumber;
const int Spend::kOrdinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Spend::Spend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bc.Spend)
}

void Spend::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  spent_output_id_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  data_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  ext_hash_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
  witness_destination_ = const_cast< ::bc::ValueDestination*>(&::bc::ValueDestination::default_instance());
  witness_anchored_id_ = const_cast< ::bc::Hash*>(&::bc::Hash::default_instance());
}

Spend::Spend(const Spend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bc.Spend)
}

void Spend::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  spent_output_id_ = NULL;
  data_ = NULL;
  ext_hash_ = NULL;
  witness_destination_ = NULL;
  witness_anchored_id_ = NULL;
  ordinal_ = GOOGLE_ULONGLONG(0);
}

Spend::~Spend() {
  // @@protoc_insertion_point(destructor:bc.Spend)
  SharedDtor();
}

void Spend::SharedDtor() {
  if (this != default_instance_) {
    delete spent_output_id_;
    delete data_;
    delete ext_hash_;
    delete witness_destination_;
    delete witness_anchored_id_;
  }
}

void Spend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spend_descriptor_;
}

const Spend& Spend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_2eproto();
  return *default_instance_;
}

Spend* Spend::default_instance_ = NULL;

Spend* Spend::New(::google::protobuf::Arena* arena) const {
  Spend* n = new Spend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Spend::Clear() {
// @@protoc_insertion_point(message_clear_start:bc.Spend)
  if (GetArenaNoVirtual() == NULL && spent_output_id_ != NULL) delete spent_output_id_;
  spent_output_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
  if (GetArenaNoVirtual() == NULL && witness_destination_ != NULL) delete witness_destination_;
  witness_destination_ = NULL;
  if (GetArenaNoVirtual() == NULL && witness_anchored_id_ != NULL) delete witness_anchored_id_;
  witness_anchored_id_ = NULL;
  ordinal_ = GOOGLE_ULONGLONG(0);
  witness_arguments_.Clear();
}

bool Spend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bc.Spend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bc.Hash spent_output_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spent_output_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .bc.Hash data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ext_hash;
        break;
      }

      // optional .bc.Hash ext_hash = 3;
      case 3: {
        if (tag == 26) {
         parse_ext_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_witness_destination;
        break;
      }

      // optional .bc.ValueDestination witness_destination = 4;
      case 4: {
        if (tag == 34) {
         parse_witness_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_witness_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_witness_arguments;
        break;
      }

      // repeated bytes witness_arguments = 5;
      case 5: {
        if (tag == 42) {
         parse_witness_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_witness_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_witness_arguments;
        if (input->ExpectTag(50)) goto parse_witness_anchored_id;
        break;
      }

      // optional .bc.Hash witness_anchored_id = 6;
      case 6: {
        if (tag == 50) {
         parse_witness_anchored_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_witness_anchored_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ordinal;
        break;
      }

      // optional uint64 ordinal = 7;
      case 7: {
        if (tag == 56) {
         parse_ordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ordinal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bc.Spend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bc.Spend)
  return false;
#undef DO_
}

void Spend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bc.Spend)
  // optional .bc.Hash spent_output_id = 1;
  if (this->has_spent_output_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->spent_output_id_, output);
  }

  // optional .bc.Hash data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ext_hash_, output);
  }

  // optional .bc.ValueDestination witness_destination = 4;
  if (this->has_witness_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->witness_destination_, output);
  }

  // repeated bytes witness_arguments = 5;
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->witness_arguments(i), output);
  }

  // optional .bc.Hash witness_anchored_id = 6;
  if (this->has_witness_anchored_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->witness_anchored_id_, output);
  }

  // optional uint64 ordinal = 7;
  if (this->ordinal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->ordinal(), output);
  }

  // @@protoc_insertion_point(serialize_end:bc.Spend)
}

::google::protobuf::uint8* Spend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bc.Spend)
  // optional .bc.Hash spent_output_id = 1;
  if (this->has_spent_output_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->spent_output_id_, false, target);
  }

  // optional .bc.Hash data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ext_hash_, false, target);
  }

  // optional .bc.ValueDestination witness_destination = 4;
  if (this->has_witness_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->witness_destination_, false, target);
  }

  // repeated bytes witness_arguments = 5;
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->witness_arguments(i), target);
  }

  // optional .bc.Hash witness_anchored_id = 6;
  if (this->has_witness_anchored_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->witness_anchored_id_, false, target);
  }

  // optional uint64 ordinal = 7;
  if (this->ordinal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->ordinal(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bc.Spend)
  return target;
}

int Spend::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bc.Spend)
  int total_size = 0;

  // optional .bc.Hash spent_output_id = 1;
  if (this->has_spent_output_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->spent_output_id_);
  }

  // optional .bc.Hash data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .bc.Hash ext_hash = 3;
  if (this->has_ext_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_hash_);
  }

  // optional .bc.ValueDestination witness_destination = 4;
  if (this->has_witness_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->witness_destination_);
  }

  // optional .bc.Hash witness_anchored_id = 6;
  if (this->has_witness_anchored_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->witness_anchored_id_);
  }

  // optional uint64 ordinal = 7;
  if (this->ordinal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ordinal());
  }

  // repeated bytes witness_arguments = 5;
  total_size += 1 * this->witness_arguments_size();
  for (int i = 0; i < this->witness_arguments_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->witness_arguments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bc.Spend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Spend* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Spend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bc.Spend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bc.Spend)
    MergeFrom(*source);
  }
}

void Spend::MergeFrom(const Spend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bc.Spend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  witness_arguments_.MergeFrom(from.witness_arguments_);
  if (from.has_spent_output_id()) {
    mutable_spent_output_id()->::bc::Hash::MergeFrom(from.spent_output_id());
  }
  if (from.has_data()) {
    mutable_data()->::bc::Hash::MergeFrom(from.data());
  }
  if (from.has_ext_hash()) {
    mutable_ext_hash()->::bc::Hash::MergeFrom(from.ext_hash());
  }
  if (from.has_witness_destination()) {
    mutable_witness_destination()->::bc::ValueDestination::MergeFrom(from.witness_destination());
  }
  if (from.has_witness_anchored_id()) {
    mutable_witness_anchored_id()->::bc::Hash::MergeFrom(from.witness_anchored_id());
  }
  if (from.ordinal() != 0) {
    set_ordinal(from.ordinal());
  }
}

void Spend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bc.Spend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spend::CopyFrom(const Spend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bc.Spend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spend::IsInitialized() const {

  return true;
}

void Spend::Swap(Spend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Spend::InternalSwap(Spend* other) {
  std::swap(spent_output_id_, other->spent_output_id_);
  std::swap(data_, other->data_);
  std::swap(ext_hash_, other->ext_hash_);
  std::swap(witness_destination_, other->witness_destination_);
  witness_arguments_.UnsafeArenaSwap(&other->witness_arguments_);
  std::swap(witness_anchored_id_, other->witness_anchored_id_);
  std::swap(ordinal_, other->ordinal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Spend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spend_descriptor_;
  metadata.reflection = Spend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Spend

// optional .bc.Hash spent_output_id = 1;
bool Spend::has_spent_output_id() const {
  return !_is_default_instance_ && spent_output_id_ != NULL;
}
void Spend::clear_spent_output_id() {
  if (GetArenaNoVirtual() == NULL && spent_output_id_ != NULL) delete spent_output_id_;
  spent_output_id_ = NULL;
}
const ::bc::Hash& Spend::spent_output_id() const {
  // @@protoc_insertion_point(field_get:bc.Spend.spent_output_id)
  return spent_output_id_ != NULL ? *spent_output_id_ : *default_instance_->spent_output_id_;
}
::bc::Hash* Spend::mutable_spent_output_id() {
  
  if (spent_output_id_ == NULL) {
    spent_output_id_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Spend.spent_output_id)
  return spent_output_id_;
}
::bc::Hash* Spend::release_spent_output_id() {
  // @@protoc_insertion_point(field_release:bc.Spend.spent_output_id)
  
  ::bc::Hash* temp = spent_output_id_;
  spent_output_id_ = NULL;
  return temp;
}
void Spend::set_allocated_spent_output_id(::bc::Hash* spent_output_id) {
  delete spent_output_id_;
  spent_output_id_ = spent_output_id;
  if (spent_output_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Spend.spent_output_id)
}

// optional .bc.Hash data = 2;
bool Spend::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void Spend::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::bc::Hash& Spend::data() const {
  // @@protoc_insertion_point(field_get:bc.Spend.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::bc::Hash* Spend::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Spend.data)
  return data_;
}
::bc::Hash* Spend::release_data() {
  // @@protoc_insertion_point(field_release:bc.Spend.data)
  
  ::bc::Hash* temp = data_;
  data_ = NULL;
  return temp;
}
void Spend::set_allocated_data(::bc::Hash* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Spend.data)
}

// optional .bc.Hash ext_hash = 3;
bool Spend::has_ext_hash() const {
  return !_is_default_instance_ && ext_hash_ != NULL;
}
void Spend::clear_ext_hash() {
  if (GetArenaNoVirtual() == NULL && ext_hash_ != NULL) delete ext_hash_;
  ext_hash_ = NULL;
}
const ::bc::Hash& Spend::ext_hash() const {
  // @@protoc_insertion_point(field_get:bc.Spend.ext_hash)
  return ext_hash_ != NULL ? *ext_hash_ : *default_instance_->ext_hash_;
}
::bc::Hash* Spend::mutable_ext_hash() {
  
  if (ext_hash_ == NULL) {
    ext_hash_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Spend.ext_hash)
  return ext_hash_;
}
::bc::Hash* Spend::release_ext_hash() {
  // @@protoc_insertion_point(field_release:bc.Spend.ext_hash)
  
  ::bc::Hash* temp = ext_hash_;
  ext_hash_ = NULL;
  return temp;
}
void Spend::set_allocated_ext_hash(::bc::Hash* ext_hash) {
  delete ext_hash_;
  ext_hash_ = ext_hash;
  if (ext_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Spend.ext_hash)
}

// optional .bc.ValueDestination witness_destination = 4;
bool Spend::has_witness_destination() const {
  return !_is_default_instance_ && witness_destination_ != NULL;
}
void Spend::clear_witness_destination() {
  if (GetArenaNoVirtual() == NULL && witness_destination_ != NULL) delete witness_destination_;
  witness_destination_ = NULL;
}
const ::bc::ValueDestination& Spend::witness_destination() const {
  // @@protoc_insertion_point(field_get:bc.Spend.witness_destination)
  return witness_destination_ != NULL ? *witness_destination_ : *default_instance_->witness_destination_;
}
::bc::ValueDestination* Spend::mutable_witness_destination() {
  
  if (witness_destination_ == NULL) {
    witness_destination_ = new ::bc::ValueDestination;
  }
  // @@protoc_insertion_point(field_mutable:bc.Spend.witness_destination)
  return witness_destination_;
}
::bc::ValueDestination* Spend::release_witness_destination() {
  // @@protoc_insertion_point(field_release:bc.Spend.witness_destination)
  
  ::bc::ValueDestination* temp = witness_destination_;
  witness_destination_ = NULL;
  return temp;
}
void Spend::set_allocated_witness_destination(::bc::ValueDestination* witness_destination) {
  delete witness_destination_;
  witness_destination_ = witness_destination;
  if (witness_destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Spend.witness_destination)
}

// repeated bytes witness_arguments = 5;
int Spend::witness_arguments_size() const {
  return witness_arguments_.size();
}
void Spend::clear_witness_arguments() {
  witness_arguments_.Clear();
}
 const ::std::string& Spend::witness_arguments(int index) const {
  // @@protoc_insertion_point(field_get:bc.Spend.witness_arguments)
  return witness_arguments_.Get(index);
}
 ::std::string* Spend::mutable_witness_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:bc.Spend.witness_arguments)
  return witness_arguments_.Mutable(index);
}
 void Spend::set_witness_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bc.Spend.witness_arguments)
  witness_arguments_.Mutable(index)->assign(value);
}
 void Spend::set_witness_arguments(int index, const char* value) {
  witness_arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bc.Spend.witness_arguments)
}
 void Spend::set_witness_arguments(int index, const void* value, size_t size) {
  witness_arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bc.Spend.witness_arguments)
}
 ::std::string* Spend::add_witness_arguments() {
  // @@protoc_insertion_point(field_add_mutable:bc.Spend.witness_arguments)
  return witness_arguments_.Add();
}
 void Spend::add_witness_arguments(const ::std::string& value) {
  witness_arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bc.Spend.witness_arguments)
}
 void Spend::add_witness_arguments(const char* value) {
  witness_arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bc.Spend.witness_arguments)
}
 void Spend::add_witness_arguments(const void* value, size_t size) {
  witness_arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bc.Spend.witness_arguments)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Spend::witness_arguments() const {
  // @@protoc_insertion_point(field_list:bc.Spend.witness_arguments)
  return witness_arguments_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Spend::mutable_witness_arguments() {
  // @@protoc_insertion_point(field_mutable_list:bc.Spend.witness_arguments)
  return &witness_arguments_;
}

// optional .bc.Hash witness_anchored_id = 6;
bool Spend::has_witness_anchored_id() const {
  return !_is_default_instance_ && witness_anchored_id_ != NULL;
}
void Spend::clear_witness_anchored_id() {
  if (GetArenaNoVirtual() == NULL && witness_anchored_id_ != NULL) delete witness_anchored_id_;
  witness_anchored_id_ = NULL;
}
const ::bc::Hash& Spend::witness_anchored_id() const {
  // @@protoc_insertion_point(field_get:bc.Spend.witness_anchored_id)
  return witness_anchored_id_ != NULL ? *witness_anchored_id_ : *default_instance_->witness_anchored_id_;
}
::bc::Hash* Spend::mutable_witness_anchored_id() {
  
  if (witness_anchored_id_ == NULL) {
    witness_anchored_id_ = new ::bc::Hash;
  }
  // @@protoc_insertion_point(field_mutable:bc.Spend.witness_anchored_id)
  return witness_anchored_id_;
}
::bc::Hash* Spend::release_witness_anchored_id() {
  // @@protoc_insertion_point(field_release:bc.Spend.witness_anchored_id)
  
  ::bc::Hash* temp = witness_anchored_id_;
  witness_anchored_id_ = NULL;
  return temp;
}
void Spend::set_allocated_witness_anchored_id(::bc::Hash* witness_anchored_id) {
  delete witness_anchored_id_;
  witness_anchored_id_ = witness_anchored_id;
  if (witness_anchored_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bc.Spend.witness_anchored_id)
}

// optional uint64 ordinal = 7;
void Spend::clear_ordinal() {
  ordinal_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Spend::ordinal() const {
  // @@protoc_insertion_point(field_get:bc.Spend.ordinal)
  return ordinal_;
}
 void Spend::set_ordinal(::google::protobuf::uint64 value) {
  
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:bc.Spend.ordinal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bc

// @@protoc_insertion_point(global_scope)
