cscope 15 $HOME/work/pingping.wu/github/chain/miner               0000987968
	@A1-board-selector.h

1 #i‚de‡
A1_BOARD_SELECTOR_H


2 
	#A1_BOARD_SELECTOR_H


	)

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

7 
	#RESET_LOW_TIME_MS
 200

	)

8 
	#RESET_HI_TIME_MS
 100

	)

10 
	sbﬂrd_£À˘‹
 {

12 (*
	mexô
)();

14 
boﬁ
 (*
£À˘
)(
uöt8_t
 
	mchaö
);

16 (*
	mªÀa£
)();

18 
boﬁ
 (*
ª£t
)();

20 
boﬁ
 (*
ª£t_Æl
)();

22 
uöt8_t
 (*
gë_ãmp
)(uöt8_à
	m£ns‹
);

24 
boﬁ
 (*
¥ï¨e_˛ock
)(
	m˛ock_khz
);

27 
boﬁ
 
	$dummy_£À˘
(
uöt8_t
 
b
Ë{ ()b;  
åue
; 
	}
}

28 
	$dummy_void
(Ë{ 
	}
};

29 
boﬁ
 
	$dummy_boﬁ
(Ë{  
åue
; 
	}
}

31 
uöt8_t
 
	$dummy_gë_ãmp
(
uöt8_t
 
s
Ë{ ()s;  0; 
	}
}

32 
boﬁ
 
	$dummy_¥ï¨e_˛ock
(
c
Ë{ ()c;  
åue
; 
	}
}

34 c⁄° 
bﬂrd_£À˘‹
 
	gdummy_bﬂrd_£À˘‹
 = {

35 .
exô
 = 
dummy_void
,

36 .
	g£À˘
 = 
dummy_£À˘
,

37 .
	gªÀa£
 = 
dummy_void
,

38 .
	gª£t
 = 
dummy_boﬁ
,

39 .
	gª£t_Æl
 = 
dummy_boﬁ
,

40 .
	ggë_ãmp
 = 
dummy_gë_ãmp
,

41 .
	g¥ï¨e_˛ock
 = 
dummy_¥ï¨e_˛ock
,

45 
	#CCD_MAX_CHAINS
 5

	)

46 
	#CCR_MAX_CHAINS
 16

	)

47 
bﬂrd_£À˘‹
 *
ccd_bﬂrd_£À˘‹_öô
();

48 
bﬂrd_£À˘‹
 *
c¸_bﬂrd_£À˘‹_öô
();

	@A1-common.h

1 #i‚de‡
A1_COMMON_H


2 
	#A1_COMMON_H


	)

4 
	~<°ddef.h
>

5 
	~<°dboﬁ.h
>

6 
	~<°döt.h
>

9 
	sw‹k_ít
 {

10 
w‹k
 *
	mw‹k
;

11 
li°_hód
 
	mhód
;

14 
	sw‹k_queue
 {

15 
	mnum_ñems
;

16 
li°_hód
 
	mhód
;

21 
	#WRITE_JOB_LENGTH
 58

	)

22 
	#MAX_CHAIN_LENGTH
 64

	)

29 
	#MAX_CMD_LENGTH
 (
WRITE_JOB_LENGTH
 + 
MAX_CHAIN_LENGTH
 * 2 * 2)

	)

31 
	sA1_chù
 {

32 
	mnum_c‹es
;

33 
	mœ°_queued_id
;

34 
w‹k
 *
	mw‹k
[4];

36 
	mhw_îr‹s
;

37 
	m°Æes
;

38 
	mn⁄˚s_found
;

39 
	mn⁄˚_ønges_d⁄e
;

42 
	mcoﬁdown_begö
;

44 
	mÁû_cou¡
;

46 
boﬁ
 
	mdißbÀd
;

49 
	sA1_chaö
 {

50 
	mchaö_id
;

51 
cgpu_öfo
 *
	mcgpu
;

52 
m˝4x
 *
	måimpŸ
;

53 
	mnum_chùs
;

54 
	mnum_c‹es
;

55 
	mnum_a˘ive_chùs
;

56 
	mchaö_skew
;

57 
uöt8_t
 
	m•i_tx
[
MAX_CMD_LENGTH
];

58 
uöt8_t
 
	m•i_rx
[
MAX_CMD_LENGTH
];

59 
•i_˘x
 *
	m•i_˘x
;

60 
A1_chù
 *
	mchùs
;

61 
±hªad_muãx_t
 
	mlock
;

63 
w‹k_queue
 
	ma˘ive_wq
;

66 
boﬁ
 
	mdißbÀd
;

67 
uöt8_t
 
	mãmp
;

68 
	mœ°_ãmp_time
;

71 
	#MAX_CHAINS_PER_BOARD
 2

	)

72 
	sA1_bﬂrd
 {

73 
	mbﬂrd_id
;

74 
	mnum_chaös
;

75 
A1_chaö
 *
	mchaö
[
MAX_CHAINS_PER_BOARD
];

79 
	sA1_c⁄fig_›ti⁄s
 {

80 
	mªf_˛k_khz
;

81 
	msys_˛k_khz
;

82 
	m•i_˛k_khz
;

84 
	movîride_chù_num
;

85 
	mwùî
;

89 
A1_c⁄fig_›ti⁄s
 A1_config_options;

	@A1-trimpot-mcp4x.h

1 #i‚de‡
TRIMPOT_MPC4X_H


2 
	#TRIMPOT_MPC4X_H


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

8 
	sm˝4x
 {

9 
uöt16_t
 (*
gë_wùî
)(
m˝4x
 *
	mme
, 
uöt8_t
 
	mid
);

10 
boﬁ
 (*
£t_wùî
)(
m˝4x
 *
	mme
, 
uöt8_t
 
	mid
, 
uöt16_t
 
	mw
);

11 (*
	mexô
)(
m˝4x
 *
	mme
);

12 
uöt8_t
 
	maddr
;

13 
	mfûe
;

17 
m˝4x
 *
m˝4x_öô
(
uöt8_t
 
addr
);

	@api-btm.c

10 
	#_MEMORY_DEBUG_MASTER
 1

	)

12 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<˘y≥.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<°dboﬁ.h
>

19 
	~<°döt.h
>

20 
	~<uni°d.h
>

21 
	~<limôs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~"com∑t.h
"

25 
	~"möî.h
"

26 
	~"utû.h
"

27 
	~"kli°.h
"

29 #i‡
deföed
(
USE_BFLSC
Ë|| deföed(
USE_AVALON
Ë|| deföed(
USE_AVALON2
Ë|| deföed(
USE_AVALON4
) || \

30 
deföed
(
USE_HASHFAST
Ë|| deföed(
USE_BITFURY
Ë|| deföed(
USE_BLOCKERUPTER
Ë|| deföed(
USE_KLONDIKE
) || \

31 
deföed
(
USE_KNC
Ë|| deföed(
USE_BAB
Ë|| deföed(
USE_DRILLBIT
) || \

32 
deföed
(
USE_MINION
Ë|| deföed(
USE_COINTERRA
Ë|| deföed(
USE_BITMINE_A1
) || \

33 
deföed
(
USE_BMSC
Ë|| deföed(
USE_BITMAIN
Ë|| deföed(
USE_SP10
Ë|| deföed(
USE_SP30
) || \

34 
deföed
(
USE_ICARUS
Ë|| 
	$deföed
(
USE_HASHRATIO
)

35 
	#HAVE_AN_ASIC
 1

	)

38 #i‡
	`deföed
(
USE_BITFORCE
Ë|| deföed(
USE_MODMINER
)

39 
	#HAVE_AN_FPGA
 1

	)

43 
	#TMPBUFSIZ
 8192

	)

47 
	#QUEUE
 100

	)

49 #i‡
deföed
 
WIN32


50 
WSAbuf
[1024];

52 
	sWSAERRORS


54 
id
;

55 *
code
;

56 } 
WSAEº‹s
[] =

59 { 
WSAEINTR
, "Interrupted system call" },

60 { 
WSAEBADF
, "Bad fileÇumber" },

61 { 
WSAEACCES
, "Permission denied" },

62 { 
WSAEFAULT
, "Badáddress" },

63 { 
WSAEINVAL
, "Invalidárgument" },

64 { 
WSAEMFILE
, "Too many open sockets" },

65 { 
WSAEWOULDBLOCK
, "Operation would block" },

66 { 
WSAEINPROGRESS
, "OperationÇow inÖrogress" },

67 { 
WSAEALREADY
, "Operationálready inÖrogress" },

68 { 
WSAENOTSOCK
, "Socket operation onÇon-socket" },

69 { 
WSAEDESTADDRREQ
, "DestinationáddressÑequired" },

70 { 
WSAEMSGSIZE
, "MessageÅooÜong" },

71 { 
WSAEPROTOTYPE
, "Protocol wrongÅype for socket" },

72 { 
WSAENOPROTOOPT
, "BadÖrotocol option" },

73 { 
WSAEPROTONOSUPPORT
, "ProtocolÇot supported" },

74 { 
WSAESOCKTNOSUPPORT
, "SocketÅypeÇot supported" },

75 { 
WSAEOPNOTSUPP
, "OperationÇot supported on socket" },

76 { 
WSAEPFNOSUPPORT
, "Protocol familyÇot supported" },

77 { 
WSAEAFNOSUPPORT
, "Address familyÇot supported" },

78 { 
WSAEADDRINUSE
, "Addressálready in use" },

79 { 
WSAEADDRNOTAVAIL
, "Can'tássignÑequestedáddress" },

80 { 
WSAENETDOWN
, "Network is down" },

81 { 
WSAENETUNREACH
, "Network is unreachable" },

82 { 
WSAENETRESET
, "Net connectionÑeset" },

83 { 
WSAECONNABORTED
, "Software caused connectionábort" },

84 { 
WSAECONNRESET
, "ConnectionÑeset byÖeer" },

85 { 
WSAENOBUFS
, "No buffer spaceávailable" },

86 { 
WSAEISCONN
, "Socket isálready connected" },

87 { 
WSAENOTCONN
, "Socket isÇot connected" },

88 { 
WSAESHUTDOWN
, "Can't sendáfter socket shutdown" },

89 { 
WSAETOOMANYREFS
, "Too manyÑeferences, can't splice" },

90 { 
WSAETIMEDOUT
, "ConnectionÅimed out" },

91 { 
WSAECONNREFUSED
, "ConnectionÑefused" },

92 { 
WSAELOOP
, "Too manyÜevels of symbolicÜinks" },

93 { 
WSAENAMETOOLONG
, "FileÇameÅooÜong" },

94 { 
WSAEHOSTDOWN
, "Host is down" },

95 { 
WSAEHOSTUNREACH
, "NoÑouteÅo host" },

96 { 
WSAENOTEMPTY
, "DirectoryÇotÉmpty" },

97 { 
WSAEPROCLIM
, "Too manyÖrocesses" },

98 { 
WSAEUSERS
, "Too many users" },

99 { 
WSAEDQUOT
, "Disc quotaÉxceeded" },

100 { 
WSAESTALE
, "Stale NFS file handle" },

101 { 
WSAEREMOTE
, "Too manyÜevels ofÑemote inÖath" },

102 { 
WSASYSNOTREADY
, "Network system is unavailable" },

103 { 
WSAVERNOTSUPPORTED
, "Winsock version out ofÑange" },

104 { 
WSANOTINITIALISED
, "WSAStartupÇot yet called" },

105 { 
WSAEDISCON
, "Graceful shutdown inÖrogress" },

106 { 
WSAHOST_NOT_FOUND
, "HostÇot found" },

107 { 
WSANO_DATA
, "No host data ofÅhatÅype was found" },

109 
	}
};

111 *
	$WSAEº‹Msg
()

113 
i
;

114 
id
 = 
	`WSAGëLa°Eº‹
();

117 
i
 = 0; 
WSAEº‹s
[i].
id
 != -1; i++)

118 i‡(
WSAEº‹s
[
i
].
id
 == id)

121 
	`•rötf
(
WSAbuf
, "Sockë Eº‹: (%dË%s", 
id
, 
WSAEº‹s
[
i
].
code
);

123  &(
WSAbuf
[0]);

124 
	}
}

127 #i‡
deföed
(
__APPLE__
)

128 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

129 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

132 c⁄° *
	gUNAVAILABLE
 = " - API willÇot beávailable";

133 c⁄° *
	gMUNAVAILABLE
 = " - API multicastÜistener willÇot beávailable";

135 c⁄° *
	gBLANK
 = "";

136 c⁄° *
	gCOMMA
 = ",";

137 
	#COMSTR
 ","

	)

138 c⁄° 
	gSEPARATOR
 = '|';

139 
	#SEPSTR
 "|"

	)

140 
	#CMDJOIN
 '+'

	)

141 
	#JOIN_CMD
 "CMD="

	)

142 
	#BETWEEN_JOIN
 
SEPSTR


	)

144 c⁄° *
	gAPIVERSION
 = "3.1";

145 c⁄° *
	gDEAD
 = "Dead";

146 c⁄° *
	gSICK
 = "Sick";

147 c⁄° *
	gNOSTART
 = "NoStart";

148 c⁄° *
	gINIT
 = "Initialising";

149 c⁄° *
	gDISABLED
 = "Disabled";

150 c⁄° *
	gALIVE
 = "Alive";

151 c⁄° *
	gREJECTING
 = "Rejecting";

152 c⁄° *
	gUNKNOWN
 = "Unknown";

154 
__maybe_unu£d
 c⁄° *
	gNONE
 = "None";

156 c⁄° *
	gYES
 = "Y";

157 c⁄° *
	gNO
 = "N";

158 c⁄° *
	gNULLSTR
 = "(null)";

160 c⁄° *
	gTRUESTR
 = "true";

161 c⁄° *
	gFALSESTR
 = "false";

163 c⁄° *
	gSHA256STR
 = "sha256";

165 c⁄° *
	gDEVICECODE
 = ""

166 #ifde‡
USE_BMSC


169 #ifde‡
USE_BITMAIN


172 #ifde‡
USE_AVALON


175 #ifde‡
USE_BAB


178 #ifde‡
USE_BFLSC


181 #ifde‡
USE_BITFORCE


184 #ifde‡
USE_BITFURY


187 #ifde‡
USE_BLOCKERUPTER


190 #ifde‡
USE_DRILLBIT


193 #ifde‡
USE_HASHFAST


196 #ifde‡
USE_HASHRATIO


199 #ifde‡
USE_BITMINE_A1


202 #ifde‡
USE_ICARUS


205 #ifde‡
USE_KNC


208 #ifde‡
USE_MINION


211 #ifde‡
USE_MODMINER


214 #ifde‡
USE_COINTERRA


217 #ifde‡
USE_SP10


220 #ifde‡
USE_SP30


227 c⁄° *
	gOSINFO
 =

228 #i‡
deföed
(
__löux
)

231 #i‡
deföed
(
__APPLE__
)

234 #i‡
deföed
 (
WIN32
)

237 #i‡
deföed
(
unix
)

246 
	#_DEVS
 "DEVS"

	)

247 
	#_POOLS
 "POOLS"

	)

248 
	#_SUMMARY
 "SUMMARY"

	)

249 
	#_STATUS
 "STATUS"

	)

250 
	#_VERSION
 "VERSION"

	)

251 
	#_MINECONFIG
 "CONFIG"

	)

253 #ifde‡
HAVE_AN_FPGA


254 
	#_PGA
 "PGA"

	)

257 #ifde‡
HAVE_AN_ASIC


258 
	#_ASC
 "ASC"

	)

261 
	#_PGAS
 "PGAS"

	)

262 
	#_ASCS
 "ASCS"

	)

263 
	#_NOTIFY
 "NOTIFY"

	)

264 
	#_DEVDETAILS
 "DEVDETAILS"

	)

265 
	#_BYE
 "BYE"

	)

266 
	#_RESTART
 "RESTART"

	)

267 
	#_MINESTATS
 "STATS"

	)

268 
	#_CHECK
 "CHECK"

	)

269 
	#_MINECOIN
 "COIN"

	)

270 
	#_DEBUGSET
 "DEBUG"

	)

271 
	#_SETCONFIG
 "SETCONFIG"

	)

272 
	#_USBSTATS
 "USBSTATS"

	)

273 
	#_LCD
 "LCD"

	)

275 c⁄° 
	gISJSON
 = '{';

276 
	#JSON0
 "{"

	)

277 
	#JSON1
 "\""

	)

278 
	#JSON2
 "\":["

	)

279 
	#JSON3
 "]"

	)

280 
	#JSON4
 ",\"id\":1"

	)

282 
	#JSON4_TRUNCATED
 ",\"id\":0"

	)

283 
	#JSON5
 "}"

	)

284 
	#JSON6
 "\":"

	)

286 
	#JSON_START
 
JSON0


	)

287 
	#JSON_DEVS
 
JSON1
 
_DEVS
 
JSON2


	)

288 
	#JSON_POOLS
 
JSON1
 
_POOLS
 
JSON2


	)

289 
	#JSON_SUMMARY
 
JSON1
 
_SUMMARY
 
JSON2


	)

290 
	#JSON_STATUS
 
JSON1
 
_STATUS
 
JSON2


	)

291 
	#JSON_VERSION
 
JSON1
 
_VERSION
 
JSON2


	)

292 
	#JSON_MINECONFIG
 
JSON1
 
_MINECONFIG
 
JSON2


	)

293 
	#JSON_ACTION
 
JSON0
 
JSON1
 
_STATUS
 
JSON6


	)

295 #ifde‡
HAVE_AN_FPGA


296 
	#JSON_PGA
 
JSON1
 
_PGA
 
JSON2


	)

299 #ifde‡
HAVE_AN_ASIC


300 
	#JSON_ASC
 
JSON1
 
_ASC
 
JSON2


	)

303 
	#JSON_PGAS
 
JSON1
 
_PGAS
 
JSON2


	)

304 
	#JSON_ASCS
 
JSON1
 
_ASCS
 
JSON2


	)

305 
	#JSON_NOTIFY
 
JSON1
 
_NOTIFY
 
JSON2


	)

306 
	#JSON_DEVDETAILS
 
JSON1
 
_DEVDETAILS
 
JSON2


	)

307 
	#JSON_BYE
 
JSON1
 
_BYE
 
	)
JSON1

308 
	#JSON_RESTART
 
JSON1
 
_RESTART
 
	)
JSON1

309 
	#JSON_CLOSE
 
JSON3


	)

310 
	#JSON_MINESTATS
 
JSON1
 
_MINESTATS
 
JSON2


	)

311 
	#JSON_CHECK
 
JSON1
 
_CHECK
 
JSON2


	)

312 
	#JSON_MINECOIN
 
JSON1
 
_MINECOIN
 
JSON2


	)

313 
	#JSON_DEBUGSET
 
JSON1
 
_DEBUGSET
 
JSON2


	)

314 
	#JSON_SETCONFIG
 
JSON1
 
_SETCONFIG
 
JSON2


	)

315 
	#JSON_USBSTATS
 
JSON1
 
_USBSTATS
 
JSON2


	)

316 
	#JSON_LCD
 
JSON1
 
_LCD
 
JSON2


	)

317 
	#JSON_END
 
JSON4
 
JSON5


	)

318 
	#JSON_END_TRUNCATED
 
JSON4_TRUNCATED
 
JSON5


	)

319 
	#JSON_BETWEEN_JOIN
 ","

	)

321 c⁄° *
	gJSON_COMMAND
 = "command";

322 c⁄° *
	gJSON_PARAMETER
 = "parameter";

324 
	#MSG_POOL
 7

	)

325 
	#MSG_NOPOOL
 8

	)

326 
	#MSG_DEVS
 9

	)

327 
	#MSG_NODEVS
 10

	)

328 
	#MSG_SUMM
 11

	)

329 
	#MSG_INVCMD
 14

	)

330 
	#MSG_MISID
 15

	)

332 
	#MSG_VERSION
 22

	)

333 
	#MSG_INVJSON
 23

	)

334 
	#MSG_MISCMD
 24

	)

335 
	#MSG_MISPID
 25

	)

336 
	#MSG_INVPID
 26

	)

337 
	#MSG_SWITCHP
 27

	)

338 
	#MSG_MISVAL
 28

	)

339 
	#MSG_NOADL
 29

	)

340 
	#MSG_INVINT
 31

	)

341 
	#MSG_MINECONFIG
 33

	)

342 
	#MSG_MISFN
 42

	)

343 
	#MSG_BADFN
 43

	)

344 
	#MSG_SAVED
 44

	)

345 
	#MSG_ACCDENY
 45

	)

346 
	#MSG_ACCOK
 46

	)

347 
	#MSG_ENAPOOL
 47

	)

348 
	#MSG_DISPOOL
 48

	)

349 
	#MSG_ALRENAP
 49

	)

350 
	#MSG_ALRDISP
 50

	)

351 
	#MSG_DISLASTP
 51

	)

352 
	#MSG_MISPDP
 52

	)

353 
	#MSG_INVPDP
 53

	)

354 
	#MSG_TOOMANYP
 54

	)

355 
	#MSG_ADDPOOL
 55

	)

357 #ifde‡
HAVE_AN_FPGA


358 
	#MSG_PGANON
 56

	)

359 
	#MSG_PGADEV
 57

	)

360 
	#MSG_INVPGA
 58

	)

363 
	#MSG_NUMPGA
 59

	)

364 
	#MSG_NOTIFY
 60

	)

366 #ifde‡
HAVE_AN_FPGA


367 
	#MSG_PGALRENA
 61

	)

368 
	#MSG_PGALRDIS
 62

	)

369 
	#MSG_PGAENA
 63

	)

370 
	#MSG_PGADIS
 64

	)

371 
	#MSG_PGAUNW
 65

	)

374 
	#MSG_REMLASTP
 66

	)

375 
	#MSG_ACTPOOL
 67

	)

376 
	#MSG_REMPOOL
 68

	)

377 
	#MSG_DEVDETAILS
 69

	)

378 
	#MSG_MINESTATS
 70

	)

379 
	#MSG_MISCHK
 71

	)

380 
	#MSG_CHECK
 72

	)

381 
	#MSG_POOLPRIO
 73

	)

382 
	#MSG_DUPPID
 74

	)

383 
	#MSG_MISBOOL
 75

	)

384 
	#MSG_INVBOOL
 76

	)

385 
	#MSG_FOO
 77

	)

386 
	#MSG_MINECOIN
 78

	)

387 
	#MSG_DEBUGSET
 79

	)

388 
	#MSG_PGAIDENT
 80

	)

389 
	#MSG_PGANOID
 81

	)

390 
	#MSG_SETCONFIG
 82

	)

391 
	#MSG_UNKCON
 83

	)

392 
	#MSG_INVNUM
 84

	)

393 
	#MSG_CONPAR
 85

	)

394 
	#MSG_CONVAL
 86

	)

395 
	#MSG_USBSTA
 87

	)

396 
	#MSG_NOUSTA
 88

	)

398 #ifde‡
HAVE_AN_FPGA


399 
	#MSG_MISPGAOPT
 89

	)

400 
	#MSG_PGANOSET
 90

	)

401 
	#MSG_PGAHELP
 91

	)

402 
	#MSG_PGASETOK
 92

	)

403 
	#MSG_PGASETERR
 93

	)

406 
	#MSG_ZERMIS
 94

	)

407 
	#MSG_ZERINV
 95

	)

408 
	#MSG_ZERSUM
 96

	)

409 
	#MSG_ZERNOSUM
 97

	)

410 
	#MSG_PGAUSBNODEV
 98

	)

411 
	#MSG_INVHPLG
 99

	)

412 
	#MSG_HOTPLUG
 100

	)

413 
	#MSG_DISHPLG
 101

	)

414 
	#MSG_NOHPLG
 102

	)

415 
	#MSG_MISHPLG
 103

	)

417 
	#MSG_NUMASC
 104

	)

418 #ifde‡
HAVE_AN_ASIC


419 
	#MSG_ASCNON
 105

	)

420 
	#MSG_ASCDEV
 106

	)

421 
	#MSG_INVASC
 107

	)

422 
	#MSG_ASCLRENA
 108

	)

423 
	#MSG_ASCLRDIS
 109

	)

424 
	#MSG_ASCENA
 110

	)

425 
	#MSG_ASCDIS
 111

	)

426 
	#MSG_ASCUNW
 112

	)

427 
	#MSG_ASCIDENT
 113

	)

428 
	#MSG_ASCNOID
 114

	)

430 
	#MSG_ASCUSBNODEV
 115

	)

432 #ifde‡
HAVE_AN_ASIC


433 
	#MSG_MISASCOPT
 116

	)

434 
	#MSG_ASCNOSET
 117

	)

435 
	#MSG_ASCHELP
 118

	)

436 
	#MSG_ASCSETOK
 119

	)

437 
	#MSG_ASCSETERR
 120

	)

440 
	#MSG_INVNEG
 121

	)

441 
	#MSG_SETQUOTA
 122

	)

442 
	#MSG_LOCKOK
 123

	)

443 
	#MSG_LOCKDIS
 124

	)

444 
	#MSG_LCD
 125

	)

446 
	ecode_£vîôy


448 
	mSEVERITY_ERR
,

449 
	mSEVERITY_WARN
,

450 
	mSEVERITY_INFO
,

451 
	mSEVERITY_SUCC
,

452 
	mSEVERITY_FAIL


455 
	ecode_∑ømëîs


457 
	mPARAM_PGA
,

458 
	mPARAM_ASC
,

459 
	mPARAM_PID
,

460 
	mPARAM_PGAMAX
,

461 
	mPARAM_ASCMAX
,

462 
	mPARAM_PMAX
,

463 
	mPARAM_POOLMAX
,

466 
	mPARAM_DMAX
,

468 
	mPARAM_CMD
,

469 
	mPARAM_POOL
,

470 
	mPARAM_STR
,

471 
	mPARAM_BOTH
,

472 
	mPARAM_BOOL
,

473 
	mPARAM_SET
,

474 
	mPARAM_INT
,

475 
	mPARAM_NONE


478 
	sCODES


480 c⁄° 
code_£vîôy
 
	m£vîôy
;

481 c⁄° 
	mcode
;

482 c⁄° 
code_∑ømëîs
 
	m∑øms
;

483 c⁄° *
	mdes¸ùti⁄
;

484 } 
	gcodes
[] =

486 { 
SEVERITY_SUCC
, 
MSG_POOL
, 
PARAM_PMAX
, "%d Pool(s)" },

487 { 
SEVERITY_ERR
, 
MSG_NOPOOL
, 
PARAM_NONE
, "NoÖools" },

490 
SEVERITY_SUCC
, 
MSG_DEVS
, 
PARAM_DMAX
,

491 #ifde‡
HAVE_AN_ASIC


494 #i‡
deföed
(
HAVE_AN_ASIC
Ë&& deföed(
HAVE_AN_FPGA
)

497 #ifde‡
HAVE_AN_FPGA


503 
SEVERITY_ERR
, 
MSG_NODEVS
, 
PARAM_NONE
, "No "

504 #ifde‡
HAVE_AN_ASIC


507 #i‡
deföed
(
HAVE_AN_ASIC
Ë&& deföed(
HAVE_AN_FPGA
)

510 #ifde‡
HAVE_AN_FPGA


515 { 
SEVERITY_SUCC
, 
MSG_SUMM
, 
PARAM_NONE
, "Summary" },

516 { 
SEVERITY_ERR
, 
MSG_INVCMD
, 
PARAM_NONE
, "Invalid command" },

517 { 
SEVERITY_ERR
, 
MSG_MISID
, 
PARAM_NONE
, "Missing device idÖarameter" },

518 #ifde‡
HAVE_AN_FPGA


519 { 
SEVERITY_ERR
, 
MSG_PGANON
, 
PARAM_NONE
, "No PGAs" },

520 { 
SEVERITY_SUCC
, 
MSG_PGADEV
, 
PARAM_PGA
, "PGA%d" },

521 { 
SEVERITY_ERR
, 
MSG_INVPGA
, 
PARAM_PGAMAX
, "Invalid PGA id %d -Ñange is 0 - %d" },

522 { 
SEVERITY_INFO
, 
MSG_PGALRENA
,
PARAM_PGA
, "PGA %dálreadyÉnabled" },

523 { 
SEVERITY_INFO
, 
MSG_PGALRDIS
,
PARAM_PGA
, "PGA %dálready disabled" },

524 { 
SEVERITY_INFO
, 
MSG_PGAENA
, 
PARAM_PGA
, "PGA %d sentÉnable message" },

525 { 
SEVERITY_INFO
, 
MSG_PGADIS
, 
PARAM_PGA
, "PGA %d set disable flag" },

526 { 
SEVERITY_ERR
, 
MSG_PGAUNW
, 
PARAM_PGA
, "PGA %d isÇot flagged WELL, cannotÉnable" },

528 { 
SEVERITY_SUCC
, 
MSG_NUMPGA
, 
PARAM_NONE
, "PGA count" },

529 { 
SEVERITY_SUCC
, 
MSG_NUMASC
, 
PARAM_NONE
, "ASC count" },

530 { 
SEVERITY_SUCC
, 
MSG_VERSION
, 
PARAM_NONE
, "CGMiner versions" },

531 { 
SEVERITY_ERR
, 
MSG_INVJSON
, 
PARAM_NONE
, "Invalid JSON" },

532 { 
SEVERITY_ERR
, 
MSG_MISCMD
, 
PARAM_CMD
, "Missing JSON '%s'" },

533 { 
SEVERITY_ERR
, 
MSG_MISPID
, 
PARAM_NONE
, "MissingÖool idÖarameter" },

534 { 
SEVERITY_ERR
, 
MSG_INVPID
, 
PARAM_POOLMAX
, "InvalidÖool id %d -Ñange is 0 - %d" },

535 { 
SEVERITY_SUCC
, 
MSG_SWITCHP
, 
PARAM_POOL
, "SwitchingÅoÖool %d:'%s'" },

536 { 
SEVERITY_SUCC
, 
MSG_MINECONFIG
,
PARAM_NONE
, "CGMiner config" },

537 { 
SEVERITY_ERR
, 
MSG_MISFN
, 
PARAM_NONE
, "Missing save filenameÖarameter" },

538 { 
SEVERITY_ERR
, 
MSG_BADFN
, 
PARAM_STR
, "Can't open or create save file '%s'" },

539 { 
SEVERITY_SUCC
, 
MSG_SAVED
, 
PARAM_STR
, "Configuration savedÅo file '%s'" },

540 { 
SEVERITY_ERR
, 
MSG_ACCDENY
, 
PARAM_STR
, "Access deniedÅo '%s' command" },

541 { 
SEVERITY_SUCC
, 
MSG_ACCOK
, 
PARAM_NONE
, "Privilegedáccess OK" },

542 { 
SEVERITY_SUCC
, 
MSG_ENAPOOL
, 
PARAM_POOL
, "EnablingÖool %d:'%s'" },

543 { 
SEVERITY_SUCC
, 
MSG_POOLPRIO
,
PARAM_NONE
, "ChangedÖoolÖriorities" },

544 { 
SEVERITY_ERR
, 
MSG_DUPPID
, 
PARAM_PID
, "DuplicateÖool specified %d" },

545 { 
SEVERITY_SUCC
, 
MSG_DISPOOL
, 
PARAM_POOL
, "DisablingÖool %d:'%s'" },

546 { 
SEVERITY_INFO
, 
MSG_ALRENAP
, 
PARAM_POOL
, "Pool %d:'%s'álreadyÉnabled" },

547 { 
SEVERITY_INFO
, 
MSG_ALRDISP
, 
PARAM_POOL
, "Pool %d:'%s'álready disabled" },

548 { 
SEVERITY_ERR
, 
MSG_DISLASTP
,
PARAM_POOL
, "Cannot disableÜastáctiveÖool %d:'%s'" },

549 { 
SEVERITY_ERR
, 
MSG_MISPDP
, 
PARAM_NONE
, "Missingáddpool details" },

550 { 
SEVERITY_ERR
, 
MSG_INVPDP
, 
PARAM_STR
, "Invalidáddpool details '%s'" },

551 { 
SEVERITY_ERR
, 
MSG_TOOMANYP
,
PARAM_NONE
, "Reached maximumÇumber ofÖools (%d)" },

552 { 
SEVERITY_SUCC
, 
MSG_ADDPOOL
, 
PARAM_POOL
, "AddedÖool %d: '%s'" },

553 { 
SEVERITY_ERR
, 
MSG_REMLASTP
,
PARAM_POOL
, "CannotÑemoveÜastÖool %d:'%s'" },

554 { 
SEVERITY_ERR
, 
MSG_ACTPOOL
, 
PARAM_POOL
, "CannotÑemoveáctiveÖool %d:'%s'" },

555 { 
SEVERITY_SUCC
, 
MSG_REMPOOL
, 
PARAM_BOTH
, "RemovedÖool %d:'%s'" },

556 { 
SEVERITY_SUCC
, 
MSG_NOTIFY
, 
PARAM_NONE
, "Notify" },

557 { 
SEVERITY_SUCC
, 
MSG_DEVDETAILS
,
PARAM_NONE
, "Device Details" },

558 { 
SEVERITY_SUCC
, 
MSG_MINESTATS
,
PARAM_NONE
, "CGMiner stats" },

559 { 
SEVERITY_ERR
, 
MSG_MISCHK
, 
PARAM_NONE
, "Missing check cmd" },

560 { 
SEVERITY_SUCC
, 
MSG_CHECK
, 
PARAM_NONE
, "Check command" },

561 { 
SEVERITY_ERR
, 
MSG_MISBOOL
, 
PARAM_NONE
, "MissingÖarameter:Årue/false" },

562 { 
SEVERITY_ERR
, 
MSG_INVBOOL
, 
PARAM_NONE
, "InvalidÖarameter should beÅrue or false" },

563 { 
SEVERITY_SUCC
, 
MSG_FOO
, 
PARAM_BOOL
, "Failover-Only setÅo %s" },

564 { 
SEVERITY_SUCC
, 
MSG_MINECOIN
,
PARAM_NONE
, "CGMiner coin" },

565 { 
SEVERITY_SUCC
, 
MSG_DEBUGSET
,
PARAM_NONE
, "Debug settings" },

566 #ifde‡
HAVE_AN_FPGA


567 { 
SEVERITY_SUCC
, 
MSG_PGAIDENT
,
PARAM_PGA
, "Identify command sentÅo PGA%d" },

568 { 
SEVERITY_WARN
, 
MSG_PGANOID
, 
PARAM_PGA
, "PGA%d doesÇot support identify" },

570 { 
SEVERITY_SUCC
, 
MSG_SETCONFIG
,
PARAM_SET
, "Set config '%s'Åo %d" },

571 { 
SEVERITY_ERR
, 
MSG_UNKCON
, 
PARAM_STR
, "Unknown config '%s'" },

572 { 
SEVERITY_ERR
, 
MSG_INVNUM
, 
PARAM_BOTH
, "InvalidÇumber (%d) for '%s'Ñange is 0-9999" },

573 { 
SEVERITY_ERR
, 
MSG_INVNEG
, 
PARAM_BOTH
, "InvalidÇegativeÇumber (%d) for '%s'" },

574 { 
SEVERITY_SUCC
, 
MSG_SETQUOTA
,
PARAM_SET
, "SetÖool '%s'Åo quota %d'" },

575 { 
SEVERITY_ERR
, 
MSG_CONPAR
, 
PARAM_NONE
, "Missing configÖarameters 'name,N'" },

576 { 
SEVERITY_ERR
, 
MSG_CONVAL
, 
PARAM_STR
, "Missing config value N for '%s,N'" },

577 { 
SEVERITY_SUCC
, 
MSG_USBSTA
, 
PARAM_NONE
, "USB Statistics" },

578 { 
SEVERITY_INFO
, 
MSG_NOUSTA
, 
PARAM_NONE
, "No USB Statistics" },

579 #ifde‡
HAVE_AN_FPGA


580 { 
SEVERITY_ERR
, 
MSG_MISPGAOPT
, 
PARAM_NONE
, "Missing optionáfter PGAÇumber" },

581 { 
SEVERITY_WARN
, 
MSG_PGANOSET
, 
PARAM_PGA
, "PGA %d doesÇot supportÖgaset" },

582 { 
SEVERITY_INFO
, 
MSG_PGAHELP
, 
PARAM_BOTH
, "PGA %d set help: %s" },

583 { 
SEVERITY_SUCC
, 
MSG_PGASETOK
, 
PARAM_BOTH
, "PGA %d set OK" },

584 { 
SEVERITY_ERR
, 
MSG_PGASETERR
, 
PARAM_BOTH
, "PGA %d set failed: %s" },

586 { 
SEVERITY_ERR
, 
MSG_ZERMIS
, 
PARAM_NONE
, "Missing zeroÖarameters" },

587 { 
SEVERITY_ERR
, 
MSG_ZERINV
, 
PARAM_STR
, "Invalid zeroÖarameter '%s'" },

588 { 
SEVERITY_SUCC
, 
MSG_ZERSUM
, 
PARAM_STR
, "Zeroed %s stats with summary" },

589 { 
SEVERITY_SUCC
, 
MSG_ZERNOSUM
, 
PARAM_STR
, "Zeroed %s stats without summary" },

590 #ifde‡
USE_USBUTILS


591 { 
SEVERITY_ERR
, 
MSG_PGAUSBNODEV
, 
PARAM_PGA
, "PGA%d hasÇo device" },

592 { 
SEVERITY_ERR
, 
MSG_ASCUSBNODEV
, 
PARAM_PGA
, "ASC%d hasÇo device" },

594 { 
SEVERITY_ERR
, 
MSG_INVHPLG
, 
PARAM_STR
, "Invalid value for hotplug (%s) must be 0..9999" },

595 { 
SEVERITY_SUCC
, 
MSG_HOTPLUG
, 
PARAM_INT
, "Hotplug check setÅo %ds" },

596 { 
SEVERITY_SUCC
, 
MSG_DISHPLG
, 
PARAM_NONE
, "Hotplug disabled" },

597 { 
SEVERITY_WARN
, 
MSG_NOHPLG
, 
PARAM_NONE
, "Hotplug isÇotávailable" },

598 { 
SEVERITY_ERR
, 
MSG_MISHPLG
, 
PARAM_NONE
, "Missing hotplugÖarameter" },

599 #ifde‡
HAVE_AN_ASIC


600 { 
SEVERITY_ERR
, 
MSG_ASCNON
, 
PARAM_NONE
, "No ASCs" },

601 { 
SEVERITY_SUCC
, 
MSG_ASCDEV
, 
PARAM_ASC
, "ASC%d" },

602 { 
SEVERITY_ERR
, 
MSG_INVASC
, 
PARAM_ASCMAX
, "Invalid ASC id %d -Ñange is 0 - %d" },

603 { 
SEVERITY_INFO
, 
MSG_ASCLRENA
,
PARAM_ASC
, "ASC %dálreadyÉnabled" },

604 { 
SEVERITY_INFO
, 
MSG_ASCLRDIS
,
PARAM_ASC
, "ASC %dálready disabled" },

605 { 
SEVERITY_INFO
, 
MSG_ASCENA
, 
PARAM_ASC
, "ASC %d sentÉnable message" },

606 { 
SEVERITY_INFO
, 
MSG_ASCDIS
, 
PARAM_ASC
, "ASC %d set disable flag" },

607 { 
SEVERITY_ERR
, 
MSG_ASCUNW
, 
PARAM_ASC
, "ASC %d isÇot flagged WELL, cannotÉnable" },

608 { 
SEVERITY_SUCC
, 
MSG_ASCIDENT
,
PARAM_ASC
, "Identify command sentÅo ASC%d" },

609 { 
SEVERITY_WARN
, 
MSG_ASCNOID
, 
PARAM_ASC
, "ASC%d doesÇot support identify" },

610 { 
SEVERITY_ERR
, 
MSG_MISASCOPT
, 
PARAM_NONE
, "Missing optionáfter ASCÇumber" },

611 { 
SEVERITY_WARN
, 
MSG_ASCNOSET
, 
PARAM_ASC
, "ASC %d doesÇot supportáscset" },

612 { 
SEVERITY_INFO
, 
MSG_ASCHELP
, 
PARAM_BOTH
, "ASC %d set help: %s" },

613 { 
SEVERITY_SUCC
, 
MSG_ASCSETOK
, 
PARAM_BOTH
, "ASC %d set OK" },

614 { 
SEVERITY_ERR
, 
MSG_ASCSETERR
, 
PARAM_BOTH
, "ASC %d set failed: %s" },

616 { 
SEVERITY_SUCC
, 
MSG_LCD
, 
PARAM_NONE
, "LCD" },

617 { 
SEVERITY_SUCC
, 
MSG_LOCKOK
, 
PARAM_NONE
, "Lock stats created" },

618 { 
SEVERITY_WARN
, 
MSG_LOCKDIS
, 
PARAM_NONE
, "Lock statsÇotÉnabled" },

619 { 
SEVERITY_FAIL
, 0, 0, 
NULL
 }

622 c⁄° *
	gloˇœddr
 = "127.0.0.1";

624 
	gmy_thr_id
 = 0;

625 
boﬁ
 
	gbye
;

628 
±hªad_muãx_t
 
	gquô_ª°¨t_lock
;

630 
boﬁ
 
	gdo_a_quô
;

631 
boﬁ
 
	gdo_a_ª°¨t
;

633 
time_t
 
	gwhí
 = 0;

635 
	sIPACCESS


637 
ö6_addr
 
	mù
;

638 
ö6_addr
 
	mmask
;

639 
	mgroup
;

642 
	#GROUP
(
g
Ë(
	`touµî
(g))

	)

643 
	#PRIVGROUP
 
	`GROUP
('W')

	)

644 
	#NOPRIVGROUP
 
	`GROUP
('R')

	)

645 
	#ISPRIVGROUP
(
g
Ë(
	`GROUP
(gË=
PRIVGROUP
)

	)

646 
	#GROUPOFFSET
(
g
Ë(
	`GROUP
(gË- GROUP('A'))

	)

647 
	#VALIDGROUP
(
g
Ë(
	`GROUP
(gË>GROUP('A'Ë&& GROUP(gË<GROUP('Z'))

	)

648 
	#COMMANDS
(
g
Ë(
≠igroups
[
	`GROUPOFFSET
(g)].
comm™ds
)

	)

649 
	#DEFINEDGROUP
(
g
Ë(
	`ISPRIVGROUP
(gË|| 
	`COMMANDS
(gË!
NULL
)

	)

651 
	sAPIGROUPS


654 *
	mcomm™ds
;

655 } 
	g≠igroups
['Z' - 'A' + 1];

657 
IPACCESS
 *
	gùac˚ss
 = 
NULL
;

658 
	gùs
 = 0;

660 
	sio_d©a


662 
size_t
 
	msiz
;

663 *
	m±r
;

664 *
	mcur
;

665 
boﬁ
 
	msock
;

666 
boﬁ
 
	m˛o£
;

669 
	sio_li°


671 
io_d©a
 *
	mio_d©a
;

672 
io_li°
 *
	m¥ev
;

673 
io_li°
 *
	m√xt
;

676 
io_li°
 *
	gio_hód
 = 
NULL
;

678 
	#SOCKBUFALLOCSIZ
 65536

	)

680 
	#io_√w
(
öô
Ë
	`_io_√w
(öô, 
Ál£
)

	)

681 
	#sock_io_√w
(Ë
	`_io_√w
(
SOCKBUFALLOCSIZ
, 
åue
)

	)

683 
	#ALLOC_SBITEMS
 2

	)

684 
	#LIMIT_SBITEMS
 0

	)

686 
	ssbôem


688 *
	mbuf
;

689 
size_t
 
	msiz
;

690 
size_t
 
	mtŸ
;

691 } 
	tSBITEM
;

694 
	#SBEXTEND
 4096

	)

696 
	#DATASB
(
_ôem
Ë((
SBITEM
 *)(_ôem->
d©a
))

	)

698 
K_LIST
 *
	g°rbufs
;

700 
	$io_ªöô
(
io_d©a
 *io_data)

702 
io_d©a
->
cur
 = io_d©a->
±r
;

703 *(
io_d©a
->
±r
) = '\0';

704 
io_d©a
->
˛o£
 = 
Ál£
;

705 
	}
}

707 
io_d©a
 *
	$_io_√w
(
size_t
 
öôül
, 
boﬁ
 
sockë_buf
)

709 
io_d©a
 *io_data;

710 
io_li°
 *io_list;

712 
io_d©a
 = 
	`mÆloc
((*io_data));

713 
io_d©a
->
±r
 = 
	`mÆloc
(
öôül
);

714 
io_d©a
->
siz
 = 
öôül
;

715 
io_d©a
->
sock
 = 
sockë_buf
;

716 
	`io_ªöô
(
io_d©a
);

718 
io_li°
 = 
	`mÆloc
((*io_list));

720 
io_li°
->
io_d©a
 = io_data;

722 i‡(
io_hód
)

724 
io_li°
->
√xt
 = 
io_hód
;

725 
io_li°
->
¥ev
 = 
io_hód
->prev;

726 
io_li°
->
√xt
->
¥ev
 = io_list;

727 
io_li°
->
¥ev
->
√xt
 = io_list;

731 
io_li°
->
¥ev
 = io_list;

732 
io_li°
->
√xt
 = io_list;

733 
io_hód
 = 
io_li°
;

736  
io_d©a
;

737 
	}
}

739 
boﬁ
 
	$io_add
(
io_d©a
 *io_d©a, *
buf
)

741 
size_t
 
Àn
, 
dif
, 
tŸ
;

743 
Àn
 = 
	`°æí
(
buf
);

744 
dif
 = 
io_d©a
->
cur
 - io_d©a->
±r
;

746 
tŸ
 = 
Àn
 + 1 + 
dif
 + (
JSON_CLOSE
Ë+ (
JSON_END
);

748 i‡(
tŸ
 > 
io_d©a
->
siz
)

750 
size_t
 
√w
 = 
io_d©a
->
siz
 + (2 * 
SOCKBUFALLOCSIZ
);

752 i‡(
√w
 < 
tŸ
)

753 
√w
 = (2 + (
size_t
)(()
tŸ
 / ()
SOCKBUFALLOCSIZ
)) * SOCKBUFALLOCSIZ;

755 
io_d©a
->
±r
 = 
	`ªÆloc
(io_d©a->±r, 
√w
);

756 
io_d©a
->
cur
 = io_d©a->
±r
 + 
dif
;

757 
io_d©a
->
siz
 = 
√w
;

760 
	`mem˝y
(
io_d©a
->
cur
, 
buf
, 
Àn
 + 1);

761 
io_d©a
->
cur
 +
Àn
;

763  
åue
;

764 
	}
}

766 
boﬁ
 
	$io_put
(
io_d©a
 *io_d©a, *
buf
)

768 
	`io_ªöô
(
io_d©a
);

769  
	`io_add
(
io_d©a
, 
buf
);

770 
	}
}

772 
	$io_˛o£
(
io_d©a
 *io_data)

774 
io_d©a
->
˛o£
 = 
åue
;

775 
	}
}

777 
	$io_‰ì
()

779 
io_li°
 *io_li°, *
io_√xt
;

781 i‡(
io_hód
)

783 
io_li°
 = 
io_hód
;

786 
io_√xt
 = 
io_li°
->
√xt
;

788 
	`‰ì
(
io_li°
->
io_d©a
->
±r
);

789 
	`‰ì
(
io_li°
->
io_d©a
);

790 
	`‰ì
(
io_li°
);

792 
io_li°
 = 
io_√xt
;

794 
io_li°
 !
io_hód
);

796 
io_hód
 = 
NULL
;

798 
	}
}

802 *
	$esˇ≥_°rög
(*
°r
, 
boﬁ
 
isjs⁄
)

804 *
buf
, *
±r
;

805 
cou¡
;

807 
cou¡
 = 0;

808 
±r
 = 
°r
; *ptr;Ötr++)

810 *
±r
)

815 i‡(!
isjs⁄
)

816 
cou¡
++;

819 i‡(
isjs⁄
)

820 
cou¡
++;

823 
cou¡
++;

828 i‡(
cou¡
 == 0)

829  
°r
;

831 
buf
 = 
	`mÆloc
(
	`°æí
(
°r
Ë+ 
cou¡
 + 1);

832 i‡(
	`u∆ikñy
(!
buf
))

834 
	`quôhîe
(1, "FailedÅo mallocÉscape buf %d",

835 ()(
	`°æí
(
°r
Ë+ 
cou¡
 + 1));

838 
±r
 = 
buf
;

839 *
°r
)

840 *
°r
)

845 i‡(!
isjs⁄
)

846 *(
±r
++) = '\\';

847 *(
±r
++Ë*(
°r
++);

850 i‡(
isjs⁄
)

851 *(
±r
++) = '\\';

852 *(
±r
++Ë*(
°r
++);

855 *(
±r
++) = '\\';

856 *(
±r
++Ë*(
°r
++);

859 *(
±r
++Ë*(
°r
++);

863 *
±r
 = '\0';

865  
buf
;

866 
	}
}

868 
≠i_d©a
 *
	$≠i_add_exåa
(
≠i_d©a
 *
roŸ
, ≠i_d©®*
exåa
)

870 
≠i_d©a
 *
tmp
;

872 i‡(
roŸ
)

874 i‡(
exåa
)

877 
tmp
 = 
exåa
->
¥ev
;

880 
exåa
->
¥ev
 = 
roŸ
->prev;

883 
roŸ
->
¥ev
->
√xt
 = 
exåa
;

886 
tmp
->
√xt
 = 
roŸ
;

889 
roŸ
->
¥ev
 = 
tmp
;

893 
roŸ
 = 
exåa
;

895  
roŸ
;

896 
	}
}

898 
≠i_d©a
 *
	$≠i_add_d©a_fuŒ
(
≠i_d©a
 *
roŸ
, *
«me
, 
≠i_d©a_ty≥
 
ty≥
, *
d©a
, 
boﬁ
 
c›y_d©a
)

900 
≠i_d©a
 *api_data;

902 
≠i_d©a
 = (≠i_d©®*)
	`mÆloc
((api_data));

904 
≠i_d©a
->
«me
 = 
	`°rdup
(name);

905 
≠i_d©a
->
ty≥
 =Åype;

907 i‡(
roŸ
 =
NULL
)

909 
roŸ
 = 
≠i_d©a
;

910 
roŸ
->
¥ev
 =Ñoot;

911 
roŸ
->
√xt
 =Ñoot;

915 
≠i_d©a
->
¥ev
 = 
roŸ
->prev;

916 
roŸ
->
¥ev
 = 
≠i_d©a
;

917 
≠i_d©a
->
√xt
 = 
roŸ
;

918 
≠i_d©a
->
¥ev
->
√xt
 =ápi_data;

921 
≠i_d©a
->
d©a_was_mÆloc
 = 
c›y_d©a
;

924 i‡(
d©a
 =
NULL
)

926 
≠i_d©a
->
ty≥
 =Åy≥ = 
API_CONST
;

927 
d©a
 = (*)
NULLSTR
;

928 
≠i_d©a
->
d©a_was_mÆloc
 = 
c›y_d©a
 = 
Ál£
;

931 i‡(!
c›y_d©a
)

932 
≠i_d©a
->
d©a
 = data;

934 
ty≥
)

936 
API_ESCAPE
:

937 
API_STRING
:

938 
API_CONST
:

939 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
(
	`°æí
((*)data) + 1);

940 
	`°r˝y
((*)(
≠i_d©a
->
d©a
), (*)data);

942 
API_UINT8
:

944 
≠i_d©a
->
d©a
 = 
	`mÆloc
(4);

945 *(
uöt8_t
 *)
≠i_d©a
->
d©a
 = *(uint8_t *)data;

947 
API_INT16
:

949 
≠i_d©a
->
d©a
 = 
	`mÆloc
(4);

950 *(
öt16_t
 *)
≠i_d©a
->
d©a
 = *(int16_t *)data;

952 
API_UINT16
:

954 
≠i_d©a
->
d©a
 = 
	`mÆloc
(4);

955 *(
uöt16_t
 *)
≠i_d©a
->
d©a
 = *(uint16_t *)data;

957 
API_INT
:

958 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
(());

959 *((*)(
≠i_d©a
->
d©a
)) = *((*)data);

961 
API_UINT
:

962 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
(());

963 *((*)(
≠i_d©a
->
d©a
)) = *((*)data);

965 
API_UINT32
:

966 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
((
uöt32_t
));

967 *((
uöt32_t
 *)(
≠i_d©a
->
d©a
)) = *((uint32_t *)data);

969 
API_HEX32
:

970 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
((
uöt32_t
));

971 *((
uöt32_t
 *)(
≠i_d©a
->
d©a
)) = *((uint32_t *)data);

973 
API_UINT64
:

974 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
((
uöt64_t
));

975 *((
uöt64_t
 *)(
≠i_d©a
->
d©a
)) = *((uint64_t *)data);

977 
API_INT64
:

978 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
((
öt64_t
));

979 *((
öt64_t
 *)(
≠i_d©a
->
d©a
)) = *((int64_t *)data);

981 
API_DOUBLE
:

982 
API_ELAPSED
:

983 
API_MHS
:

984 
API_MHTOTAL
:

985 
API_UTILITY
:

986 
API_FREQ
:

987 
API_HS
:

988 
API_DIFF
:

989 
API_PERCENT
:

990 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
(());

991 *((*)(
≠i_d©a
->
d©a
)) = *((*)data);

993 
API_BOOL
:

994 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
((
boﬁ
));

995 *((
boﬁ
 *)(
≠i_d©a
->
d©a
)) = *((bool *)data);

997 
API_TIMEVAL
:

998 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
((
timevÆ
));

999 
	`mem˝y
(
≠i_d©a
->
d©a
, d©a, (
timevÆ
));

1001 
API_TIME
:

1002 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
((
time_t
));

1003 *(
time_t
 *)(
≠i_d©a
->
d©a
) = *((time_t *)data);

1005 
API_VOLTS
:

1006 
API_TEMP
:

1007 
API_AVG
:

1008 
≠i_d©a
->
d©a
 = (*)
	`mÆloc
(());

1009 *((*)(
≠i_d©a
->
d©a
)) = *((*)data);

1012 
	`≠∂og
(
LOG_ERR
, "API: unknown1 d©®ty≥ %d ign‹ed", 
ty≥
);

1013 
≠i_d©a
->
ty≥
 = 
API_STRING
;

1014 
≠i_d©a
->
d©a_was_mÆloc
 = 
Ál£
;

1015 
≠i_d©a
->
d©a
 = (*)
UNKNOWN
;

1019  
roŸ
;

1020 
	}
}

1022 
≠i_d©a
 *
	$≠i_add_esˇ≥
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1024  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_ESCAPE
, (*)
d©a
, 
c›y_d©a
);

1025 
	}
}

1027 
≠i_d©a
 *
	$≠i_add_°rög
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1029  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_STRING
, (*)
d©a
, 
c›y_d©a
);

1030 
	}
}

1032 
≠i_d©a
 *
	$≠i_add_c⁄°
(
≠i_d©a
 *
roŸ
, *
«me
, c⁄° *
d©a
, 
boﬁ
 
c›y_d©a
)

1034  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_CONST
, (*)
d©a
, 
c›y_d©a
);

1035 
	}
}

1037 
≠i_d©a
 *
	$≠i_add_uöt8
(
≠i_d©a
 *
roŸ
, *
«me
, 
uöt8_t
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1039  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_UINT8
, (*)
d©a
, 
c›y_d©a
);

1040 
	}
}

1042 
≠i_d©a
 *
	$≠i_add_öt16
(
≠i_d©a
 *
roŸ
, *
«me
, 
öt16_t
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1044  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_INT16
, (*)
d©a
, 
c›y_d©a
);

1045 
	}
}

1047 
≠i_d©a
 *
	$≠i_add_uöt16
(
≠i_d©a
 *
roŸ
, *
«me
, 
uöt16_t
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1049  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_UINT16
, (*)
d©a
, 
c›y_d©a
);

1050 
	}
}

1052 
≠i_d©a
 *
	$≠i_add_öt
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1054  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_INT
, (*)
d©a
, 
c›y_d©a
);

1055 
	}
}

1057 
≠i_d©a
 *
	$≠i_add_uöt
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1059  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_UINT
, (*)
d©a
, 
c›y_d©a
);

1060 
	}
}

1062 
≠i_d©a
 *
	$≠i_add_uöt32
(
≠i_d©a
 *
roŸ
, *
«me
, 
uöt32_t
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1064  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_UINT32
, (*)
d©a
, 
c›y_d©a
);

1065 
	}
}

1067 
≠i_d©a
 *
	$≠i_add_hex32
(
≠i_d©a
 *
roŸ
, *
«me
, 
uöt32_t
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1069  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_HEX32
, (*)
d©a
, 
c›y_d©a
);

1070 
	}
}

1072 
≠i_d©a
 *
	$≠i_add_uöt64
(
≠i_d©a
 *
roŸ
, *
«me
, 
uöt64_t
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1074  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_UINT64
, (*)
d©a
, 
c›y_d©a
);

1075 
	}
}

1077 
≠i_d©a
 *
	$≠i_add_öt64
(
≠i_d©a
 *
roŸ
, *
«me
, 
öt64_t
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1079  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_INT64
, (*)
d©a
, 
c›y_d©a
);

1080 
	}
}

1082 
≠i_d©a
 *
	$≠i_add_doubÀ
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1084  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_DOUBLE
, (*)
d©a
, 
c›y_d©a
);

1085 
	}
}

1087 
≠i_d©a
 *
	$≠i_add_ñ≠£d
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1089  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_ELAPSED
, (*)
d©a
, 
c›y_d©a
);

1090 
	}
}

1092 
≠i_d©a
 *
	$≠i_add_boﬁ
(
≠i_d©a
 *
roŸ
, *
«me
, 
boﬁ
 *
d©a
, boﬁ 
c›y_d©a
)

1094  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_BOOL
, (*)
d©a
, 
c›y_d©a
);

1095 
	}
}

1097 
≠i_d©a
 *
	$≠i_add_timevÆ
(
≠i_d©a
 *
roŸ
, *
«me
, 
timevÆ
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1099  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_TIMEVAL
, (*)
d©a
, 
c›y_d©a
);

1100 
	}
}

1102 
≠i_d©a
 *
	$≠i_add_time
(
≠i_d©a
 *
roŸ
, *
«me
, 
time_t
 *
d©a
, 
boﬁ
 
c›y_d©a
)

1104  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_TIME
, (*)
d©a
, 
c›y_d©a
);

1105 
	}
}

1107 
≠i_d©a
 *
	$≠i_add_mhs
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1109  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_MHS
, (*)
d©a
, 
c›y_d©a
);

1110 
	}
}

1112 
≠i_d©a
 *
	$≠i_add_mhtŸÆ
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1114  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_MHTOTAL
, (*)
d©a
, 
c›y_d©a
);

1115 
	}
}

1117 
≠i_d©a
 *
	$≠i_add_ãmp
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1119  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_TEMP
, (*)
d©a
, 
c›y_d©a
);

1120 
	}
}

1122 
≠i_d©a
 *
	$≠i_add_utûôy
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1124  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_UTILITY
, (*)
d©a
, 
c›y_d©a
);

1125 
	}
}

1127 
≠i_d©a
 *
	$≠i_add_‰eq
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1129  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_FREQ
, (*)
d©a
, 
c›y_d©a
);

1130 
	}
}

1132 
≠i_d©a
 *
	$≠i_add_vﬁts
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1134  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_VOLTS
, (*)
d©a
, 
c›y_d©a
);

1135 
	}
}

1137 
≠i_d©a
 *
	$≠i_add_hs
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1139  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_HS
, (*)
d©a
, 
c›y_d©a
);

1140 
	}
}

1142 
≠i_d©a
 *
	$≠i_add_diff
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1144  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_DIFF
, (*)
d©a
, 
c›y_d©a
);

1145 
	}
}

1147 
≠i_d©a
 *
	$≠i_add_≥r˚¡
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1149  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_PERCENT
, (*)
d©a
, 
c›y_d©a
);

1150 
	}
}

1152 
≠i_d©a
 *
	$≠i_add_avg
(
≠i_d©a
 *
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
)

1154  
	`≠i_add_d©a_fuŒ
(
roŸ
, 
«me
, 
API_AVG
, (*)
d©a
, 
c›y_d©a
);

1155 
	}
}

1158 
	$add_ôem_buf
(
K_ITEM
 *
ôem
, c⁄° *
°r
)

1160 
size_t
 
ﬁd_siz
, 
√w_siz
, 
siz
, 
ext
;

1161 *
buf
;

1163 
buf
 = 
	`DATASB
(
ôem
)->buf;

1164 
siz
 = (
size_t
)
	`°æí
(
°r
);

1166 
ﬁd_siz
 = 
	`DATASB
(
ôem
)->
siz
;

1167 
√w_siz
 = 
ﬁd_siz
 + 
siz
 + 1;

1168 i‡(
	`DATASB
(
ôem
)->
tŸ
 < 
√w_siz
)

1170 
ext
 = (
siz
 + 1Ë+ 
SBEXTEND
 - ((siz + 1) % SBEXTEND);

1171 
	`DATASB
(
ôem
)->
buf
 = bu‡
	`ªÆloc
(DATASB(ôem)->buf, DATASB(ôem)->
tŸ
 + 
ext
);

1172 i‡(!
buf
)

1174 
	`quôhîe
(1, "OOM buf siz=%dÅot=%dÉxt=%d",

1175 ()
siz
, ()(
	`DATASB
(
ôem
)->
tŸ
), ()
ext
);

1177 
	`DATASB
(
ôem
)->
tŸ
 +
ext
;

1179 
	`mem˝y
(
buf
 + 
ﬁd_siz
, 
°r
, 
siz
 + 1);

1180 
	`DATASB
(
ôem
)->
siz
 += siz;

1181 
	}
}

1183 
≠i_d©a
 *
	$¥öt_d©a
(
io_d©a
 *io_d©a, 
≠i_d©a
 *
roŸ
, 
boﬁ
 
isjs⁄
, boﬁ 
¥ecom
)

1186 
buf
[64];

1187 
≠i_d©a
 *
tmp
;

1188 
boﬁ
 
d⁄e
, 
fú°
 = 
åue
;

1189 *
‹igöÆ
, *
esˇ≥
;

1190 
K_ITEM
 *
ôem
;

1192 
	`K_WLOCK
(
°rbufs
);

1193 
ôem
 = 
	`k_u∆ök_hód
(
°rbufs
);

1194 
	`K_WUNLOCK
(
°rbufs
);

1196 
	`DATASB
(
ôem
)->
siz
 = 0;

1198 i‡(
¥ecom
)

1199 
	`add_ôem_buf
(
ôem
, 
COMMA
);

1201 i‡(
isjs⁄
)

1202 
	`add_ôem_buf
(
ôem
, 
JSON0
);

1204 
roŸ
)

1206 i‡(!
fú°
)

1207 
	`add_ôem_buf
(
ôem
, 
COMMA
);

1209 
fú°
 = 
Ál£
;

1211 i‡(
isjs⁄
)

1212 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1214 
	`add_ôem_buf
(
ôem
, 
roŸ
->
«me
);

1216 i‡(
isjs⁄
)

1217 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1219 i‡(
isjs⁄
)

1220 
	`add_ôem_buf
(
ôem
, ":");

1222 
	`add_ôem_buf
(
ôem
, "=");

1224 
fú°
 = 
Ál£
;

1226 
d⁄e
 = 
Ál£
;

1227 
roŸ
->
ty≥
)

1229 
API_STRING
:

1230 
API_CONST
:

1231 i‡(
isjs⁄
)

1232 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1233 
	`add_ôem_buf
(
ôem
, (*)(
roŸ
->
d©a
));

1234 i‡(
isjs⁄
)

1235 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1236 
d⁄e
 = 
åue
;

1238 
API_ESCAPE
:

1239 
‹igöÆ
 = (*)(
roŸ
->
d©a
);

1240 
esˇ≥
 = 
	`esˇ≥_°rög
((*)(
roŸ
->
d©a
), 
isjs⁄
);

1241 i‡(
isjs⁄
)

1242 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1243 
	`add_ôem_buf
(
ôem
, 
esˇ≥
);

1244 i‡(
isjs⁄
)

1245 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1246 i‡(
esˇ≥
 !
‹igöÆ
)

1247 
	`‰ì
(
esˇ≥
);

1248 
d⁄e
 = 
åue
;

1250 
API_UINT8
:

1251 
	`¢¥ötf
(
buf
, (buf), "%u", *(
uöt8_t
 *)
roŸ
->
d©a
);

1253 
API_INT16
:

1254 
	`¢¥ötf
(
buf
, (buf), "%d", *(
öt16_t
 *)
roŸ
->
d©a
);

1256 
API_UINT16
:

1257 
	`¢¥ötf
(
buf
, (buf), "%u", *(
uöt16_t
 *)
roŸ
->
d©a
);

1259 
API_INT
:

1260 
	`¢¥ötf
(
buf
, (buf), "%d", *((*)(
roŸ
->
d©a
)));

1262 
API_UINT
:

1263 
	`¢¥ötf
(
buf
, (buf), "%u", *((*)(
roŸ
->
d©a
)));

1265 
API_UINT32
:

1266 
	`¢¥ötf
(
buf
, (buf), "%"
PRIu32
, *((
uöt32_t
 *)(
roŸ
->
d©a
)));

1268 
API_HEX32
:

1269 i‡(
isjs⁄
)

1270 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1271 
	`¢¥ötf
(
buf
, (buf), "0x%08x", *((
uöt32_t
 *)(
roŸ
->
d©a
)));

1272 
	`add_ôem_buf
(
ôem
, 
buf
);

1273 i‡(
isjs⁄
)

1274 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1275 
d⁄e
 = 
åue
;

1277 
API_UINT64
:

1278 
	`¢¥ötf
(
buf
, (buf), "%"
PRIu64
, *((
uöt64_t
 *)(
roŸ
->
d©a
)));

1280 
API_INT64
:

1281 
	`¢¥ötf
(
buf
, (buf), "%"
PRId64
, *((
öt64_t
 *)(
roŸ
->
d©a
)));

1283 
API_TIME
:

1284 
	`¢¥ötf
(
buf
, (buf), "%lu", *((*)(
roŸ
->
d©a
)));

1286 
API_DOUBLE
:

1287 
	`¢¥ötf
(
buf
, (buf), "%f", *((*)(
roŸ
->
d©a
)));

1289 
API_ELAPSED
:

1290 
	`¢¥ötf
(
buf
, (buf), "%.0f", *((*)(
roŸ
->
d©a
)));

1292 
API_UTILITY
:

1293 
API_FREQ
:

1294 
API_MHS
:

1295 
	`¢¥ötf
(
buf
, (buf), "%.2f", *((*)(
roŸ
->
d©a
)));

1297 
API_VOLTS
:

1298 
API_AVG
:

1299 
	`¢¥ötf
(
buf
, (buf), "%.3f", *((*)(
roŸ
->
d©a
)));

1301 
API_MHTOTAL
:

1302 
	`¢¥ötf
(
buf
, (buf), "%.4f", *((*)(
roŸ
->
d©a
)));

1304 
API_HS
:

1305 
	`¢¥ötf
(
buf
, (buf), "%.15f", *((*)(
roŸ
->
d©a
)));

1307 
API_DIFF
:

1308 
	`¢¥ötf
(
buf
, (buf), "%.8f", *((*)(
roŸ
->
d©a
)));

1310 
API_BOOL
:

1311 
	`¢¥ötf
(
buf
, (buf), "%s", *((
boﬁ
 *)(
roŸ
->
d©a
)Ë? 
TRUESTR
 : 
FALSESTR
);

1313 
API_TIMEVAL
:

1314 
	`¢¥ötf
(
buf
, (buf), "%ld.%06ld",

1315 ()((
timevÆ
 *)(
roŸ
->
d©a
))->
tv_£c
,

1316 ()((
timevÆ
 *)(
roŸ
->
d©a
))->
tv_u£c
);

1318 
API_TEMP
:

1319 
	`¢¥ötf
(
buf
, (buf), "%.2f", *((*)(
roŸ
->
d©a
)));

1321 
API_PERCENT
:

1322 
	`¢¥ötf
(
buf
, (buf), "%.4f", *((*)(
roŸ
->
d©a
)) * 100.0);

1325 
	`≠∂og
(
LOG_ERR
, "API: unknown2 d©®ty≥ %d ign‹ed", 
roŸ
->
ty≥
);

1326 i‡(
isjs⁄
)

1327 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1328 
	`add_ôem_buf
(
ôem
, 
UNKNOWN
);

1329 i‡(
isjs⁄
)

1330 
	`add_ôem_buf
(
ôem
, 
JSON1
);

1331 
d⁄e
 = 
åue
;

1335 i‡(!
d⁄e
)

1336 
	`add_ôem_buf
(
ôem
, 
buf
);

1338 
	`‰ì
(
roŸ
->
«me
);

1339 i‡(
roŸ
->
d©a_was_mÆloc
)

1340 
	`‰ì
(
roŸ
->
d©a
);

1342 i‡(
roŸ
->
√xt
 ==Ñoot)

1344 
	`‰ì
(
roŸ
);

1345 
roŸ
 = 
NULL
;

1349 
tmp
 = 
roŸ
;

1350 
roŸ
 = 
tmp
->
√xt
;

1351 
roŸ
->
¥ev
 = 
tmp
->prev;

1352 
roŸ
->
¥ev
->
√xt
 =Ñoot;

1353 
	`‰ì
(
tmp
);

1357 i‡(
isjs⁄
)

1358 
	`add_ôem_buf
(
ôem
, 
JSON5
);

1360 
	`add_ôem_buf
(
ôem
, 
SEPSTR
);

1362 
	`io_add
(
io_d©a
, 
	`DATASB
(
ôem
)->
buf
);

1364 
	`K_WLOCK
(
°rbufs
);

1365 
	`k_add_hód
(
°rbufs
, 
ôem
);

1366 
	`K_WUNLOCK
(
°rbufs
);

1368  
roŸ
;

1369 
	}
}

1371 
	#DRIVER_COUNT_DRV
(
X
Ëi‡(
devi˚s
[
i
]->
drv
->
drv_id
 =
DRIVER_
##X) \

1372 
cou¡
++;

	)

1374 #ifde‡
HAVE_AN_ASIC


1375 
	$numascs
()

1377 
cou¡
 = 0;

1378 
i
;

1380 
	`rd_lock
(&
devi˚s_lock
);

1381 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

1383 
	`ASIC_PARSE_COMMANDS
(
DRIVER_COUNT_DRV
)

1385 
	`rd_u∆ock
(&
devi˚s_lock
);

1386  
cou¡
;

1387 
	}
}

1389 
	$ascdevi˚
(
ascid
)

1391 
cou¡
 = 0;

1392 
i
;

1394 
	`rd_lock
(&
devi˚s_lock
);

1395 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

1397 
	`ASIC_PARSE_COMMANDS
(
DRIVER_COUNT_DRV
)

1398 i‡(
cou¡
 =(
ascid
 + 1))

1399 
foundô
;

1402 
	`rd_u∆ock
(&
devi˚s_lock
);

1405 
foundô
:

1407 
	`rd_u∆ock
(&
devi˚s_lock
);

1408  
i
;

1409 
	}
}

1412 #ifde‡
HAVE_AN_FPGA


1413 
	$numpgas
()

1415 
cou¡
 = 0;

1416 
i
;

1418 
	`rd_lock
(&
devi˚s_lock
);

1419 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

1421 
	`FPGA_PARSE_COMMANDS
(
DRIVER_COUNT_DRV
)

1423 
	`rd_u∆ock
(&
devi˚s_lock
);

1424  
cou¡
;

1425 
	}
}

1427 
	$pgadevi˚
(
pgaid
)

1429 
cou¡
 = 0;

1430 
i
;

1432 
	`rd_lock
(&
devi˚s_lock
);

1433 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

1435 
	`FPGA_PARSE_COMMANDS
(
DRIVER_COUNT_DRV
)

1436 i‡(
cou¡
 =(
pgaid
 + 1))

1437 
foundô
;

1440 
	`rd_u∆ock
(&
devi˚s_lock
);

1443 
foundô
:

1445 
	`rd_u∆ock
(&
devi˚s_lock
);

1446  
i
;

1447 
	}
}

1453 
	$mesßge
(
io_d©a
 *io_d©a, 
mesßgeid
, 
∑ømid
, *
∑øm2
, 
boﬁ
 
isjs⁄
)

1455 
≠i_d©a
 *
roŸ
 = 
NULL
;

1456 
buf
[
TMPBUFSIZ
];

1457 
£vîôy
[2];

1458 #ifde‡
HAVE_AN_ASIC


1459 
asc
;

1461 #ifde‡
HAVE_AN_FPGA


1462 
pga
;

1464 
i
;

1466 i‡(
isjs⁄
)

1467 
	`io_add
(
io_d©a
, 
JSON_START
 
JSON_STATUS
);

1469 
i
 = 0; 
codes
[i].
£vîôy
 !
SEVERITY_FAIL
; i++)

1471 i‡(
codes
[
i
].
code
 =
mesßgeid
)

1473 
codes
[
i
].
£vîôy
)

1475 
SEVERITY_WARN
:

1476 
£vîôy
[0] = 'W';

1478 
SEVERITY_INFO
:

1479 
£vîôy
[0] = 'I';

1481 
SEVERITY_SUCC
:

1482 
£vîôy
[0] = 'S';

1484 
SEVERITY_ERR
:

1486 
£vîôy
[0] = 'E';

1489 
£vîôy
[1] = '\0';

1491 
codes
[
i
].
∑øms
)

1493 
PARAM_PGA
:

1494 
PARAM_ASC
:

1495 
PARAM_PID
:

1496 
PARAM_INT
:

1497 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑ømid
);

1499 
PARAM_POOL
:

1500 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑ømid
, 
poﬁs
[∑ømid]->
Ωc_uæ
);

1502 #ifde‡
HAVE_AN_FPGA


1503 
PARAM_PGAMAX
:

1504 
pga
 = 
	`numpgas
();

1505 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑ømid
, 
pga
 - 1);

1508 #ifde‡
HAVE_AN_ASIC


1509 
PARAM_ASCMAX
:

1510 
asc
 = 
	`numascs
();

1511 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑ømid
, 
asc
 - 1);

1514 
PARAM_PMAX
:

1515 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
tŸÆ_poﬁs
);

1517 
PARAM_POOLMAX
:

1518 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑ømid
, 
tŸÆ_poﬁs
 - 1);

1520 
PARAM_DMAX
:

1521 #ifde‡
HAVE_AN_ASIC


1522 
asc
 = 
	`numascs
();

1524 #ifde‡
HAVE_AN_FPGA


1525 
pga
 = 
	`numpgas
();

1528 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄


1529 #ifde‡
HAVE_AN_ASIC


1530 , 
asc


1532 #ifde‡
HAVE_AN_FPGA


1533 , 
pga


1537 
PARAM_CMD
:

1538 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
JSON_COMMAND
);

1540 
PARAM_STR
:

1541 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑øm2
);

1543 
PARAM_BOTH
:

1544 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑ømid
, 
∑øm2
);

1546 
PARAM_BOOL
:

1547 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑ømid
 ? 
TRUESTR
 : 
FALSESTR
);

1549 
PARAM_SET
:

1550 
	`•rötf
(
buf
, 
codes
[
i
].
des¸ùti⁄
, 
∑øm2
, 
∑ømid
);

1552 
PARAM_NONE
:

1554 
	`°r˝y
(
buf
, 
codes
[
i
].
des¸ùti⁄
);

1557 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, 
_STATUS
, 
£vîôy
, 
Ál£
);

1558 
roŸ
 = 
	`≠i_add_time
‘oŸ, "Whí", &
whí
, 
Ál£
);

1559 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Code", &
mesßgeid
, 
Ál£
);

1560 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "Msg", 
buf
, 
Ál£
);

1561 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "Des¸ùti⁄", 
›t_≠i_des¸ùti⁄
, 
Ál£
);

1563 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

1564 i‡(
isjs⁄
)

1565 
	`io_add
(
io_d©a
, 
JSON_CLOSE
);

1570 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, 
_STATUS
, "F", 
Ál£
);

1571 
roŸ
 = 
	`≠i_add_time
‘oŸ, "Whí", &
whí
, 
Ál£
);

1572 
id
 = -1;

1573 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Code", &
id
, 
Ál£
);

1574 
	`•rötf
(
buf
, "%d", 
mesßgeid
);

1575 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "Msg", 
buf
, 
Ál£
);

1576 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "Des¸ùti⁄", 
›t_≠i_des¸ùti⁄
, 
Ál£
);

1578 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

1579 i‡(
isjs⁄
)

1580 
	`io_add
(
io_d©a
, 
JSON_CLOSE
);

1581 
	}
}

1583 #i‡
LOCK_TRACKING


1585 
	#LOCK_FMT_FFL
 " - cÆÀd from %†%s():%d"

	)

1587 
	#LOCKMSG
(
fmt
, ...Ë
	`Ârötf
(
°dîr
, "APILOCK: " fmà"\n", ##
__VA_ARGS__
)

	)

1588 
	#LOCKMSGMORE
(
fmt
, ...Ë
	`Ârötf
(
°dîr
, " " fmà"\n", ##
__VA_ARGS__
)

	)

1589 
	#LOCKMSGFFL
(
fmt
, ...Ë
	`Ârötf
(
°dîr
, "APILOCK: " fmà
LOCK_FMT_FFL
 "\n", ##
__VA_ARGS__
, 
fûe
, 
func
, 
löíum
)

	)

1590 
	#LOCKMSGFLUSH
(Ë
	`fÊush
(
°dîr
)

	)

1592 
	slock°©


1594 
uöt64_t
 
	mlock_id
;

1595 c⁄° *
	mfûe
;

1596 c⁄° *
	mfunc
;

1597 
	mlöíum
;

1598 
timevÆ
 
	mtv
;

1599 } 
	tLOCKSTAT
;

1601 
	slocklöe


1603 
locklöe
 *
	m¥ev
;

1604 
lock°©
 *
	m°©
;

1605 
locklöe
 *
	m√xt
;

1606 } 
	tLOCKLINE
;

1608 
	slocköfo


1610 *
	mlock
;

1611 
cglock_typ
 
	mtyp
;

1612 c⁄° *
	mfûe
;

1613 c⁄° *
	mfunc
;

1614 
	mlöíum
;

1615 
uöt64_t
 
	mgës
;

1616 
uöt64_t
 
	mgŸs
;

1617 
uöt64_t
 
	måõs
;

1618 
uöt64_t
 
	mdids
;

1619 
uöt64_t
 
	mdid¡s
;

1620 
uöt64_t
 
	mu∆ocks
;

1621 
LOCKSTAT
 
	mœ°gŸ
;

1622 
LOCKLINE
 *
	mlockgës
;

1623 
LOCKLINE
 *
	mlockåõs
;

1624 } 
	tLOCKINFO
;

1626 
	slockli°


1628 
LOCKINFO
 *
	möfo
;

1629 
lockli°
 *
	m√xt
;

1630 } 
	tLOCKLIST
;

1632 
uöt64_t
 
	glock_id
 = 1;

1634 
LOCKLIST
 *
	glockhód
;

1636 
	$lockmsgnow
()

1638 
timevÆ
 
now
;

1639 
tm
 *tm;

1640 
time_t
 
dt
;

1642 
	`cgtime
(&
now
);

1644 
dt
 = 
now
.
tv_£c
;

1645 
tm
 = 
	`loˇ…ime
(&
dt
);

1647 
	`LOCKMSG
("%d-%02d-%02d %02d:%02d:%02d",

1648 
tm
->
tm_yór
 + 1900,

1649 
tm
->
tm_m⁄
 + 1,

1650 
tm
->
tm_mday
,

1651 
tm
->
tm_hour
,

1652 
tm
->
tm_mö
,

1653 
tm
->
tm_£c
);

1654 
	}
}

1656 
LOCKLIST
 *
	$√wlock
(*
lock
, 
cglock_typ
 
typ
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
)

1658 
LOCKLIST
 *
li°
;

1660 
li°
 = 
	`ˇŒoc
(1, (*list));

1661 i‡(!
li°
)

1662 
	`quôhîe
(1, "OOMÜist");

1663 
li°
->
öfo
 = 
	`ˇŒoc
(1, (*(list->info)));

1664 i‡(!
li°
->
öfo
)

1665 
	`quôhîe
(1, "OOM info");

1666 
li°
->
√xt
 = 
lockhód
;

1667 
lockhód
 = 
li°
;

1669 
li°
->
öfo
->
lock
 =Üock;

1670 
li°
->
öfo
->
typ
 =Åyp;

1671 
li°
->
öfo
->
fûe
 = file;

1672 
li°
->
öfo
->
func
 = func;

1673 
li°
->
öfo
->
löíum
 =Üinenum;

1675  
li°
;

1676 
	}
}

1678 
LOCKINFO
 *
	$födlock
(*
lock
, 
cglock_typ
 
typ
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
)

1680 
LOCKLIST
 *
look
;

1682 
look
 = 
lockhód
;

1683 
look
)

1685 i‡(
look
->
öfo
->
lock
 ==Üock)

1687 
look
 =Üook->
√xt
;

1690 i‡(!
look
)

1691 
look
 = 
	`√wlock
(
lock
, 
typ
, 
fûe
, 
func
, 
löíum
);

1693  
look
->
öfo
;

1694 
	}
}

1696 
	$addgëåy
(
LOCKINFO
 *
öfo
, 
uöt64_t
 
id
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
, 
boﬁ
 
gë
)

1698 
LOCKSTAT
 *
°©
;

1699 
LOCKLINE
 *
löe
;

1701 
°©
 = 
	`ˇŒoc
(1, (*stat));

1702 i‡(!
°©
)

1703 
	`quôhîe
(1, "OOM stat");

1704 
löe
 = 
	`ˇŒoc
(1, (*line));

1705 i‡(!
löe
)

1706 
	`quôhîe
(1, "OOMÜine");

1708 i‡(
gë
)

1709 
öfo
->
gës
++;

1711 
öfo
->
åõs
++;

1713 
°©
->
lock_id
 = 
id
;

1714 
°©
->
fûe
 = file;

1715 
°©
->
func
 = func;

1716 
°©
->
löíum
 =Üinenum;

1717 
	`cgtime
(&
°©
->
tv
);

1719 
löe
->
°©
 = stat;

1721 i‡(
gë
)

1723 
löe
->
√xt
 = 
öfo
->
lockgës
;

1724 i‡(
öfo
->
lockgës
)

1725 
öfo
->
lockgës
->
¥ev
 = 
löe
;

1726 
öfo
->
lockgës
 = 
löe
;

1730 
löe
->
√xt
 = 
öfo
->
lockåõs
;

1731 i‡(
öfo
->
lockåõs
)

1732 
öfo
->
lockåõs
->
¥ev
 = 
löe
;

1733 
öfo
->
lockåõs
 = 
löe
;

1735 
	}
}

1737 
	$m¨kgŸdid
(
LOCKINFO
 *
öfo
, 
uöt64_t
 
id
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
, 
boﬁ
 
gŸ
, 
ªt
)

1739 
LOCKLINE
 *
löe
;

1741 i‡(
gŸ
)

1742 
öfo
->
gŸs
++;

1745 i‡(
ªt
 == 0)

1746 
öfo
->
dids
++;

1748 
öfo
->
did¡s
++;

1751 i‡(
gŸ
 || 
ªt
 == 0)

1753 
öfo
->
œ°gŸ
.
lock_id
 = 
id
;

1754 
öfo
->
œ°gŸ
.
fûe
 = file;

1755 
öfo
->
œ°gŸ
.
func
 = func;

1756 
öfo
->
œ°gŸ
.
löíum
 =Üinenum;

1757 
	`cgtime
(&
öfo
->
œ°gŸ
.
tv
);

1760 i‡(
gŸ
)

1761 
löe
 = 
öfo
->
lockgës
;

1763 
löe
 = 
öfo
->
lockåõs
;

1764 
löe
)

1766 i‡(
löe
->
°©
->
lock_id
 =
id
)

1768 
löe
 =Üöe->
√xt
;

1771 i‡(!
löe
)

1773 
	`lockmsgnow
();

1774 
	`LOCKMSGFFL
("ERRORáâem±Åÿm¨káÜocká†'%s'Åh© wa¢'à'%s' id=%"
PRIu64
,

1775 
gŸ
 ? "gŸ" : "did/did¡", gŸ ? "gë" : "åy", 
id
);

1779 i‡(
löe
->
¥ev
)

1780 
löe
->
¥ev
->
√xt
 =Üine->next;

1781 i‡(
löe
->
√xt
)

1782 
löe
->
√xt
->
¥ev
 =Üine->prev;

1784 i‡(
gŸ
)

1786 i‡(
öfo
->
lockgës
 =
löe
)

1787 
öfo
->
lockgës
 = 
löe
->
√xt
;

1791 i‡(
öfo
->
lockåõs
 =
löe
)

1792 
öfo
->
lockåõs
 = 
löe
->
√xt
;

1795 
	`‰ì
(
löe
->
°©
);

1796 
	`‰ì
(
löe
);

1797 
	}
}

1800 
	$locklock
()

1802 i‡(
	`u∆ikñy
(
	`±hªad_muãx_lock
(&
lock°©_lock
)))

1803 
	`quôhîe
(1, "WTF MUTEX ERROR ON LOCK!Éºno=%d", 
î∫o
);

1804 
	}
}

1806 
	$locku∆ock
()

1808 i‡(
	`u∆ikñy
(
	`±hªad_muãx_u∆ock
(&
lock°©_lock
)))

1809 
	`quôhîe
(1, "WTF MUTEX ERROR ON UNLOCK!Éºno=%d", 
î∫o
);

1810 
	}
}

1812 
uöt64_t
 
	$≠i_gëlock
(*
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
)

1814 
LOCKINFO
 *
öfo
;

1815 
uöt64_t
 
id
;

1817 
	`locklock
();

1819 
öfo
 = 
	`födlock
(
lock
, 
CGLOCK_UNKNOWN
, 
fûe
, 
func
, 
löíum
);

1820 
id
 = 
lock_id
++;

1821 
	`addgëåy
(
öfo
, 
id
, 
fûe
, 
func
, 
löíum
, 
åue
);

1823 
	`locku∆ock
();

1825  
id
;

1826 
	}
}

1828 
	$≠i_gŸlock
(
uöt64_t
 
id
, *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
)

1830 
LOCKINFO
 *
öfo
;

1832 
	`locklock
();

1834 
öfo
 = 
	`födlock
(
lock
, 
CGLOCK_UNKNOWN
, 
fûe
, 
func
, 
löíum
);

1835 
	`m¨kgŸdid
(
öfo
, 
id
, 
fûe
, 
func
, 
löíum
, 
åue
, 0);

1837 
	`locku∆ock
();

1838 
	}
}

1840 
uöt64_t
 
	$≠i_åylock
(*
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
)

1842 
LOCKINFO
 *
öfo
;

1843 
uöt64_t
 
id
;

1845 
	`locklock
();

1847 
öfo
 = 
	`födlock
(
lock
, 
CGLOCK_UNKNOWN
, 
fûe
, 
func
, 
löíum
);

1848 
id
 = 
lock_id
++;

1849 
	`addgëåy
(
öfo
, 
id
, 
fûe
, 
func
, 
löíum
, 
Ál£
);

1851 
	`locku∆ock
();

1853  
id
;

1854 
	}
}

1856 
	$≠i_didlock
(
uöt64_t
 
id
, 
ªt
, *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
)

1858 
LOCKINFO
 *
öfo
;

1860 
	`locklock
();

1862 
öfo
 = 
	`födlock
(
lock
, 
CGLOCK_UNKNOWN
, 
fûe
, 
func
, 
löíum
);

1863 
	`m¨kgŸdid
(
öfo
, 
id
, 
fûe
, 
func
, 
löíum
, 
Ál£
, 
ªt
);

1865 
	`locku∆ock
();

1866 
	}
}

1868 
	$≠i_gu∆ock
(*
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
)

1870 
LOCKINFO
 *
öfo
;

1872 
	`locklock
();

1874 
öfo
 = 
	`födlock
(
lock
, 
CGLOCK_UNKNOWN
, 
fûe
, 
func
, 
löíum
);

1875 
öfo
->
u∆ocks
++;

1877 
	`locku∆ock
();

1878 
	}
}

1880 
	$≠i_öôlock
(*
lock
, 
cglock_typ
 
typ
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löíum
)

1882 
	`locklock
();

1884 
	`födlock
(
lock
, 
typ
, 
fûe
, 
func
, 
löíum
);

1886 
	`locku∆ock
();

1887 
	}
}

1889 
	$d•_dë
(*
msg
, 
LOCKSTAT
 *
°©
)

1891 
tm
 *tm;

1892 
time_t
 
dt
;

1894 
dt
 = 
°©
->
tv
.
tv_£c
;

1895 
tm
 = 
	`loˇ…ime
(&
dt
);

1897 
	`LOCKMSGMORE
("%†id=%"
PRIu64
" by %s %s():%dát %d-%02d-%02d %02d:%02d:%02d",

1898 
msg
,

1899 
°©
->
lock_id
,

1900 
°©
->
fûe
,

1901 
°©
->
func
,

1902 
°©
->
löíum
,

1903 
tm
->
tm_yór
 + 1900,

1904 
tm
->
tm_m⁄
 + 1,

1905 
tm
->
tm_mday
,

1906 
tm
->
tm_hour
,

1907 
tm
->
tm_mö
,

1908 
tm
->
tm_£c
);

1909 
	}
}

1911 
	$d•_lock
(
LOCKINFO
 *
öfo
)

1913 
LOCKLINE
 *
löe
;

1914 *
°©us
;

1916 
	`LOCKMSG
("Lock %p created by %s %s():%d",

1917 
öfo
->
lock
,

1918 
öfo
->
fûe
,

1919 
öfo
->
func
,

1920 
öfo
->
löíum
);

1921 
	`LOCKMSGMORE
("gës:%"
PRIu64
" gots:%"PRIu64"Åries:%"PRIu64

1922 " dids:%"
PRIu64
" didnts:%"PRIu64" unlocks:%"PRIu64,

1923 
öfo
->
gës
,

1924 
öfo
->
gŸs
,

1925 
öfo
->
åõs
,

1926 
öfo
->
dids
,

1927 
öfo
->
did¡s
,

1928 
öfo
->
u∆ocks
);

1930 i‡(
öfo
->
gŸs
 > 0 || info->
dids
 > 0)

1932 i‡(
öfo
->
u∆ocks
 < info->
gŸs
 + info->
dids
)

1933 
°©us
 = "Last got/did still HELD";

1935 
°©us
 = "Last got/did (idle)";

1937 
	`d•_dë
(
°©us
, &(
öfo
->
œ°gŸ
));

1940 
	`LOCKMSGMORE
("... unused ...");

1942 i‡(
öfo
->
lockgës
)

1944 
	`LOCKMSGMORE
("BLOCKED gë†(%"
PRIu64
")", 
öfo
->
gës
 - info->
gŸs
);

1945 
löe
 = 
öfo
->
lockgës
;

1946 
löe
)

1948 
	`d•_dë
("", 
löe
->
°©
);

1949 
löe
 =Üöe->
√xt
;

1953 
	`LOCKMSGMORE
("no blocked gets");

1955 i‡(
öfo
->
lockåõs
)

1957 
	`LOCKMSGMORE
("BLOCKEDÅrõ†(%"
PRIu64
")", 
öfo
->
åõs
 - info->
dids
 - info->
did¡s
);

1958 
löe
 = 
öfo
->
lockgës
;

1959 
löe
)

1961 
	`d•_dë
("", 
löe
->
°©
);

1962 
löe
 =Üöe->
√xt
;

1966 
	`LOCKMSGMORE
("no blockedÅries");

1967 
	}
}

1969 
	$show_locks
()

1971 
LOCKLIST
 *
li°
;

1973 
	`locklock
();

1975 
	`lockmsgnow
();

1977 
li°
 = 
lockhód
;

1978 i‡(!
li°
)

1979 
	`LOCKMSG
("noÜocks?!?\n");

1982 
li°
)

1984 
	`d•_lock
(
li°
->
öfo
);

1985 
li°
 =Üi°->
√xt
;

1989 
	`LOCKMSGFLUSH
();

1991 
	`locku∆ock
();

1992 
	}
}

1995 
	$lock°©s
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

1997 #i‡
LOCK_TRACKING


1998 
	`show_locks
();

1999 
	`mesßge
(
io_d©a
, 
MSG_LOCKOK
, 0, 
NULL
, 
isjs⁄
);

2001 
	`mesßge
(
io_d©a
, 
MSG_LOCKDIS
, 0, 
NULL
, 
isjs⁄
);

2003 
	}
}

2005 
	$≠ivîsi⁄
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2007 
≠i_d©a
 *
roŸ
 = 
NULL
;

2008 
boﬁ
 
io_›í
;

2010 
	`mesßge
(
io_d©a
, 
MSG_VERSION
, 0, 
NULL
, 
isjs⁄
);

2011 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_VERSION
 : 
_VERSION
 COMSTR);

2013 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "CGMöî", 
VERSION
, 
Ál£
);

2014 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "API", 
APIVERSION
, 
Ál£
);

2015 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Möî", 
g_möî_vîsi⁄
, 
Ál£
);

2016 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "CompûeTime", 
g_möî_compûëime
, 
Ál£
);

2017 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Ty≥", 
g_möî_ty≥
, 
Ál£
);

2019 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

2020 i‡(
isjs⁄
 && 
io_›í
)

2021 
	`io_˛o£
(
io_d©a
);

2022 
	}
}

2024 
	$möîc⁄fig
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2026 
≠i_d©a
 *
roŸ
 = 
NULL
;

2027 
boﬁ
 
io_›í
;

2028 
asccou¡
 = 0;

2029 
pgacou¡
 = 0;

2031 #ifde‡
HAVE_AN_ASIC


2032 
asccou¡
 = 
	`numascs
();

2035 #ifde‡
HAVE_AN_FPGA


2036 
pgacou¡
 = 
	`numpgas
();

2039 
	`mesßge
(
io_d©a
, 
MSG_MINECONFIG
, 0, 
NULL
, 
isjs⁄
);

2040 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_MINECONFIG
 : 
_MINECONFIG
 COMSTR);

2042 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "ASC Cou¡", &
asccou¡
, 
Ál£
);

2043 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "PGA Cou¡", &
pgacou¡
, 
Ál£
);

2044 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Poﬁ Cou¡", &
tŸÆ_poﬁs
, 
Ál£
);

2045 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Så©egy", 
°øãgõs
[
poﬁ_°øãgy
].
s
, 
Ál£
);

2046 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Log I¡îvÆ", &
›t_log_öãrvÆ
, 
Ál£
);

2047 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Devi˚ Code", 
DEVICECODE
, 
Ál£
);

2048 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "OS", 
OSINFO
, 
Ál£
);

2049 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "Faûovî-O∆y", &
›t_Áû_⁄ly
, 
Ál£
);

2050 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "SˇnTime", &
›t_sˇ¡ime
, 
Ál£
);

2051 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Queue", &
›t_queue
, 
Ál£
);

2052 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Expúy", &
›t_expúy
, 
Ál£
);

2053 #ifde‡
USE_USBUTILS


2054 i‡(
hŸ∂ug_time
 == 0)

2055 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "HŸ∂ug", 
DISABLED
, 
Ál£
);

2057 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "HŸ∂ug", &
hŸ∂ug_time
, 
Ál£
);

2059 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "HŸ∂ug", 
NONE
, 
Ál£
);

2062 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

2063 i‡(
isjs⁄
 && 
io_›í
)

2064 
	`io_˛o£
(
io_d©a
);

2065 
	}
}

2067 c⁄° *
	$°©us2°r
(
Æive
 
°©us
)

2069 
°©us
)

2071 
LIFE_WELL
:

2072  
ALIVE
;

2073 
LIFE_SICK
:

2074  
SICK
;

2075 
LIFE_DEAD
:

2076  
DEAD
;

2077 
LIFE_NOSTART
:

2078  
NOSTART
;

2079 
LIFE_INIT
:

2080  
INIT
;

2082  
UNKNOWN
;

2084 
	}
}

2086 #ifde‡
HAVE_AN_ASIC


2087 
	$asc°©us
(
io_d©a
 *io_d©a, 
asc
, 
boﬁ
 
isjs⁄
, boﬁ 
¥ecom
)

2089 
≠i_d©a
 *
roŸ
 = 
NULL
;

2090 *
íabÀd
;

2091 *
°©us
;

2092 
numasc
 = 
	`numascs
();

2094 i‡(
numasc
 > 0 && 
asc
 >= 0 &&ásc <Çumasc)

2096 
dev
 = 
	`ascdevi˚
(
asc
);

2097 i‡(
dev
 < 0)

2100 
cgpu_öfo
 *
cgpu
 = 
	`gë_devi˚s
(
dev
);

2101 
ãmp
 = 
cgpu
->temp;

2102 
dev_ru¡ime
;

2104 
dev_ru¡ime
 = 
	`cgpu_ru¡ime
(
cgpu
);

2106 
cgpu
->
utûôy
 = cgpu->
ac˚±ed
 / 
dev_ru¡ime
 * 60;

2108 i‡(
cgpu
->
deví
 !
DEV_DISABLED
)

2109 
íabÀd
 = (*)
YES
;

2111 
íabÀd
 = (*)
NO
;

2113 
°©us
 = (*)
	`°©us2°r
(
cgpu
->status);

2115 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "ASC", &
asc
, 
Ál£
);

2116 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Name", 
cgpu
->
drv
->
«me
, 
Ál£
);

2117 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "ID", &(
cgpu
->
devi˚_id
), 
Ál£
);

2118 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "E«bÀd", 
íabÀd
, 
Ál£
);

2119 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Sètus", 
°©us
, 
Ál£
);

2120 
roŸ
 = 
	`≠i_add_ãmp
‘oŸ, "Tem≥øtuª", &
ãmp
, 
Ál£
);

2121 
mhs
 = 
cgpu
->
tŸÆ_mhashes
 / 
dev_ru¡ime
;

2122 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "MHSáv", &
mhs
, 
Ál£
);

2123 
mh¢ame
[27];

2124 
	`•rötf
(
mh¢ame
, "MHS %ds", 
›t_log_öãrvÆ
);

2125 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, 
mh¢ame
, &(
cgpu
->
rﬁlög
), 
Ál£
);

2126 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Ac˚±ed", &(
cgpu
->
ac˚±ed
), 
Ál£
);

2127 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Reje˘ed", &(
cgpu
->
ªje˘ed
), 
Ál£
);

2128 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "H¨dw¨êEº‹s", &(
cgpu
->
hw_îr‹s
), 
Ál£
);

2129 
roŸ
 = 
	`≠i_add_utûôy
‘oŸ, "Utûôy", &(
cgpu
->
utûôy
), 
Ál£
);

2130 
œ°_sh¨e_poﬁ
 = 
cgpu
->
œ°_sh¨e_poﬁ_time
 > 0 ?

2131 
cgpu
->
œ°_sh¨e_poﬁ
 : -1;

2132 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "La° Sh¨êPoﬁ", &
œ°_sh¨e_poﬁ
, 
Ál£
);

2133 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° Sh¨êTime", &(
cgpu
->
œ°_sh¨e_poﬁ_time
), 
Ál£
);

2134 
roŸ
 = 
	`≠i_add_mhtŸÆ
‘oŸ, "TŸÆ MH", &(
cgpu
->
tŸÆ_mhashes
), 
Ál£
);

2135 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Diff1 W‹k", &(
cgpu
->
diff1
), 
Ál£
);

2136 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y Ac˚±ed", &(
cgpu
->
diff_ac˚±ed
), 
Ál£
);

2137 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y Reje˘ed", &(
cgpu
->
diff_ªje˘ed
), 
Ál£
);

2138 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "La° Sh¨êDifficu…y", &(
cgpu
->
œ°_sh¨e_diff
), 
Ál£
);

2139 #ifde‡
USE_USBUTILS


2140 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "NÿDevi˚", &(
cgpu
->
usböfo
.
nodev
), 
Ál£
);

2142 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° VÆid W‹k", &(
cgpu
->
œ°_devi˚_vÆid_w‹k
), 
Ál£
);

2143 
hwp
 = (
cgpu
->
hw_îr‹s
 + cgpu->
diff1
) ?

2144 ()(
cgpu
->
hw_îr‹s
Ë/ ()(cgpu->hw_îr‹†+ cgpu->
diff1
) : 0;

2145 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Devi˚ H¨dw¨e%", &
hwp
, 
Ál£
);

2146 
ªjp
 = 
cgpu
->
diff1
 ?

2147 ()(
cgpu
->
diff_ªje˘ed
Ë/ ()(cgpu->
diff1
) : 0;

2148 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Devi˚ Reje˘ed%", &
ªjp
, 
Ál£
);

2149 
roŸ
 = 
	`≠i_add_ñ≠£d
‘oŸ, "Devi˚ Eœp£d", &(
dev_ru¡ime
), 
Ál£
);

2151 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
¥ecom
);

2153 
	}
}

2156 #ifde‡
HAVE_AN_FPGA


2157 
	$pga°©us
(
io_d©a
 *io_d©a, 
pga
, 
boﬁ
 
isjs⁄
, boﬁ 
¥ecom
)

2159 
≠i_d©a
 *
roŸ
 = 
NULL
;

2160 *
íabÀd
;

2161 *
°©us
;

2162 
numpga
 = 
	`numpgas
();

2164 i‡(
numpga
 > 0 && 
pga
 >= 0 &&Öga <Çumpga)

2166 
dev
 = 
	`pgadevi˚
(
pga
);

2167 i‡(
dev
 < 0)

2170 
cgpu_öfo
 *
cgpu
 = 
	`gë_devi˚s
(
dev
);

2171 
‰equícy
 = 0;

2172 
ãmp
 = 
cgpu
->temp;

2173 
timevÆ
 
now
;

2174 
dev_ru¡ime
;

2176 i‡(
cgpu
->
dev_°¨t_tv
.
tv_£c
 == 0)

2177 
dev_ru¡ime
 = 
tŸÆ_£cs
;

2180 
	`cgtime
(&
now
);

2181 
dev_ru¡ime
 = 
	`tdiff
(&
now
, &(
cgpu
->
dev_°¨t_tv
));

2184 i‡(
dev_ru¡ime
 < 1.0)

2185 
dev_ru¡ime
 = 1.0;

2187 #ifde‡
USE_MODMINER


2188 i‡(
cgpu
->
drv
->
drv_id
 =
DRIVER_modmöî
)

2189 
‰equícy
 = 
cgpu
->
˛ock
;

2192 
cgpu
->
utûôy
 = cgpu->
ac˚±ed
 / 
dev_ru¡ime
 * 60;

2194 i‡(
cgpu
->
deví
 !
DEV_DISABLED
)

2195 
íabÀd
 = (*)
YES
;

2197 
íabÀd
 = (*)
NO
;

2199 
°©us
 = (*)
	`°©us2°r
(
cgpu
->status);

2201 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "PGA", &
pga
, 
Ál£
);

2202 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Name", 
cgpu
->
drv
->
«me
, 
Ál£
);

2203 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "ID", &(
cgpu
->
devi˚_id
), 
Ál£
);

2204 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "E«bÀd", 
íabÀd
, 
Ál£
);

2205 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Sètus", 
°©us
, 
Ál£
);

2206 
roŸ
 = 
	`≠i_add_ãmp
‘oŸ, "Tem≥øtuª", &
ãmp
, 
Ál£
);

2207 
mhs
 = 
cgpu
->
tŸÆ_mhashes
 / 
dev_ru¡ime
;

2208 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "MHSáv", &
mhs
, 
Ál£
);

2209 
mh¢ame
[27];

2210 
	`•rötf
(
mh¢ame
, "MHS %ds", 
›t_log_öãrvÆ
);

2211 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, 
mh¢ame
, &(
cgpu
->
rﬁlög
), 
Ál£
);

2212 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Ac˚±ed", &(
cgpu
->
ac˚±ed
), 
Ál£
);

2213 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Reje˘ed", &(
cgpu
->
ªje˘ed
), 
Ál£
);

2214 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "H¨dw¨êEº‹s", &(
cgpu
->
hw_îr‹s
), 
Ál£
);

2215 
roŸ
 = 
	`≠i_add_utûôy
‘oŸ, "Utûôy", &(
cgpu
->
utûôy
), 
Ál£
);

2216 
œ°_sh¨e_poﬁ
 = 
cgpu
->
œ°_sh¨e_poﬁ_time
 > 0 ?

2217 
cgpu
->
œ°_sh¨e_poﬁ
 : -1;

2218 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "La° Sh¨êPoﬁ", &
œ°_sh¨e_poﬁ
, 
Ál£
);

2219 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° Sh¨êTime", &(
cgpu
->
œ°_sh¨e_poﬁ_time
), 
Ál£
);

2220 
roŸ
 = 
	`≠i_add_mhtŸÆ
‘oŸ, "TŸÆ MH", &(
cgpu
->
tŸÆ_mhashes
), 
Ál£
);

2221 
roŸ
 = 
	`≠i_add_‰eq
‘oŸ, "Fªquícy", &
‰equícy
, 
Ál£
);

2222 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Diff1 W‹k", &(
cgpu
->
diff1
), 
Ál£
);

2223 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y Ac˚±ed", &(
cgpu
->
diff_ac˚±ed
), 
Ál£
);

2224 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y Reje˘ed", &(
cgpu
->
diff_ªje˘ed
), 
Ál£
);

2225 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "La° Sh¨êDifficu…y", &(
cgpu
->
œ°_sh¨e_diff
), 
Ál£
);

2226 #ifde‡
USE_USBUTILS


2227 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "NÿDevi˚", &(
cgpu
->
usböfo
.
nodev
), 
Ál£
);

2229 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° VÆid W‹k", &(
cgpu
->
œ°_devi˚_vÆid_w‹k
), 
Ál£
);

2230 
hwp
 = (
cgpu
->
hw_îr‹s
 + cgpu->
diff1
) ?

2231 ()(
cgpu
->
hw_îr‹s
Ë/ ()(cgpu->hw_îr‹†+ cgpu->
diff1
) : 0;

2232 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Devi˚ H¨dw¨e%", &
hwp
, 
Ál£
);

2233 
ªjp
 = 
cgpu
->
diff1
 ?

2234 ()(
cgpu
->
diff_ªje˘ed
Ë/ ()(cgpu->
diff1
) : 0;

2235 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Devi˚ Reje˘ed%", &
ªjp
, 
Ál£
);

2236 
roŸ
 = 
	`≠i_add_ñ≠£d
‘oŸ, "Devi˚ Eœp£d", &(
dev_ru¡ime
), 
Ál£
);

2238 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
¥ecom
);

2240 
	}
}

2243 
	$dev°©us
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2245 
boﬁ
 
io_›í
 = 
Ál£
;

2246 
numasc
 = 0;

2247 
numpga
 = 0;

2249 #ifde‡
HAVE_AN_ASIC


2250 
numasc
 = 
	`numascs
();

2253 #ifde‡
HAVE_AN_FPGA


2254 
numpga
 = 
	`numpgas
();

2257 i‡(
numpga
 =0 && 
numasc
 == 0)

2259 
	`mesßge
(
io_d©a
, 
MSG_NODEVS
, 0, 
NULL
, 
isjs⁄
);

2264 
	`mesßge
(
io_d©a
, 
MSG_DEVS
, 0, 
NULL
, 
isjs⁄
);

2265 i‡(
isjs⁄
)

2266 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_DEVS
);

2268 #ifde‡
HAVE_AN_ASIC


2269 i‡(
numasc
 > 0)

2271 
i
 = 0; i < 
numasc
; i++)

2273 
	`asc°©us
(
io_d©a
, 
i
, 
isjs⁄
, isjs⁄ && 
devcou¡
 > 0);

2275 
devcou¡
++;

2280 #ifde‡
HAVE_AN_FPGA


2281 i‡(
numpga
 > 0)

2283 
i
 = 0; i < 
numpga
; i++)

2285 
	`pga°©us
(
io_d©a
, 
i
, 
isjs⁄
, isjs⁄ && 
devcou¡
 > 0);

2287 
devcou¡
++;

2292 i‡(
isjs⁄
 && 
io_›í
)

2293 
	`io_˛o£
(
io_d©a
);

2294 
	}
}

2296 
	$edev°©us
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2298 
boﬁ
 
io_›í
 = 
Ál£
;

2299 
numasc
 = 0;

2300 
numpga
 = 0;

2301 #ifde‡
USE_USBUTILS


2302 
time_t
 
howﬁd£c
 = 0;

2305 #ifde‡
HAVE_AN_ASIC


2306 
numasc
 = 
	`numascs
();

2309 #ifde‡
HAVE_AN_FPGA


2310 
numpga
 = 
	`numpgas
();

2313 i‡(
numpga
 =0 && 
numasc
 == 0)

2315 
	`mesßge
(
io_d©a
, 
MSG_NODEVS
, 0, 
NULL
, 
isjs⁄
);

2319 #ifde‡
USE_USBUTILS


2320 i‡(
∑øm
 && *param)

2321 
howﬁd£c
 = (
time_t
)
	`©oi
(
∑øm
);

2324 
	`mesßge
(
io_d©a
, 
MSG_DEVS
, 0, 
NULL
, 
isjs⁄
);

2325 i‡(
isjs⁄
)

2326 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_DEVS
);

2328 #ifde‡
HAVE_AN_ASIC


2329 i‡(
numasc
 > 0)

2331 
i
 = 0; i < 
numasc
; i++)

2333 #ifde‡
USE_USBUTILS


2334 
dev
 = 
	`ascdevi˚
(
i
);

2335 i‡(
dev
 < 0)

2338 
cgpu_öfo
 *
cgpu
 = 
	`gë_devi˚s
(
dev
);

2339 i‡(!
cgpu
)

2341 i‡(
cgpu
->
bœckli°ed
)

2343 i‡(
cgpu
->
usböfo
.
nodev
)

2345 i‡(
howﬁd£c
 <= 0)

2347 i‡((
whí
 - 
cgpu
->
usböfo
.
œ°_nodev
.
tv_£c
Ë>
howﬁd£c
)

2352 
	`asc°©us
(
io_d©a
, 
i
, 
isjs⁄
, isjs⁄ && 
devcou¡
 > 0);

2354 
devcou¡
++;

2359 #ifde‡
HAVE_AN_FPGA


2360 i‡(
numpga
 > 0)

2362 
i
 = 0; i < 
numpga
; i++)

2364 #ifde‡
USE_USBUTILS


2365 
dev
 = 
	`pgadevi˚
(
i
);

2366 i‡(
dev
 < 0)

2369 
cgpu_öfo
 *
cgpu
 = 
	`gë_devi˚s
(
dev
);

2370 i‡(!
cgpu
)

2372 i‡(
cgpu
->
bœckli°ed
)

2374 i‡(
cgpu
->
usböfo
.
nodev
)

2376 i‡(
howﬁd£c
 <= 0)

2378 i‡((
whí
 - 
cgpu
->
usböfo
.
œ°_nodev
.
tv_£c
Ë>
howﬁd£c
)

2383 
	`pga°©us
(
io_d©a
, 
i
, 
isjs⁄
, isjs⁄ && 
devcou¡
 > 0);

2385 
devcou¡
++;

2390 i‡(
isjs⁄
 && 
io_›í
)

2391 
	`io_˛o£
(
io_d©a
);

2392 
	}
}

2394 #ifde‡
HAVE_AN_FPGA


2395 
	$pgadev
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2397 
boﬁ
 
io_›í
 = 
Ál£
;

2398 
numpga
 = 
	`numpgas
();

2399 
id
;

2401 i‡(
numpga
 == 0)

2403 
	`mesßge
(
io_d©a
, 
MSG_PGANON
, 0, 
NULL
, 
isjs⁄
);

2407 i‡(
∑øm
 =
NULL
 || *param == '\0')

2409 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

2413 
id
 = 
	`©oi
(
∑øm
);

2414 i‡(
id
 < 0 || id >
numpga
)

2416 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

2420 
	`mesßge
(
io_d©a
, 
MSG_PGADEV
, 
id
, 
NULL
, 
isjs⁄
);

2422 i‡(
isjs⁄
)

2423 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_PGA
);

2425 
	`pga°©us
(
io_d©a
, 
id
, 
isjs⁄
, 
Ál£
);

2427 i‡(
isjs⁄
 && 
io_›í
)

2428 
	`io_˛o£
(
io_d©a
);

2429 
	}
}

2431 
	$pg´«bÀ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2433 
cgpu_öfo
 *
cgpu
;

2434 
numpga
 = 
	`numpgas
();

2435 
thr_öfo
 *
thr
;

2436 
pga
;

2437 
id
;

2438 
i
;

2440 i‡(
numpga
 == 0)

2442 
	`mesßge
(
io_d©a
, 
MSG_PGANON
, 0, 
NULL
, 
isjs⁄
);

2446 i‡(
∑øm
 =
NULL
 || *param == '\0')

2448 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

2452 
id
 = 
	`©oi
(
∑øm
);

2453 i‡(
id
 < 0 || id >
numpga
)

2455 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

2459 
dev
 = 
	`pgadevi˚
(
id
);

2460 i‡(
dev
 < 0)

2462 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

2466 
cgpu
 = 
	`gë_devi˚s
(
dev
);

2468 
	`≠∂og
(
LOG_DEBUG
, "API:ÑequestÅoÖgaenableÖgaid %d device %d %s%u",

2469 
id
, 
dev
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

2471 i‡(
cgpu
->
deví
 !
DEV_DISABLED
)

2473 
	`mesßge
(
io_d©a
, 
MSG_PGALRENA
, 
id
, 
NULL
, 
isjs⁄
);

2478 i‡(
cgpu
->
°©us
 !
LIFE_WELL
)

2480 
	`mesßge
(
io_d©a
, 
MSG_PGAUNW
, 
id
, 
NULL
, 
isjs⁄
);

2485 #ifde‡
USE_USBUTILS


2486 i‡(
cgpu
->
usböfo
.
nodev
)

2488 
	`mesßge
(
io_d©a
, 
MSG_PGAUSBNODEV
, 
id
, 
NULL
, 
isjs⁄
);

2493 
i
 = 0; i < 
möög_thªads
; i++)

2495 
thr
 = 
	`gë_thªad
(
i
);

2496 
pga
 = 
thr
->
cgpu
->
cgmöî_id
;

2497 i‡(
pga
 =
dev
)

2499 
cgpu
->
deví
 = 
DEV_ENABLED
;

2500 
	`≠∂og
(
LOG_DEBUG
, "API: Pushög semÖo°Åÿthªad %d", 
thr
->
id
);

2501 
	`cg£m_po°
(&
thr
->
£m
);

2505 
	`mesßge
(
io_d©a
, 
MSG_PGAENA
, 
id
, 
NULL
, 
isjs⁄
);

2506 
	}
}

2508 
	$pgadißbÀ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2510 
cgpu_öfo
 *
cgpu
;

2511 
numpga
 = 
	`numpgas
();

2512 
id
;

2514 i‡(
numpga
 == 0)

2516 
	`mesßge
(
io_d©a
, 
MSG_PGANON
, 0, 
NULL
, 
isjs⁄
);

2520 i‡(
∑øm
 =
NULL
 || *param == '\0')

2522 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

2526 
id
 = 
	`©oi
(
∑øm
);

2527 i‡(
id
 < 0 || id >
numpga
)

2529 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

2533 
dev
 = 
	`pgadevi˚
(
id
);

2534 i‡(
dev
 < 0)

2536 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

2540 
cgpu
 = 
	`gë_devi˚s
(
dev
);

2542 
	`≠∂og
(
LOG_DEBUG
, "API:ÑequestÅoÖgadisableÖgaid %d device %d %s%u",

2543 
id
, 
dev
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

2545 i‡(
cgpu
->
deví
 =
DEV_DISABLED
)

2547 
	`mesßge
(
io_d©a
, 
MSG_PGALRDIS
, 
id
, 
NULL
, 
isjs⁄
);

2551 
cgpu
->
deví
 = 
DEV_DISABLED
;

2553 
	`mesßge
(
io_d©a
, 
MSG_PGADIS
, 
id
, 
NULL
, 
isjs⁄
);

2554 
	}
}

2556 
	$pgaidítify
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2558 
cgpu_öfo
 *
cgpu
;

2559 
devi˚_drv
 *
drv
;

2560 
numpga
 = 
	`numpgas
();

2561 
id
;

2563 i‡(
numpga
 == 0)

2565 
	`mesßge
(
io_d©a
, 
MSG_PGANON
, 0, 
NULL
, 
isjs⁄
);

2569 i‡(
∑øm
 =
NULL
 || *param == '\0')

2571 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

2575 
id
 = 
	`©oi
(
∑øm
);

2576 i‡(
id
 < 0 || id >
numpga
)

2578 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

2582 
dev
 = 
	`pgadevi˚
(
id
);

2583 i‡(
dev
 < 0)

2585 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

2589 
cgpu
 = 
	`gë_devi˚s
(
dev
);

2590 
drv
 = 
cgpu
->drv;

2592 i‡(!
drv
->
idítify_devi˚
)

2593 
	`mesßge
(
io_d©a
, 
MSG_PGANOID
, 
id
, 
NULL
, 
isjs⁄
);

2596 
drv
->
	`idítify_devi˚
(
cgpu
);

2597 
	`mesßge
(
io_d©a
, 
MSG_PGAIDENT
, 
id
, 
NULL
, 
isjs⁄
);

2599 
	}
}

2602 
	$poﬁ°©us
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2604 
≠i_d©a
 *
roŸ
 = 
NULL
;

2605 
boﬁ
 
io_›í
 = 
Ál£
;

2606 *
°©us
, *
Õ
;

2607 
i
;

2608 
hour
 = 0;

2609 
möuã
 = 0;

2610 
£c⁄d
 = 0;

2612 
œ°time
[256] = {0};

2613 
timediff
 = 0;

2615 i‡(
tŸÆ_poﬁs
 == 0)

2617 
	`mesßge
(
io_d©a
, 
MSG_NOPOOL
, 0, 
NULL
, 
isjs⁄
);

2621 
	`mesßge
(
io_d©a
, 
MSG_POOL
, 0, 
NULL
, 
isjs⁄
);

2623 i‡(
isjs⁄
)

2624 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_POOLS
);

2626 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

2628 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

2630 i‡(
poﬁ
->
ªmoved
)

2633 
poﬁ
->
íabÀd
)

2635 
POOL_DISABLED
:

2636 
°©us
 = (*)
DISABLED
;

2638 
POOL_REJECTING
:

2639 
°©us
 = (*)
REJECTING
;

2641 
POOL_ENABLED
:

2642 i‡(
poﬁ
->
idÀ
)

2643 
°©us
 = (*)
DEAD
;

2645 
°©us
 = (*)
ALIVE
;

2648 
°©us
 = (*)
UNKNOWN
;

2652 i‡(
poﬁ
->
hdr_∑th
)

2653 
Õ
 = (*)
YES
;

2655 
Õ
 = (*)
NO
;

2657 if(
poﬁ
->
œ°_sh¨e_time
 <= 0)

2659 
	`°r˝y
(
œ°time
, "0");

2663 
timediff
 = 
	`time
(
NULL
Ë- 
poﬁ
->
œ°_sh¨e_time
;

2664 if(
timediff
 < 0)

2665 
timediff
 = 0;

2667 
hour
 = 
timediff
 / 3600;

2668 
möuã
 = (
timediff
 % 3600) / 60;

2669 
£c⁄d
 = (
timediff
 % 3600) % 60;

2670 
	`•rötf
(
œ°time
, "%d:%02d:%02d", 
hour
, 
möuã
, 
£c⁄d
);

2673 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "POOL", &
i
, 
Ál£
);

2674 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "URL", 
poﬁ
->
Ωc_uæ
, 
Ál£
);

2675 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Sètus", 
°©us
, 
Ál£
);

2676 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Pri‹ôy", &(
poﬁ
->
¥io
), 
Ál£
);

2677 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "QuŸa", &
poﬁ
->
quŸa
, 
Ál£
);

2678 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "L⁄g Pﬁl", 
Õ
, 
Ál£
);

2679 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "Gëw‹ks", &(
poﬁ
->
gëw‹k_ªque°ed
), 
Ál£
);

2680 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Ac˚±ed", &(
poﬁ
->
ac˚±ed
), 
Ál£
);

2681 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Reje˘ed", &(
poﬁ
->
ªje˘ed
), 
Ál£
);

2683 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "Disˇrded", &(
poﬁ
->
disˇrded_w‹k
), 
Ál£
);

2684 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "SèÀ", &(
poﬁ
->
°Æe_sh¨es
), 
Ál£
);

2685 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "Gë Faûuªs", &(
poﬁ
->
gëÁû_ocˇsi⁄s
), 
Ál£
);

2686 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "RemŸêFaûuªs", &(
poﬁ
->
ªmŸeÁû_ocˇsi⁄s
), 
Ál£
);

2687 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "U£r", 
poﬁ
->
Ωc_u£r
, 
Ál£
);

2689 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "La° Sh¨êTime", 
œ°time
, 
Ál£
);

2690 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Diff", 
poﬁ
->
diff
, 
Ál£
);

2691 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Diff1 Sh¨es", &(
poﬁ
->
diff1
), 
Ál£
);

2692 i‡(
poﬁ
->
Ωc_¥oxy
)

2694 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Proxy Ty≥", 
	`¥oxyty≥
(
poﬁ
->
Ωc_¥oxyty≥
), 
Ál£
);

2695 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "Proxy", 
poﬁ
->
Ωc_¥oxy
, 
Ál£
);

2699 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Proxy Ty≥", 
BLANK
, 
Ál£
);

2700 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Proxy", 
BLANK
, 
Ál£
);

2702 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y Ac˚±ed", &(
poﬁ
->
diff_ac˚±ed
), 
Ál£
);

2703 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y Reje˘ed", &(
poﬁ
->
diff_ªje˘ed
), 
Ál£
);

2704 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y SèÀ", &(
poﬁ
->
diff_°Æe
), 
Ál£
);

2705 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "La° Sh¨êDifficu…y", &(
poﬁ
->
œ°_sh¨e_diff
), 
Ál£
);

2706 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "Ha†Så©um", &(
poﬁ
->
has_°øtum
), 
Ál£
);

2707 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "Så©um A˘ive", &(
poﬁ
->
°øtum_a˘ive
), 
Ál£
);

2708 i‡(
poﬁ
->
°øtum_a˘ive
)

2709 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "Så©um URL", 
poﬁ
->
°øtum_uæ
, 
Ál£
);

2711 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Så©um URL", 
BLANK
, 
Ál£
);

2712 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "Ha†GBT", &(
poﬁ
->
has_gbt
), 
Ál£
);

2713 
roŸ
 = 
	`≠i_add_uöt64
‘oŸ, "Be° Sh¨e", &(
poﬁ
->
be°_diff
), 
åue
);

2714 
ªjp
 = (
poﬁ
->
diff_ac˚±ed
 +Öoﬁ->
diff_ªje˘ed
 +Öoﬁ->
diff_°Æe
) ?

2715 ()(
poﬁ
->
diff_ªje˘ed
Ë/ ()’oﬁ->
diff_ac˚±ed
 +Öoﬁ->diff_ªje˘ed +Öoﬁ->
diff_°Æe
) : 0;

2716 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Poﬁ Reje˘ed%", &
ªjp
, 
Ál£
);

2717 
°Æï
 = (
poﬁ
->
diff_ac˚±ed
 +Öoﬁ->
diff_ªje˘ed
 +Öoﬁ->
diff_°Æe
) ?

2718 ()(
poﬁ
->
diff_°Æe
Ë/ ()’oﬁ->
diff_ac˚±ed
 +Öoﬁ->
diff_ªje˘ed
 +Öool->diff_stale) : 0;

2719 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Poﬁ SèÀ%", &
°Æï
, 
Ál£
);

2721 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, isjs⁄ && (
i
 > 0));

2724 i‡(
isjs⁄
 && 
io_›í
)

2725 
	`io_˛o£
(
io_d©a
);

2726 
	}
}

2728 
	$lcddi•œy
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2730 
≠i_d©a
 *
roŸ
 = 
NULL
;

2731 
boﬁ
 
io_›í
 = 
Ál£
;

2732 
ghs
;

2734 
szödex
[32] = {0};

2735 
szÁn
[32] = {0};

2736 
szãmp
[32] = {0};

2737 
szpoﬁ
[32] = {0};

2738 
szu£r
[32] = {0};

2740 
poﬁ
 *poﬁ = 
	`cuºít_poﬁ
();

2742 
	`mesßge
(
io_d©a
, 
MSG_POOL
, 0, 
NULL
, 
isjs⁄
);

2744 i‡(
isjs⁄
)

2745 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_POOLS
);

2747 
ghs
 = 
tŸÆ_mhashes_d⁄e
 / 
tŸÆ_£cs
;

2749 
	`°r˝y
(
szödex
, "0");

2750 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "LCD", 
szödex
, 
Ál£
);

2752 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHS5s", &(
g_di•œyed_rﬁlög
), 
Ál£
);

2753 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHSavg", &(
ghs
), 
Ál£
);

2755 
	`•rötf
(
szÁn
, "%d", 
g_max_Án
);

2756 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Án", 
szÁn
, 
Ál£
);

2757 
	`•rötf
(
szãmp
, "%d", 
g_max_ãmp
);

2758 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "ãmp", 
szãmp
, 
Ál£
);

2760 if(
poﬁ
 =
NULL
)

2762 
	`°r˝y
(
szpoﬁ
, "no");

2763 
	`°r˝y
(
szu£r
, "no");

2764 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "poﬁ", 
szpoﬁ
, 
Ál£
);

2765 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "u£r", 
szu£r
, 
Ál£
);

2769 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "poﬁ", 
poﬁ
->
Ωc_uæ
, 
Ál£
);

2770 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "u£r", 
poﬁ
->
Ωc_u£r
, 
Ál£
);

2773 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, isjson);

2775 i‡(
isjs⁄
 && 
io_›í
)

2776 
	`io_˛o£
(
io_d©a
);

2777 
	}
}

2779 
	$summ¨y
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2781 
≠i_d©a
 *
roŸ
 = 
NULL
;

2782 
boﬁ
 
io_›í
;

2783 
utûôy
, 
ghs
, 
w‹k_utûôy
;

2785 
	`mesßge
(
io_d©a
, 
MSG_SUMM
, 0, 
NULL
, 
isjs⁄
);

2786 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_SUMMARY
 : 
_SUMMARY
 COMSTR);

2789 
	`muãx_lock
(&
hash_lock
);

2790 #i‡
	`deföed
(
USE_BITMAIN_C5
Ë|| deföed(
USE_BITMAIN_V9
)

2791 
tŸÆ_diff1
 = 
tŸÆ_diff_ac˚±ed
 + 
tŸÆ_diff_ªje˘ed
 + 
tŸÆ_diff_°Æe
;

2794 
utûôy
 = 
tŸÆ_ac˚±ed
 / ( 
tŸÆ_£cs
 ?Åotal_secs : 1 ) * 60;

2796 
ghs
 = 
tŸÆ_mhashes_d⁄e
 / 
tŸÆ_£cs
;

2799 
w‹k_utûôy
 = 
tŸÆ_diff1
 / ( 
tŸÆ_£cs
 ?Åotal_secs : 1 ) * 60;

2801 
roŸ
 = 
	`≠i_add_ñ≠£d
‘oŸ, "Eœp£d", &(
tŸÆ_£cs
), 
åue
);

2802 #i‡
	`deföed
(
USE_BITMAIN_C5
Ë|| deföed(
USE_BITMAIN_V9
)

2803 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "GHS 5s", 
di•œyed_hash_øã
, 
Ál£
);

2805 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHS 5s", &(
g_di•œyed_rﬁlög
), 
Ál£
);

2807 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHSáv", &(
ghs
), 
Ál£
);

2808 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "Found Blocks", &(
found_blocks
), 
åue
);

2809 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Gëw‹ks", &(
tŸÆ_gëw‹ks
), 
åue
);

2810 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Ac˚±ed", &(
tŸÆ_ac˚±ed
), 
åue
);

2811 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Reje˘ed", &(
tŸÆ_ªje˘ed
), 
åue
);

2812 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "H¨dw¨êEº‹s", &(
hw_îr‹s
), 
åue
);

2813 
roŸ
 = 
	`≠i_add_utûôy
‘oŸ, "Utûôy", &(
utûôy
), 
Ál£
);

2814 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "Disˇrded", &(
tŸÆ_disˇrded
), 
åue
);

2815 
roŸ
 = 
	`≠i_add_öt64
‘oŸ, "SèÀ", &(
tŸÆ_°Æe
), 
åue
);

2816 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "Gë Faûuªs", &(
tŸÆ_go
), 
åue
);

2817 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "Loˇ»W‹k", &(
loˇl_w‹k
), 
åue
);

2818 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "RemŸêFaûuªs", &(
tŸÆ_ro
), 
åue
);

2819 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "Nëw‹k Blocks", &(
√w_blocks
), 
åue
);

2820 
roŸ
 = 
	`≠i_add_mhtŸÆ
‘oŸ, "TŸÆ MH", &(
tŸÆ_mhashes_d⁄e
), 
åue
);

2821 
roŸ
 = 
	`≠i_add_utûôy
‘oŸ, "W‹k Utûôy", &(
w‹k_utûôy
), 
Ál£
);

2822 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y Ac˚±ed", &(
tŸÆ_diff_ac˚±ed
), 
åue
);

2823 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y Reje˘ed", &(
tŸÆ_diff_ªje˘ed
), 
åue
);

2824 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Difficu…y SèÀ", &(
tŸÆ_diff_°Æe
), 
åue
);

2825 
roŸ
 = 
	`≠i_add_uöt64
‘oŸ, "Be° Sh¨e", &(
be°_diff
), 
åue
);

2826 
hwp
 = (
hw_îr‹s
 + 
tŸÆ_diff1
) ?

2827 ()(
hw_îr‹s
Ë/ ()(hw_îr‹†+ 
tŸÆ_diff1
) : 0;

2828 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Devi˚ H¨dw¨e%", &
hwp
, 
Ál£
);

2829 
ªjp
 = 
tŸÆ_diff1
 ?

2830 ()(
tŸÆ_diff_ªje˘ed
Ë/ ()(
tŸÆ_diff1
) : 0;

2831 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Devi˚ Reje˘ed%", &
ªjp
, 
Ál£
);

2832 
¥ejp
 = (
tŸÆ_diff_ac˚±ed
 + 
tŸÆ_diff_ªje˘ed
 + 
tŸÆ_diff_°Æe
) ?

2833 ()(
tŸÆ_diff_ªje˘ed
Ë/ ()(
tŸÆ_diff_ac˚±ed
 +ÅŸÆ_diff_ªje˘ed + 
tŸÆ_diff_°Æe
) : 0;

2834 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Poﬁ Reje˘ed%", &
¥ejp
, 
Ál£
);

2835 
°Æï
 = (
tŸÆ_diff_ac˚±ed
 + 
tŸÆ_diff_ªje˘ed
 + 
tŸÆ_diff_°Æe
) ?

2836 ()(
tŸÆ_diff_°Æe
Ë/ ()(
tŸÆ_diff_ac˚±ed
 + 
tŸÆ_diff_ªje˘ed
 +Åotal_diff_stale) : 0;

2837 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Poﬁ SèÀ%", &
°Æï
, 
Ál£
);

2838 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° gëw‹k", &
œ°_gëw‹k
, 
Ál£
);

2840 
	`muãx_u∆ock
(&
hash_lock
);

2842 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

2843 i‡(
isjs⁄
 && 
io_›í
)

2844 
	`io_˛o£
(
io_d©a
);

2845 
	}
}

2847 
	$pgacou¡
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2849 
≠i_d©a
 *
roŸ
 = 
NULL
;

2850 
boﬁ
 
io_›í
;

2851 
cou¡
 = 0;

2853 #ifde‡
HAVE_AN_FPGA


2854 
cou¡
 = 
	`numpgas
();

2857 
	`mesßge
(
io_d©a
, 
MSG_NUMPGA
, 0, 
NULL
, 
isjs⁄
);

2858 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_PGAS
 : 
_PGAS
 COMSTR);

2860 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Cou¡", &
cou¡
, 
Ál£
);

2862 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

2863 i‡(
isjs⁄
 && 
io_›í
)

2864 
	`io_˛o£
(
io_d©a
);

2865 
	}
}

2867 
	$swôchpoﬁ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2869 
poﬁ
 *pool;

2870 
id
;

2872 i‡(
tŸÆ_poﬁs
 == 0)

2874 
	`mesßge
(
io_d©a
, 
MSG_NOPOOL
, 0, 
NULL
, 
isjs⁄
);

2878 i‡(
∑øm
 =
NULL
 || *param == '\0')

2880 
	`mesßge
(
io_d©a
, 
MSG_MISPID
, 0, 
NULL
, 
isjs⁄
);

2884 
id
 = 
	`©oi
(
∑øm
);

2885 
	`cg_æock
(&
c⁄åﬁ_lock
);

2886 i‡(
id
 < 0 || id >
tŸÆ_poﬁs
)

2888 
	`cg_ru∆ock
(&
c⁄åﬁ_lock
);

2889 
	`mesßge
(
io_d©a
, 
MSG_INVPID
, 
id
, 
NULL
, 
isjs⁄
);

2893 
poﬁ
 = 
poﬁs
[
id
];

2894 
poﬁ
->
íabÀd
 = 
POOL_ENABLED
;

2895 
	`cg_ru∆ock
(&
c⁄åﬁ_lock
);

2896 
	`swôch_poﬁs
(
poﬁ
);

2898 
	`mesßge
(
io_d©a
, 
MSG_SWITCHP
, 
id
, 
NULL
, 
isjs⁄
);

2899 
	}
}

2901 
	$c›yadv™˚a·î
(
ch
, **
∑øm
, **
buf
)

2903 
	#§c_p
 (*
∑øm
)

	)

2904 
	#d°_b
 (*
buf
)

	)

2906 *
§c_p
 && *§c_∞!
ch
)

2908 i‡(*
§c_p
 == '\\' && *(src_p+1) != '\0')

2909 
§c_p
++;

2911 *(
d°_b
++Ë*(
§c_p
++);

2913 i‡(*
§c_p
)

2914 
§c_p
++;

2916 *(
d°_b
++) = '\0';

2917 
	}
}

2919 
boﬁ
 
	$poﬁdëaûs
(*
∑øm
, **
uæ
, **
u£r
, **
∑ss
)

2921 *
±r
, *
buf
;

2923 
±r
 = 
buf
 = 
	`mÆloc
(
	`°æí
(
∑øm
)+1);

2924 i‡(
	`u∆ikñy
(!
buf
))

2925 
	`quô
(1, "FailedÅo mallocÖooldetails buf");

2927 *
uæ
 = 
buf
;

2930 
	`c›yadv™˚a·î
(',', &
∑øm
, &
buf
);

2932 i‡(!(*
∑øm
))

2933 
exôßma
;

2935 *
u£r
 = 
buf
;

2938 
	`c›yadv™˚a·î
(',', &
∑øm
, &
buf
);

2940 i‡(!*
∑øm
)

2941 
exôßma
;

2943 *
∑ss
 = 
buf
;

2946 
	`c›yadv™˚a·î
(',', &
∑øm
, &
buf
);

2948  
åue
;

2950 
exôßma
:

2951 
	`‰ì
(
±r
);

2952  
Ál£
;

2953 
	}
}

2955 
	$addpoﬁ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2957 *
uæ
, *
u£r
, *
∑ss
;

2958 
poﬁ
 *pool;

2959 *
±r
;

2961 i‡(
∑øm
 =
NULL
 || *param == '\0')

2963 
	`mesßge
(
io_d©a
, 
MSG_MISPDP
, 0, 
NULL
, 
isjs⁄
);

2967 i‡(!
	`poﬁdëaûs
(
∑øm
, &
uæ
, &
u£r
, &
∑ss
))

2969 
±r
 = 
	`esˇ≥_°rög
(
∑øm
, 
isjs⁄
);

2970 
	`mesßge
(
io_d©a
, 
MSG_INVPDP
, 0, 
±r
, 
isjs⁄
);

2971 i‡(
±r
 !
∑øm
)

2972 
	`‰ì
(
±r
);

2973 
±r
 = 
NULL
;

2977 
poﬁ
 = 
	`add_poﬁ
();

2978 
	`dëe˘_°øtum
(
poﬁ
, 
uæ
);

2979 
	`add_poﬁ_dëaûs
(
poﬁ
, 
åue
, 
uæ
, 
u£r
, 
∑ss
);

2981 
±r
 = 
	`esˇ≥_°rög
(
uæ
, 
isjs⁄
);

2982 
	`mesßge
(
io_d©a
, 
MSG_ADDPOOL
, 
poﬁ
->
poﬁ_no
, 
±r
, 
isjs⁄
);

2983 i‡(
±r
 !
uæ
)

2984 
	`‰ì
(
±r
);

2985 
±r
 = 
NULL
;

2986 
	}
}

2988 
	$íabÀpoﬁ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

2990 
poﬁ
 *pool;

2991 
id
;

2993 i‡(
tŸÆ_poﬁs
 == 0)

2995 
	`mesßge
(
io_d©a
, 
MSG_NOPOOL
, 0, 
NULL
, 
isjs⁄
);

2999 i‡(
∑øm
 =
NULL
 || *param == '\0')

3001 
	`mesßge
(
io_d©a
, 
MSG_MISPID
, 0, 
NULL
, 
isjs⁄
);

3005 
id
 = 
	`©oi
(
∑øm
);

3006 i‡(
id
 < 0 || id >
tŸÆ_poﬁs
)

3008 
	`mesßge
(
io_d©a
, 
MSG_INVPID
, 
id
, 
NULL
, 
isjs⁄
);

3012 
poﬁ
 = 
poﬁs
[
id
];

3013 i‡(
poﬁ
->
íabÀd
 =
POOL_ENABLED
)

3015 
	`mesßge
(
io_d©a
, 
MSG_ALRENAP
, 
id
, 
NULL
, 
isjs⁄
);

3019 
poﬁ
->
íabÀd
 = 
POOL_ENABLED
;

3020 i‡(
poﬁ
->
¥io
 < 
	`cuºít_poﬁ
()->prio)

3021 
	`swôch_poﬁs
(
poﬁ
);

3023 
	`mesßge
(
io_d©a
, 
MSG_ENAPOOL
, 
id
, 
NULL
, 
isjs⁄
);

3024 
	}
}

3026 
	$poﬁ¥i‹ôy
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3028 *
±r
, *
√xt
;

3029 
i
, 
¥
, 
¥io
 = 0;

3035 i‡(
tŸÆ_poﬁs
 == 0)

3037 
	`mesßge
(
io_d©a
, 
MSG_NOPOOL
, 0, 
NULL
, 
isjs⁄
);

3041 i‡(
∑øm
 =
NULL
 || *param == '\0')

3043 
	`mesßge
(
io_d©a
, 
MSG_MISPID
, 0, 
NULL
, 
isjs⁄
);

3047 
boﬁ
 
poﬁs_ch™ged
[
tŸÆ_poﬁs
];

3048 
√w_¥io
[
tŸÆ_poﬁs
];

3049 
i
 = 0; i < 
tŸÆ_poﬁs
; ++i)

3050 
poﬁs_ch™ged
[
i
] = 
Ál£
;

3052 
√xt
 = 
∑øm
;

3053 
√xt
 && *next)

3055 
±r
 = 
√xt
;

3056 
√xt
 = 
	`°rchr
(
±r
, ',');

3057 i‡(
√xt
)

3058 *(
√xt
++) = '\0';

3060 
i
 = 
	`©oi
(
±r
);

3061 i‡(
i
 < 0 || i >
tŸÆ_poﬁs
)

3063 
	`mesßge
(
io_d©a
, 
MSG_INVPID
, 
i
, 
NULL
, 
isjs⁄
);

3067 i‡(
poﬁs_ch™ged
[
i
])

3069 
	`mesßge
(
io_d©a
, 
MSG_DUPPID
, 
i
, 
NULL
, 
isjs⁄
);

3073 
poﬁs_ch™ged
[
i
] = 
åue
;

3074 
√w_¥io
[
i
] = 
¥io
++;

3078 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

3080 i‡(
poﬁs_ch™ged
[
i
])

3081 
poﬁs
[
i
]->
¥io
 = 
√w_¥io
[i];

3085 
¥
 = 0;Ö∏< 
tŸÆ_poﬁs
;Ör++)

3086 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

3088 i‡(!
poﬁs_ch™ged
[
i
] && 
poﬁs
[i]->
¥io
 =
¥
)

3090 
poﬁs
[
i
]->
¥io
 =Örio++;

3091 
poﬁs_ch™ged
[
i
] = 
åue
;

3096 i‡(
	`cuºít_poﬁ
()->
¥io
)

3097 
	`swôch_poﬁs
(
NULL
);

3099 
	`mesßge
(
io_d©a
, 
MSG_POOLPRIO
, 0, 
NULL
, 
isjs⁄
);

3100 
	}
}

3102 
	$poﬁquŸa
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3104 
poﬁ
 *pool;

3105 
quŸa
, 
id
;

3106 *
comma
;

3108 i‡(
tŸÆ_poﬁs
 == 0)

3110 
	`mesßge
(
io_d©a
, 
MSG_NOPOOL
, 0, 
NULL
, 
isjs⁄
);

3114 i‡(
∑øm
 =
NULL
 || *param == '\0')

3116 
	`mesßge
(
io_d©a
, 
MSG_MISPID
, 0, 
NULL
, 
isjs⁄
);

3120 
comma
 = 
	`°rchr
(
∑øm
, ',');

3121 i‡(!
comma
)

3123 
	`mesßge
(
io_d©a
, 
MSG_CONVAL
, 0, 
∑øm
, 
isjs⁄
);

3127 *(
comma
++) = '\0';

3129 
id
 = 
	`©oi
(
∑øm
);

3130 i‡(
id
 < 0 || id >
tŸÆ_poﬁs
)

3132 
	`mesßge
(
io_d©a
, 
MSG_INVPID
, 
id
, 
NULL
, 
isjs⁄
);

3135 
poﬁ
 = 
poﬁs
[
id
];

3137 
quŸa
 = 
	`©oi
(
comma
);

3138 i‡(
quŸa
 < 0)

3140 
	`mesßge
(
io_d©a
, 
MSG_INVNEG
, 
quŸa
, 
poﬁ
->
Ωc_uæ
, 
isjs⁄
);

3144 
poﬁ
->
quŸa
 = quota;

3145 
	`adju°_quŸa_gcd
();

3146 
	`mesßge
(
io_d©a
, 
MSG_SETQUOTA
, 
quŸa
, 
poﬁ
->
Ωc_uæ
, 
isjs⁄
);

3147 
	}
}

3149 
	$dißbÀpoﬁ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3151 
poﬁ
 *pool;

3152 
id
;

3154 i‡(
tŸÆ_poﬁs
 == 0)

3156 
	`mesßge
(
io_d©a
, 
MSG_NOPOOL
, 0, 
NULL
, 
isjs⁄
);

3160 i‡(
∑øm
 =
NULL
 || *param == '\0')

3162 
	`mesßge
(
io_d©a
, 
MSG_MISPID
, 0, 
NULL
, 
isjs⁄
);

3166 
id
 = 
	`©oi
(
∑øm
);

3167 i‡(
id
 < 0 || id >
tŸÆ_poﬁs
)

3169 
	`mesßge
(
io_d©a
, 
MSG_INVPID
, 
id
, 
NULL
, 
isjs⁄
);

3173 
poﬁ
 = 
poﬁs
[
id
];

3174 i‡(
poﬁ
->
íabÀd
 =
POOL_DISABLED
)

3176 
	`mesßge
(
io_d©a
, 
MSG_ALRDISP
, 
id
, 
NULL
, 
isjs⁄
);

3180 i‡(
íabÀd_poﬁs
 <= 1)

3182 
	`mesßge
(
io_d©a
, 
MSG_DISLASTP
, 
id
, 
NULL
, 
isjs⁄
);

3186 
poﬁ
->
íabÀd
 = 
POOL_DISABLED
;

3187 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

3188 
	`swôch_poﬁs
(
NULL
);

3190 
	`mesßge
(
io_d©a
, 
MSG_DISPOOL
, 
id
, 
NULL
, 
isjs⁄
);

3191 
	}
}

3193 
	$ªmovïoﬁ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3195 
poﬁ
 *pool;

3196 *
Ωc_uæ
;

3197 
boﬁ
 
do‰ì
 = 
Ál£
;

3198 
id
;

3200 i‡(
tŸÆ_poﬁs
 == 0)

3202 
	`mesßge
(
io_d©a
, 
MSG_NOPOOL
, 0, 
NULL
, 
isjs⁄
);

3206 i‡(
∑øm
 =
NULL
 || *param == '\0')

3208 
	`mesßge
(
io_d©a
, 
MSG_MISPID
, 0, 
NULL
, 
isjs⁄
);

3212 
id
 = 
	`©oi
(
∑øm
);

3213 i‡(
id
 < 0 || id >
tŸÆ_poﬁs
)

3215 
	`mesßge
(
io_d©a
, 
MSG_INVPID
, 
id
, 
NULL
, 
isjs⁄
);

3219 i‡(
tŸÆ_poﬁs
 <= 1)

3221 
	`mesßge
(
io_d©a
, 
MSG_REMLASTP
, 
id
, 
NULL
, 
isjs⁄
);

3225 
poﬁ
 = 
poﬁs
[
id
];

3226 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

3227 
	`swôch_poﬁs
(
NULL
);

3229 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

3231 
	`mesßge
(
io_d©a
, 
MSG_ACTPOOL
, 
id
, 
NULL
, 
isjs⁄
);

3235 
poﬁ
->
íabÀd
 = 
POOL_DISABLED
;

3236 
Ωc_uæ
 = 
	`esˇ≥_°rög
(
poﬁ
->Ωc_uæ, 
isjs⁄
);

3237 i‡(
Ωc_uæ
 !
poﬁ
->rpc_url)

3238 
do‰ì
 = 
åue
;

3240 
	`ªmove_poﬁ
(
poﬁ
);

3242 
	`mesßge
(
io_d©a
, 
MSG_REMPOOL
, 
id
, 
Ωc_uæ
, 
isjs⁄
);

3244 i‡(
do‰ì
)

3245 
	`‰ì
(
Ωc_uæ
);

3246 
Ωc_uæ
 = 
NULL
;

3247 
	}
}

3249 
	$doquô
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3251 i‡(
isjs⁄
)

3252 
	`io_put
(
io_d©a
, 
JSON_ACTION
 
JSON_BYE
);

3254 
	`io_put
(
io_d©a
, 
_BYE
);

3256 
bye
 = 
åue
;

3257 
do_a_quô
 = 
åue
;

3258 
	}
}

3260 
	$d‹e°¨t
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3262 i‡(
isjs⁄
)

3263 
	`io_put
(
io_d©a
, 
JSON_ACTION
 
JSON_RESTART
);

3265 
	`io_put
(
io_d©a
, 
_RESTART
);

3267 
bye
 = 
åue
;

3268 
do_a_ª°¨t
 = 
åue
;

3269 
	}
}

3271 
	$¥ivûeged
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3273 
	`mesßge
(
io_d©a
, 
MSG_ACCOK
, 0, 
NULL
, 
isjs⁄
);

3274 
	}
}

3276 
	$nŸify°©us
(
io_d©a
 *io_d©a, 
devi˚
, 
cgpu_öfo
 *
cgpu
, 
boﬁ
 
isjs⁄
, 
__maybe_unu£d
 
group
)

3278 
≠i_d©a
 *
roŸ
 = 
NULL
;

3279 *
ªas⁄
;

3281 i‡(
cgpu
->
devi˚_œ°_nŸ_wñl
 == 0)

3282 
ªas⁄
 = 
REASON_NONE
;

3284 
cgpu
->
devi˚_nŸ_wñl_ªas⁄
)

3286 
REASON_THREAD_FAIL_INIT
:

3287 
ªas⁄
 = 
REASON_THREAD_FAIL_INIT_STR
;

3289 
REASON_THREAD_ZERO_HASH
:

3290 
ªas⁄
 = 
REASON_THREAD_ZERO_HASH_STR
;

3292 
REASON_THREAD_FAIL_QUEUE
:

3293 
ªas⁄
 = 
REASON_THREAD_FAIL_QUEUE_STR
;

3295 
REASON_DEV_SICK_IDLE_60
:

3296 
ªas⁄
 = 
REASON_DEV_SICK_IDLE_60_STR
;

3298 
REASON_DEV_DEAD_IDLE_600
:

3299 
ªas⁄
 = 
REASON_DEV_DEAD_IDLE_600_STR
;

3301 
REASON_DEV_NOSTART
:

3302 
ªas⁄
 = 
REASON_DEV_NOSTART_STR
;

3304 
REASON_DEV_OVER_HEAT
:

3305 
ªas⁄
 = 
REASON_DEV_OVER_HEAT_STR
;

3307 
REASON_DEV_THERMAL_CUTOFF
:

3308 
ªas⁄
 = 
REASON_DEV_THERMAL_CUTOFF_STR
;

3310 
REASON_DEV_COMMS_ERROR
:

3311 
ªas⁄
 = 
REASON_DEV_COMMS_ERROR_STR
;

3314 
ªas⁄
 = 
REASON_UNKNOWN_STR
;

3320 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "NOTIFY", &
devi˚
, 
Ál£
);

3321 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Name", 
cgpu
->
drv
->
«me
, 
Ál£
);

3322 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "ID", &(
cgpu
->
devi˚_id
), 
Ál£
);

3323 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° Wñl", &(
cgpu
->
devi˚_œ°_wñl
), 
Ál£
);

3324 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° NŸ Wñl", &(
cgpu
->
devi˚_œ°_nŸ_wñl
), 
Ál£
);

3325 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Rós⁄ NŸ Wñl", 
ªas⁄
, 
Ál£
);

3326 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Thªad Faû Inô", &(
cgpu
->
thªad_Áû_öô_cou¡
), 
Ál£
);

3327 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Thªad ZîÿHash", &(
cgpu
->
thªad_zîo_hash_cou¡
), 
Ál£
);

3328 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Thªad Faû Queue", &(
cgpu
->
thªad_Áû_queue_cou¡
), 
Ál£
);

3329 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Dev Sick IdÀ 60s", &(
cgpu
->
dev_sick_idÀ_60_cou¡
), 
Ál£
);

3330 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Dev Dód IdÀ 600s", &(
cgpu
->
dev_dód_idÀ_600_cou¡
), 
Ál£
);

3331 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Dev No°¨t", &(
cgpu
->
dev_no°¨t_cou¡
), 
Ál£
);

3332 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Dev Ovî Hót", &(
cgpu
->
dev_ovî_hót_cou¡
), 
Ál£
);

3333 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Dev ThîmÆ Cutoff", &(
cgpu
->
dev_thîmÆ_cutoff_cou¡
), 
Ál£
);

3334 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Dev Comm†Eº‹", &(
cgpu
->
dev_comms_îr‹_cou¡
), 
Ál£
);

3335 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "*Dev ThrŸée", &(
cgpu
->
dev_thrŸée_cou¡
), 
Ál£
);

3337 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, isjs⁄ && (
devi˚
 > 0));

3338 
	}
}

3340 
	$nŸify
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, 
group
)

3342 
cgpu_öfo
 *
cgpu
;

3343 
boﬁ
 
io_›í
 = 
Ál£
;

3344 
i
;

3346 i‡(
tŸÆ_devi˚s
 == 0)

3348 
	`mesßge
(
io_d©a
, 
MSG_NODEVS
, 0, 
NULL
, 
isjs⁄
);

3352 
	`mesßge
(
io_d©a
, 
MSG_NOTIFY
, 0, 
NULL
, 
isjs⁄
);

3354 i‡(
isjs⁄
)

3355 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_NOTIFY
);

3357 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

3359 
cgpu
 = 
	`gë_devi˚s
(
i
);

3360 
	`nŸify°©us
(
io_d©a
, 
i
, 
cgpu
, 
isjs⁄
, 
group
);

3363 i‡(
isjs⁄
 && 
io_›í
)

3364 
	`io_˛o£
(
io_d©a
);

3365 
	}
}

3367 
	$devdëaûs
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3369 
≠i_d©a
 *
roŸ
 = 
NULL
;

3370 
boﬁ
 
io_›í
 = 
Ál£
;

3371 
cgpu_öfo
 *
cgpu
;

3372 
i
;

3374 i‡(
tŸÆ_devi˚s
 == 0)

3376 
	`mesßge
(
io_d©a
, 
MSG_NODEVS
, 0, 
NULL
, 
isjs⁄
);

3380 
	`mesßge
(
io_d©a
, 
MSG_DEVDETAILS
, 0, 
NULL
, 
isjs⁄
);

3382 i‡(
isjs⁄
)

3383 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_DEVDETAILS
);

3385 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

3387 
cgpu
 = 
	`gë_devi˚s
(
i
);

3389 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "DEVDETAILS", &
i
, 
Ál£
);

3390 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Name", 
cgpu
->
drv
->
«me
, 
Ál£
);

3391 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "ID", &(
cgpu
->
devi˚_id
), 
Ál£
);

3392 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Drivî", 
cgpu
->
drv
->
d«me
, 
Ál£
);

3393 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Kî√l", 
cgpu
->
k«me
 ? : 
BLANK
, 
Ál£
);

3394 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Modñ", 
cgpu
->
«me
 ? : 
BLANK
, 
Ál£
);

3395 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Devi˚ P©h", 
cgpu
->
devi˚_∑th
 ? : 
BLANK
, 
Ál£
);

3397 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, isjs⁄ && (
i
 > 0));

3400 i‡(
isjs⁄
 && 
io_›í
)

3401 
	`io_˛o£
(
io_d©a
);

3402 
	}
}

3404 
	$doßve
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3406 
fûíame
[
PATH_MAX
];

3407 
FILE
 *
fcfg
;

3408 *
±r
;

3410 i‡(
∑øm
 =
NULL
 || *param == '\0')

3412 
	`deÁu…_ßve_fûe
(
fûíame
);

3413 
∑øm
 = 
fûíame
;

3416 
fcfg
 = 
	`f›í
(
∑øm
, "w");

3417 i‡(!
fcfg
)

3419 
±r
 = 
	`esˇ≥_°rög
(
∑øm
, 
isjs⁄
);

3420 
	`mesßge
(
io_d©a
, 
MSG_BADFN
, 0, 
±r
, 
isjs⁄
);

3421 i‡(
±r
 !
∑øm
)

3422 
	`‰ì
(
±r
);

3423 
±r
 = 
NULL
;

3427 
	`wrôe_c⁄fig
(
fcfg
);

3428 
	`f˛o£
(
fcfg
);

3430 
±r
 = 
	`esˇ≥_°rög
(
∑øm
, 
isjs⁄
);

3431 
	`mesßge
(
io_d©a
, 
MSG_SAVED
, 0, 
±r
, 
isjs⁄
);

3432 i‡(
±r
 !
∑øm
)

3433 
	`‰ì
(
±r
);

3434 
±r
 = 
NULL
;

3435 
	}
}

3437 
	$ôem°©s
(
io_d©a
 *io_d©a, 
i
, *
id
, 
cgmöî_°©s
 *
°©s
, 
cgmöî_poﬁ_°©s
 *
poﬁ_°©s
, 
≠i_d©a
 *
exåa
, 
cgpu_öfo
 *
cgpu
, 
boﬁ
 
isjs⁄
)

3439 
≠i_d©a
 *
roŸ
 = 
NULL
;

3440 
ghs
;

3442 
ghs
 = 
tŸÆ_mhashes_d⁄e
 / 
tŸÆ_£cs
;

3444 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "STATS", &
i
, 
Ál£
);

3445 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "ID", 
id
, 
Ál£
);

3446 
roŸ
 = 
	`≠i_add_ñ≠£d
‘oŸ, "Eœp£d", &(
tŸÆ_£cs
), 
Ál£
);

3447 
roŸ
 = 
	`≠i_add_uöt32
‘oŸ, "CÆls", &(
°©s
->
gëw‹k_ˇŒs
), 
Ál£
);

3448 
roŸ
 = 
	`≠i_add_timevÆ
‘oŸ, "Waô", &(
°©s
->
gëw‹k_waô
), 
Ál£
);

3449 
roŸ
 = 
	`≠i_add_timevÆ
‘oŸ, "Max", &(
°©s
->
gëw‹k_waô_max
), 
Ál£
);

3450 
roŸ
 = 
	`≠i_add_timevÆ
‘oŸ, "Mö", &(
°©s
->
gëw‹k_waô_mö
), 
Ál£
);

3451 #i‡
	`deföed
(
USE_BITMAIN_C5
Ë|| deföed(
USE_BITMAIN_V9
)

3452 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "GHS 5s", 
di•œyed_hash_øã
, 
Ál£
);

3454 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHS 5s", &(
g_di•œyed_rﬁlög
), 
Ál£
);

3456 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHSáv", &(
ghs
), 
Ál£
);

3483 i‡(
exåa
)

3484 
roŸ
 = 
	`≠i_add_exåa
‘oŸ, 
exåa
);

3486 i‡(
cgpu
)

3488 #ifde‡
USE_USBUTILS


3489 
dëaûs
[256];

3491 i‡(
cgpu
->
usböfo
.
pùe_cou¡
)

3492 
	`¢¥ötf
(
dëaûs
, (details),

3493 "%"
PRIu64
" %"PRIu64"/%"PRIu64"/%"PRIu64" %lu",

3494 
cgpu
->
usböfo
.
pùe_cou¡
,

3495 
cgpu
->
usböfo
.
˛ór_îr_cou¡
,

3496 
cgpu
->
usböfo
.
ªåy_îr_cou¡
,

3497 
cgpu
->
usböfo
.
˛ór_Áû_cou¡
,

3498 ()(
cgpu
->
usböfo
.
œ°_pùe
));

3500 
	`°r˝y
(
dëaûs
, "0");

3502 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "USB Pùe", 
dëaûs
, 
åue
);

3546 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, isjs⁄ && (
i
 > 0));

3548  ++
i
;

3549 
	}
}

3551 
	$möî°©s
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3553 
≠i_d©a
 *
roŸ
 = 
NULL
;

3554 
cgpu_öfo
 *
cgpu
;

3555 
boﬁ
 
io_›í
 = 
Ál£
;

3556 
≠i_d©a
 *
exåa
;

3557 
id
[20];

3558 
i
, 
j
;

3560 
	`mesßge
(
io_d©a
, 
MSG_MINESTATS
, 0, 
NULL
, 
isjs⁄
);

3562 i‡(
isjs⁄
)

3563 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_MINESTATS
);

3565 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "CGMöî", 
VERSION
, 
Ál£
);

3566 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Möî", 
g_möî_vîsi⁄
, 
Ál£
);

3567 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "CompûeTime", 
g_möî_compûëime
, 
Ál£
);

3568 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "Ty≥", 
g_möî_ty≥
, 
Ál£
);

3569 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

3571 
i
 = 0;

3572 
j
 = 0; j < 
tŸÆ_devi˚s
; j++)

3574 
cgpu
 = 
	`gë_devi˚s
(
j
);

3576 i‡(
cgpu
 && cgpu->
drv
)

3578 i‡(
cgpu
->
drv
->
gë_≠i_°©s
)

3579 
exåa
 = 
cgpu
->
drv
->
	`gë_≠i_°©s
(cgpu);

3581 
exåa
 = 
NULL
;

3583 
	`•rötf
(
id
, "%s%d", 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

3584 
i
 = 
	`ôem°©s
(
io_d©a
, i, 
id
, &(
cgpu
->
cgmöî_°©s
), 
NULL
, 
exåa
, cgpu, 
isjs⁄
);

3588 i‡(
isjs⁄
 && 
io_›í
)

3589 
	`io_˛o£
(
io_d©a
);

3590 
	}
}

3592 
	$möîe°©s
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3594 
cgpu_öfo
 *
cgpu
;

3595 
boﬁ
 
io_›í
 = 
Ál£
;

3596 
≠i_d©a
 *
exåa
;

3597 
id
[20];

3598 
i
, 
j
;

3599 #ifde‡
USE_USBUTILS


3600 
time_t
 
howﬁd£c
 = 0;

3602 i‡(
∑øm
 && *param)

3603 
howﬁd£c
 = (
time_t
)
	`©oi
(
∑øm
);

3606 
	`mesßge
(
io_d©a
, 
MSG_MINESTATS
, 0, 
NULL
, 
isjs⁄
);

3607 i‡(
isjs⁄
)

3608 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_MINESTATS
);

3610 
i
 = 0;

3611 
j
 = 0; j < 
tŸÆ_devi˚s
; j++)

3613 
cgpu
 = 
	`gë_devi˚s
(
j
);

3614 i‡(!
cgpu
)

3616 #ifde‡
USE_USBUTILS


3617 i‡(
cgpu
->
bœckli°ed
)

3619 i‡(
cgpu
->
usböfo
.
nodev
)

3621 i‡(
howﬁd£c
 <= 0)

3623 i‡((
whí
 - 
cgpu
->
usböfo
.
œ°_nodev
.
tv_£c
Ë>
howﬁd£c
)

3627 i‡(
cgpu
->
drv
)

3629 i‡(
cgpu
->
drv
->
gë_≠i_°©s
)

3630 
exåa
 = 
cgpu
->
drv
->
	`gë_≠i_°©s
(cgpu);

3632 
exåa
 = 
NULL
;

3634 
	`•rötf
(
id
, "%s%d", 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

3635 
i
 = 
	`ôem°©s
(
io_d©a
, i, 
id
, &(
cgpu
->
cgmöî_°©s
), 
NULL
, 
exåa
, cgpu, 
isjs⁄
);

3639 i‡(
isjs⁄
 && 
io_›í
)

3640 
	`io_˛o£
(
io_d©a
);

3641 
	}
}

3643 
	$Áûovî⁄ly
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3645 i‡(
∑øm
 =
NULL
 || *param == '\0')

3647 
	`mesßge
(
io_d©a
, 
MSG_MISBOOL
, 0, 
NULL
, 
isjs⁄
);

3651 *
∑øm
 = 
	`tﬁowî
(*param);

3653 i‡(*
∑øm
 != 't' && *param != 'f')

3655 
	`mesßge
(
io_d©a
, 
MSG_INVBOOL
, 0, 
NULL
, 
isjs⁄
);

3659 
boﬁ
 
tf
 = (*
∑øm
 == 't');

3661 
›t_Áû_⁄ly
 = 
tf
;

3663 
	`mesßge
(
io_d©a
, 
MSG_FOO
, 
tf
, 
NULL
, 
isjs⁄
);

3664 
	}
}

3666 
	$möecoö
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3668 
≠i_d©a
 *
roŸ
 = 
NULL
;

3669 
boﬁ
 
io_›í
;

3671 
	`mesßge
(
io_d©a
, 
MSG_MINECOIN
, 0, 
NULL
, 
isjs⁄
);

3672 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_MINECOIN
 : 
_MINECOIN
 COMSTR);

3674 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Hash Mëhod", 
SHA256STR
, 
Ál£
);

3676 
	`cg_æock
(&
ch_lock
);

3677 
roŸ
 = 
	`≠i_add_timevÆ
‘oŸ, "CuºíàBlock Time", &
block_timevÆ
, 
åue
);

3678 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "CuºíàBlock Hash", 
cuºít_hash
, 
åue
);

3679 
	`cg_ru∆ock
(&
ch_lock
);

3681 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "LP", &
have_l⁄gpﬁl
, 
Ál£
);

3682 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "Nëw‹k Difficu…y", &
cuºít_diff
, 
åue
);

3684 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

3685 i‡(
isjs⁄
 && 
io_›í
)

3686 
	`io_˛o£
(
io_d©a
);

3687 
	}
}

3689 
	$debug°©e
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3691 
≠i_d©a
 *
roŸ
 = 
NULL
;

3692 
boﬁ
 
io_›í
;

3694 i‡(
∑øm
 =
NULL
)

3695 
∑øm
 = (*)
BLANK
;

3697 *
∑øm
 = 
	`tﬁowî
(*param);

3699 *
∑øm
)

3702 
›t_ªÆquõt
 = 
åue
;

3705 
›t_quõt
 ^
åue
;

3708 
›t_log_ouçut
 ^
åue
;

3709 i‡(
›t_log_ouçut
)

3710 
›t_quõt
 = 
Ál£
;

3713 
›t_debug
 ^
åue
;

3714 
›t_log_ouçut
 = 
›t_debug
;

3715 i‡(
›t_debug
)

3716 
›t_quõt
 = 
Ál£
;

3719 
›t_¥Ÿocﬁ
 ^
åue
;

3720 i‡(
›t_¥Ÿocﬁ
)

3721 
›t_quõt
 = 
Ál£
;

3724 
w™t_≥r_devi˚_°©s
 ^
åue
;

3725 
›t_log_ouçut
 = 
w™t_≥r_devi˚_°©s
;

3728 
›t_log_ouçut
 = 
Ál£
;

3729 
›t_debug
 = 
Ál£
;

3730 
›t_quõt
 = 
Ál£
;

3731 
›t_¥Ÿocﬁ
 = 
Ál£
;

3732 
w™t_≥r_devi˚_°©s
 = 
Ál£
;

3733 
›t_w‹ktime
 = 
Ál£
;

3736 
›t_w‹ktime
 ^
åue
;

3738 #ifde‡
_MEMORY_DEBUG


3740 
	`cgmem•ìdup
();

3743 
	`cgmemΩt
();

3751 
	`mesßge
(
io_d©a
, 
MSG_DEBUGSET
, 0, 
NULL
, 
isjs⁄
);

3752 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_DEBUGSET
 : 
_DEBUGSET
 COMSTR);

3754 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "Sûít", &
›t_ªÆquõt
, 
Ál£
);

3755 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "Quõt", &
›t_quõt
, 
Ál£
);

3756 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "Vîbo£", &
›t_log_ouçut
, 
Ál£
);

3757 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "Debug", &
›t_debug
, 
Ál£
);

3758 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "RPCPrŸo", &
›t_¥Ÿocﬁ
, 
Ál£
);

3759 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "PîDevi˚", &
w™t_≥r_devi˚_°©s
, 
Ál£
);

3760 
roŸ
 = 
	`≠i_add_boﬁ
‘oŸ, "W‹kTime", &
›t_w‹ktime
, 
Ál£
);

3762 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

3763 i‡(
isjs⁄
 && 
io_›í
)

3764 
	`io_˛o£
(
io_d©a
);

3765 
	}
}

3767 
	$£tc⁄fig
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3769 *
comma
;

3770 
vÆue
;

3772 i‡(
∑øm
 =
NULL
 || *param == '\0')

3774 
	`mesßge
(
io_d©a
, 
MSG_CONPAR
, 0, 
NULL
, 
isjs⁄
);

3778 
comma
 = 
	`°rchr
(
∑øm
, ',');

3779 i‡(!
comma
)

3781 
	`mesßge
(
io_d©a
, 
MSG_CONVAL
, 0, 
∑øm
, 
isjs⁄
);

3785 *(
comma
++) = '\0';

3786 
vÆue
 = 
	`©oi
(
comma
);

3787 i‡(
vÆue
 < 0 || value > 9999)

3789 
	`mesßge
(
io_d©a
, 
MSG_INVNUM
, 
vÆue
, 
∑øm
, 
isjs⁄
);

3793 i‡(
	`°rˇ£cmp
(
∑øm
, "queue") == 0)

3794 
›t_queue
 = 
vÆue
;

3795 i‡(
	`°rˇ£cmp
(
∑øm
, "scantime") == 0)

3796 
›t_sˇ¡ime
 = 
vÆue
;

3797 i‡(
	`°rˇ£cmp
(
∑øm
, "expiry") == 0)

3798 
›t_expúy
 = 
vÆue
;

3801 
	`mesßge
(
io_d©a
, 
MSG_UNKCON
, 0, 
∑øm
, 
isjs⁄
);

3805 
	`mesßge
(
io_d©a
, 
MSG_SETCONFIG
, 
vÆue
, 
∑øm
, 
isjs⁄
);

3806 
	}
}

3808 
	$usb°©s
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3810 
≠i_d©a
 *
roŸ
 = 
NULL
;

3812 #ifde‡
USE_USBUTILS


3813 
boﬁ
 
io_›í
 = 
Ál£
;

3814 
cou¡
 = 0;

3816 
roŸ
 = 
	`≠i_usb_°©s
(&
cou¡
);

3819 i‡(!
roŸ
)

3821 
	`mesßge
(
io_d©a
, 
MSG_NOUSTA
, 0, 
NULL
, 
isjs⁄
);

3825 #ifde‡
USE_USBUTILS


3826 
	`mesßge
(
io_d©a
, 
MSG_USBSTA
, 0, 
NULL
, 
isjs⁄
);

3828 i‡(
isjs⁄
)

3829 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_USBSTATS
);

3831 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

3835 
roŸ
 = 
	`≠i_usb_°©s
(&
cou¡
);

3836 i‡(!
roŸ
)

3839 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, isjson);

3842 i‡(
isjs⁄
 && 
io_›í
)

3843 
	`io_˛o£
(
io_d©a
);

3845 
	}
}

3847 #ifde‡
HAVE_AN_FPGA


3848 
	$pga£t
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3850 
cgpu_öfo
 *
cgpu
;

3851 
devi˚_drv
 *
drv
;

3852 
buf
[
TMPBUFSIZ
];

3853 
numpga
 = 
	`numpgas
();

3855 i‡(
numpga
 == 0)

3857 
	`mesßge
(
io_d©a
, 
MSG_PGANON
, 0, 
NULL
, 
isjs⁄
);

3861 i‡(
∑øm
 =
NULL
 || *param == '\0')

3863 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

3867 *
›t
 = 
	`°rchr
(
∑øm
, ',');

3868 i‡(
›t
)

3869 *(
›t
++) = '\0';

3870 i‡(!
›t
 || !*opt)

3872 
	`mesßge
(
io_d©a
, 
MSG_MISPGAOPT
, 0, 
NULL
, 
isjs⁄
);

3876 
id
 = 
	`©oi
(
∑øm
);

3877 i‡(
id
 < 0 || id >
numpga
)

3879 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

3883 
dev
 = 
	`pgadevi˚
(
id
);

3884 i‡(
dev
 < 0)

3886 
	`mesßge
(
io_d©a
, 
MSG_INVPGA
, 
id
, 
NULL
, 
isjs⁄
);

3890 
cgpu
 = 
	`gë_devi˚s
(
dev
);

3891 
drv
 = 
cgpu
->drv;

3893 *
£t
 = 
	`°rchr
(
›t
, ',');

3894 i‡(
£t
)

3895 *(
£t
++) = '\0';

3897 i‡(!
drv
->
£t_devi˚
)

3898 
	`mesßge
(
io_d©a
, 
MSG_PGANOSET
, 
id
, 
NULL
, 
isjs⁄
);

3901 *
ªt
 = 
drv
->
	`£t_devi˚
(
cgpu
, 
›t
, 
£t
, 
buf
);

3902 i‡(
ªt
)

3904 i‡(
	`°rˇ£cmp
(
›t
, "help") == 0)

3905 
	`mesßge
(
io_d©a
, 
MSG_PGAHELP
, 
id
, 
ªt
, 
isjs⁄
);

3907 
	`mesßge
(
io_d©a
, 
MSG_PGASETERR
, 
id
, 
ªt
, 
isjs⁄
);

3910 
	`mesßge
(
io_d©a
, 
MSG_PGASETOK
, 
id
, 
NULL
, 
isjs⁄
);

3912 
	}
}

3915 
	$dozîo
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3917 i‡(
∑øm
 =
NULL
 || *param == '\0')

3919 
	`mesßge
(
io_d©a
, 
MSG_ZERMIS
, 0, 
NULL
, 
isjs⁄
);

3923 *
sum
 = 
	`°rchr
(
∑øm
, ',');

3924 i‡(
sum
)

3925 *(
sum
++) = '\0';

3926 i‡(!
sum
 || !*sum)

3928 
	`mesßge
(
io_d©a
, 
MSG_MISBOOL
, 0, 
NULL
, 
isjs⁄
);

3932 
boﬁ
 
Æl
 = 
Ál£
;

3933 
boﬁ
 
bs
 = 
Ál£
;

3934 i‡(
	`°rˇ£cmp
(
∑øm
, "all") == 0)

3935 
Æl
 = 
åue
;

3936 i‡(
	`°rˇ£cmp
(
∑øm
, "bestshare") == 0)

3937 
bs
 = 
åue
;

3939 i‡(
Æl
 =
Ál£
 && 
bs
 == false)

3941 
	`mesßge
(
io_d©a
, 
MSG_ZERINV
, 0, 
∑øm
, 
isjs⁄
);

3945 *
sum
 = 
	`tﬁowî
(*sum);

3946 i‡(*
sum
 != 't' && *sum != 'f')

3948 
	`mesßge
(
io_d©a
, 
MSG_INVBOOL
, 0, 
NULL
, 
isjs⁄
);

3952 
boﬁ
 
dosum
 = (*
sum
 == 't');

3953 i‡(
dosum
)

3954 
	`¥öt_summ¨y
();

3956 i‡(
Æl
)

3957 
	`zîo_°©s
();

3958 i‡(
bs
)

3959 
	`zîo_be°sh¨e
();

3961 i‡(
dosum
)

3962 
	`mesßge
(
io_d©a
, 
MSG_ZERSUM
, 0, 
Æl
 ? "AŒ" : "Be°Sh¨e", 
isjs⁄
);

3964 
	`mesßge
(
io_d©a
, 
MSG_ZERNOSUM
, 0, 
Æl
 ? "AŒ" : "Be°Sh¨e", 
isjs⁄
);

3965 
	}
}

3967 
	$dohŸ∂ug
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

3969 #ifde‡
USE_USBUTILS


3970 
vÆue
;

3972 i‡(
∑øm
 =
NULL
 || *param == '\0')

3974 
	`mesßge
(
io_d©a
, 
MSG_MISHPLG
, 0, 
NULL
, 
isjs⁄
);

3978 
vÆue
 = 
	`©oi
(
∑øm
);

3979 i‡(
vÆue
 < 0 || value > 9999)

3981 
	`mesßge
(
io_d©a
, 
MSG_INVHPLG
, 0, 
∑øm
, 
isjs⁄
);

3985 
hŸ∂ug_time
 = 
vÆue
;

3987 i‡(
vÆue
)

3988 
	`mesßge
(
io_d©a
, 
MSG_HOTPLUG
, 
vÆue
, 
NULL
, 
isjs⁄
);

3990 
	`mesßge
(
io_d©a
, 
MSG_DISHPLG
, 0, 
NULL
, 
isjs⁄
);

3992 
	`mesßge
(
io_d©a
, 
MSG_NOHPLG
, 0, 
NULL
, 
isjs⁄
);

3995 
	}
}

3997 #ifde‡
HAVE_AN_ASIC


3998 
	$ascdev
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

4000 
boﬁ
 
io_›í
 = 
Ál£
;

4001 
numasc
 = 
	`numascs
();

4002 
id
;

4004 i‡(
numasc
 == 0)

4006 
	`mesßge
(
io_d©a
, 
MSG_ASCNON
, 0, 
NULL
, 
isjs⁄
);

4010 i‡(
∑øm
 =
NULL
 || *param == '\0')

4012 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

4016 
id
 = 
	`©oi
(
∑øm
);

4017 i‡(
id
 < 0 || id >
numasc
)

4019 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4023 
	`mesßge
(
io_d©a
, 
MSG_ASCDEV
, 
id
, 
NULL
, 
isjs⁄
);

4025 i‡(
isjs⁄
)

4026 
io_›í
 = 
	`io_add
(
io_d©a
, 
COMSTR
 
JSON_ASC
);

4028 
	`asc°©us
(
io_d©a
, 
id
, 
isjs⁄
, 
Ál£
);

4030 i‡(
isjs⁄
 && 
io_›í
)

4031 
	`io_˛o£
(
io_d©a
);

4032 
	}
}

4034 
	$as˚«bÀ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

4036 
cgpu_öfo
 *
cgpu
;

4037 
numasc
 = 
	`numascs
();

4038 
thr_öfo
 *
thr
;

4039 
asc
;

4040 
id
;

4041 
i
;

4043 i‡(
numasc
 == 0)

4045 
	`mesßge
(
io_d©a
, 
MSG_ASCNON
, 0, 
NULL
, 
isjs⁄
);

4049 i‡(
∑øm
 =
NULL
 || *param == '\0')

4051 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

4055 
id
 = 
	`©oi
(
∑øm
);

4056 i‡(
id
 < 0 || id >
numasc
)

4058 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4062 
dev
 = 
	`ascdevi˚
(
id
);

4063 i‡(
dev
 < 0)

4065 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4069 
cgpu
 = 
	`gë_devi˚s
(
dev
);

4071 
	`≠∂og
(
LOG_DEBUG
, "API:ÑequestÅoáscenableáscid %d device %d %s%u",

4072 
id
, 
dev
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

4074 i‡(
cgpu
->
deví
 !
DEV_DISABLED
)

4076 
	`mesßge
(
io_d©a
, 
MSG_ASCLRENA
, 
id
, 
NULL
, 
isjs⁄
);

4081 i‡(
cgpu
->
°©us
 !
LIFE_WELL
)

4083 
	`mesßge
(
io_d©a
, 
MSG_ASCUNW
, 
id
, 
NULL
, 
isjs⁄
);

4088 #ifde‡
USE_USBUTILS


4089 i‡(
cgpu
->
usböfo
.
nodev
)

4091 
	`mesßge
(
io_d©a
, 
MSG_ASCUSBNODEV
, 
id
, 
NULL
, 
isjs⁄
);

4096 
i
 = 0; i < 
möög_thªads
; i++)

4098 
thr
 = 
	`gë_thªad
(
i
);

4099 
asc
 = 
thr
->
cgpu
->
cgmöî_id
;

4100 i‡(
asc
 =
dev
)

4102 
cgpu
->
deví
 = 
DEV_ENABLED
;

4103 
	`≠∂og
(
LOG_DEBUG
, "API: Pushög semÖo°Åÿthªad %d", 
thr
->
id
);

4104 
	`cg£m_po°
(&
thr
->
£m
);

4108 
	`mesßge
(
io_d©a
, 
MSG_ASCENA
, 
id
, 
NULL
, 
isjs⁄
);

4109 
	}
}

4111 
	$ascdißbÀ
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

4113 
cgpu_öfo
 *
cgpu
;

4114 
numasc
 = 
	`numascs
();

4115 
id
;

4117 i‡(
numasc
 == 0)

4119 
	`mesßge
(
io_d©a
, 
MSG_ASCNON
, 0, 
NULL
, 
isjs⁄
);

4123 i‡(
∑øm
 =
NULL
 || *param == '\0')

4125 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

4129 
id
 = 
	`©oi
(
∑øm
);

4130 i‡(
id
 < 0 || id >
numasc
)

4132 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4136 
dev
 = 
	`ascdevi˚
(
id
);

4137 i‡(
dev
 < 0)

4139 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4143 
cgpu
 = 
	`gë_devi˚s
(
dev
);

4145 
	`≠∂og
(
LOG_DEBUG
, "API:ÑequestÅoáscdisableáscid %d device %d %s%u",

4146 
id
, 
dev
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

4148 i‡(
cgpu
->
deví
 =
DEV_DISABLED
)

4150 
	`mesßge
(
io_d©a
, 
MSG_ASCLRDIS
, 
id
, 
NULL
, 
isjs⁄
);

4154 
cgpu
->
deví
 = 
DEV_DISABLED
;

4156 
	`mesßge
(
io_d©a
, 
MSG_ASCDIS
, 
id
, 
NULL
, 
isjs⁄
);

4157 
	}
}

4159 
	$ascidítify
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

4161 
cgpu_öfo
 *
cgpu
;

4162 
devi˚_drv
 *
drv
;

4163 
numasc
 = 
	`numascs
();

4164 
id
;

4166 i‡(
numasc
 == 0)

4168 
	`mesßge
(
io_d©a
, 
MSG_ASCNON
, 0, 
NULL
, 
isjs⁄
);

4172 i‡(
∑øm
 =
NULL
 || *param == '\0')

4174 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

4178 
id
 = 
	`©oi
(
∑øm
);

4179 i‡(
id
 < 0 || id >
numasc
)

4181 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4185 
dev
 = 
	`ascdevi˚
(
id
);

4186 i‡(
dev
 < 0)

4188 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4192 
cgpu
 = 
	`gë_devi˚s
(
dev
);

4193 
drv
 = 
cgpu
->drv;

4195 i‡(!
drv
->
idítify_devi˚
)

4196 
	`mesßge
(
io_d©a
, 
MSG_ASCNOID
, 
id
, 
NULL
, 
isjs⁄
);

4199 
drv
->
	`idítify_devi˚
(
cgpu
);

4200 
	`mesßge
(
io_d©a
, 
MSG_ASCIDENT
, 
id
, 
NULL
, 
isjs⁄
);

4202 
	}
}

4205 
	$asccou¡
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

4207 
≠i_d©a
 *
roŸ
 = 
NULL
;

4208 
boﬁ
 
io_›í
;

4209 
cou¡
 = 0;

4211 #ifde‡
HAVE_AN_ASIC


4212 
cou¡
 = 
	`numascs
();

4215 
	`mesßge
(
io_d©a
, 
MSG_NUMASC
, 0, 
NULL
, 
isjs⁄
);

4216 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_ASCS
 : 
_ASCS
 COMSTR);

4218 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "Cou¡", &
cou¡
, 
Ál£
);

4220 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

4221 i‡(
isjs⁄
 && 
io_›í
)

4222 
	`io_˛o£
(
io_d©a
);

4223 
	}
}

4225 #ifde‡
HAVE_AN_ASIC


4226 
	$asc£t
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

4228 
cgpu_öfo
 *
cgpu
;

4229 
devi˚_drv
 *
drv
;

4230 
buf
[
TMPBUFSIZ
];

4231 
numasc
 = 
	`numascs
();

4233 i‡(
numasc
 == 0)

4235 
	`mesßge
(
io_d©a
, 
MSG_ASCNON
, 0, 
NULL
, 
isjs⁄
);

4239 i‡(
∑øm
 =
NULL
 || *param == '\0')

4241 
	`mesßge
(
io_d©a
, 
MSG_MISID
, 0, 
NULL
, 
isjs⁄
);

4245 *
›t
 = 
	`°rchr
(
∑øm
, ',');

4246 i‡(
›t
)

4247 *(
›t
++) = '\0';

4248 i‡(!
›t
 || !*opt)

4250 
	`mesßge
(
io_d©a
, 
MSG_MISASCOPT
, 0, 
NULL
, 
isjs⁄
);

4254 
id
 = 
	`©oi
(
∑øm
);

4255 i‡(
id
 < 0 || id >
numasc
)

4257 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4261 
dev
 = 
	`ascdevi˚
(
id
);

4262 i‡(
dev
 < 0)

4264 
	`mesßge
(
io_d©a
, 
MSG_INVASC
, 
id
, 
NULL
, 
isjs⁄
);

4268 
cgpu
 = 
	`gë_devi˚s
(
dev
);

4269 
drv
 = 
cgpu
->drv;

4271 *
£t
 = 
	`°rchr
(
›t
, ',');

4272 i‡(
£t
)

4273 *(
£t
++) = '\0';

4275 i‡(!
drv
->
£t_devi˚
)

4276 
	`mesßge
(
io_d©a
, 
MSG_ASCNOSET
, 
id
, 
NULL
, 
isjs⁄
);

4279 *
ªt
 = 
drv
->
	`£t_devi˚
(
cgpu
, 
›t
, 
£t
, 
buf
);

4280 i‡(
ªt
)

4282 i‡(
	`°rˇ£cmp
(
›t
, "help") == 0)

4283 
	`mesßge
(
io_d©a
, 
MSG_ASCHELP
, 
id
, 
ªt
, 
isjs⁄
);

4285 
	`mesßge
(
io_d©a
, 
MSG_ASCSETERR
, 
id
, 
ªt
, 
isjs⁄
);

4288 
	`mesßge
(
io_d©a
, 
MSG_ASCSETOK
, 
id
, 
NULL
, 
isjs⁄
);

4290 
	}
}

4293 
	$lcdd©a
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, __maybe_unu£d *
∑øm
, 
boﬁ
 
isjs⁄
, __maybe_unu£d 
group
)

4295 
≠i_d©a
 *
roŸ
 = 
NULL
;

4296 
cgpu_öfo
 *
cgpu
;

4297 
boﬁ
 
io_›í
;

4298 
ghs
 = 0.0, 
œ°_sh¨e_diff
 = 0.0;

4299 
ãmp
 = 0.0;

4300 
time_t
 
œ°_sh¨e_time
 = 0;

4301 
time_t
 
œ°_devi˚_vÆid_w‹k
 = 0;

4302 
poﬁ
 *poﬁ = 
NULL
;

4303 *
Ωc_uæ
 = "n⁄e", *
Ωc_u£r
 = "";

4304 
i
;

4306 
	`mesßge
(
io_d©a
, 
MSG_LCD
, 0, 
NULL
, 
isjs⁄
);

4307 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_LCD
 : 
_LCD
 COMSTR);

4310 
	`muãx_lock
(&
hash_lock
);

4312 
roŸ
 = 
	`≠i_add_ñ≠£d
‘oŸ, "Eœp£d", &(
tŸÆ_£cs
), 
åue
);

4313 
ghs
 = 
tŸÆ_mhashes_d⁄e
 / 
tŸÆ_£cs
;

4314 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHSáv", &
ghs
, 
åue
);

4315 
ghs
 = 
rﬁlög5
 ;

4316 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHS 5m", &
ghs
, 
åue
);

4317 
ghs
 = 
tŸÆ_rﬁlög
;

4318 
roŸ
 = 
	`≠i_add_mhs
‘oŸ, "GHS 5s", &
ghs
, 
åue
);

4320 
	`muãx_u∆ock
(&
hash_lock
);

4322 
ãmp
 = 0;

4323 
œ°_devi˚_vÆid_w‹k
 = 0;

4324 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

4326 
cgpu
 = 
	`gë_devi˚s
(
i
);

4327 i‡(
œ°_devi˚_vÆid_w‹k
 == 0 ||

4328 
œ°_devi˚_vÆid_w‹k
 < 
cgpu
->last_device_valid_work)

4329 
œ°_devi˚_vÆid_w‹k
 = 
cgpu
->last_device_valid_work;

4330 i‡(
ãmp
 < 
cgpu
->temp)

4331 
ãmp
 = 
cgpu
->temp;

4334 
œ°_sh¨e_time
 = 0;

4335 
œ°_sh¨e_diff
 = 0;

4336 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

4338 
poﬁ
 = 
poﬁs
[
i
];

4340 i‡(
poﬁ
->
ªmoved
)

4343 i‡(
œ°_sh¨e_time
 =0 ||Üa°_sh¨e_timê< 
poﬁ
->last_share_time)

4345 
œ°_sh¨e_time
 = 
poﬁ
->last_share_time;

4346 
œ°_sh¨e_diff
 = 
poﬁ
->last_share_diff;

4349 
poﬁ
 = 
	`cuºít_poﬁ
();

4350 i‡(
poﬁ
)

4352 
Ωc_uæ
 = 
poﬁ
->rpc_url;

4353 
Ωc_u£r
 = 
poﬁ
->rpc_user;

4356 
roŸ
 = 
	`≠i_add_ãmp
‘oŸ, "Tem≥øtuª", &
ãmp
, 
Ál£
);

4357 
roŸ
 = 
	`≠i_add_diff
‘oŸ, "La° Sh¨êDifficu…y", &
œ°_sh¨e_diff
, 
Ál£
);

4358 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° Sh¨êTime", &
œ°_sh¨e_time
, 
Ál£
);

4359 
roŸ
 = 
	`≠i_add_uöt64
‘oŸ, "Be° Sh¨e", &
be°_diff
, 
åue
);

4360 
roŸ
 = 
	`≠i_add_time
‘oŸ, "La° VÆid W‹k", &
œ°_devi˚_vÆid_w‹k
, 
Ál£
);

4361 
roŸ
 = 
	`≠i_add_uöt
‘oŸ, "Found Blocks", &
found_blocks
, 
åue
);

4362 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "CuºíàPoﬁ", 
Ωc_uæ
, 
åue
);

4363 
roŸ
 = 
	`≠i_add_esˇ≥
‘oŸ, "U£r", 
Ωc_u£r
, 
åue
);

4365 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

4366 i‡(
isjs⁄
 && 
io_›í
)

4367 
	`io_˛o£
(
io_d©a
);

4368 
	}
}

4370 
checkcomm™d
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, 
group
);

4372 
	sCMDS


4374 *
	m«me
;

4375 (*
	mfunc
)(
	mio_d©a
 *, 
	mSOCKETTYPE
, *, 
	mboﬁ
, );

4376 
boﬁ
 
	miswrôemode
;

4377 
boﬁ
 
	mjoöabÀ
;

4378 } 
	gcmds
[] =

4380 { "vîsi⁄", 
≠ivîsi⁄
, 
Ál£
, 
åue
 },

4381 { "c⁄fig", 
möîc⁄fig
, 
Ál£
, 
åue
 },

4382 { "devs", 
dev°©us
, 
Ál£
, 
åue
 },

4383 { "edevs", 
edev°©us
, 
Ál£
, 
åue
 },

4384 { "poﬁs", 
poﬁ°©us
, 
Ál£
, 
åue
 },

4385 { "summ¨y", 
summ¨y
, 
Ál£
, 
åue
 },

4386 #ifde‡
HAVE_AN_FPGA


4387 { "pga", 
pgadev
, 
Ál£
, false },

4388 { "pg´«bÀ", 
pg´«bÀ
, 
åue
, 
Ál£
 },

4389 { "pgadißbÀ", 
pgadißbÀ
, 
åue
, 
Ál£
 },

4390 { "pgaidítify", 
pgaidítify
, 
åue
, 
Ál£
 },

4392 { "pgacou¡", 
pgacou¡
, 
Ál£
, 
åue
 },

4393 { "swôchpoﬁ", 
swôchpoﬁ
, 
åue
, 
Ál£
 },

4394 { "addpoﬁ", 
addpoﬁ
, 
åue
, 
Ál£
 },

4395 { "poﬁ¥i‹ôy", 
poﬁ¥i‹ôy
, 
åue
, 
Ál£
 },

4396 { "poﬁquŸa", 
poﬁquŸa
, 
åue
, 
Ál£
 },

4397 { "íabÀpoﬁ", 
íabÀpoﬁ
, 
åue
, 
Ál£
 },

4398 { "dißbÀpoﬁ", 
dißbÀpoﬁ
, 
åue
, 
Ál£
 },

4399 { "ªmovïoﬁ", 
ªmovïoﬁ
, 
åue
, 
Ál£
 },

4400 { "ßve", 
doßve
, 
åue
, 
Ál£
 },

4401 { "quô", 
doquô
, 
åue
, 
Ál£
 },

4402 { "¥ivûeged", 
¥ivûeged
, 
åue
, 
Ál£
 },

4403 { "nŸify", 
nŸify
, 
Ál£
, 
åue
 },

4404 { "devdëaûs", 
devdëaûs
, 
Ál£
, 
åue
 },

4405 { "ª°¨t", 
d‹e°¨t
, 
åue
, 
Ál£
 },

4406 { "°©s", 
möî°©s
, 
Ál£
, 
åue
 },

4407 { "e°©s", 
möîe°©s
, 
Ál£
, 
åue
 },

4408 { "check", 
checkcomm™d
, 
Ál£
, false },

4409 { "Áûovî-⁄ly", 
Áûovî⁄ly
, 
åue
, 
Ál£
 },

4410 { "coö", 
möecoö
, 
Ál£
, 
åue
 },

4411 { "debug", 
debug°©e
, 
åue
, 
Ál£
 },

4412 { "£tc⁄fig", 
£tc⁄fig
, 
åue
, 
Ál£
 },

4413 { "usb°©s", 
usb°©s
, 
Ál£
, 
åue
 },

4414 #ifde‡
HAVE_AN_FPGA


4415 { "pga£t", 
pga£t
, 
åue
, 
Ál£
 },

4417 { "zîo", 
dozîo
, 
åue
, 
Ál£
 },

4418 { "hŸ∂ug", 
dohŸ∂ug
, 
åue
, 
Ál£
 },

4419 #ifde‡
HAVE_AN_ASIC


4420 { "asc", 
ascdev
, 
Ál£
, false },

4421 { "as˚«bÀ", 
as˚«bÀ
, 
åue
, 
Ál£
 },

4422 { "ascdißbÀ", 
ascdißbÀ
, 
åue
, 
Ál£
 },

4423 { "ascidítify", 
ascidítify
, 
åue
, 
Ál£
 },

4424 { "asc£t", 
asc£t
, 
åue
, 
Ál£
 },

4426 { "asccou¡", 
asccou¡
, 
Ál£
, 
åue
 },

4427 { "lcd", 
lcddi•œy
, 
Ál£
, 
åue
 },

4428 { "lock°©s", 
lock°©s
, 
åue
,Årue },

4429 { 
NULL
, NULL, 
Ál£
, false }

4432 
	$checkcomm™d
(
io_d©a
 *io_d©a, 
__maybe_unu£d
 
SOCKETTYPE
 
c
, *
∑øm
, 
boﬁ
 
isjs⁄
, 
group
)

4434 
≠i_d©a
 *
roŸ
 = 
NULL
;

4435 
boﬁ
 
io_›í
;

4436 
cmdbuf
[100];

4437 
boﬁ
 
found
, 
ac˚ss
;

4438 
i
;

4440 i‡(
∑øm
 =
NULL
 || *param == '\0')

4442 
	`mesßge
(
io_d©a
, 
MSG_MISCHK
, 0, 
NULL
, 
isjs⁄
);

4446 
found
 = 
Ál£
;

4447 
ac˚ss
 = 
Ál£
;

4448 
i
 = 0; 
cmds
[i].
«me
 !
NULL
; i++)

4450 i‡(
	`°rcmp
(
cmds
[
i
].
«me
, 
∑øm
) == 0)

4452 
found
 = 
åue
;

4454 
	`•rötf
(
cmdbuf
, "|%s|", 
∑øm
);

4455 i‡(
	`ISPRIVGROUP
(
group
Ë|| 
	`°r°r
(
	`COMMANDS
(group), 
cmdbuf
))

4456 
ac˚ss
 = 
åue
;

4462 
	`mesßge
(
io_d©a
, 
MSG_CHECK
, 0, 
NULL
, 
isjs⁄
);

4463 
io_›í
 = 
	`io_add
(
io_d©a
, 
isjs⁄
 ? 
COMSTR
 
JSON_CHECK
 : 
_CHECK
 COMSTR);

4465 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Exi°s", 
found
 ? 
YES
 : 
NO
, 
Ál£
);

4466 
roŸ
 = 
	`≠i_add_c⁄°
‘oŸ, "Ac˚ss", 
ac˚ss
 ? 
YES
 : 
NO
, 
Ál£
);

4468 
roŸ
 = 
	`¥öt_d©a
(
io_d©a
,ÑoŸ, 
isjs⁄
, 
Ál£
);

4469 i‡(
isjs⁄
 && 
io_›í
)

4470 
	`io_˛o£
(
io_d©a
);

4471 
	}
}

4473 
	$hód_joö
(
io_d©a
 *io_d©a, *
cmd±r
, 
boﬁ
 
isjs⁄
, boﬁ *
fú°joö
)

4475 *
±r
;

4477 i‡(*
fú°joö
)

4479 i‡(
isjs⁄
)

4480 
	`io_add
(
io_d©a
, 
JSON0
);

4481 *
fú°joö
 = 
Ál£
;

4485 i‡(
isjs⁄
)

4486 
	`io_add
(
io_d©a
, 
JSON_BETWEEN_JOIN
);

4490 
±r
 = 
	`esˇ≥_°rög
(
cmd±r
, 
isjs⁄
);

4492 i‡(
isjs⁄
)

4494 
	`io_add
(
io_d©a
, 
JSON1
);

4495 
	`io_add
(
io_d©a
, 
±r
);

4496 
	`io_add
(
io_d©a
, 
JSON2
);

4500 
	`io_add
(
io_d©a
, 
JOIN_CMD
);

4501 
	`io_add
(
io_d©a
, 
±r
);

4502 
	`io_add
(
io_d©a
, 
BETWEEN_JOIN
);

4505 i‡(
±r
 !
cmd±r
)

4506 
	`‰ì
(
±r
);

4507 
	}
}

4509 
	$èû_joö
(
io_d©a
 *io_d©a, 
boﬁ
 
isjs⁄
)

4511 i‡(
io_d©a
->
˛o£
)

4513 
	`io_add
(
io_d©a
, 
JSON_CLOSE
);

4514 
io_d©a
->
˛o£
 = 
Ál£
;

4517 i‡(
isjs⁄
)

4519 
	`io_add
(
io_d©a
, 
JSON_END
);

4520 
	`io_add
(
io_d©a
, 
JSON3
);

4522 
	}
}

4524 
	$£nd_ªsu…
(
io_d©a
 *io_d©a, 
SOCKETTYPE
 
c
, 
boﬁ
 
isjs⁄
)

4526 
cou¡
, 
£ndc
, 
ªs
, 
to£nd
, 
Àn
, 
n
;

4527 *
buf
 = 
io_d©a
->
±r
;

4529 
	`°r˝y
(
buf
, 
io_d©a
->
±r
);

4531 i‡(
io_d©a
->
˛o£
)

4532 
	`°rˇt
(
buf
, 
JSON_CLOSE
);

4534 i‡(
isjs⁄
)

4535 
	`°rˇt
(
buf
, 
JSON_END
);

4537 
Àn
 = 
	`°æí
(
buf
);

4538 
to£nd
 = 
Àn
+1;

4540 
	`≠∂og
(
LOG_DEBUG
, "API: sídÑïly: (%dË'%.10s%s'", 
to£nd
, 
buf
, 
Àn
 > 10 ? "..." : 
BLANK
);

4542 
cou¡
 = 
£ndc
 = 0;

4543 
cou¡
 < 5 && 
to£nd
 > 0)

4546 
timevÆ
 
timeout
 = {0, 50000};

4547 
fd_£t
 
wd
;

4549 
	`FD_ZERO
(&
wd
);

4550 
	`FD_SET
(
c
, &
wd
);

4551 i‡((
ªs
 = 
	`£À˘
(
c
 + 1, 
NULL
, &
wd
, NULL, &
timeout
)) < 1)

4553 
	`≠∂og
(
LOG_WARNING
, "API: síd sñe˘ faûed (%d)", 
ªs
);

4557 
n
 = 
	`£nd
(
c
, 
buf
, 
to£nd
, 0);

4558 
£ndc
++;

4560 i‡(
	`SOCKETFAIL
(
n
))

4562 
cou¡
++;

4563 i‡(
	`sock_blocks
())

4566 
	`≠∂og
(
LOG_WARNING
, "API: síd (%d:%dËÁûed: %s", 
Àn
+1, (Àn+1 - 
to£nd
), 
SOCKERRMSG
);

4572 i‡(
£ndc
 <= 1)

4574 i‡(
n
 =
to£nd
)

4575 
	`≠∂og
(
LOG_DEBUG
, "API: síàÆ»o‡%d fú° go", 
to£nd
);

4577 
	`≠∂og
(
LOG_DEBUG
, "API: síà%d o‡%d fú° go", 
n
, 
to£nd
);

4581 i‡(
n
 =
to£nd
)

4582 
	`≠∂og
(
LOG_DEBUG
, "API: síàÆ»o‡ªmaöög %d (£ndc=%d)", 
to£nd
, 
£ndc
);

4584 
	`≠∂og
(
LOG_DEBUG
, "API: síà%d o‡ªmaöög %d (£ndc=%d)", 
n
, 
to£nd
, 
£ndc
);

4587 
to£nd
 -
n
;

4588 
buf
 +
n
;

4590 i‡(
n
 == 0)

4591 
cou¡
++;

4594 
	}
}

4596 
	$tidyup
(
__maybe_unu£d
 *
¨g
)

4598 
	`muãx_lock
(&
quô_ª°¨t_lock
);

4600 
SOCKETTYPE
 *
≠isock
 = (SOCKETTYPE *)
¨g
;

4602 
bye
 = 
åue
;

4604 i‡(*
≠isock
 !
INVSOCK
)

4606 
	`shutdown
(*
≠isock
, 
SHUT_RDWR
);

4607 
	`CLOSESOCKET
(*
≠isock
);

4608 *
≠isock
 = 
INVSOCK
;

4611 i‡(
ùac˚ss
 !
NULL
)

4613 
	`‰ì
(
ùac˚ss
);

4614 
ùac˚ss
 = 
NULL
;

4617 
	`io_‰ì
();

4619 
	`muãx_u∆ock
(&
quô_ª°¨t_lock
);

4620 
	}
}

4625 
	$£tup_groups
()

4627 *
≠i_groups
 = 
›t_≠i_groups
 ? o±_≠i_group†: (*)
BLANK
;

4628 *
buf
, *
±r
, *
√xt
, *
cﬁ⁄
;

4629 
group
;

4630 
comm™ds
[
TMPBUFSIZ
];

4631 
cmdbuf
[100];

4632 *
cmd
;

4633 
boﬁ
 
add°¨
, 
did
;

4634 
i
;

4636 
buf
 = 
	`mÆloc
(
	`°æí
(
≠i_groups
) + 1);

4637 i‡(
	`u∆ikñy
(!
buf
))

4638 
	`quô
(1, "FailedÅo malloc ipgroups buf");

4640 
	`°r˝y
(
buf
, 
≠i_groups
);

4642 
√xt
 = 
buf
;

4644 
√xt
 && *next)

4646 
±r
 = 
√xt
;

4647 
√xt
 = 
	`°rchr
(
±r
, ',');

4648 i‡(
√xt
)

4649 *(
√xt
++) = '\0';

4652 i‡(*(
±r
+1) != ':')

4654 
cﬁ⁄
 = 
	`°rchr
(
±r
, ':');

4655 i‡(
cﬁ⁄
)

4656 *
cﬁ⁄
 = '\0';

4657 
	`quô
(1, "API invÆid grou∞«mê'%s'", 
±r
);

4660 
group
 = 
	`GROUP
(*
±r
);

4661 i‡(!
	`VALIDGROUP
(
group
))

4662 
	`quô
(1, "API invÆid grou∞«mê'%c'", *
±r
);

4664 i‡(
group
 =
PRIVGROUP
)

4665 
	`quô
(1, "API grou∞«mêˇn'àbê'%c'", 
PRIVGROUP
);

4667 i‡(
group
 =
NOPRIVGROUP
)

4668 
	`quô
(1, "API grou∞«mêˇn'àbê'%c'", 
NOPRIVGROUP
);

4670 i‡(
≠igroups
[
	`GROUPOFFSET
(
group
)].
comm™ds
 !
NULL
)

4671 
	`quô
(1, "API du∂iˇã grou∞«mê'%c'", *
±r
);

4673 
±r
 += 2;

4676 
cmd
 = &(
comm™ds
[0]);

4677 *(
cmd
++Ë
SEPARATOR
;

4678 *
cmd
 = '\0';

4679 
add°¨
 = 
Ál£
;

4680 
±r
 && *ptr)

4682 
cﬁ⁄
 = 
	`°rchr
(
±r
, ':');

4683 i‡(
cﬁ⁄
)

4684 *(
cﬁ⁄
++) = '\0';

4686 i‡(
	`°rcmp
(
±r
, "*") == 0)

4687 
add°¨
 = 
åue
;

4690 
did
 = 
Ál£
;

4691 
i
 = 0; 
cmds
[i].
«me
 !
NULL
; i++)

4693 i‡(
	`°rˇ£cmp
(
±r
, 
cmds
[
i
].
«me
) == 0)

4695 
did
 = 
åue
;

4699 i‡(
did
)

4702 
	`•rötf
(
cmdbuf
, "|%s|", 
cmds
[
i
].
«me
);

4703 i‡(
	`°r°r
(
comm™ds
, 
cmdbuf
Ë=
NULL
)

4705 
	`°r˝y
(
cmd
, 
cmds
[
i
].
«me
);

4706 
cmd
 +
	`°æí
(
cmds
[
i
].
«me
);

4707 *(
cmd
++Ë
SEPARATOR
;

4708 *
cmd
 = '\0';

4713 
	`quô
(1, "API unknow¿comm™d '%s' i¿grou∞'%c'", 
±r
, 
group
);

4717 
±r
 = 
cﬁ⁄
;

4721 i‡(
add°¨
)

4723 
i
 = 0; 
cmds
[i].
«me
 !
NULL
; i++)

4725 i‡(
cmds
[
i
].
iswrôemode
 =
Ál£
)

4728 
	`•rötf
(
cmdbuf
, "|%s|", 
cmds
[
i
].
«me
);

4729 i‡(
	`°r°r
(
comm™ds
, 
cmdbuf
Ë=
NULL
)

4731 
	`°r˝y
(
cmd
, 
cmds
[
i
].
«me
);

4732 
cmd
 +
	`°æí
(
cmds
[
i
].
«me
);

4733 *(
cmd
++Ë
SEPARATOR
;

4734 *
cmd
 = '\0';

4740 
±r
 = 
≠igroups
[
	`GROUPOFFSET
(
group
)].
comm™ds
 = 
	`mÆloc
(
	`°æí
(commands) + 1);

4741 i‡(
	`u∆ikñy
(!
±r
))

4742 
	`quô
(1, "FailedÅo malloc group commands buf");

4744 
	`°r˝y
(
±r
, 
comm™ds
);

4748 
cmd
 = &(
comm™ds
[0]);

4749 *(
cmd
++Ë
SEPARATOR
;

4750 *
cmd
 = '\0';

4751 
i
 = 0; 
cmds
[i].
«me
 !
NULL
; i++)

4753 i‡(
cmds
[
i
].
iswrôemode
 =
Ál£
)

4755 
	`°r˝y
(
cmd
, 
cmds
[
i
].
«me
);

4756 
cmd
 +
	`°æí
(
cmds
[
i
].
«me
);

4757 *(
cmd
++Ë
SEPARATOR
;

4758 *
cmd
 = '\0';

4762 
±r
 = 
≠igroups
[
	`GROUPOFFSET
(
NOPRIVGROUP
)].
comm™ds
 = 
	`mÆloc
(
	`°æí
(commands) + 1);

4763 i‡(
	`u∆ikñy
(!
±r
))

4764 
	`quô
(1, "FailedÅo mallocÇoprivgroup commands buf");

4766 
	`°r˝y
(
±r
, 
comm™ds
);

4770 
	`‰ì
(
buf
);

4772 
	}
}

4779 
	#ALLIP
 "0/0"

	)

4783 
	$£tup_ùac˚ss
()

4785 *
buf
, *
±r
, *
comma
, *
¶ash
, *
íd
;

4786 
ùcou¡
, 
mask
, 
i
, 
shi·
;

4787 
boﬁ
 
ùv6
 = 
Ál£
;

4788 
group
;

4789 
tmp
[30];

4791 
buf
 = 
	`mÆloc
(
	`°æí
(
›t_≠i_Ælow
) + 1);

4792 i‡(
	`u∆ikñy
(!
buf
))

4793 
	`quô
(1, "FailedÅo malloc ipaccess buf");

4795 
	`°r˝y
(
buf
, 
›t_≠i_Ælow
);

4797 
ùcou¡
 = 1;

4798 
±r
 = 
buf
;

4799 *
±r
)

4800 i‡(*(
±r
++) == ',')

4801 
ùcou¡
++;

4804 
ùac˚ss
 = 
	`ˇŒoc
(
ùcou¡
, (
IPACCESS
));

4805 i‡(
	`u∆ikñy
(!
ùac˚ss
))

4806 
	`quô
(1, "FailedÅo calloc ipaccess");

4808 
ùs
 = 0;

4809 
±r
 = 
buf
;

4810 
±r
 && *ptr)

4812 *
±r
 == ' ' || *ptr == '\t')

4813 
±r
++;

4815 i‡(*
±r
 == ',')

4817 
±r
++;

4821 
comma
 = 
	`°rchr
(
±r
, ',');

4822 i‡(
comma
)

4823 *(
comma
++) = '\0';

4825 
group
 = 
NOPRIVGROUP
;

4827 i‡(
	`ißÕha
(*
±r
) && *(ptr+1) == ':')

4829 i‡(
	`DEFINEDGROUP
(*
±r
))

4830 
group
 = 
	`GROUP
(*
±r
);

4832 
±r
 += 2;

4835 
ùac˚ss
[
ùs
].
group
 = group;

4837 i‡(
	`°rcmp
(
±r
, 
ALLIP
) == 0)

4839 
i
 = 0; i < 16; i++)

4841 
ùac˚ss
[
ùs
].
ù
.
s6_addr
[
i
] = 0;

4842 
ùac˚ss
[
ùs
].
mask
.
s6_addr
[
i
] = 0;

4847 
íd
 = 
	`°rchr
(
±r
, '/');

4848 i‡(!
íd
)

4850 
i
 = 0; i < 16; i++)

4851 
ùac˚ss
[
ùs
].
mask
.
s6_addr
[
i
] = 0xff;

4852 
íd
 = 
±r
 + 
	`°æí
(ptr);

4854 
¶ash
 = 
íd
--;

4855 i‡(*
±r
 ='[' && *
íd
 == ']')

4857 *(
±r
++) = '\0';

4858 *(
íd
--) = '\0';

4859 
ùv6
 = 
åue
;

4862 
ùv6
 = 
Ál£
;

4863 i‡(*
¶ash
)

4865 *(
¶ash
++) = '\0';

4866 
mask
 = 
	`©oi
(
¶ash
);

4867 i‡(
mask
 < 1 || (mask +
ùv6
 ? 0 : 96) > 128 )

4868 
p›ùo
;

4870 
i
 = 0; i < 16; i++)

4871 
ùac˚ss
[
ùs
].
mask
.
s6_addr
[
i
] = 0;

4873 
i
 = 0;

4874 
shi·
 = 7;

4875 
mask
-- > 0)

4877 
ùac˚ss
[
ùs
].
mask
.
s6_addr
[
i
] |1 << 
shi·
;

4878 i‡(
shi·
-- == 0)

4880 
i
++;

4881 
shi·
 = 7;

4886 
i
 = 0; i < 16; i++)

4887 
ùac˚ss
[
ùs
].
ù
.
s6_addr
[
i
] = 0;

4888 i‡(
ùv6
)

4890 i‡(
	`INET_PTON
(
AF_INET6
, 
±r
, &(
ùac˚ss
[
ùs
].
ù
)) != 1)

4891 
p›ùo
;

4896 
	`•rötf
(
tmp
, "::ffff:%s", 
±r
);

4897 i‡(
	`INET_PTON
(
AF_INET6
, 
tmp
, &(
ùac˚ss
[
ùs
].
ù
)) != 1)

4898 
p›ùo
;

4900 
i
 = 0; i < 16; i++)

4901 
ùac˚ss
[
ùs
].
ù
.
s6_addr
[
i
] &ùac˚ss[ùs].
mask
.s6_addr[i];

4904 
ùs
++;

4905 
p›ùo
:

4906 
±r
 = 
comma
;

4909 
	`‰ì
(
buf
);

4910 
	}
}

4912 *
	$quô_thªad
(
__maybe_unu£d
 *
u£rd©a
)

4915 
	`muãx_lock
(&
quô_ª°¨t_lock
);

4916 
	`muãx_u∆ock
(&
quô_ª°¨t_lock
);

4918 i‡(
›t_debug
)

4919 
	`≠∂og
(
LOG_DEBUG
, "API: killing cgminer");

4921 
	`kûl_w‹k
();

4923  
NULL
;

4924 
	}
}

4926 *
	$ª°¨t_thªad
(
__maybe_unu£d
 *
u£rd©a
)

4929 
	`muãx_lock
(&
quô_ª°¨t_lock
);

4930 
	`muãx_u∆ock
(&
quô_ª°¨t_lock
);

4932 i‡(
›t_debug
)

4933 
	`≠∂og
(
LOG_DEBUG
, "API:Ñestarting cgminer");

4935 
	`≠p_ª°¨t
();

4937  
NULL
;

4938 
	}
}

4940 
boﬁ
 
	$check_c⁄√˘
(
sockaddr_°‹age
 *
˛i
, **
c⁄√˘addr
, *
group
)

4942 
boﬁ
 
addrok
 = 
Ál£
;

4943 
i
, 
j
;

4944 
boﬁ
 
m©ch
;

4945 
tmp
[30];

4946 
ö6_addr
 
˛õ¡_ù
;

4948 *
c⁄√˘addr
 = (*)
	`mÆloc
(
INET6_ADDRSTRLEN
);

4949 
	`gë«meöfo
((
sockaddr
 *)
˛i
, (*cli),

4950 *
c⁄√˘addr
, 
INET6_ADDRSTRLEN
, 
NULL
, 0, 
NI_NUMERICHOST
);

4953 i‡(
˛i
->
ss_Ámûy
 =
AF_INET
)

4955 
	`•rötf
(
tmp
, "::ffff:%s", *
c⁄√˘addr
);

4956 
	`INET_PTON
(
AF_INET6
, 
tmp
, &
˛õ¡_ù
);

4959 
	`INET_PTON
(
AF_INET6
, *
c⁄√˘addr
, &
˛õ¡_ù
);

4961 *
group
 = 
NOPRIVGROUP
;

4962 i‡(
›t_≠i_Ælow
)

4964 
i
 = 0; i < 
ùs
; i++)

4966 
m©ch
 = 
åue
;

4967 
j
 = 0; j < 16; j++)

4968 i‡((
˛õ¡_ù
.
s6_addr
[
j
] & 
ùac˚ss
[
i
].
mask
.s6_addr[j])

4969 !
ùac˚ss
[
i
].
ù
.
s6_addr
[
j
])

4971 
m©ch
 = 
Ál£
;

4974 i‡(
m©ch
)

4976 
addrok
 = 
åue
;

4977 *
group
 = 
ùac˚ss
[
i
].group;

4984 i‡(
›t_≠i_√tw‹k
)

4985 
addrok
 = 
åue
;

4987 
addrok
 = (
	`°rcmp
(*
c⁄√˘addr
, 
loˇœddr
) == 0)

4988 || 
	`IN6_IS_ADDR_LOOPBACK
(&
˛õ¡_ù
);

4991  
addrok
;

4992 
	}
}

4994 
	$mˇ°
()

4996 
sockaddr_°‹age
 
ˇme_‰om
;

4997 
time_t
 
böd°¨t
;

4998 *
bödîr‹
;

4999 
SOCKETTYPE
 
mˇ°_sock
 = 
INVSOCK
;

5000 
SOCKETTYPE
 
ª∂y_sock
 = 
INVSOCK
;

5001 
sockÀn_t
 
ˇme_‰om_siz
;

5002 *
c⁄√˘addr
;

5003 
ssize_t
 
ªp
;

5004 
bound
;

5005 
cou¡
;

5006 
ª∂y_p‹t
;

5007 
boﬁ
 
addrok
;

5008 
group
;

5010 
p‹t_s
[10], 
ˇme_‰om_p‹t
[10];

5011 
addröfo
 
höts
, *
ªs
, *
ho°
, *
˛õ¡
;

5013 
ex≥˘
[] = "cgminer-";

5014 *
ex≥˘_code
;

5015 
size_t
 
ex≥˘_code_Àn
;

5016 
buf
[1024];

5017 
ª∂ybuf
[1024];

5019 
	`•rötf
(
p‹t_s
, "%d", 
›t_≠i_mˇ°_p‹t
);

5020 
	`mem£t
(&
höts
, 0, (hints));

5021 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

5022 i‡(
	`gëaddröfo
(
›t_≠i_mˇ°_addr
, 
p‹t_s
, &
höts
, &
ªs
) != 0)

5023 
	`quô
(1, "Invalid API Multicast Address");

5024 
ho°
 = 
ªs
;

5025 
ho°
 !
NULL
)

5027 
mˇ°_sock
 = 
	`sockë
(
ªs
->
ai_Ámûy
, 
SOCK_DGRAM
, 0);

5028 i‡(
mˇ°_sock
 > 0)

5030 
ho°
 = ho°->
ai_√xt
;

5032 i‡(
mˇ°_sock
 =
INVSOCK
)

5034 
	`‰ìaddröfo
(
ªs
);

5035 
	`quô
(1, "API mcast couldÇot open socket");

5038 
›tvÆ
 = 1;

5039 i‡(
	`SOCKETFAIL
(
	`£tsock›t
(
mˇ°_sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)(&
›tvÆ
), (optval))))

5041 
	`≠∂og
(
LOG_ERR
, "API mˇ° sësock›àSO_REUSEADDR faûed (%s)%s", 
SOCKERRMSG
, 
MUNAVAILABLE
);

5042 
dõ
;

5046 
bound
 = 0;

5047 
böd°¨t
 = 
	`time
(
NULL
);

5048 
bound
 == 0)

5050 i‡(
	`SOCKETFAIL
(
	`böd
(
mˇ°_sock
, 
ho°
->
ai_addr
, ho°->
ai_addæí
)))

5052 
bödîr‹
 = 
SOCKERRMSG
;

5053 i‡((
	`time
(
NULL
Ë- 
böd°¨t
) > 61)

5056 
	`cg¶ìp_ms
(30000);

5059 
bound
 = 1;

5062 i‡(
bound
 == 0)

5064 
	`≠∂og
(
LOG_ERR
, "API mˇ° bödÅÿp‹à%d faûed (%s)%s", 
›t_≠i_mˇ°_p‹t
, 
bödîr‹
, 
MUNAVAILABLE
);

5065 
dõ
;

5068 
ho°
->
ai_Ámûy
)

5070 
AF_INET
:

5072 
ù_mªq
 
gΩ
;

5073 
	`mem£t
(&
gΩ
, 0, (grp));

5074 
gΩ
.
imr_mu…üddr
.
s_addr
 = ((
sockaddr_ö
 *)(
ho°
->
ai_addr
))->
sö_addr
.s_addr;

5075 
gΩ
.
imr_öãrÁ˚
.
s_addr
 = 
INADDR_ANY
;

5077 i‡(
	`SOCKETFAIL
(
	`£tsock›t
(
mˇ°_sock
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
,

5078 (*)(&
gΩ
), (grp))))

5080 
	`≠∂og
(
LOG_ERR
, "API mˇ° joö faûed (%s)%s", 
SOCKERRMSG
, 
MUNAVAILABLE
);

5081 
dõ
;

5085 
AF_INET6
:

5087 
ùv6_mªq
 
gΩ
;

5088 
	`mem˝y
(&
gΩ
.
ùv6mr_mu…üddr
, &(((
sockaddr_ö6
 *)(
ho°
->
ai_addr
))->
sö6_addr
),

5089 (
ö6_addr
));

5090 
gΩ
.
ùv6mr_öãrÁ˚
= 0;

5092 i‡(
	`SOCKETFAIL
(
	`£tsock›t
(
mˇ°_sock
, 
IPPROTO_IPV6
, 
IPV6_ADD_MEMBERSHIP
,

5093 (*)(&
gΩ
), (grp))))

5095 
	`≠∂og
(
LOG_ERR
, "API mˇ° joö faûed (%s)%s", 
SOCKERRMSG
, 
MUNAVAILABLE
);

5096 
dõ
;

5103 
	`‰ìaddröfo
(
ªs
);

5105 
ex≥˘_code_Àn
 = (
ex≥˘
Ë+ 
	`°æí
(
›t_≠i_mˇ°_code
);

5106 
ex≥˘_code
 = 
	`mÆloc
(
ex≥˘_code_Àn
+1);

5107 i‡(!
ex≥˘_code
)

5108 
	`quô
(1, "FailedÅo malloc mcastÉxpect_code");

5109 
	`¢¥ötf
(
ex≥˘_code
, 
ex≥˘_code_Àn
+1, "%s%s-", 
ex≥˘
, 
›t_≠i_mˇ°_code
);

5111 
cou¡
 = 0;

5114 
	`cg¶ìp_ms
(1000);

5116 
cou¡
++;

5117 
ˇme_‰om_siz
 = (
ˇme_‰om
);

5118 i‡(
	`SOCKETFAIL
(
ªp
 = 
	`ªcv‰om
(
mˇ°_sock
, 
buf
, (buf) - 1,

5119 0, (
sockaddr
 *)(&
ˇme_‰om
), &
ˇme_‰om_siz
)))

5121 
	`≠∂og
(
LOG_DEBUG
, "API mcast failed count=%d (%s) (%d)",

5122 
cou¡
, 
SOCKERRMSG
, ()
mˇ°_sock
);

5126 
addrok
 = 
	`check_c⁄√˘
(&
ˇme_‰om
, &
c⁄√˘addr
, &
group
);

5127 
	`≠∂og
(
LOG_DEBUG
, "API mcast from %s - %s",

5128 
c⁄√˘addr
, 
addrok
 ? "Accepted" : "Ignored");

5129 i‡(!
addrok
)

5132 
buf
[
ªp
] = '\0';

5133 i‡(
ªp
 > 0 && 
buf
[rep-1] == '\n')

5134 
buf
[--
ªp
] = '\0';

5136 
	`gë«meöfo
((
sockaddr
 *)(&
ˇme_‰om
), 
ˇme_‰om_siz
,

5137 
NULL
, 0, 
ˇme_‰om_p‹t
, (ˇme_‰om_p‹t), 
NI_NUMERICHOST
);

5139 
	`≠∂og
(
LOG_DEBUG
, "API mcastÑequestÑep=%d (%s) from [%s]:%s",

5140 ()
ªp
, 
buf
, 
c⁄√˘addr
, 
ˇme_‰om_p‹t
);

5142 i‡((
size_t
)
ªp
 > 
ex≥˘_code_Àn
 && 
	`memcmp
(
buf
, 
ex≥˘_code
,Éxpect_code_len) == 0)

5144 
ª∂y_p‹t
 = 
	`©oi
(&
buf
[
ex≥˘_code_Àn
]);

5145 i‡(
ª∂y_p‹t
 < 1 ||Ñeply_port > 65535)

5147 
	`≠∂og
(
LOG_DEBUG
, "API mcastÑequest ignored - invalidÖort (%s)",

5148 &
buf
[
ex≥˘_code_Àn
]);

5152 
	`≠∂og
(
LOG_DEBUG
, "API mcastÑequest OKÖort %s=%d",

5153 &
buf
[
ex≥˘_code_Àn
], 
ª∂y_p‹t
);

5155 i‡(
	`gëaddröfo
(
c⁄√˘addr
, &
buf
[
ex≥˘_code_Àn
], &
höts
, &
ªs
) != 0)

5157 
	`≠∂og
(
LOG_ERR
, "InvÆid clõ¡áddªs†%s", 
c⁄√˘addr
);

5160 
˛õ¡
 = 
ªs
;

5161 
˛õ¡
)

5163 
ª∂y_sock
 = 
	`sockë
(
ªs
->
ai_Ámûy
, 
SOCK_DGRAM
, 0);

5164 i‡(
mˇ°_sock
 > 0)

5166 
˛õ¡
 = clõ¡->
ai_√xt
;

5168 i‡(
ª∂y_sock
 =
INVSOCK
)

5170 
	`‰ìaddröfo
(
ªs
);

5171 
	`≠∂og
(
LOG_ERR
, "API mˇ° couldÇŸ o≥¿sockëÅÿ˛õ¡ %s", 
c⁄√˘addr
);

5175 
	`¢¥ötf
(
ª∂ybuf
, (replybuf),

5176 "cgm-" 
API_MCAST_CODE
 "-%d-%s",

5177 
›t_≠i_p‹t
, 
›t_≠i_mˇ°_des
);

5179 
ªp
 = 
	`£ndto
(
ª∂y_sock
, 
ª∂ybuf
, 
	`°æí
(replybuf)+1,

5180 0, 
˛õ¡
->
ai_addr
, clõ¡->
ai_addæí
);

5181 
	`‰ìaddröfo
(
ªs
);

5182 i‡(
	`SOCKETFAIL
(
ªp
))

5184 
	`≠∂og
(
LOG_DEBUG
, "API mcast sendÑeply failed (%s) (%d)",

5185 
SOCKERRMSG
, ()
ª∂y_sock
);

5189 
	`≠∂og
(
LOG_DEBUG
, "API mcast sendÑeply (%s) succeeded (%d) (%d)",

5190 
ª∂ybuf
, ()
ªp
, ()
ª∂y_sock
);

5193 
	`CLOSESOCKET
(
ª∂y_sock
);

5197 
	`≠∂og
(
LOG_DEBUG
, "API mcastÑequest wasÇo good");

5200 
dõ
:

5202 
	`CLOSESOCKET
(
mˇ°_sock
);

5203 
	}
}

5205 *
	$mˇ°_thªad
(*
u£rd©a
)

5207 
thr_öfo
 *
mythr
 = 
u£rd©a
;

5209 
	`±hªad_dëach
(
	`±hªad_£lf
());

5210 
	`±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, 
NULL
);

5212 
	`RíameThªad
("APIMcast");

5214 
	`mˇ°
();

5216 
	`PTH
(
mythr
) = 0L;

5218  
NULL
;

5219 
	}
}

5221 
	$mˇ°_öô
()

5223 
thr_öfo
 *
thr
;

5225 
thr
 = 
	`ˇŒoc
(1, (*thr));

5226 i‡(!
thr
)

5227 
	`quô
(1, "FailedÅo calloc mcastÅhr");

5229 i‡(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
mˇ°_thªad
,Åhr))

5230 
	`quô
(1, "API mcastÅhread create failed");

5231 
	}
}

5233 
	$≠i
(
≠i_thr_id
)

5235 
io_d©a
 *io_data;

5236 
thr_öfo
 
bye_thr
;

5237 
buf
[
TMPBUFSIZ
];

5238 
∑øm_buf
[
TMPBUFSIZ
];

5239 
SOCKETTYPE
 
c
;

5240 
n
, 
bound
;

5241 *
c⁄√˘addr
;

5242 *
bödîr‹
;

5243 
time_t
 
böd°¨t
;

5244 
p‹t
 = 
›t_≠i_p‹t
;

5245 
p‹t_s
[10];

5246 
sockaddr_°‹age
 
˛i
;

5247 
sockÀn_t
 
˛isiz
;

5248 
cmdbuf
[100];

5249 *
cmd
 = 
NULL
;

5250 *
∑øm
;

5251 
boﬁ
 
addrok
;

5252 
group
;

5253 
js⁄_îr‹_t
 
js⁄_îr
;

5254 
js⁄_t
 *
js⁄_c⁄fig
 = 
NULL
;

5255 
js⁄_t
 *
js⁄_vÆ
;

5256 
boﬁ
 
isjs⁄
;

5257 
boﬁ
 
did
, 
isjoö
 = 
Ál£
, 
fú°joö
;

5258 
i
;

5259 
addröfo
 
höts
, *
ªs
, *
ho°
;

5261 
SOCKETTYPE
 *
≠isock
;

5263 
≠isock
 = 
	`mÆloc
((*apisock));

5264 *
≠isock
 = 
INVSOCK
;

5266 i‡(!
›t_≠i_li°í
)

5268 
	`≠∂og
(
LOG_DEBUG
, "APIÇŸÑu¬ög%s", 
UNAVAILABLE
);

5269 
	`‰ì
(
≠isock
);

5273 
io_d©a
 = 
	`sock_io_√w
();

5275 
	`muãx_öô
(&
quô_ª°¨t_lock
);

5277 
	`±hªad_˛ónup_push
(
tidyup
, (*)
≠isock
);

5278 
my_thr_id
 = 
≠i_thr_id
;

5280 
	`£tup_groups
();

5282 i‡(
›t_≠i_Ælow
)

5284 
	`£tup_ùac˚ss
();

5286 i‡(
ùs
 == 0)

5288 
	`≠∂og
(
LOG_WARNING
, "APIÇŸÑu¬ög (nÿvÆid IP†•ecifõd)%s", 
UNAVAILABLE
);

5289 
	`‰ì
(
≠isock
);

5296 
	`cg¶ìp_ms
(
›t_log_öãrvÆ
*1000);

5298 
	`•rötf
(
p‹t_s
, "%d", 
p‹t
);

5299 
	`mem£t
(&
höts
, 0, (hints));

5300 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

5301 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

5302 i‡(
	`gëaddröfo
(
›t_≠i_ho°
, 
p‹t_s
, &
höts
, &
ªs
) != 0)

5304 
	`≠∂og
(
LOG_ERR
, "API faûedÅÿªsﬁvê%s", 
›t_≠i_ho°
);

5305 
	`‰ì
(
≠isock
);

5308 
ho°
 = 
ªs
;

5309 
ho°
)

5311 *
≠isock
 = 
	`sockë
(
ªs
->
ai_Ámûy
, 
SOCK_STREAM
, 0);

5312 i‡(*
≠isock
 > 0)

5314 
ho°
 = ho°->
ai_√xt
;

5316 i‡(*
≠isock
 =
INVSOCK
)

5318 
	`≠∂og
(
LOG_ERR
, "API inôülißti⁄ faûed (%s)%s", 
SOCKERRMSG
, 
UNAVAILABLE
);

5319 
	`‰ìaddröfo
(
ªs
);

5320 
	`‰ì
(
≠isock
);

5324 #i‚de‡
WIN32


5328 
›tvÆ
 = 1;

5330 i‡(
	`SOCKETFAIL
(
	`£tsock›t
(*
≠isock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)(&
›tvÆ
), (optval))))

5331 
	`≠∂og
(
LOG_DEBUG
, "API sësock›àSO_REUSEADDR faûed (ign‹ed): %s", 
SOCKERRMSG
);

5339 
bound
 = 0;

5340 
böd°¨t
 = 
	`time
(
NULL
);

5341 
bound
 == 0)

5343 i‡(
	`SOCKETFAIL
(
	`böd
(*
≠isock
, 
ho°
->
ai_addr
, ho°->
ai_addæí
)))

5345 
bödîr‹
 = 
SOCKERRMSG
;

5346 i‡((
	`time
(
NULL
Ë- 
böd°¨t
) > 61)

5350 
	`≠∂og
(
LOG_WARNING
, "API bödÅÿp‹à%d faûed -Åryögágaö i¿30£c", 
p‹t
);

5351 
	`cg¶ìp_ms
(30000);

5355 
bound
 = 1;

5357 
	`‰ìaddröfo
(
ªs
);

5359 i‡(
bound
 == 0)

5361 
	`≠∂og
(
LOG_ERR
, "API bödÅÿp‹à%d faûed (%s)%s", 
p‹t
, 
bödîr‹
, 
UNAVAILABLE
);

5362 
	`‰ì
(
≠isock
);

5366 i‡(
	`SOCKETFAIL
(
	`li°í
(*
≠isock
, 
QUEUE
)))

5368 
	`≠∂og
(
LOG_ERR
, "API3 inôülißti⁄ faûed (%s)%s", 
SOCKERRMSG
, 
UNAVAILABLE
);

5369 
	`CLOSESOCKET
(*
≠isock
);

5370 
	`‰ì
(
≠isock
);

5374 i‡(
›t_≠i_Ælow
)

5375 
	`≠∂og
(
LOG_WARNING
, "APIÑu¬ög i¿IPác˚s†modê⁄Ö‹à%d (%d)", 
p‹t
, ()*
≠isock
);

5378 i‡(
›t_≠i_√tw‹k
)

5379 
	`≠∂og
(
LOG_WARNING
, "APIÑu¬ög i¿UNRESTRICTEDÑódác˚s†modê⁄Ö‹à%d (%d)", 
p‹t
, ()*
≠isock
);

5381 
	`≠∂og
(
LOG_WARNING
, "APIÑu¬ög i¿loˇ»ªadác˚s†modê⁄Ö‹à%d (%d)", 
p‹t
, ()*
≠isock
);

5384 i‡(
›t_≠i_mˇ°
)

5385 
	`mˇ°_öô
();

5387 
°rbufs
 = 
	`k_√w_li°
("SåBufs", (
SBITEM
), 
ALLOC_SBITEMS
, 
LIMIT_SBITEMS
, 
Ál£
);

5389 !
bye
)

5391 
˛isiz
 = (
˛i
);

5392 i‡(
	`SOCKETFAIL
(
c
 = 
	`ac˚±
(*
≠isock
, (
sockaddr
 *)(&
˛i
), &
˛isiz
)))

5394 
	`≠∂og
(
LOG_ERR
, "API faûed (%s)%†(%d)", 
SOCKERRMSG
, 
UNAVAILABLE
, ()*
≠isock
);

5395 
dõ
;

5398 
addrok
 = 
	`check_c⁄√˘
((
sockaddr_°‹age
 *)&
˛i
, &
c⁄√˘addr
, &
group
);

5399 
	`≠∂og
(
LOG_DEBUG
, "API: connection from %s - %s",

5400 
c⁄√˘addr
, 
addrok
 ? "Accepted" : "Ignored");

5402 i‡(
addrok
)

5404 
n
 = 
	`ªcv
(
c
, &
buf
[0], 
TMPBUFSIZ
-1, 0);

5405 i‡(
	`SOCKETFAIL
(
n
))

5406 
buf
[0] = '\0';

5408 
buf
[
n
] = '\0';

5410 i‡(
›t_debug
)

5412 i‡(
	`SOCKETFAIL
(
n
))

5413 
	`≠∂og
(
LOG_DEBUG
, "API:Ñecv faûed: %s", 
SOCKERRMSG
);

5415 
	`≠∂og
(
LOG_DEBUG
, "API:Ñecv comm™d: (%dË'%s'", 
n
, 
buf
);

5418 i‡(!
	`SOCKETFAIL
(
n
))

5421 
whí
 = 
	`time
(
NULL
);

5422 
	`io_ªöô
(
io_d©a
);

5424 
did
 = 
Ál£
;

5426 i‡(*
buf
 !
ISJSON
)

5428 
isjs⁄
 = 
Ál£
;

5430 
∑øm
 = 
	`°rchr
(
buf
, 
SEPARATOR
);

5431 i‡(
∑øm
 !
NULL
)

5432 *(
∑øm
++) = '\0';

5434 
cmd
 = 
buf
;

5438 
isjs⁄
 = 
åue
;

5440 
∑øm
 = 
NULL
;

5442 
js⁄_c⁄fig
 = 
	`js⁄_lﬂdb
(
buf
, 
n
, 0, &
js⁄_îr
);

5444 i‡(!
	`js⁄_is_obje˘
(
js⁄_c⁄fig
))

5446 
	`mesßge
(
io_d©a
, 
MSG_INVJSON
, 0, 
NULL
, 
isjs⁄
);

5447 
	`£nd_ªsu…
(
io_d©a
, 
c
, 
isjs⁄
);

5448 
did
 = 
åue
;

5452 
js⁄_vÆ
 = 
	`js⁄_obje˘_gë
(
js⁄_c⁄fig
, 
JSON_COMMAND
);

5453 i‡(
js⁄_vÆ
 =
NULL
)

5455 
	`mesßge
(
io_d©a
, 
MSG_MISCMD
, 0, 
NULL
, 
isjs⁄
);

5456 
	`£nd_ªsu…
(
io_d©a
, 
c
, 
isjs⁄
);

5457 
did
 = 
åue
;

5461 i‡(!
	`js⁄_is_°rög
(
js⁄_vÆ
))

5463 
	`mesßge
(
io_d©a
, 
MSG_INVCMD
, 0, 
NULL
, 
isjs⁄
);

5464 
	`£nd_ªsu…
(
io_d©a
, 
c
, 
isjs⁄
);

5465 
did
 = 
åue
;

5469 
cmd
 = (*)
	`js⁄_°rög_vÆue
(
js⁄_vÆ
);

5470 
js⁄_vÆ
 = 
	`js⁄_obje˘_gë
(
js⁄_c⁄fig
, 
JSON_PARAMETER
);

5471 i‡(
	`js⁄_is_°rög
(
js⁄_vÆ
))

5472 
∑øm
 = (*)
	`js⁄_°rög_vÆue
(
js⁄_vÆ
);

5473 i‡(
	`js⁄_is_öãgî
(
js⁄_vÆ
))

5475 
	`•rötf
(
∑øm_buf
, "%d", ()
	`js⁄_öãgî_vÆue
(
js⁄_vÆ
));

5476 
∑øm
 = 
∑øm_buf
;

5478 i‡(
	`js⁄_is_ªÆ
(
js⁄_vÆ
))

5480 
	`•rötf
(
∑øm_buf
, "%f", ()
	`js⁄_ªÆ_vÆue
(
js⁄_vÆ
));

5481 
∑øm
 = 
∑øm_buf
;

5488 i‡(!
did
)

5490 *
cmd±r
, *
cmdsbuf
 = 
NULL
;

5492 i‡(
	`°rchr
(
cmd
, 
CMDJOIN
))

5494 
fú°joö
 = 
isjoö
 = 
åue
;

5496 
cmdsbuf
 = 
	`mÆloc
(
	`°æí
(
cmd
) + 3);

5497 i‡(!
cmdsbuf
)

5498 
	`quôhîe
(1, "OOM cmdsbuf");

5499 
	`°r˝y
(
cmdsbuf
, "|");

5500 
∑øm
 = 
NULL
;

5503 
fú°joö
 = 
isjoö
 = 
Ál£
;

5505 
cmd±r
 = 
cmd
;

5508 
did
 = 
Ál£
;

5509 i‡(
isjoö
)

5511 
cmd
 = 
	`°rchr
(
cmd±r
, 
CMDJOIN
);

5512 i‡(
cmd
)

5513 *(
cmd
++) = '\0';

5514 i‡(!*
cmd±r
)

5515 
öochi
;

5518 
i
 = 0; 
cmds
[i].
«me
 !
NULL
; i++)

5520 i‡(
	`°rcmp
(
cmd±r
, 
cmds
[
i
].
«me
) == 0)

5522 
	`•rötf
(
cmdbuf
, "|%s|", 
cmd±r
);

5523 i‡(
isjoö
)

5525 i‡(
	`°r°r
(
cmdsbuf
, 
cmdbuf
))

5527 
did
 = 
åue
;

5530 
	`°rˇt
(
cmdsbuf
, 
cmd±r
);

5531 
	`°rˇt
(
cmdsbuf
, "|");

5532 
	`hód_joö
(
io_d©a
, 
cmd±r
, 
isjs⁄
, &
fú°joö
);

5533 i‡(!
cmds
[
i
].
joöabÀ
)

5535 
	`mesßge
(
io_d©a
, 
MSG_ACCDENY
, 0, 
cmds
[
i
].
«me
, 
isjs⁄
);

5536 
did
 = 
åue
;

5537 
	`èû_joö
(
io_d©a
, 
isjs⁄
);

5541 i‡(
	`ISPRIVGROUP
(
group
Ë|| 
	`°r°r
(
	`COMMANDS
(group), 
cmdbuf
))

5542 (
cmds
[
i
].
func
)(
io_d©a
, 
c
, 
∑øm
, 
isjs⁄
, 
group
);

5545 
	`mesßge
(
io_d©a
, 
MSG_ACCDENY
, 0, 
cmds
[
i
].
«me
, 
isjs⁄
);

5546 
	`≠∂og
(
LOG_DEBUG
, "API:ác˚s†díõdÅÿ'%s' f‹ '%s' comm™d", 
c⁄√˘addr
, 
cmds
[
i
].
«me
);

5549 
did
 = 
åue
;

5550 i‡(!
isjoö
)

5551 
	`£nd_ªsu…
(
io_d©a
, 
c
, 
isjs⁄
);

5553 
	`èû_joö
(
io_d©a
, 
isjs⁄
);

5558 i‡(!
did
)

5560 i‡(
isjoö
)

5561 
	`hód_joö
(
io_d©a
, 
cmd±r
, 
isjs⁄
, &
fú°joö
);

5562 
	`mesßge
(
io_d©a
, 
MSG_INVCMD
, 0, 
NULL
, 
isjs⁄
);

5563 i‡(
isjoö
)

5564 
	`èû_joö
(
io_d©a
, 
isjs⁄
);

5566 
	`£nd_ªsu…
(
io_d©a
, 
c
, 
isjs⁄
);

5568 
öochi
:

5569 i‡(
isjoö
)

5570 
cmd±r
 = 
cmd
;

5572 
isjoö
 && 
cmd±r
);

5575 i‡(
isjoö
)

5576 
	`£nd_ªsu…
(
io_d©a
, 
c
, 
isjs⁄
);

5578 i‡(
isjs⁄
 && 
	`js⁄_is_obje˘
(
js⁄_c⁄fig
))

5579 
	`js⁄_de¸ef
(
js⁄_c⁄fig
);

5582 
	`CLOSESOCKET
(
c
);

5584 
dõ
:

5589 
	`±hªad_˛ónup_p›
(
åue
);

5591 
	`‰ì
(
≠isock
);

5593 i‡(
›t_debug
)

5594 
	`≠∂og
(
LOG_DEBUG
, "API:Åerminating dueÅo: %s",

5595 
do_a_quô
 ? "QUIT" : (
do_a_ª°¨t
 ? "RESTART" : (
bye
 ? "BYE" : "UNKNOWN!")));

5597 
	`muãx_lock
(&
quô_ª°¨t_lock
);

5599 i‡(
do_a_ª°¨t
)

5601 i‡(
	`thr_öfo_¸óã
(&
bye_thr
, 
NULL
, 
ª°¨t_thªad
, &bye_thr))

5603 
	`muãx_u∆ock
(&
quô_ª°¨t_lock
);

5604 
	`quô
(1, "API failedÅo initiateáÑestart -áborting");

5606 
	`±hªad_dëach
(
bye_thr
.
±h
);

5608 i‡(
do_a_quô
)

5610 i‡(
	`thr_öfo_¸óã
(&
bye_thr
, 
NULL
, 
quô_thªad
, &bye_thr))

5612 
	`muãx_u∆ock
(&
quô_ª°¨t_lock
);

5613 
	`quô
(1, "API failedÅo initiateá clean quit -áborting");

5615 
	`±hªad_dëach
(
bye_thr
.
±h
);

5618 
	`muãx_u∆ock
(&
quô_ª°¨t_lock
);

5619 
	}
}

	@arg-nonnull.h

20 #i‚de‡
_GL_ARG_NONNULL


21 #i‡(
__GNUC__
 =3 && 
__GNUC_MINOR__
 >= 3) || __GNUC__ > 3

22 
	#_GL_ARG_NONNULL
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

24 
	#_GL_ARG_NONNULL
(
∑øms
)

	)

	@bench_block.h

1 #i‚de‡
__BENCH_BLOCK_H__


2 
	#__BENCH_BLOCK_H__


	)

7 c⁄° 
	gbích_hidiffs
[16][324] = {

89 c⁄° 
	gbích_lodiffs
[16][324] = {

	@c++defs.h

17 #i‚de‡
_GL_CXXDEFS_H


18 
	#_GL_CXXDEFS_H


	)

81 #i‡
deföed
 
__˝lu•lus


82 
	#_GL_EXTERN_C
 "C"

	)

84 
	#_GL_EXTERN_C
 

	)

94 
	#_GL_FUNCDECL_RPL
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

95 
	`_GL_FUNCDECL_RPL_1
 (
Ωl_
##
func
, 
ªây≥
, 
∑ømëîs_™d_©åibuãs
)

	)

96 
	#_GL_FUNCDECL_RPL_1
(
Ωl_func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

97 
_GL_EXTERN_C
 
ªây≥
 
Ωl_func
 
∑ømëîs_™d_©åibuãs


	)

106 
	#_GL_FUNCDECL_SYS
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

107 
_GL_EXTERN_C
 
ªây≥
 
func
 
∑ømëîs_™d_©åibuãs


	)

115 
	#_GL_CXXALIAS_RPL
(
func
,
ªây≥
,
∑ømëîs
) \

116 
	`_GL_CXXALIAS_RPL_1
 (
func
, 
Ωl_
##func, 
ªây≥
, 
∑ømëîs
)

	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


118 
	#_GL_CXXALIAS_RPL_1
(
func
,
Ωl_func
,
ªây≥
,
∑ømëîs
) \

119 
«me•a˚
 
GNULIB_NAMESPACE
 \

121 
	`ªây≥
 (*c⁄° 
func
Ë
∑ømëîs
 = ::
Ωl_func
; \

123 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

125 
	#_GL_CXXALIAS_RPL_1
(
func
,
Ωl_func
,
ªây≥
,
∑ømëîs
) \

126 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

134 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


135 
	#_GL_CXXALIAS_RPL_CAST_1
(
func
,
Ωl_func
,
ªây≥
,
∑ømëîs
) \

136 
«me•a˚
 
GNULIB_NAMESPACE
 \

138 
	`ªây≥
 (*c⁄° 
func
Ë
∑ømëîs
 = \

139 
ªöãΩªt_ˇ°
<
	`ªây≥
(*)
∑ømëîs
>(::
Ωl_func
); \

141 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

143 
	#_GL_CXXALIAS_RPL_CAST_1
(
func
,
Ωl_func
,
ªây≥
,
∑ømëîs
) \

144 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

154 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


161 
	#_GL_CXXALIAS_SYS
(
func
,
ªây≥
,
∑ømëîs
) \

162 
«me•a˚
 
GNULIB_NAMESPACE
 \

164 
	`ªây≥
 (*
func
Ë
∑ømëîs
 = ::func; \

166 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

168 
	#_GL_CXXALIAS_SYS
(
func
,
ªây≥
,
∑ømëîs
) \

169 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

177 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


178 
	#_GL_CXXALIAS_SYS_CAST
(
func
,
ªây≥
,
∑ømëîs
) \

179 
«me•a˚
 
GNULIB_NAMESPACE
 \

181 
	`ªây≥
 (*
func
Ë
∑ømëîs
 = \

182 
ªöãΩªt_ˇ°
<
	`ªây≥
(*)
∑ømëîs
>(::
func
); \

184 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

186 
	#_GL_CXXALIAS_SYS_CAST
(
func
,
ªây≥
,
∑ømëîs
) \

187 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

196 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


202 
	#_GL_CXXALIAS_SYS_CAST2
(
func
,
ªây≥
,
∑ømëîs
,
ªây≥2
,
∑ømëîs2
) \

203 
«me•a˚
 
GNULIB_NAMESPACE
 \

205 
	`ªây≥
 (*
func
Ë
∑ømëîs
 = \

206 
ªöãΩªt_ˇ°
<
	`ªây≥
(*)
∑ømëîs
>( \

207 (
	`ªây≥2
(*)
∑ømëîs2
)(::
func
)); \

209 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

211 
	#_GL_CXXALIAS_SYS_CAST2
(
func
,
ªây≥
,
∑ømëîs
,
ªây≥2
,
∑ømëîs2
) \

212 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

219 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


220 
	#_GL_CXXALIASWARN
(
func
) \

221 
	`_GL_CXXALIASWARN_1
 (
func
, 
GNULIB_NAMESPACE
)

	)

222 
	#_GL_CXXALIASWARN_1
(
func
,
«me•a˚
) \

223 
	`_GL_CXXALIASWARN_2
 (
func
, 
«me•a˚
)

	)

226 #i‡!
__OPTIMIZE__


227 
	#_GL_CXXALIASWARN_2
(
func
,
«me•a˚
) \

228 
	`_GL_WARN_ON_USE
 (
func
, \

230 "U£ " #«me•a˚ "::" #fun¯" in°ód.")

	)

231 #ñi‡
__GNUC__
 >3 && 
GNULIB_STRICT_CHECKING


232 
	#_GL_CXXALIASWARN_2
(
func
,
«me•a˚
) \

233 
	`__ty≥of__
 (
func
Ë
	)
func

235 
	#_GL_CXXALIASWARN_2
(
func
,
«me•a˚
) \

236 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

239 
	#_GL_CXXALIASWARN
(
func
) \

240 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

246 #i‡
deföed
 
__˝lu•lus
 && deföed 
GNULIB_NAMESPACE


247 
	#_GL_CXXALIASWARN1
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

248 
	`_GL_CXXALIASWARN1_1
 (
func
, 
ªây≥
, 
∑ømëîs_™d_©åibuãs
, \

249 
GNULIB_NAMESPACE
)

	)

250 
	#_GL_CXXALIASWARN1_1
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
«me•a˚
) \

251 
	`_GL_CXXALIASWARN1_2
 (
func
, 
ªây≥
, 
∑ømëîs_™d_©åibuãs
, 
«me•a˚
)

	)

254 #i‡!
__OPTIMIZE__


255 
	#_GL_CXXALIASWARN1_2
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
«me•a˚
) \

256 
	`_GL_WARN_ON_USE_CXX
 (
func
, 
ªây≥
, 
∑ømëîs_™d_©åibuãs
, \

258 "U£ " #«me•a˚ "::" #fun¯" in°ód.")

	)

259 #ñi‡
__GNUC__
 >3 && 
GNULIB_STRICT_CHECKING


260 
	#_GL_CXXALIASWARN1_2
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
«me•a˚
) \

261 
	`__ty≥of__
 (
func
Ë
	)
func

263 
	#_GL_CXXALIASWARN1_2
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
«me•a˚
) \

264 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

267 
	#_GL_CXXALIASWARN1
(
func
,
ªây≥
,
∑ømëîs_™d_©åibuãs
) \

268 
_GL_EXTERN_C
 
_gl_cxxÆüs_dummy


	)

	@cgminer.c

16 
	~"c⁄fig.h
"

18 #ifde‡
HAVE_CURSES


19 
	~<cur£s.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<°dboﬁ.h
>

26 
	~<°döt.h
>

27 
	~<uni°d.h
>

28 
	~<sys/time.h
>

29 
	~<time.h
>

30 
	~<m©h.h
>

31 
	~<°d¨g.h
>

32 
	~<as£π.h
>

33 
	~<sig«l.h
>

34 
	~<limôs.h
>

36 #ifde‡
USE_USBUTILS


37 
	~<£m≠h‹e.h
>

40 #ifde‡
USE_LIBSYSTEMD


41 
	~<sy°emd/sd-d´m⁄.h
>

44 
	~<sys/sysöfo.h
>

45 
	~<sys/°©.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/ªsour˚.h
>

48 
	~<cˇn/›t/›t.h
>

49 
	~<j™ss⁄.h
>

51 #ifde‡
HAVE_LIBCURL


52 
	~<cuæ/cuæ.h
>

54 *
	gcuæy
 = ":D";

57 
	~<libgí.h
>

58 
	~"sha2.h
"

60 
	~"com∑t.h
"

61 
	~"möî.h
"

62 
	~"bích_block.h
"

64 #ifde‡
USE_BITMAIN


65 
	~"drivî-bômaö.h
"

66 
	#USE_USBUTILS


	)

69 #ifde‡
USE_BITMAIN_C5


70 
	~"drivî-btm-soc.h
"

73 #ifde‡
USE_USBUTILS


74 
	~"usbutûs.h
"

77 #i‡
deföed
(
unix
Ë|| deföed(
__APPLE__
)

78 
	~<î∫o.h
>

79 
	~<f˙é.h
>

80 
	~<sys/waô.h
>

83 
°øãgõs
 
	g°øãgõs
[] =

92 
	g∑ckagíame
[256];

94 
FILE
 * 
	gg_logw‹k_fûe
 = 
NULL
;

95 
FILE
 * 
	gg_logw‹k_fûes
[65] = {0};

96 
FILE
 * 
	gg_logw‹k_diffs
[65] = {0};

97 
	gg_logw‹k_asi˙um
 = 0;

99 
boﬁ
 
	g›t_w‹k_upd©e
;

100 
boﬁ
 
	g›t_¥Ÿocﬁ
;

103 
	sbíchfûe_œyout


105 
	mÀngth
;

106 *
	m«me
;

107 } 
	gbíchfûe_d©a
[] =

117 
	ebíchw‹k


119 
	mBENCHWORK_VERSION
 = 0,

120 
	mBENCHWORK_MERKLEROOT
,

121 
	mBENCHWORK_PREVHASH
,

122 
	mBENCHWORK_DIFFBITS
,

123 
	mBENCHWORK_NONCETIME
,

124 
	mBENCHWORK_COUNT


128 #ifde‡
HAVE_LIBCURL


129 *
	g›t_btc_addªss
;

130 *
	g›t_btc_sig
;

133 
	gn⁄˚_num10_°rög
[
NONCE_BUFF
];

134 
	gn⁄˚_num30_°rög
[
NONCE_BUFF
];

135 
	gn⁄˚_num60_°rög
[
NONCE_BUFF
];

137 *
	g›t_bíchfûe
;

138 
boﬁ
 
	g›t_bíchfûe_di•œy
;

139 
FILE
 *
	gbíchfûe_ö
;

140 
	gbíchfûe_löe
;

141 
	gbíchfûe_w‹k
;

142 
boﬁ
 
	g›t_bíchm¨k
;

144 
boﬁ
 
	gw‹k_fûÀd
;

145 
boﬁ
 
	gw‹k_em±õd
;

147 
boﬁ
 
	ghave_l⁄gpﬁl
;

148 
boﬁ
 
	gw™t_≥r_devi˚_°©s
;

149 
boﬁ
 
	gu£_sy¶og
;

150 
boﬁ
 
	g›t_quõt
;

151 
boﬁ
 
	g›t_ªÆquõt
;

152 
boﬁ
 
	g›t_logöput
;

153 
boﬁ
 
	g›t_com∑˘
;

155 c⁄° 
	g›t_cutof·emp
 = 95;

156 
	g›t_log_öãrvÆ
 = 5;

157 
	g›t_queue
 = 1;

158 
	gmax_queue
 = 1;

159 
	g›t_sˇ¡ime
 = -1;

160 c⁄° 
	gmax_sˇ¡ime
 = -1;

161 
	g›t_expúy
 = 120;

162 
	g›t_poﬁ_ÁŒback
 = 120;

163 
	gglobÆ_quŸa_gcd
 = 1;

165 c⁄° 
boﬁ
 
	g›t_time
 = 
åue
;

166 
	gglobÆ_hashøã
;

168 
time_t
 
	gœ°_gëw‹k
;

172 #i‡
deföed
(
USE_USBUTILS
)

173 
	gnDevs
;

176 
boﬁ
 
	g›t_ª°¨t
 = 
åue
;

177 
boﬁ
 
	g›t_nogpu
;

179 
li°_hód
 
	gsˇn_devi˚s
;

180 
boﬁ
 
	g›t_di•œy_devs
;

181 
	gtŸÆ_devi˚s
;

182 
	gzombõ_devs
;

183 
	gmo°_devi˚s
;

184 
cgpu_öfo
 **
	gdevi˚s
;

185 
	gmöög_thªads
;

186 
	gnum_¥o˚ss‹s
;

188 #ifde‡
HAVE_CURSES


189 
boﬁ
 
	gu£_cur£s
 = 
åue
;

191 
boﬁ
 
	gu£_cur£s
;

194 
boﬁ
 
	g›t_wides¸ìn
;

195 
boﬁ
 
	gÆt_°©us
;

196 
boﬁ
 
	gswôch_°©us
;

197 
boﬁ
 
	g›t_submô_°Æe
 = 
åue
;

198 
	g›t_sh¨es
;

200 
boﬁ
 
	g›t_Áû_⁄ly
;

201 
boﬁ
 
	g›t_fix_¥Ÿocﬁ
;

202 
boﬁ
 
	g›t_lowmem
;

203 
boﬁ
 
	g›t_autoÁn
;

204 
boﬁ
 
	g›t_aut€ngöe
;

205 
boﬁ
 
	g›t_nﬂdl
;

207 *
	g›t_vîsi⁄_∑th
 = 
NULL
;

208 *
	g›t_logfûe_∑th
 = 
NULL
;

209 *
	g›t_logfûe_›íÊag
 = 
NULL
;

210 *
	g›t_logw‹k_∑th
 = 
NULL
;

211 *
	g›t_logw‹k_asi˙um
 = 
NULL
;

213 
boﬁ
 
	g›t_logw‹k_diff
 = 
Ál£
;

215 *
	g›t_≠i_Ælow
 = 
NULL
;

216 *
	g›t_≠i_groups
;

217 *
	g›t_≠i_des¸ùti⁄
 = 
PACKAGE_STRING
;

218 
	g›t_≠i_p‹t
 = 4028;

219 *
	g›t_≠i_ho°
 = 
API_LISTEN_ADDR
;

221 
boﬁ
 
	g›t_≠i_li°í
;

222 
boﬁ
 
	g›t_≠i_mˇ°
;

224 *
	g›t_≠i_mˇ°_addr
 = 
API_MCAST_ADDR
;

225 *
	g›t_≠i_mˇ°_code
 = 
API_MCAST_CODE
;

226 *
	g›t_≠i_mˇ°_des
 = "";

227 
	g›t_≠i_mˇ°_p‹t
 = 4028;

229 
boﬁ
 
	g›t_≠i_√tw‹k
;

230 
boﬁ
 
	g›t_dñay√t
;

231 
boﬁ
 
	g›t_dißbÀ_poﬁ
;

232 
boﬁ
 
	gno_w‹k
;

234 
boﬁ
 
	g›t_w‹ktime
;

235 *
	g›t_£t_nuŒ
;

237 #ifde‡
USE_BITMAIN


238 *
	g›t_bômaö_›ti⁄s
 = 
NULL
;

239 *
	g›t_bômaö_‰eq
 = 
NULL
;

240 *
	g›t_bômaö_vﬁège
 = 
NULL
;

241 
boﬁ
 
	gÁn_cu°om
 = 
TRUE
;

242 *
	gÁn_pwm_d©a
 = (*) 20;

244 
boﬁ
 
	gÁn_˘æ_ty≥
 = 
TRUE
;

247 *
	g›t_£t_nuŒ
;

249 #ifde‡
USE_USBUTILS


250 *
	g›t_usb_£À˘
 = 
NULL
;

251 
	g›t_usbdump
 = -1;

252 
boﬁ
 
	g›t_usb_li°_Æl
;

253 
cg£m_t
 
	gusb_ªsour˚_£m
;

254 
±hªad_t
 
	gusb_pﬁl_thªad
;

255 
boﬁ
 
	gusb_pﬁlög
;

256 
	gusbªs_thr_id
;

257 
	ghŸ∂ug_thr_id
;

260 *
	g›t_kî√l_∑th
;

261 *
	gcgmöî_∑th
;

263 
	#QUIET
 (
›t_quõt
 || 
›t_ªÆquõt
)

	)

265 
thr_öfo
 *
	gc⁄åﬁ_thr
;

266 
thr_öfo
 **
	gmöög_thr
;

267 
	ggwsched_thr_id
;

268 
	gw©chpoﬁ_thr_id
;

269 
	gw©chdog_thr_id
;

271 #ifde‡
HAVE_CURSES


272 
	göput_thr_id
;

275 
	ggpur_thr_id
;

276 
	g≠i_thr_id
;

278 
	gtŸÆ_c⁄åﬁ_thªads
;

279 
boﬁ
 
	ghŸ∂ug_mode
;

280 
	g√w_devi˚s
;

281 
	g√w_thªads
;

282 
	ghŸ∂ug_time
 = 5;

284 #i‡
LOCK_TRACKING


285 
±hªad_muãx_t
 
	glock°©_lock
;

288 
±hªad_muãx_t
 
	ghash_lock
;

289 
±hªad_muãx_t
 
	gupd©e_job_lock
;

291 
±hªad_muãx_t
 *
	g°gd_lock
;

292 
±hªad_muãx_t
 
	gc⁄sﬁe_lock
;

293 
cglock_t
 
	gch_lock
;

294 
±hªad_rwlock_t
 
	gblk_lock
;

295 
±hªad_muãx_t
 
	gssh¨e_lock
;

297 
±hªad_rwlock_t
 
	g√ècc_lock
;

298 
±hªad_rwlock_t
 
	gmöög_thr_lock
;

299 
±hªad_rwlock_t
 
	gdevi˚s_lock
;

301 
±hªad_muãx_t
 
	gÕ_lock
;

302 
±hªad_c⁄d_t
 
	gÕ_c⁄d
;

304 
±hªad_muãx_t
 
	gª°¨t_lock
;

305 
±hªad_c⁄d_t
 
	gª°¨t_c⁄d
;

307 
±hªad_c⁄d_t
 
	ggws_c⁄d
;

309 
	#CG_LOCAL_MHASHES_MAX_NUM
 12

	)

311 
	gg_loˇl_mhashes_d⁄es
[
CG_LOCAL_MHASHES_MAX_NUM
] = {0};

312 
	gg_loˇl_mhashes_ödex
 = 0;

313 
	gg_di•œyed_rﬁlög
 = 0;

314 
	gg_möî_vîsi⁄
[256] = {0};

315 
	gg_möî_compûëime
[256] = {0};

316 
	gg_möî_ty≥
[256] = {0};

318 
	grﬁlög1
, 
	grﬁlög5
, 
	grﬁlög15
;

319 
	gtŸÆ_rﬁlög
;

320 
	gtŸÆ_mhashes_d⁄e
;

321 
	g√w_tŸÆ_mhashes_d⁄e
;

323 
	gdi•œyed_hash_øã
[16] = {0};

326 
time_t
 
	gtŸÆ_tv_°¨t_sys
;

327 
time_t
 
	gtŸÆ_tv_íd_sys
;

329 
timevÆ
 
	gtŸÆ_tv_°¨t
;

330 
timevÆ
 
	gtŸÆ_tv_íd
;

331 
timevÆ
 
	gª°¨t_tv_°¨t
;

332 
timevÆ
 
	gupd©e_tv_°¨t
;

334 
cglock_t
 
	gc⁄åﬁ_lock
;

335 
±hªad_muãx_t
 
	g°©s_lock
;

337 
	ghw_îr‹s
;

338 
	gg_max_Án
, 
	gg_max_ãmp
;

339 
öt64_t
 
	gtŸÆ_ac˚±ed
, 
	gtŸÆ_ªje˘ed
, 
	gtŸÆ_diff1
;

340 
öt64_t
 
	gtŸÆ_gëw‹ks
, 
	gtŸÆ_°Æe
, 
	gtŸÆ_disˇrded
;

341 
	gtŸÆ_diff_ac˚±ed
, 
	gtŸÆ_diff_ªje˘ed
, 
	gtŸÆ_diff_°Æe
;

342 
	g°aged_rﬁœbÀ
;

343 
	g√w_blocks
;

344 
	gw‹k_block
 = 0;

345 
	gfound_blocks
;

347 
	gloˇl_w‹k
;

348 
	gloˇl_w‹k_œ°
 = 0;

349 
	gloˇl_w‹k_œ°time
 = 0;

350 
	gtŸÆ_go
, 
	gtŸÆ_ro
;

352 
poﬁ
 **
	gpoﬁs
;

353 
poﬁ
 *
	gcuºíçoﬁ
 = 
NULL
;

355 
	gtŸÆ_poﬁs
, 
	gíabÀd_poﬁs
;

356 
poﬁ_°øãgy
 
	gpoﬁ_°øãgy
 = 
POOL_FAILOVER
;

357 
	g›t_rŸ©e_≥riod
;

358 
	gtŸÆ_uæs
, 
	gtŸÆ_u£rs
, 
	gtŸÆ_∑s£s
, 
	gtŸÆ_u£Ωas£s
, 
	gtŸÆ_exå™⁄˚
;

361 #i‚de‡
HAVE_CURSES


364 
boﬁ
 
	gcur£s_a˘ive
;

367 
	gcuºít_hash
[68];

368 
	g¥ev_block
[12];

369 
	gcuºít_block
[32];

371 
	gd©e°amp
[40];

372 
	gblocktime
[32];

373 
timevÆ
 
	gblock_timevÆ
;

374 
	gbe°_sh¨e
[8] = "0";

375 
	gcuºít_diff
 = 0xFFFFFFFFFFFFFFFFULL;

376 
	gblock_diff
[8];

377 
uöt64_t
 
	gbe°_diff
 = 0;

380 
	sblock


382 
	mhash
[68];

383 
UT_hash_h™dÀ
 
	mhh
;

384 
	mblock_no
;

387 
block
 *
	gblocks
 = 
NULL
;

390 
	gsw‹k_id
;

395 
	s°øtum_sh¨e


397 
UT_hash_h™dÀ
 
	mhh
;

398 
boﬁ
 
	mblock
;

399 
w‹k
 *
	mw‹k
;

400 
	mid
;

401 
time_t
 
	mssh¨e_time
;

402 
time_t
 
	mssh¨e_£¡
;

405 
°øtum_sh¨e
 *
	g°øtum_sh¨es
 = 
NULL
;

407 *
	g›t_socks_¥oxy
 = 
NULL
;

408 
	g›t_sugge°_diff
;

410 
	g›t_mu…i_vîsi⁄
 = 1;

412 c⁄° 
	gdef_c⁄f
[] = "bmminer.conf";

414 *
	gdeÁu…_c⁄fig
;

415 
boﬁ
 
	gc⁄fig_lﬂded
;

416 
	gö˛ude_cou¡
;

418 
	#JSON_INCLUDE_CONF
 "ö˛ude"

	)

419 
	#JSON_LOAD_ERROR
 "JSON decodêo‡fûê'%s' faûed\¿%s"

	)

420 
	#JSON_LOAD_ERROR_LEN
 
	`°æí
(
JSON_LOAD_ERROR
)

	)

421 
	#JSON_MAX_DEPTH
 10

	)

422 
	#JSON_MAX_DEPTH_ERR
 "Toÿm™yÜevñ†o‡JSON in˛ude†÷imô 10Ë‹áÜo›"

	)

423 
	#JSON_WEB_ERROR
 "WEB c⁄figÉº"

	)

425 #i‡
deföed
(
unix
Ë|| deföed(
__APPLE__
)

426 *
	g›t_°dîr_cmd
 = 
NULL
;

427 
	gf‹kpid
;

430 
siga˘i⁄
 
	gãrmh™dÀr
, 
	göth™dÀr
, 
	gabπh™dÀr
;

432 
thªad_q
 *
	ggëq
;

434 
uöt32_t
 
	gtŸÆ_w‹k
;

435 
w‹k
 *
	g°aged_w‹k
 = 
NULL
;

438 
	sschedtime


440 
boﬁ
 
	míabÀ
;

441 
tm
 
	mtm
;

445 
schedtime
 
	gsched°¨t
;

446 
schedtime
 
	gsched°›
;

447 
boﬁ
 
	gsched_∑u£d
;

450 
boﬁ
 
	$time_bef‹e
(
tm
 *
tm1
, tm *
tm2
)

452 i‡(
tm1
->
tm_hour
 < 
tm2
->tm_hour)

453  
åue
;

454 i‡(
tm1
->
tm_hour
 =
tm2
->tm_hou∏&&Åm1->
tm_mö
 <Åm2->tm_min)

455  
åue
;

456  
Ál£
;

457 
	}
}

460 
boﬁ
 
	$should_run
()

462 
timevÆ
 
tv
;

463 
tm
 *tm;

465 i‡(!
sched°¨t
.
íabÀ
 && !
sched°›
.enable)

467  
åue
;

470 
	`cgtime
(&
tv
);

472 c⁄° 
time_t
 
tmp_time
 = 
tv
.
tv_£c
;

473 
tm
 = 
	`loˇ…ime
(&
tmp_time
);

475 i‡(
sched°¨t
.
íabÀ
)

477 i‡(!
sched°›
.
íabÀ
)

479 i‡(
	`time_bef‹e
(
tm
, (tm *Ë&
sched°¨t
.tm))

481  
Ál£
;

485 
sched°¨t
.
íabÀ
 = 
Ál£
;

486  
åue
;

488 i‡(
	`time_bef‹e
((
tm
 *Ë&
sched°¨t
.tm, (tm *Ë&
sched°›
.tm))

490 i‡(
	`time_bef‹e
(
tm
, (tm *Ë&
sched°›
.tmË&& !time_bef‹e—m, (tm *Ë&
sched°¨t
.tm))

492  
åue
;

495  
Ál£
;

499 i‡(
	`time_bef‹e
(
tm
, (tm *Ë&
sched°¨t
.tm))

501 i‡(
	`time_bef‹e
(
tm
, (tm *Ë&
sched°›
.tm))

503  
åue
;

506  
Ál£
;

509  
åue
;

512 i‡(!
	`time_bef‹e
(
tm
, (tm *Ë&
sched°›
.tm))

514  
Ál£
;

517  
åue
;

518 
	}
}

521 
	$gë_d©e°amp
(*
f
, 
size_t
 
fsiz
, 
timevÆ
 *
tv
)

523 
tm
 *tm;

525 c⁄° 
time_t
 
tmp_time
 = 
tv
->
tv_£c
;

526 
ms
 = ()(
tv
->
tv_u£c
 / 1000);

527 
tm
 = 
	`loˇ…ime
(&
tmp_time
);

528 
	`¢¥ötf
(
f
, 
fsiz
, "[%d-%02d-%02d %02d:%02d:%02d.%03d]",

529 
tm
->
tm_yór
 + 1900,

530 
tm
->
tm_m⁄
 + 1,

531 
tm
->
tm_mday
,

532 
tm
->
tm_hour
,

533 
tm
->
tm_mö
,

534 
tm
->
tm_£c
, 
ms
);

535 
	}
}

538 
	$gë_time°amp
(*
f
, 
size_t
 
fsiz
, 
timevÆ
 *
tv
)

540 
tm
 *tm;

542 c⁄° 
time_t
 
tmp_time
 = 
tv
->
tv_£c
;

543 
ms
 = ()(
tv
->
tv_u£c
 / 1000);

544 
tm
 = 
	`loˇ…ime
(&
tmp_time
);

545 
	`¢¥ötf
(
f
, 
fsiz
, "[%02d:%02d:%02d.%03d]",

546 
tm
->
tm_hour
,

547 
tm
->
tm_mö
,

548 
tm
->
tm_£c
, 
ms
);

549 
	}
}

552 
	gexô_buf
[512];

555 
	$≠∂og_™d_exô
(c⁄° *
fmt
, ...)

557 
va_li°
 
≠
;

559 
	`va_°¨t
(
≠
, 
fmt
);

560 
	`v¢¥ötf
(
exô_buf
, ”xô_buf), 
fmt
, 
≠
);

561 
	`va_íd
(
≠
);

562 
	`_≠∂og
(
LOG_ERR
, 
exô_buf
, 
åue
);

563 
	`exô
(1);

564 
	}
}

567 
±hªad_muãx_t
 
	gsh¨ñog_lock
;

568 
FILE
 *
	gsh¨ñog_fûe
 = 
NULL
;

571 
thr_öfo
 *
	$__gë_thªad
(
thr_id
)

573  
möög_thr
[
thr_id
];

574 
	}
}

577 
thr_öfo
 *
	$gë_thªad
(
thr_id
)

579 
thr_öfo
 *
thr
;

581 
	`rd_lock
(&
möög_thr_lock
);

582 
thr
 = 
	`__gë_thªad
(
thr_id
);

583 
	`rd_u∆ock
(&
möög_thr_lock
);

585  
thr
;

586 
	}
}

589 
cgpu_öfo
 *
	$gë_thr_cgpu
(
thr_id
)

591 
thr_öfo
 *
thr
 = 
	`gë_thªad
(
thr_id
);

593  
thr
->
cgpu
;

594 
	}
}

597 
cgpu_öfo
 *
	$gë_devi˚s
(
id
)

599 
cgpu_öfo
 *
cgpu
;

601 
	`rd_lock
(&
devi˚s_lock
);

602 
cgpu
 = 
devi˚s
[
id
];

603 
	`rd_u∆ock
(&
devi˚s_lock
);

605  
cgpu
;

606 
	}
}

609 
	$sh¨ñog
(c⁄° *
di•osôi⁄
, c⁄° 
w‹k
*work)

611 *
èrgë
, *
hash
, *
d©a
;

612 
cgpu_öfo
 *
cgpu
;

613 
t
;

614 
poﬁ
 *pool;

615 
thr_id
, 
rv
;

616 
s
[1024];

617 
size_t
 
ªt
;

619 i‡(!
sh¨ñog_fûe
)

624 
thr_id
 = 
w‹k
->thr_id;

625 
cgpu
 = 
	`gë_thr_cgpu
(
thr_id
);

626 
poﬁ
 = 
w‹k
->pool;

627 
t
 = ()(
w‹k
->
tv_w‹k_found
.
tv_£c
);

628 
èrgë
 = 
	`bö2hex
(
w‹k
->target, (work->target));

629 
hash
 = 
	`bö2hex
(
w‹k
->hash, (work->hash));

630 
d©a
 = 
	`bö2hex
(
w‹k
->data, (work->data));

633 
rv
 = 
	`¢¥ötf
(
s
, (s), "%lu,%s,%s,%s,%s%u,%u,%s,%s\n", 
t
, 
di•osôi⁄
, 
èrgë
, 
poﬁ
->
Ωc_uæ
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
, 
thr_id
, 
hash
, 
d©a
);

635 
	`‰ì
(
èrgë
);

636 
	`‰ì
(
hash
);

637 
	`‰ì
(
d©a
);

639 i‡(
rv
 >()((
s
)))

641 
s
[(s) - 1] = '\0';

643 i‡(
rv
 < 0)

645 
	`≠∂og
(
LOG_ERR
, "sharelogÖrintfÉrror");

649 
	`muãx_lock
(&
sh¨ñog_lock
);

650 
ªt
 = 
	`fwrôe
(
s
, 
rv
, 1, 
sh¨ñog_fûe
);

651 
	`fÊush
(
sh¨ñog_fûe
);

652 
	`muãx_u∆ock
(&
sh¨ñog_lock
);

654 i‡(
ªt
 != 1)

656 
	`≠∂og
(
LOG_ERR
, "sharelog fwriteÉrror");

658 
	}
}

660 *
	ggëw‹k_ªq
 = "{\"method\": \"getwork\", \"params\": [], \"id\":0}\n";

662 *
	ggbt_ªq
 = "{\"id\": 0, \"method\": \"getblocktemplate\", \"params\": [{\"capabilities\": [\"coinbasetxn\", \"workid\", \"coinbase/append\"]}]}\n";

664 *
	ggbt_sﬁo_ªq
 = "{\"id\": 0, \"method\": \"getblocktemplate\"}\n";

669 
	$adju°_quŸa_gcd
()

671 
gcd
, 
lowe°_quŸa
 = ~0UL, 
quŸa
;

672 
poﬁ
 *pool;

673 
i
;

675 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

677 
poﬁ
 = 
poﬁs
[
i
];

678 
quŸa
 = (Ë
poﬁ
->quota;

680 i‡(!
quŸa
)

685 i‡(
quŸa
 < 
lowe°_quŸa
)

687 
lowe°_quŸa
 = 
quŸa
;

691 i‡(
	`likñy
(
lowe°_quŸa
 < ~0UL))

693 
gcd
 = 
lowe°_quŸa
;

695 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

697 
poﬁ
 = 
poﬁs
[
i
];

698 
quŸa
 = (Ë
poﬁ
->quota;

700 i‡(!
quŸa
)

705 
quŸa
 % 
gcd
)

707 
gcd
--;

713 
gcd
 = 1;

716 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

718 
poﬁ
 = 
poﬁs
[
i
];

719 
poﬁ
->
quŸa_u£d
 *
globÆ_quŸa_gcd
;

720 
poﬁ
->
quŸa_u£d
 /
gcd
;

721 
poﬁ
->
quŸa_gcd
 = (Ë’oﬁ->
quŸa
 / 
gcd
);

724 
globÆ_quŸa_gcd
 = 
gcd
;

725 
	`≠∂og
(
LOG_DEBUG
, "GlobÆ quŸ®gª©e° comm⁄ díomö©‹ sëÅÿ%lu", 
gcd
);

726 
	}
}

730 
poﬁ
 *
	$add_poﬁ
()

732 
poﬁ
 *pool;

734 
poﬁ
 = 
	`cgˇŒoc
((poﬁ), (
size_t
)1);

736 #ifde‡
USE_BITMAIN_C5


737 
poﬁ
->
suµ‹t_vû
 = 
Ál£
;

740 i‡(!
poﬁ
)

742 
	`quô
(1, "FailedÅo mallocÖool inádd_pool");

745 
poﬁ
->
poﬁ_no
 =Öoﬁ->
¥io
 = 
tŸÆ_poﬁs
;

746 
poﬁs
 = 
	`cgªÆloc
’oﬁs, (
poﬁ
 *Ë* (
tŸÆ_poﬁs
 + 2));

747 
poﬁs
[
tŸÆ_poﬁs
++] = 
poﬁ
;

749 
	`muãx_öô
(&
poﬁ
->
poﬁ_lock
);

751 i‡(
	`u∆ikñy
(
	`±hªad_c⁄d_öô
(&
poﬁ
->
¸_c⁄d
, 
NULL
)))

753 
	`quô
(1, "FailedÅoÖthread_cond_init inádd_pool");

756 
	`cglock_öô
(&
poﬁ
->
d©a_lock
);

757 
	`muãx_öô
(&
poﬁ
->
°øtum_lock
);

758 
	`cglock_öô
(&
poﬁ
->
gbt_lock
);

759 
	`INIT_LIST_HEAD
(&
poﬁ
->
cuærög
);

762 
poﬁ
->
tv_idÀ
.
tv_£c
 = ~0UL;

764 
poﬁ
->
Ωc_ªq
 = 
gëw‹k_ªq
;

765 
poﬁ
->
Ωc_¥oxy
 = 
NULL
;

766 
poﬁ
->
quŸa
 = 1;

768 
	`adju°_quŸa_gcd
();

769 
poﬁ
->
exå™⁄˚_subs¸ibe
 = 
Ál£
;

771  
poﬁ
;

772 
	}
}

776 
boﬁ
 
	$poﬁ_t£t
(
poﬁ
 *poﬁ, 
boﬁ
 *
v¨
)

778 
boﬁ
 
ªt
;

780 
	`muãx_lock
(&
poﬁ
->
poﬁ_lock
);

782 
ªt
 = *
v¨
;

783 *
v¨
 = 
åue
;

785 
	`muãx_u∆ock
(&
poﬁ
->
poﬁ_lock
);

787  
ªt
;

788 
	}
}

791 
boﬁ
 
	$poﬁ_t˛ór
(
poﬁ
 *poﬁ, 
boﬁ
 *
v¨
)

793 
boﬁ
 
ªt
;

795 
	`muãx_lock
(&
poﬁ
->
poﬁ_lock
);

797 
ªt
 = *
v¨
;

798 *
v¨
 = 
Ál£
;

800 
	`muãx_u∆ock
(&
poﬁ
->
poﬁ_lock
);

802  
ªt
;

803 
	}
}

806 
poﬁ
 *
	$cuºít_poﬁ
()

808 
poﬁ
 *pool;

810 
	`cg_æock
(&
c⁄åﬁ_lock
);

812 
poﬁ
 = 
cuºíçoﬁ
;

814 
	`cg_ru∆ock
(&
c⁄åﬁ_lock
);

816  
poﬁ
;

817 
	}
}

820 *
	$£t_öt_ønge
(c⁄° *
¨g
, *
i
, 
mö
, 
max
)

822 *
îr
 = 
	`›t_£t_ötvÆ
(
¨g
, 
i
);

824 i‡(
îr
)

826  
îr
;

829 i‡(*
i
 < 
mö
 || *ò> 
max
)

834  
NULL
;

835 
	}
}

838 *
	$£t_öt_0_to_9999
(c⁄° *
¨g
, *
i
)

840  
	`£t_öt_ønge
(
¨g
, 
i
, 0, 9999);

841 
	}
}

844 *
	$£t_öt_1_to_65535
(c⁄° *
¨g
, *
i
)

846  
	`£t_öt_ønge
(
¨g
, 
i
, 1, 65535);

847 
	}
}

850 *
	$£t_öt_0_to_10
(c⁄° *
¨g
, *
i
)

852  
	`£t_öt_ønge
(
¨g
, 
i
, 0, 10);

853 
	}
}

856 *
	$£t_öt_0_to_100
(c⁄° *
¨g
, *
i
)

858  
	`£t_öt_ønge
(
¨g
, 
i
, 0, 100);

859 
	}
}

862 *
	$£t_öt_0_to_255
(c⁄° *
¨g
, *
i
)

864  
	`£t_öt_ønge
(
¨g
, 
i
, 0, 255);

865 
	}
}

868 *
	$£t_öt_1_to_255
(c⁄° *
¨g
, *
i
)

870  
	`£t_öt_ønge
(
¨g
, 
i
, 1, 255);

871 
	}
}

874 *
	$£t_öt_0_to_7680
(c⁄° *
¨g
, *
i
)

876  
	`£t_öt_ønge
(
¨g
, 
i
, 0, 7680);

877 
	}
}

880 *
	$£t_öt_0_to_200
(c⁄° *
¨g
, *
i
)

882  
	`£t_öt_ønge
(
¨g
, 
i
, 0, 200);

883 
	}
}

886 *
	$£t_öt_32_to_63
(c⁄° *
¨g
, *
i
)

888  
	`£t_öt_ønge
(
¨g
, 
i
, 32, 63);

889 
	}
}

892 *
	$£t_öt_22_to_75
(c⁄° *
¨g
, *
i
)

894  
	`£t_öt_ønge
(
¨g
, 
i
, 22, 75);

895 
	}
}

898 *
	$£t_öt_42_to_85
(c⁄° *
¨g
, *
i
)

900  
	`£t_öt_ønge
(
¨g
, 
i
, 42, 85);

901 
	}
}

904 *
	$£t_öt_22_to_55
(c⁄° *
¨g
, *
i
)

906  
	`£t_öt_ønge
(
¨g
, 
i
, 22, 55);

907 
	}
}

910 *
	$£t_öt_42_to_65
(c⁄° *
¨g
, *
i
)

912  
	`£t_öt_ønge
(
¨g
, 
i
, 42, 62);

913 
	}
}

916 *
	$£t_öt_1_to_10
(c⁄° *
¨g
, *
i
)

918  
	`£t_öt_ønge
(
¨g
, 
i
, 1, 10);

919 
	}
}

921 
__maybe_unu£d
 *
	$£t_öt_0_to_4
(c⁄° *
¨g
, *
i
)

923  
	`£t_öt_ønge
(
¨g
, 
i
, 0, 4);

924 
	}
}

927 
	$gë_öå™ge
(*
¨g
, *
vÆ1
, *
vÆ2
)

929 i‡(
	`ssˇnf
(
¨g
, "%d-%d", 
vÆ1
, 
vÆ2
) == 1)

931 *
vÆ2
 = *
vÆ1
;

933 
	}
}

936 *
	$£t_bÆ™˚
(
poﬁ_°øãgy
 *
°øãgy
)

938 *
°øãgy
 = 
POOL_BALANCE
;

939  
NULL
;

940 
	}
}

943 *
	$£t_lﬂdbÆ™˚
(
poﬁ_°øãgy
 *
°øãgy
)

945 *
°øãgy
 = 
POOL_LOADBALANCE
;

946  
NULL
;

947 
	}
}

950 *
	$£t_rŸ©e
(c⁄° *
¨g
, 
__maybe_unu£d
 *
i
)

952 
poﬁ_°øãgy
 = 
POOL_ROTATE
;

953  
	`£t_öt_ønge
(
¨g
, &
›t_rŸ©e_≥riod
, 0, 9999);

954 
	}
}

957 *
	$£t_º
(
poﬁ_°øãgy
 *
°øãgy
)

959 *
°øãgy
 = 
POOL_ROUNDROBIN
;

960  
NULL
;

961 
	}
}

965 
boﬁ
 
	$dëe˘_°øtum
(
poﬁ
 *poﬁ, *
uæ
)

969 i‡(!
	`exåa˘_sockaddr
(
uæ
, &
poﬁ
->
sockaddr_uæ
, &poﬁ->
°øtum_p‹t
))

971  
Ál£
;

974 i‡(!
	`°∫ˇ£cmp
(
uæ
, "stratum+tcp://", 14))

976 
poﬁ
->
Ωc_uæ
 = 
	`°rdup
(
uæ
);

977 
poﬁ
->
has_°øtum
 = 
åue
;

978 
poﬁ
->
°øtum_uæ
 =Öoﬁ->
sockaddr_uæ
;

979  
åue
;

982  
Ál£
;

983 
	}
}

986 
poﬁ
 *
	$add_uæ
()

988 
tŸÆ_uæs
++;

990 i‡(
tŸÆ_uæs
 > 
tŸÆ_poﬁs
)

992 
	`add_poﬁ
();

995  
poﬁs
[
tŸÆ_uæs
 - 1];

996 
	}
}

999 *
	$£tup_uæ
(
poﬁ
 *poﬁ, *
¨g
)

1001 
¨g
 = 
	`gë_¥oxy
◊rg, 
poﬁ
);

1003 i‡(
	`dëe˘_°øtum
(
poﬁ
, 
¨g
))

1005 
out
;

1008 
	`›t_£t_ch¨p
(
¨g
, &
poﬁ
->
Ωc_uæ
);

1010 i‡(
	`°∫cmp
(
¨g
, "http://", 7) && strncmp(arg, "https://", 8))

1012 *
hâpöput
;

1014 
hâpöput
 = 
	`cgmÆloc
((
size_t
)256);

1016 
	`°r˝y
(
hâpöput
, "stratum+tcp://");

1017 
	`°∫ˇt
(
hâpöput
, 
¨g
, 242);

1019 
	`dëe˘_°øtum
(
poﬁ
, 
hâpöput
);

1022 
out
:

1024  
poﬁ
->
Ωc_uæ
;

1026 
	}
}

1028 *
	$£t_uæ
(*
¨g
)

1030 
poﬁ
 *poﬁ = 
	`add_uæ
();

1032 
	`£tup_uæ
(
poﬁ
, 
¨g
);

1034 i‡(
	`°r°r
(
poﬁ
->
Ωc_uæ
, ".nicehash.com") || strstr(pool->rpc_url, "#xnsub"))

1036 
poﬁ
->
exå™⁄˚_subs¸ibe
 = 
åue
;

1037 
	`≠∂og
(
LOG_DEBUG
, "Poﬁ %dÉxå™⁄˚ subs¸ibögÉ«bÀd.", 
poﬁ
->
poﬁ_no
);

1040  
NULL
;

1041 
	}
}

1044 *
	$£t_quŸa
(*
¨g
)

1046 *
£micﬁ⁄
 = 
	`°rchr
(
¨g
, ';'), *
uæ
;

1047 
Àn
, 
qÀn
, 
quŸa
;

1048 
poﬁ
 *pool;

1050 i‡(!
£micﬁ⁄
)

1055 
Àn
 = 
	`°æí
(
¨g
);

1056 *
£micﬁ⁄
 = '\0';

1057 
qÀn
 = 
	`°æí
(
¨g
);

1059 i‡(!
qÀn
)

1064 
Àn
 -
qÀn
 + 1;

1066 i‡(
Àn
 < 1)

1071 
quŸa
 = 
	`©oi
(
¨g
);

1073 i‡(
quŸa
 < 0)

1078 
uæ
 = 
¨g
 + 
qÀn
 + 1;

1079 
poﬁ
 = 
	`add_uæ
();

1080 
	`£tup_uæ
(
poﬁ
, 
uæ
);

1081 
poﬁ
->
quŸa
 = quota;

1082 
	`≠∂og
(
LOG_INFO
, "SëtögÖoﬁ %dÅÿquŸ®%d", 
poﬁ
->
poﬁ_no
,Öoﬁ->
quŸa
);

1083 
	`adju°_quŸa_gcd
();

1085  
NULL
;

1086 
	}
}

1088 *
	$£t_u£r
(c⁄° *
¨g
)

1090 
poﬁ
 *pool;

1092 i‡(
tŸÆ_u£Ωas£s
)

1096 
tŸÆ_u£rs
++;

1098 i‡(
tŸÆ_u£rs
 > 
tŸÆ_poﬁs
)

1100 
	`add_poﬁ
();

1103 
poﬁ
 = 
poﬁs
[
tŸÆ_u£rs
 - 1];

1104 
	`›t_£t_ch¨p
(
¨g
, &
poﬁ
->
Ωc_u£r
);

1106  
NULL
;

1107 
	}
}

1110 *
	$£t_∑ss
(c⁄° *
¨g
)

1112 
poﬁ
 *pool;

1114 i‡(
tŸÆ_u£Ωas£s
)

1119 
tŸÆ_∑s£s
++;

1121 i‡(
tŸÆ_∑s£s
 > 
tŸÆ_poﬁs
)

1123 
	`add_poﬁ
();

1126 
poﬁ
 = 
poﬁs
[
tŸÆ_∑s£s
 - 1];

1127 
	`›t_£t_ch¨p
(
¨g
, &
poﬁ
->
Ωc_∑ss
);

1129  
NULL
;

1130 
	}
}

1132 *
	$£t_u£Ωass
(c⁄° *
¨g
)

1134 
poﬁ
 *pool;

1135 *
updup
;

1137 i‡(
tŸÆ_u£rs
 || 
tŸÆ_∑s£s
)

1143 
tŸÆ_u£Ωas£s
++;

1145 i‡(
tŸÆ_u£Ωas£s
 > 
tŸÆ_poﬁs
)

1147 
	`add_poﬁ
();

1150 
poﬁ
 = 
poﬁs
[
tŸÆ_u£Ωas£s
 - 1];

1151 
updup
 = 
	`°rdup
(
¨g
);

1153 
	`›t_£t_ch¨p
(
¨g
, &
poﬁ
->
Ωc_u£Ωass
);

1155 
poﬁ
->
Ωc_u£r
 = 
	`°πok
(
updup
, ":");

1157 i‡(!
poﬁ
->
Ωc_u£r
)

1162 
poﬁ
->
Ωc_∑ss
 = 
	`°πok
(
NULL
, ":");

1164 i‡(!
poﬁ
->
Ωc_∑ss
)

1166 
poﬁ
->
Ωc_∑ss
 = 
	`°rdup
("");

1169  
NULL
;

1170 
	}
}

1172 *
	$£t_exå™⁄˚_subs¸ibe
(*
¨g
)

1174 
poﬁ
 *pool;

1176 
tŸÆ_exå™⁄˚
++;

1178 i‡(
tŸÆ_exå™⁄˚
 > 
tŸÆ_poﬁs
)

1180 
	`add_poﬁ
();

1183 
poﬁ
 = 
poﬁs
[
tŸÆ_exå™⁄˚
 - 1];

1184 
	`≠∂og
(
LOG_DEBUG
, "E«bÀÉxå™⁄˚ subs¸ibê⁄ %d", 
poﬁ
->
poﬁ_no
);

1185 
	`›t_£t_boﬁ
(&
poﬁ
->
exå™⁄˚_subs¸ibe
);

1187  
NULL
;

1188 
	}
}

1191 *
	$íabÀ_debug
(
boﬁ
 *
Êag
)

1193 *
Êag
 = 
Ál£
;

1195 
›t_log_ouçut
 = 
Ál£
;

1196  
NULL
;

1197 
	}
}

1200 *
	g›t_£t_sched_°¨t
;

1201 *
	g›t_£t_sched_°›
;

1204 *
	$£t_schedtime
(c⁄° *
¨g
, 
schedtime
 *
°
)

1206 i‡(
	`ssˇnf
(
¨g
, "%d:%d", &
°
->
tm
.
tm_hour
, &°->tm.
tm_mö
) != 2)

1211 i‡(
°
->
tm
.
tm_hour
 > 23 || st->tm.
tm_mö
 > 59 || st->tm.tm_hour < 0 || st->tm.tm_min < 0)

1216 
°
->
íabÀ
 = 
åue
;

1217  
NULL
;

1218 
	}
}

1221 *
	$£t_sched_°¨t
(c⁄° *
¨g
)

1223  
	`£t_schedtime
(
¨g
, &
sched°¨t
);

1224 
	}
}

1227 *
	$£t_sched_°›
(c⁄° *
¨g
)

1229  
	`£t_schedtime
(
¨g
, &
sched°›
);

1230 
	}
}

1232 *
	g›t_£t_sh¨ñog
;

1233 * 
	$£t_sh¨ñog
(*
¨g
)

1235 *
r
 = "";

1236 
i
 = 
	`°πﬁ
(
¨g
, &
r
, 10);

1238 i‡((!*
r
Ë&& 
i
 >0 && i <
INT_MAX
)

1240 
sh¨ñog_fûe
 = 
	`fd›í
(()
i
, "a");

1241 i‡(!
sh¨ñog_fûe
)

1242 
	`≠∂og
(
LOG_ERR
, "FaûedÅÿ›í fd %u f‹ sh¨êlog", ()
i
);

1244 i‡(!
	`°rcmp
(
¨g
, "-"))

1246 
sh¨ñog_fûe
 = 
°dout
;

1247 i‡(!
sh¨ñog_fûe
)

1249 
	`≠∂og
(
LOG_ERR
, "Standard output missing for shareÜog");

1254 
sh¨ñog_fûe
 = 
	`f›í
(
¨g
, "a");

1255 i‡(!
sh¨ñog_fûe
)

1257 
	`≠∂og
(
LOG_ERR
, "FaûedÅÿ›í %†f‹ sh¨êlog", 
¨g
);

1261  
NULL
;

1262 
	}
}

1265 *
	gãmp_cutoff_°r
 = 
NULL
;

1266 
__maybe_unu£d
 *
	g›t_£t_ãmp_cutoff
;

1268 *
	$£t_ãmp_cutoff
(*
¨g
)

1270 
vÆ
;

1272 i‡(!(
¨g
 &&árg[0]))

1276 
vÆ
 = 
	`©oi
(
¨g
);

1278 i‡(
vÆ
 < 0 || val > 200)

1282 
ãmp_cutoff_°r
 = 
¨g
;

1284  
NULL
;

1285 
	}
}

1287 
	$lﬂd_ãmp_cutoffs
()

1289 
i
, 
vÆ
 = 0, 
devi˚
 = 0;

1290 *
√xçå
;

1292 i‡(
ãmp_cutoff_°r
)

1294 
devi˚
 = 0, 
√xçå
 = 
	`°πok
(
ãmp_cutoff_°r
, ",");Çexçå; ++devi˚,Çexçå = såtok(
NULL
, ","))

1296 i‡(
devi˚
 >
tŸÆ_devi˚s
)

1298 
	`quô
(1, "Too many valuesÖassedÅo setÅemp cutoff");

1301 
vÆ
 = 
	`©oi
(
√xçå
);

1303 i‡(
vÆ
 < 0 || val > 200)

1305 
	`quô
(1, "Invalid valueÖassedÅo setÅemp cutoff");

1308 
	`rd_lock
(&
devi˚s_lock
);

1309 
devi˚s
[
devi˚
]->
cutof·emp
 = 
vÆ
;

1310 
	`rd_u∆ock
(&
devi˚s_lock
);

1315 
	`rd_lock
(&
devi˚s_lock
);

1317 
i
 = 
devi˚
; i < 
tŸÆ_devi˚s
; ++i)

1319 i‡(!
devi˚s
[
i
]->
cutof·emp
)

1321 
devi˚s
[
i
]->
cutof·emp
 = 
›t_cutof·emp
;

1324 
	`rd_u∆ock
(&
devi˚s_lock
);

1329 i‡(
devi˚
 <= 1)

1331 
	`rd_lock
(&
devi˚s_lock
);

1333 
i
 = 
devi˚
; i < 
tŸÆ_devi˚s
; ++i)

1335 
devi˚s
[
i
]->
cutof·emp
 = 
vÆ
;

1337 
	`rd_u∆ock
(&
devi˚s_lock
);

1339 
	}
}

1342 *
	$£t_logfûe_∑th
(c⁄° *
¨g
)

1344 
	`›t_£t_ch¨p
(
¨g
, &
›t_logfûe_∑th
);

1346  
NULL
;

1347 
	}
}

1350 *
	$£t_logfûe_›íÊag
(c⁄° *
¨g
)

1352 
	`›t_£t_ch¨p
(
¨g
, &
›t_logfûe_›íÊag
);

1354  
NULL
;

1355 
	}
}

1358 *
	$£t_logw‹k_∑th
(c⁄° *
¨g
)

1360 
	`›t_£t_ch¨p
(
¨g
, &
›t_logw‹k_∑th
);

1362  
NULL
;

1363 
	}
}

1366 *
	$£t_logw‹k_asi˙um
(c⁄° *
¨g
)

1368 
	`›t_£t_ch¨p
(
¨g
, &
›t_logw‹k_asi˙um
);

1370  
NULL
;

1371 
	}
}

1374 *
	$£t_Êﬂt_125_to_500
(c⁄° *
¨g
, *
i
)

1376 *
îr
 = 
	`›t_£t_ÊﬂtvÆ
(
¨g
, 
i
);

1378 i‡(
îr
)

1380  
îr
;

1383 i‡(*
i
 < 125 || *i > 500)

1388  
NULL
;

1389 
	}
}

1392 *
	$£t_Êﬂt_100_to_250
(c⁄° *
¨g
, *
i
)

1394 *
îr
 = 
	`›t_£t_ÊﬂtvÆ
(
¨g
, 
i
);

1396 i‡(
îr
)

1398  
îr
;

1401 i‡(*
i
 < 100 || *i > 250)

1406  
NULL
;

1407 
	}
}

1410 *
	$£t_nuŒ
(c⁄° 
__maybe_unu£d
 *
¨g
)

1412  
NULL
;

1413 
	}
}

1417 *
	$£t_vîsi⁄_∑th
(c⁄° *
¨g
)

1419 
	`›t_£t_ch¨p
(
¨g
, &
›t_vîsi⁄_∑th
);

1421  
NULL
;

1422 
	}
}

1425 #ifde‡
USE_BITMAIN


1426 *
	$£t_bômaö_›ti⁄s
(c⁄° *
¨g
)

1428 
	`›t_£t_ch¨p
(
¨g
, &
›t_bômaö_›ti⁄s
);

1430  
NULL
;

1431 
	}
}

1432 *
	$£t_bômaö_‰eq
(c⁄° *
¨g
)

1434 
	`›t_£t_ch¨p
(
¨g
, &
›t_bômaö_‰eq
);

1436  
NULL
;

1437 
	}
}

1438 *
	$£t_bômaö_vﬁège
(c⁄° *
¨g
)

1440 
	`›t_£t_ch¨p
(
¨g
, &
›t_bômaö_vﬁège
);

1442  
NULL
;

1443 
	}
}

1445 *
	$£t_bômaö_Ánmax
(c⁄° *
¨g
)

1447 
	`›t_£t_ötvÆ
(
¨g
, &
›t_bômaö_Án_max
);

1449  
NULL
;

1450 
	}
}

1455 
›t_èbÀ
 
	g›t_c⁄fig_èbÀ
[] =

1459 
OPT_WITH_ARG
("--version-file",

1460 
£t_vîsi⁄_∑th
, 
NULL
, 
›t_hiddí
,

1463 
OPT_WITH_ARG
("--logfile-openflag",

1464 
£t_logfûe_›íÊag
, 
NULL
, 
›t_hiddí
,

1467 
OPT_WITH_ARG
("--logwork",

1468 
£t_logw‹k_∑th
, 
NULL
, 
›t_hiddí
,

1471 
OPT_WITH_ARG
("--logwork-asicnum",

1472 
£t_logw‹k_asi˙um
, 
NULL
, 
›t_hiddí
,

1475 
OPT_WITHOUT_ARG
("--logwork-diff",

1476 
›t_£t_boﬁ
, &
›t_logw‹k_diff
,

1479 
OPT_WITH_ARG
("--logfile",

1480 
£t_logfûe_∑th
, 
NULL
, 
›t_hiddí
,

1483 
OPT_WITH_ARG
("--api-allow",

1484 
›t_£t_ch¨p
, 
NULL
, &
›t_≠i_Ælow
,

1487 
OPT_WITH_ARG
("--api-description",

1488 
›t_£t_ch¨p
, 
NULL
, &
›t_≠i_des¸ùti⁄
,

1491 
OPT_WITH_ARG
("--api-groups",

1492 
›t_£t_ch¨p
, 
NULL
, &
›t_≠i_groups
,

1495 
OPT_WITHOUT_ARG
("--api-listen",

1496 
›t_£t_boﬁ
, &
›t_≠i_li°í
,

1499 
OPT_WITHOUT_ARG
("--api-mcast",

1500 
›t_£t_boﬁ
, &
›t_≠i_mˇ°
,

1503 
OPT_WITH_ARG
("--api-mcast-addr",

1504 
›t_£t_ch¨p
, 
NULL
, &
›t_≠i_mˇ°_addr
,

1507 
OPT_WITH_ARG
("--api-mcast-code",

1508 
›t_£t_ch¨p
, 
NULL
, &
›t_≠i_mˇ°_code
,

1511 
OPT_WITH_ARG
("--api-mcast-des",

1512 
›t_£t_ch¨p
, 
NULL
, &
›t_≠i_mˇ°_des
,

1515 
OPT_WITH_ARG
("--api-mcast-port",

1516 
£t_öt_1_to_65535
, 
›t_show_ötvÆ
, &
›t_≠i_mˇ°_p‹t
,

1519 
OPT_WITHOUT_ARG
("--api-network",

1520 
›t_£t_boﬁ
, &
›t_≠i_√tw‹k
,

1523 
OPT_WITH_ARG
("--api-port",

1524 
£t_öt_1_to_65535
, 
›t_show_ötvÆ
, &
›t_≠i_p‹t
,

1527 
OPT_WITH_ARG
("--api-host",

1528 
›t_£t_ch¨p
, 
NULL
, &
›t_≠i_ho°
,

1531 
OPT_WITHOUT_ARG
("--balance",

1532 
£t_bÆ™˚
, &
poﬁ_°øãgy
,

1535 
OPT_WITH_ARG
("--benchfile",

1536 
›t_£t_ch¨p
, 
NULL
, &
›t_bíchfûe
,

1539 
OPT_WITHOUT_ARG
("--benchfile-display",

1540 
›t_£t_boﬁ
, &
›t_bíchfûe_di•œy
,

1543 
OPT_WITHOUT_ARG
("--benchmark",

1544 
›t_£t_boﬁ
, &
›t_bíchm¨k
,

1548 #ifde‡
USE_BITMAIN_C5


1549 
OPT_WITHOUT_ARG
("--bitmain-fan-ctrl",

1550 
›t_£t_boﬁ
, &
›t_bômaö_Án_˘æ
,

1553 
OPT_WITH_ARG
("--bitmain-fan-pwm",

1554 
£t_öt_0_to_100
, 
›t_show_ötvÆ
, &
›t_bômaö_Án_pwm
,

1557 
OPT_WITH_ARG
("--bitmain-freq",

1558 
£t_öt_0_to_9999
,
›t_show_ötvÆ
, &
›t_bômaö_B3_‰eq
,

1563 #ifde‡
USE_BITMAIN


1564 
OPT_WITH_ARG
("--bitmain-dev",

1565 
£t_bômaö_dev
, 
NULL
, NULL,

1569 
OPT_WITH_ARG
("--bitmain-fan-max",

1570 
£t_öt_0_to_100
, 
›t_show_ötvÆ
, &
›t_bômaö_Án_max
,

1573 
OPT_WITH_ARG
("--bitmain-fan-min",

1574 
£t_öt_0_to_100
, 
›t_show_ötvÆ
, &
›t_bômaö_Án_mö
,

1578 
OPT_WITHOUT_ARG
("--bitmain-hwerror",

1579 
›t_£t_boﬁ
, &
›t_bômaö_hwîr‹
,

1582 
OPT_WITHOUT_ARG
("--bitmain-checkall",

1583 
›t_£t_boﬁ
, &
›t_bômaö_checkÆl
,

1586 
OPT_WITHOUT_ARG
("--bitmain-checkn2diff",

1587 
›t_£t_boﬁ
, &
›t_bômaö_checkn2diff
,

1590 
OPT_WITHOUT_ARG
("--bitmain-nobeeper",

1591 
›t_£t_boﬁ
, &
›t_bômaö_nobì≥r
,

1594 
OPT_WITHOUT_ARG
("--bitmain-notempoverctrl",

1595 
›t_£t_boﬁ
, &
›t_bômaö_nŸempovî˘æ
,

1598 
OPT_WITHOUT_ARG
("--bitmain-auto",

1599 
›t_£t_boﬁ
, &
›t_bômaö_auto
,

1602 
OPT_WITHOUT_ARG
("--bitmain-homemode",

1603 
›t_£t_boﬁ
, &
›t_bômaö_homemode
,

1606 
OPT_WITHOUT_ARG
("--bitmain-use-vil",

1607 
›t_£t_boﬁ
, &
›t_bômaö_√w_cmd_ty≥_vû
,

1610 
OPT_WITHOUT_ARG
("--bitmain-fan-ctrl",

1611 
›t_£t_boﬁ
, &
›t_bômaö_Án_˘æ
,

1614 
OPT_WITH_ARG
("--bitmain-fan-pwm",

1615 
£t_öt_0_to_100
, 
›t_show_ötvÆ
, &
›t_bômaö_Án_pwm
,

1618 
OPT_WITH_ARG
("--bitmain-cutoff",

1619 
£t_öt_0_to_100
, 
›t_show_ötvÆ
, &
›t_bômaö_ovîhót
,

1621 
OPT_WITH_ARG
("--bitmain-fan",

1622 
£t_bômaö_Án
, 
NULL
, NULL,

1624 
OPT_WITH_ARG
("--bitmain-freq-S7",

1625 
£t_bômaö_‰eq
, 
NULL
, NULL,

1627 
OPT_WITH_ARG
("--bitmain-voltage",

1628 
£t_bômaö_vﬁège
, 
NULL
, NULL,

1630 
OPT_WITH_ARG
("--bitmain-options",

1631 
£t_bômaö_›ti⁄s
, 
NULL
, NULL,

1633 
OPT_WITH_ARG
("--bitmain-temp",

1634 
£t_öt_0_to_100
, 
›t_show_ötvÆ
, &
›t_bômaö_ãmp
,

1638 #ifde‡
HAVE_LIBCURL


1639 
OPT_WITH_ARG
("--btc-address",

1640 
›t_£t_ch¨p
, 
NULL
, &
›t_btc_addªss
,

1642 
OPT_WITH_ARG
("--btc-sig",

1643 
›t_£t_ch¨p
, 
NULL
, &
›t_btc_sig
,

1647 #ifde‡
HAVE_CURSES


1648 
OPT_WITHOUT_ARG
("--compact",

1649 
›t_£t_boﬁ
, &
›t_com∑˘
,

1653 
OPT_WITHOUT_ARG
("--debug|-D",

1654 
íabÀ_debug
, &
›t_debug
,

1656 
OPT_WITHOUT_ARG
("--disable-rejecting",

1657 
›t_£t_boﬁ
, &
›t_dißbÀ_poﬁ
,

1660 
OPT_WITH_ARG
("--expiry|-E",

1661 
£t_öt_0_to_9999
, 
›t_show_ötvÆ
, &
›t_expúy
,

1665 
OPT_WITHOUT_ARG
("--extranonce-subscribe",

1666 
£t_exå™⁄˚_subs¸ibe
, 
NULL
,

1669 
OPT_WITHOUT_ARG
("--failover-only",

1670 
›t_£t_boﬁ
, &
›t_Áû_⁄ly
,

1673 
OPT_WITHOUT_ARG
("--fix-protocol",

1674 
›t_£t_boﬁ
, &
›t_fix_¥Ÿocﬁ
,

1677 
OPT_WITH_ARG
("--fallback-time",

1678 
›t_£t_ötvÆ
, 
›t_show_ötvÆ
, &
›t_poﬁ_ÁŒback
,

1681 
OPT_WITH_ARG
("--hotplug",

1682 
£t_öt_0_to_9999
, 
NULL
, &
hŸ∂ug_time
,

1683 #ifde‡
USE_USBUTILS


1686 
›t_hiddí


1690 
OPT_WITHOUT_ARG
("--load-balance",

1691 
£t_lﬂdbÆ™˚
, &
poﬁ_°øãgy
,

1694 
OPT_WITH_ARG
("--log|-l",

1695 
£t_öt_0_to_9999
, 
›t_show_ötvÆ
, &
›t_log_öãrvÆ
,

1698 
OPT_WITHOUT_ARG
("--lowmem",

1699 
›t_£t_boﬁ
, &
›t_lowmem
,

1702 #i‡
deföed
(
unix
Ë|| deföed(
__APPLE__
)

1703 
OPT_WITH_ARG
("--monitor|-m",

1704 
›t_£t_ch¨p
, 
NULL
, &
›t_°dîr_cmd
,

1708 
OPT_WITHOUT_ARG
("--net-delay",

1709 
›t_£t_boﬁ
, &
›t_dñay√t
,

1712 
OPT_WITHOUT_ARG
("--no-pool-disable",

1713 
›t_£t_övboﬁ
, &
›t_dißbÀ_poﬁ
,

1714 
›t_hiddí
),

1716 
OPT_WITHOUT_ARG
("--no-submit-stale",

1717 
›t_£t_övboﬁ
, &
›t_submô_°Æe
,

1720 
OPT_WITH_ARG
("--pass|-p",

1721 
£t_∑ss
, 
NULL
, &
›t_£t_nuŒ
,

1724 
OPT_WITHOUT_ARG
("--per-device-stats",

1725 
›t_£t_boﬁ
, &
w™t_≥r_devi˚_°©s
,

1728 
OPT_WITH_ARG
("--pools",

1729 
›t_£t_boﬁ
, 
NULL
, &
›t_£t_nuŒ
, 
›t_hiddí
),

1731 
OPT_WITHOUT_ARG
("--protocol-dump|-P",

1732 
›t_£t_boﬁ
, &
›t_¥Ÿocﬁ
,

1735 
OPT_WITH_ARG
("--queue|-Q",

1736 
£t_öt_0_to_9999
, 
›t_show_ötvÆ
, &
›t_queue
,

1739 
OPT_WITHOUT_ARG
("--quiet|-q",

1740 
›t_£t_boﬁ
, &
›t_quõt
,

1743 
OPT_WITH_ARG
("--quota|-U",

1744 
£t_quŸa
, 
NULL
, &
›t_£t_nuŒ
,

1747 
OPT_WITHOUT_ARG
("--real-quiet",

1748 
›t_£t_boﬁ
, &
›t_ªÆquõt
,

1751 
OPT_WITH_ARG
("--retries",

1752 
£t_nuŒ
, 
NULL
, &
›t_£t_nuŒ
,

1753 
›t_hiddí
),

1755 
OPT_WITH_ARG
("--retry-pause",

1756 
£t_nuŒ
, 
NULL
, &
›t_£t_nuŒ
,

1757 
›t_hiddí
),

1759 
OPT_WITH_ARG
("--rotate",

1760 
£t_rŸ©e
, 
NULL
, &
›t_£t_nuŒ
,

1763 
OPT_WITHOUT_ARG
("--round-robin",

1764 
£t_º
, &
poﬁ_°øãgy
,

1767 #ifde‡
USE_FPGA_SERIAL


1768 
OPT_WITH_CBARG
("--scan-serial|-S",

1769 
add_£rül
, 
NULL
, &
›t_add_£rül
,

1773 
OPT_WITH_ARG
("--scan-time|-s",

1774 
£t_öt_0_to_9999
, 
›t_show_ötvÆ
, &
›t_sˇ¡ime
,

1777 
OPT_WITH_CBARG
("--sched-start",

1778 
£t_sched_°¨t
, 
NULL
, &
›t_£t_sched_°¨t
,

1781 
OPT_WITH_CBARG
("--sched-stop",

1782 
£t_sched_°›
, 
NULL
, &
›t_£t_sched_°›
,

1785 
OPT_WITH_CBARG
("--sharelog",

1786 
£t_sh¨ñog
, 
NULL
, &
›t_£t_sh¨ñog
,

1789 
OPT_WITH_ARG
("--shares",

1790 
›t_£t_ötvÆ
, 
NULL
, &
›t_sh¨es
,

1793 
OPT_WITH_ARG
("--socks-proxy",

1794 
›t_£t_ch¨p
, 
NULL
, &
›t_socks_¥oxy
,

1797 
OPT_WITH_ARG
("--suggest-diff",

1798 
›t_£t_ötvÆ
, 
NULL
, &
›t_sugge°_diff
,

1801 
OPT_WITH_ARG
("--multi-version",

1802 
›t_£t_ötvÆ
, 
NULL
, &
›t_mu…i_vîsi⁄
,

1805 #ifde‡
HAVE_SYSLOG_H


1806 
OPT_WITHOUT_ARG
("--syslog",

1807 
›t_£t_boﬁ
, &
u£_sy¶og
,

1811 
OPT_WITHOUT_ARG
("--text-only|-T",

1812 
›t_£t_övboﬁ
, &
u£_cur£s
,

1813 #ifde‡
HAVE_CURSES


1816 
›t_hiddí


1820 
OPT_WITH_ARG
("--url|-o",

1821 
£t_uæ
, 
NULL
, &
›t_£t_nuŒ
,

1824 #ifde‡
USE_USBUTILS


1825 
OPT_WITH_ARG
("--usb",

1826 
›t_£t_ch¨p
, 
NULL
, &
›t_usb_£À˘
,

1828 
OPT_WITH_ARG
("--usb-dump",

1829 
£t_öt_0_to_10
, 
›t_show_ötvÆ
, &
›t_usbdump
,

1830 
›t_hiddí
),

1831 
OPT_WITHOUT_ARG
("--usb-list-all",

1832 
›t_£t_boﬁ
, &
›t_usb_li°_Æl
,

1833 
›t_hiddí
),

1836 
OPT_WITH_ARG
("--user|-u",

1837 
£t_u£r
, 
NULL
, &
›t_£t_nuŒ
,

1840 
OPT_WITH_ARG
("--userpass|-O",

1841 
£t_u£Ωass
, 
NULL
, &
›t_£t_nuŒ
,

1844 
OPT_WITHOUT_ARG
("--verbose",

1845 
›t_£t_boﬁ
, &
›t_log_ouçut
,

1848 
OPT_WITHOUT_ARG
("--widescreen",

1849 
›t_£t_boﬁ
, &
›t_wides¸ìn
,

1852 
OPT_WITHOUT_ARG
("--worktime",

1853 
›t_£t_boﬁ
, &
›t_w‹ktime
,

1856 
OPT_ENDTABLE


1859 *
lﬂd_c⁄fig
(c⁄° *
¨g
, 
__maybe_unu£d
 *
unu£d
);

1861 
	gfûec⁄f_lﬂd
;

1863 *
	$∑r£_c⁄fig
(
js⁄_t
 *
c⁄fig
, 
boﬁ
 
fûec⁄f
)

1865 
îr_buf
[200];

1866 
›t_èbÀ
 *
›t
;

1867 c⁄° *
°r
;

1868 
js⁄_t
 *
vÆ
;

1870 i‡(
fûec⁄f
 && !
fûec⁄f_lﬂd
)

1872 
fûec⁄f_lﬂd
 = 1;

1875 
›t
 = 
›t_c⁄fig_èbÀ
; o±->
ty≥
 !
OPT_END
; opt++)

1877 *
p
, *
«me
;

1880 
	`as£π
(!(
›t
->
ty≥
 & 
OPT_SUBTABLE
));

1882 i‡(!
›t
->
«mes
)

1888 
«me
 = 
	`°rdup
(
›t
->
«mes
);

1889 
p
 = 
	`°πok
(
«me
, "|");Ö;Ö = såtok(
NULL
, "|"))

1891 *
îr
 = 
NULL
;

1894 i‡(
p
[1] != '-')

1899 
vÆ
 = 
	`js⁄_obje˘_gë
(
c⁄fig
, 
p
+2);

1901 i‡(!
vÆ
)

1906 i‡((
›t
->
ty≥
 & (
OPT_HASARG
 | 
OPT_PROCESSARG
)Ë&& 
	`js⁄_is_°rög
(
vÆ
))

1908 
°r
 = 
	`js⁄_°rög_vÆue
(
vÆ
);

1909 
îr
 = 
›t
->
	`cb_¨g
(
°r
, o±->
u
.
¨g
);

1911 i‡(
›t
->
ty≥
 =
OPT_PROCESSARG
)

1913 
	`›t_£t_ch¨p
(
°r
, 
›t
->
u
.
¨g
);

1916 i‡((
›t
->
ty≥
 & (
OPT_HASARG
 | 
OPT_PROCESSARG
)Ë&& 
	`js⁄_is_¨øy
(
vÆ
))

1918 
js⁄_t
 *
¨r_vÆ
;

1919 
size_t
 
ödex
;

1921 
	`js⁄_¨øy_f‹óch
(
vÆ
, 
ödex
, 
¨r_vÆ
)

1923 i‡(
	`js⁄_is_°rög
(
¨r_vÆ
))

1925 
°r
 = 
	`js⁄_°rög_vÆue
(
¨r_vÆ
);

1926 
îr
 = 
›t
->
	`cb_¨g
(
°r
, o±->
u
.
¨g
);

1928 i‡(
›t
->
ty≥
 =
OPT_PROCESSARG
)

1930 
	`›t_£t_ch¨p
(
°r
, 
›t
->
u
.
¨g
);

1933 i‡(
	`js⁄_is_obje˘
(
¨r_vÆ
))

1935 
îr
 = 
	`∑r£_c⁄fig
(
¨r_vÆ
, 
Ál£
);

1937 i‡(
îr
)

1943 i‡((
›t
->
ty≥
 & 
OPT_NOARG
Ë&& 
	`js⁄_is_åue
(
vÆ
))

1945 
îr
 = 
›t
->
	`cb
(›t->
u
.
¨g
);

1949 
îr
 = "Invalid value";

1952 i‡(
îr
)

1957 i‡(
fûec⁄f
)

1959 
	`≠∂og
(
LOG_ERR
, "InvÆid c⁄fig o±i⁄ %s: %s", 
p
, 
îr
);

1960 
fûec⁄f_lﬂd
 = -1;

1964 
	`¢¥ötf
(
îr_buf
, (err_buf), "Parsing JSON option %s: %s",

1965 
p
, 
îr
);

1966  
îr_buf
;

1971 
	`‰ì
(
«me
);

1974 
vÆ
 = 
	`js⁄_obje˘_gë
(
c⁄fig
, 
JSON_INCLUDE_CONF
);

1976 i‡(
vÆ
 && 
	`js⁄_is_°rög
(val))

1978  
	`lﬂd_c⁄fig
(
	`js⁄_°rög_vÆue
(
vÆ
), 
NULL
);

1981  
NULL
;

1982 
	}
}

1984 *
	g˙fbuf
 = 
NULL
;

1986 #ifde‡
HAVE_LIBCURL


1987 
	gc⁄f_web1
[] = "http://";

1988 
	gc⁄f_web2
[] = "https://";

1990 *
	$lﬂd_web_c⁄fig
(c⁄° *
¨g
)

1992 
js⁄_t
 *
vÆ
 = 
	`js⁄_web_c⁄fig
(
¨g
);

1994 i‡(!
vÆ
 || !
	`js⁄_is_obje˘
(val))

1995  
JSON_WEB_ERROR
;

1997 i‡(!
˙fbuf
)

1998 
˙fbuf
 = 
	`°rdup
(
¨g
);

2000 
c⁄fig_lﬂded
 = 
åue
;

2002  
	`∑r£_c⁄fig
(
vÆ
, 
åue
);

2003 
	}
}

2006 *
	$lﬂd_c⁄fig
(c⁄° *
¨g
, 
__maybe_unu£d
 *
unu£d
)

2008 
js⁄_îr‹_t
 
îr
;

2009 
js⁄_t
 *
c⁄fig
;

2010 *
js⁄_îr‹
;

2011 
size_t
 
siz
;

2013 #ifde‡
HAVE_LIBCURL


2014 i‡(
	`°∫ˇ£cmp
(
¨g
, 
c⁄f_web1
, (conf_web1)-1) == 0 ||

2015 
	`°∫ˇ£cmp
(
¨g
, 
c⁄f_web2
, (conf_web2)-1) == 0)

2016  
	`lﬂd_web_c⁄fig
(
¨g
);

2019 i‡(!
˙fbuf
)

2021 
˙fbuf
 = 
	`°rdup
(
¨g
);

2024 i‡(++
ö˛ude_cou¡
 > 
JSON_MAX_DEPTH
)

2026  
JSON_MAX_DEPTH_ERR
;

2029 
c⁄fig
 = 
	`js⁄_lﬂd_fûe
(
¨g
, 0, &
îr
);

2031 i‡(!
	`js⁄_is_obje˘
(
c⁄fig
))

2033 
siz
 = 
JSON_LOAD_ERROR_LEN
 + 
	`°æí
(
¨g
Ë+ såÀn(
îr
.
ãxt
);

2034 
js⁄_îr‹
 = 
	`cgmÆloc
(
siz
);

2035 
	`¢¥ötf
(
js⁄_îr‹
, 
siz
, 
JSON_LOAD_ERROR
, 
¨g
, 
îr
.
ãxt
);

2036  
js⁄_îr‹
;

2039 
c⁄fig_lﬂded
 = 
åue
;

2043  
	`∑r£_c⁄fig
(
c⁄fig
, 
åue
);

2044 
	}
}

2047 *
	$£t_deÁu…_c⁄fig
(c⁄° *
¨g
)

2049 
	`›t_£t_ch¨p
(
¨g
, &
deÁu…_c⁄fig
);

2051  
NULL
;

2052 
	}
}

2055 
deÁu…_ßve_fûe
(*
fûíame
);

2057 
	$lﬂd_deÁu…_c⁄fig
()

2059 
˙fbuf
 = 
	`cgmÆloc
(
PATH_MAX
);

2061 
	`deÁu…_ßve_fûe
(
˙fbuf
);

2063 i‡(!
	`ac˚ss
(
˙fbuf
, 
R_OK
))

2065 
	`lﬂd_c⁄fig
(
˙fbuf
, 
NULL
);

2069 
	`‰ì
(
˙fbuf
);

2070 
˙fbuf
 = 
NULL
;

2072 
	}
}

2074 c⁄° *
›t_¨gv0
;

2076 *
	$›t_vîußge_™d_exô
(c⁄° *
exåa
)

2078 
	`¥ötf
("%s\nBuilt with "

2080 #ifde‡
USE_BITMAIN


2083 #ifde‡
USE_BITMAIN_C5


2089 , 
∑ckagíame
);

2090 
	`¥ötf
("%s", 
	`›t_ußge
(
›t_¨gv0
, 
exåa
));

2091 
	`fÊush
(
°dout
);

2092 
	`exô
(0);

2093 
	}
}

2095 #i‡
deföed
(
USE_USBUTILS
)

2096 *
	$di•œy_devs
(*
ndevs
)

2098 *
ndevs
 = 0;

2099 
	`usb_Æl
(0);

2100 
	`exô
(*
ndevs
);

2101 
	}
}

2105 
›t_èbÀ
 
	g›t_cmdlöe_èbÀ
[] =

2107 
OPT_WITH_ARG
("--c⁄fig|-c", 
lﬂd_c⁄fig
, 
NULL
, &
›t_£t_nuŒ
,

2111 
OPT_WITH_ARG
("--deÁu…-c⁄fig", 
£t_deÁu…_c⁄fig
, 
NULL
, &
›t_£t_nuŒ
,

2115 
OPT_WITHOUT_ARG
("--hñp|-h", 
›t_vîußge_™d_exô
, 
NULL
,

2118 #i‡
deföed
(
USE_USBUTILS
)

2119 
OPT_WITHOUT_ARG
("--ndevs|-n",

2120 
di•œy_devs
, &
nDevs
,

2123 
OPT_WITHOUT_ARG
("--version|-V",

2124 
›t_vîsi⁄_™d_exô
, 
∑ckagíame
,

2127 
OPT_ENDTABLE


2130 #ifde‡
HAVE_LIBCURL


2131 
boﬁ
 
	$jobj_bö¨y
(c⁄° 
js⁄_t
 *
obj
, c⁄° *
key
,

2132 *
buf
, 
size_t
 
buÊí
, 
boﬁ
 
ªquúed
)

2134 c⁄° *
hex°r
;

2135 
js⁄_t
 *
tmp
;

2137 
tmp
 = 
	`js⁄_obje˘_gë
(
obj
, 
key
);

2138 i‡(
	`u∆ikñy
(!
tmp
))

2140 i‡(
	`u∆ikñy
(
ªquúed
))

2141 
	`≠∂og
(
LOG_ERR
, "JSON key '%s'ÇŸ found", 
key
);

2142  
Ál£
;

2144 
hex°r
 = 
	`js⁄_°rög_vÆue
(
tmp
);

2145 i‡(
	`u∆ikñy
(!
hex°r
))

2147 
	`≠∂og
(
LOG_ERR
, "JSON key '%s' i†nŸá såög", 
key
);

2148  
Ál£
;

2150 i‡(!
	`hex2bö
(
buf
, 
hex°r
, 
buÊí
))

2151  
Ál£
;

2153  
åue
;

2154 
	}
}

2157 
	$ˇlc_mid°©e
(
w‹k
 *work)

2159 
d©a
[64];

2160 
uöt32_t
 *
d©a32
 = (uöt32_à*)
d©a
;

2161 
sha256_˘x
 
˘x
;

2163 
	`Êù64
(
d©a32
, 
w‹k
->
d©a
);

2164 
	`sha256_öô
(&
˘x
);

2165 
	`sha256_upd©e
(&
˘x
, 
d©a
, 64);

2166 
	`cg_mem˝y
(
w‹k
->
mid°©e
, 
˘x
.
h
, 32);

2167 
	`ídün_Êù32
(
w‹k
->
mid°©e
, work->midstate);

2168 
	}
}

2171 
	$tŸÆ_w‹k_öc
()

2173 
ªt
;

2175 
	`cg_wlock
(&
c⁄åﬁ_lock
);

2176 
ªt
 = 
tŸÆ_w‹k
++;

2177 
	`cg_wu∆ock
(&
c⁄åﬁ_lock
);

2179  
ªt
;

2180 
	}
}

2182 
w‹k
 *
	$make_w‹k
()

2184 
w‹k
 *w‹k = 
	`cgˇŒoc
(1, (work));

2186 i‡(
	`u∆ikñy
(!
w‹k
))

2188 
	`quô
(1, "FailedÅo calloc work in make_work");

2191 
w‹k
->
id
 = (
uöt32_t
Ë
	`tŸÆ_w‹k_öc
();

2193  
w‹k
;

2194 
	}
}

2198 
	$˛ón_w‹k
(
w‹k
 *work)

2200 
	`‰ì
(
w‹k
->
job_id
);

2201 
	`‰ì
(
w‹k
->
¡ime
);

2202 
	`‰ì
(
w‹k
->
coöba£
);

2203 
	`‰ì
(
w‹k
->
n⁄˚1
);

2204 
	`mem£t
(
w‹k
, 0, (work));

2205 
	}
}

2210 
	$_‰ì_w‹k
(
w‹k
 **
w‹k±r
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

2212 
w‹k
 *w‹k = *
w‹k±r
;

2214 i‡(
	`u∆ikñy
(!
w‹k
))

2216 
	`≠∂og
(
LOG_ERR
, "Fªêw‹k cÆÀd wôh NULL w‹k from %†%s:%d", 
fûe
, 
func
, 
löe
);

2221 
	`˛ón_w‹k
(
w‹k
);

2222 
	`‰ì
(
w‹k
);

2223 *
w‹k±r
 = 
NULL
;

2224 
	}
}

2226 
gí_hash
(*
d©a
, *
hash
, 
Àn
);

2227 
ˇlc_diff
(
w‹k
 *w‹k, 
known
);

2228 *
	gw‹k∑ddög
 = "000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000";

2230 #ifde‡
HAVE_LIBCURL


2235 
gbt_mîkÀ_bös
(
poﬁ
 *poﬁ, 
js⁄_t
 *
å™ß˘i⁄_¨r
);

2237 
	$__buûd_gbt_txns
(
poﬁ
 *poﬁ, 
js⁄_t
 *
ªs_vÆ
)

2239 
js⁄_t
 *
txn_¨øy
;

2241 
txn_¨øy
 = 
	`js⁄_obje˘_gë
(
ªs_vÆ
, "transactions");

2242 
	`gbt_mîkÀ_bös
(
poﬁ
, 
txn_¨øy
);

2243 
	}
}

2245 
	$__gbt_mîkÀroŸ
(
poﬁ
 *poﬁ, *
mîkÀ_roŸ
)

2247 
mîkÀ_sha
[64];

2248 
i
;

2250 
	`gí_hash
(
poﬁ
->
coöba£
, 
mîkÀ_roŸ
,Öoﬁ->
coöba£_Àn
);

2251 
	`cg_mem˝y
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 32);

2252 
i
 = 0; i < 
poﬁ
->
mîkÀs
; i++)

2254 
	`cg_mem˝y
(
mîkÀ_sha
 + 32, 
poﬁ
->
mîkÀbö
 + 
i
 * 32, 32);

2255 
	`gí_hash
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 64);

2256 
	`cg_mem˝y
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 32);

2258 
	}
}

2260 
boﬁ
 
w‹k_decode
(
poﬁ
 *poﬁ, 
w‹k
 *w‹k, 
js⁄_t
 *
vÆ
);

2262 
	$upd©e_gbt
(
poﬁ
 *pool)

2264 
rﬁ…ime
;

2265 
js⁄_t
 *
vÆ
;

2266 
CURL
 *
cuæ
;

2268 
cuæ
 = 
	`cuæ_ósy_öô
();

2269 i‡(
	`u∆ikñy
(!
cuæ
))

2270 
	`quô
 (1, "CURL initialisation failed in update_gbt");

2272 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
cuæ
, 
poﬁ
->
Ωc_uæ
,Öoﬁ->
Ωc_u£Ωass
,

2273 
poﬁ
->
Ωc_ªq
, 
åue
, 
Ál£
, &
rﬁ…ime
,Öool, false);

2275 i‡(
vÆ
)

2277 
w‹k
 *w‹k = 
	`make_w‹k
();

2278 
boﬁ
 
rc
 = 
	`w‹k_decode
(
poﬁ
, 
w‹k
, 
vÆ
);

2280 
tŸÆ_gëw‹ks
++;

2281 
poﬁ
->
gëw‹k_ªque°ed
++;

2282 i‡(
rc
)

2284 
	`≠∂og
(
LOG_DEBUG
, "SuccessfullyÑetrievedánd updated GBT fromÖool %u %s",

2285 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

2286 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

2287 
›t_w‹k_upd©e
 = 
åue
;

2291 
	`≠∂og
(
LOG_DEBUG
, "SuccessfullyÑetrieved but FAILEDÅo decipher GBT fromÖool %u %s",

2292 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

2294 
	`js⁄_de¸ef
(
vÆ
);

2295 
	`‰ì_w‹k
(
w‹k
);

2299 
	`≠∂og
(
LOG_DEBUG
, "FAILEDÅo update GBT fromÖool %u %s",

2300 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

2302 
	`cuæ_ósy_˛ónup
(
cuæ
);

2303 
	}
}

2305 
	$gí_gbt_w‹k
(
poﬁ
 *poﬁ, 
w‹k
 *work)

2307 
mîkÀroŸ
[32];

2308 
timevÆ
 
now
;

2309 
uöt64_t
 
n⁄˚2À
;

2311 
	`cgtime
(&
now
);

2312 i‡(
now
.
tv_£c
 - 
poﬁ
->
tv_œ°w‹k
.tv_sec > 60)

2313 
	`upd©e_gbt
(
poﬁ
);

2315 
	`cg_wlock
(&
poﬁ
->
gbt_lock
);

2316 
n⁄˚2À
 = 
	`htﬁe64
(
poﬁ
->
n⁄˚2
);

2317 
	`cg_mem˝y
(
poﬁ
->
coöba£
 +Öoﬁ->
n⁄˚2_off£t
, &
n⁄˚2À
,Öoﬁ->
n2size
);

2318 
poﬁ
->
n⁄˚2
++;

2319 
	`cg_dwlock
(&
poﬁ
->
gbt_lock
);

2320 
	`__gbt_mîkÀroŸ
(
poﬁ
, 
mîkÀroŸ
);

2322 
	`cg_mem˝y
(
w‹k
->
d©a
, &
poﬁ
->
gbt_vîsi⁄
, 4);

2323 
	`cg_mem˝y
(
w‹k
->
d©a
 + 4, 
poﬁ
->
¥eviousblockhash
, 32);

2324 
	`cg_mem˝y
(
w‹k
->
d©a
 + 4 + 32 + 32, &
poﬁ
->
cuπime
, 4);

2325 
	`cg_mem˝y
(
w‹k
->
d©a
 + 4 + 32 + 32 + 4, &
poﬁ
->
gbt_bôs
, 4);

2327 
	`cg_mem˝y
(
w‹k
->
èrgë
, 
poﬁ
->
gbt_èrgë
, 32);

2329 
w‹k
->
coöba£
 = 
	`bö2hex
(
poﬁ
->coöba£,Öoﬁ->
coöba£_Àn
);

2332 
w‹k
->
gbt_txns
 = 
poﬁ
->gbt_txns + 1;

2334 i‡(
poﬁ
->
gbt_w‹kid
)

2335 
w‹k
->
job_id
 = 
	`°rdup
(
poﬁ
->
gbt_w‹kid
);

2336 
	`cg_ru∆ock
(&
poﬁ
->
gbt_lock
);

2338 
	`Êù32
(
w‹k
->
d©a
 + 4 + 32, 
mîkÀroŸ
);

2339 
	`mem£t
(
w‹k
->
d©a
 + 4 + 32 + 32 + 4 + 4, 0, 4);

2341 
	`hex2bö
(
w‹k
->
d©a
 + 4 + 32 + 32 + 4 + 4 + 4, 
w‹k∑ddög
, 48);

2343 i‡(
›t_debug
)

2345 *
hódî
 = 
	`bö2hex
(
w‹k
->
d©a
, 128);

2347 
	`≠∂og
(
LOG_DEBUG
, "Gíî©ed GBT hódî %s", 
hódî
);

2348 
	`≠∂og
(
LOG_DEBUG
, "W‹k coöba£ %s", 
w‹k
->
coöba£
);

2349 
	`‰ì
(
hódî
);

2352 
	`ˇlc_mid°©e
(
w‹k
);

2353 
loˇl_w‹k
++;

2354 
w‹k
->
poﬁ
 =Öool;

2355 
w‹k
->
gbt
 = 
åue
;

2356 
w‹k
->
l⁄gpﬁl
 = 
Ál£
;

2357 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_GBT
;

2358 
w‹k
->
w‹k_block
 = work_block;

2360 
w‹k
->
drv_rﬁŒimô
 = 60;

2361 
	`ˇlc_diff
(
w‹k
, 0);

2362 
	`cgtime
(&
w‹k
->
tv_°aged
);

2363 
	}
}

2365 
boﬁ
 
	$gbt_decode
(
poﬁ
 *poﬁ, 
js⁄_t
 *
ªs_vÆ
)

2367 c⁄° *
¥eviousblockhash
;

2368 c⁄° *
èrgë
;

2369 c⁄° *
coöba£txn
;

2370 c⁄° *
l⁄gpﬁlid
;

2371 
hash_sw≠
[32];

2372 
expúes
;

2373 
vîsi⁄
;

2374 
cuπime
;

2375 
boﬁ
 
submôﬁd
;

2376 c⁄° *
bôs
;

2377 c⁄° *
w‹kid
;

2378 
cbt_Àn
, 
‹ig_Àn
;

2379 
uöt8_t
 *
exåa_Àn
;

2380 
size_t
 
ˇl_Àn
;

2382 
¥eviousblockhash
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "previousblockhash"));

2383 
èrgë
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "target"));

2384 
coöba£txn
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(js⁄_obje˘_gë(
ªs_vÆ
, "coinbasetxn"), "data"));

2385 
l⁄gpﬁlid
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "longpollid"));

2386 
expúes
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "expires"));

2387 
vîsi⁄
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "version"));

2388 
cuπime
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "curtime"));

2389 
submôﬁd
 = 
	`js⁄_is_åue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "submitold"));

2390 
bôs
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "bits"));

2391 
w‹kid
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "workid"));

2393 i‡(!
¥eviousblockhash
 || !
èrgë
 || !
coöba£txn
 || !
l⁄gpﬁlid
 ||

2394 !
expúes
 || !
vîsi⁄
 || !
cuπime
 || !
bôs
)

2396 
	`≠∂og
(
LOG_ERR
, "JSON failedÅo decode GBT");

2397  
Ál£
;

2400 
	`≠∂og
(
LOG_DEBUG
, "¥eviousblockhash: %s", 
¥eviousblockhash
);

2401 
	`≠∂og
(
LOG_DEBUG
, "èrgë: %s", 
èrgë
);

2402 
	`≠∂og
(
LOG_DEBUG
, "coöba£txn: %s", 
coöba£txn
);

2403 
	`≠∂og
(
LOG_DEBUG
, "l⁄gpﬁlid: %s", 
l⁄gpﬁlid
);

2404 
	`≠∂og
(
LOG_DEBUG
, "expúes: %d", 
expúes
);

2405 
	`≠∂og
(
LOG_DEBUG
, "vîsi⁄: %d", 
vîsi⁄
);

2406 
	`≠∂og
(
LOG_DEBUG
, "cuπime: %d", 
cuπime
);

2407 
	`≠∂og
(
LOG_DEBUG
, "submôﬁd: %s", 
submôﬁd
 ? "true" : "false");

2408 
	`≠∂og
(
LOG_DEBUG
, "bôs: %s", 
bôs
);

2409 i‡(
w‹kid
)

2410 
	`≠∂og
(
LOG_DEBUG
, "w‹kid: %s", 
w‹kid
);

2412 
	`cg_wlock
(&
poﬁ
->
gbt_lock
);

2413 
	`‰ì
(
poﬁ
->
coöba£txn
);

2414 
poﬁ
->
coöba£txn
 = 
	`°rdup
(coinbasetxn);

2415 
cbt_Àn
 = 
	`°æí
(
poﬁ
->
coöba£txn
) / 2;

2417 
poﬁ
->
n2size
 = 8;

2418 
poﬁ
->
coöba£_Àn
 = 
cbt_Àn
 +Öoﬁ->
n2size
;

2419 
ˇl_Àn
 = 
poﬁ
->
coöba£_Àn
 + 1;

2420 
	`‰ì
(
poﬁ
->
coöba£
);

2421 
poﬁ
->
coöba£
 = 
	`cgˇŒoc
(
ˇl_Àn
, 1);

2422 
	`hex2bö
(
poﬁ
->
coöba£
,Öoﬁ->
coöba£txn
, 42);

2423 
exåa_Àn
 = 
poﬁ
->
coöba£
 + 41;

2424 
‹ig_Àn
 = *
exåa_Àn
;

2425 
	`hex2bö
(
poﬁ
->
coöba£
 + 42,Öoﬁ->
coöba£txn
 + 84, 
‹ig_Àn
);

2426 *
exåa_Àn
 +
poﬁ
->
n2size
;

2427 
	`hex2bö
(
poﬁ
->
coöba£
 + 42 + *
exåa_Àn
,Öoﬁ->
coöba£txn
 + 84 + (
‹ig_Àn
 * 2),

2428 
cbt_Àn
 - 
‹ig_Àn
 - 42);

2429 
poﬁ
->
n⁄˚2_off£t
 = 
‹ig_Àn
 + 42;

2431 
	`‰ì
(
poﬁ
->
l⁄gpﬁlid
);

2432 
poﬁ
->
l⁄gpﬁlid
 = 
	`°rdup
(longpollid);

2433 
	`‰ì
(
poﬁ
->
gbt_w‹kid
);

2434 i‡(
w‹kid
)

2435 
poﬁ
->
gbt_w‹kid
 = 
	`°rdup
(
w‹kid
);

2437 
poﬁ
->
gbt_w‹kid
 = 
NULL
;

2439 
	`hex2bö
(
hash_sw≠
, 
¥eviousblockhash
, 32);

2440 
	`sw≠256
(
poﬁ
->
¥eviousblockhash
, 
hash_sw≠
);

2442 
	`hex2bö
(
hash_sw≠
, 
èrgë
, 32);

2443 
	`swab256
(
poﬁ
->
gbt_èrgë
, 
hash_sw≠
);

2445 
poﬁ
->
gbt_expúes
 = 
expúes
;

2446 
poﬁ
->
gbt_vîsi⁄
 = 
	`htobe32
(
vîsi⁄
);

2447 
poﬁ
->
cuπime
 = 
	`htobe32
(curtime);

2448 
poﬁ
->
submô_ﬁd
 = 
submôﬁd
;

2450 
	`hex2bö
((*)&
poﬁ
->
gbt_bôs
, 
bôs
, 4);

2452 
	`__buûd_gbt_txns
(
poﬁ
, 
ªs_vÆ
);

2454 i‡(
poﬁ
->
å™ß˘i⁄s
 < 3)

2456 
poﬁ
->
bad_w‹k
++;

2459 
	`cg_wu∆ock
(&
poﬁ
->
gbt_lock
);

2461  
åue
;

2462 
	}
}

2464 #ifde‡
USE_BITMAIN_C5


2465 
boﬁ
 
	$gëw‹k_decode
(
js⁄_t
 *
ªs_vÆ
, 
w‹k
 *work)

2467 i‡(
	`u∆ikñy
(!
	`jobj_bö¨y
(
ªs_vÆ
, "d©a", 
w‹k
->
d©a
, (w‹k->d©a), 
åue
)))

2469 
	`≠∂og
(
LOG_ERR
, "JSON inval data");

2470  
Ál£
;

2473 i‡(!
	`jobj_bö¨y
(
ªs_vÆ
, "mid°©e", 
w‹k
->
mid°©e
, (w‹k->mid°©e), 
Ál£
))

2476 
	`≠∂og
(
LOG_DEBUG
, "Calculating midstateÜocally");

2477 
	`ˇlc_mid°©e
(
w‹k
);

2480 i‡(
	`u∆ikñy
(!
	`jobj_bö¨y
(
ªs_vÆ
, "èrgë", 
w‹k
->
èrgë
, (w‹k->èrgë), 
åue
)))

2482 
	`≠∂og
(
LOG_ERR
, "JSON invalÅarget");

2483  
Ál£
;

2486  
åue
;

2487 
	}
}

2490 
boﬁ
 
	$poﬁ_loˇlgí
(
poﬁ
 *pool)

2492  (
poﬁ
->
has_°øtum
 ||Öoﬁ->
has_gbt
 ||Öoﬁ->
gbt_sﬁo
);

2493 
	}
}

2496 
	$gbt_mîkÀ_bös
(
poﬁ
 *poﬁ, 
js⁄_t
 *
å™ß˘i⁄_¨r
)

2498 *
hashbö
;

2499 
js⁄_t
 *
¨r_vÆ
;

2500 
i
, 
j
, 
böÀ·
, 
böÀn
;

2502 
	`‰ì
(
poﬁ
->
txn_d©a
);

2504 
poﬁ
->
txn_d©a
 = 
NULL
;

2505 
poﬁ
->
å™ß˘i⁄s
 = 0;

2506 
poﬁ
->
mîkÀs
 = 0;

2507 
poﬁ
->
å™ß˘i⁄s
 = 
	`js⁄_¨øy_size
(
å™ß˘i⁄_¨r
);

2508 
böÀn
 = 
poﬁ
->
å™ß˘i⁄s
 * 32 + 32;

2509 
hashbö
 = 
	`Æloˇ
(
böÀn
 + 32);

2511 
	`mem£t
(
hashbö
, 0, 32);

2512 
böÀ·
 = 
böÀn
 / 32;

2514 i‡(
poﬁ
->
å™ß˘i⁄s
)

2516 
Àn
 = 0, 
ofs
 = 0;

2517 c⁄° *
txn
;

2519 
i
 = 0; i < 
poﬁ
->
å™ß˘i⁄s
; i++)

2521 
¨r_vÆ
 = 
	`js⁄_¨øy_gë
(
å™ß˘i⁄_¨r
, 
i
);

2522 
txn
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
¨r_vÆ
, "data"));

2524 i‡(!
txn
)

2526 
	`≠∂og
(
LOG_ERR
, "Pool %d json_string_value fail - cannot findÅransaction data",

2527 
poﬁ
->
poﬁ_no
);

2530 
Àn
 +
	`°æí
(
txn
);

2533 
poﬁ
->
txn_d©a
 = 
	`cgmÆloc
(
Àn
 + 1);

2534 
poﬁ
->
txn_d©a
[
Àn
] = '\0';

2536 
i
 = 0; i < 
poﬁ
->
å™ß˘i⁄s
; i++)

2538 
bösw≠
[32];

2539 c⁄° *
hash
;

2541 
¨r_vÆ
 = 
	`js⁄_¨øy_gë
(
å™ß˘i⁄_¨r
, 
i
);

2542 
hash
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
¨r_vÆ
, "hash"));

2543 
txn
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
¨r_vÆ
, "data"));

2544 
Àn
 = 
	`°æí
(
txn
);

2545 
	`cg_mem˝y
(
poﬁ
->
txn_d©a
 + 
ofs
, 
txn
, 
Àn
);

2546 
ofs
 +
Àn
;

2548 i‡(!
hash
)

2550 *
txn_bö
;

2551 
txn_Àn
;

2553 
txn_Àn
 = 
Àn
 / 2;

2554 
txn_bö
 = 
	`cgmÆloc
(
txn_Àn
);

2555 
	`hex2bö
(
txn_bö
, 
txn
, 
txn_Àn
);

2558 
	`gí_hash
(
txn_bö
, 
hashbö
 + 32 + 32 * 
i
, 
txn_Àn
);

2562 i‡(!
	`hex2bö
(
bösw≠
, 
hash
, 32))

2564 
	`≠∂og
(
LOG_ERR
, "FailedÅo hex2bin hash in gbt_merkle_bins");

2567 
	`swab256
(
hashbö
 + 32 + 32 * 
i
, 
bösw≠
);

2570 i‡(
böÀ·
 > 1)

2574 i‡(
böÀ·
 == 1)

2578 
	`cg_mem˝y
(
poﬁ
->
mîkÀbö
 + (poﬁ->
mîkÀs
 * 32), 
hashbö
 + 32, 32);

2579 
poﬁ
->
mîkÀs
++;

2580 i‡(
böÀ·
 % 2)

2582 
	`cg_mem˝y
(
hashbö
 + 
böÀn
, hashbin + binlen - 32, 32);

2583 
böÀn
 += 32;

2584 
böÀ·
++;

2587 
i
 = 32, 
j
 = 64; j < 
böÀn
; i += 32, j += 64)

2589 
	`gí_hash
(
hashbö
 + 
j
, hashbö + 
i
, 64);

2592 
böÀ·
 /= 2;

2593 
böÀn
 = 
böÀ·
 * 32;

2597 i‡(
›t_debug
)

2599 
hashhex
[68];

2601 
i
 = 0; i < 
poﬁ
->
mîkÀs
; i++)

2603 
	`__bö2hex
(
hashhex
, 
poﬁ
->
mîkÀbö
 + 
i
 * 32, 32);

2604 
	`≠∂og
(
LOG_DEBUG
, "MH%d %s",
i
, 
hashhex
);

2607 
	`≠∂og
(
LOG_INFO
, "St‹ed %dÅønß˘i⁄†‰omÖoﬁ %d", 
poﬁ
->
å™ß˘i⁄s
,

2608 
poﬁ
->
poﬁ_no
);

2609 
	}
}

2611 
diff_‰om_èrgë
(*
èrgë
);

2613 c⁄° 
	gs¸ùtsig_hódî
[] = "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff";

2614 
	gs¸ùtsig_hódî_bö
[41];

2616 
boﬁ
 
	$gbt_sﬁo_decode
(
poﬁ
 *poﬁ, 
js⁄_t
 *
ªs_vÆ
)

2618 
js⁄_t
 *
å™ß˘i⁄_¨r
, *
coöba£_aux
;

2619 c⁄° *
¥eviousblockhash
;

2620 
hash_sw≠
[32];

2621 
timevÆ
 
now
;

2622 c⁄° *
èrgë
;

2623 
uöt64_t
 
coöba£vÆue
;

2624 c⁄° *
Êags
;

2625 c⁄° *
bôs
;

2626 
hódî
[228];

2627 
ofs
 = 0, 
Àn
;

2628 
uöt64_t
 *
u64
;

2629 
uöt32_t
 *
u32
;

2630 
vîsi⁄
;

2631 
cuπime
;

2632 
height
;

2634 
¥eviousblockhash
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "previousblockhash"));

2635 
èrgë
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "target"));

2636 
å™ß˘i⁄_¨r
 = 
	`js⁄_obje˘_gë
(
ªs_vÆ
, "transactions");

2637 
vîsi⁄
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "version"));

2638 
cuπime
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "curtime"));

2639 
bôs
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "bits"));

2640 
height
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "height"));

2641 
coöba£vÆue
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
ªs_vÆ
, "coinbasevalue"));

2642 
coöba£_aux
 = 
	`js⁄_obje˘_gë
(
ªs_vÆ
, "coinbaseaux");

2643 
Êags
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
coöba£_aux
, "flags"));

2645 i‡(!
¥eviousblockhash
 || !
èrgë
 || !
vîsi⁄
 || !
cuπime
 || !
bôs
 || !
coöba£_aux
 || !
Êags
)

2647 
	`≠∂og
(
LOG_ERR
, "Poﬁ %d JSON faûedÅÿdecodêGBT", 
poﬁ
->
poﬁ_no
);

2648  
Ál£
;

2651 
	`≠∂og
(
LOG_DEBUG
, "¥eviousblockhash: %s", 
¥eviousblockhash
);

2652 
	`≠∂og
(
LOG_DEBUG
, "èrgë: %s", 
èrgë
);

2653 
	`≠∂og
(
LOG_DEBUG
, "vîsi⁄: %d", 
vîsi⁄
);

2654 
	`≠∂og
(
LOG_DEBUG
, "cuπime: %d", 
cuπime
);

2655 
	`≠∂og
(
LOG_DEBUG
, "bôs: %s", 
bôs
);

2656 
	`≠∂og
(
LOG_DEBUG
, "height: %d", 
height
);

2657 
	`≠∂og
(
LOG_DEBUG
, "Êags: %s", 
Êags
);

2659 
	`cg_wlock
(&
poﬁ
->
gbt_lock
);

2660 
	`hex2bö
(
hash_sw≠
, 
¥eviousblockhash
, 32);

2661 
	`sw≠256
(
poﬁ
->
¥eviousblockhash
, 
hash_sw≠
);

2662 
	`__bö2hex
(
poﬁ
->
¥ev_hash
,Öoﬁ->
¥eviousblockhash
, 32);

2664 
	`hex2bö
(
hash_sw≠
, 
èrgë
, 32);

2665 
	`swab256
(
poﬁ
->
gbt_èrgë
, 
hash_sw≠
);

2666 
poﬁ
->
sdiff
 = 
	`diff_‰om_èrgë
’oﬁ->
gbt_èrgë
);

2668 
poﬁ
->
gbt_vîsi⁄
 = 
	`htobe32
(
vîsi⁄
);

2669 
poﬁ
->
cuπime
 = 
	`htobe32
(curtime);

2670 
	`¢¥ötf
(
poﬁ
->
¡ime
, 9, "%08x", 
cuπime
);

2671 
	`¢¥ötf
(
poﬁ
->
bbvîsi⁄
, 9, "%08x", 
vîsi⁄
);

2672 
	`¢¥ötf
(
poﬁ
->
nbô
, 9, "%s", 
bôs
);

2673 
poﬁ
->
nVÆue
 = 
coöba£vÆue
;

2674 
	`hex2bö
((*)&
poﬁ
->
gbt_bôs
, 
bôs
, 4);

2675 
	`gbt_mîkÀ_bös
(
poﬁ
, 
å™ß˘i⁄_¨r
);

2676 i‡(
poﬁ
->
å™ß˘i⁄s
 < 3)

2677 
poﬁ
->
bad_w‹k
++;

2678 
poﬁ
->
height
 = height;

2680 
	`mem£t
(
poﬁ
->
s¸ùtsig_ba£
, 0, 42);

2681 
ofs
++;

2684 
ofs
 +
	`£r_numbî
(
poﬁ
->
s¸ùtsig_ba£
 + ofs, 
height
);

2687 
Àn
 = 
	`°æí
(
Êags
) / 2;

2688 
poﬁ
->
s¸ùtsig_ba£
[
ofs
++] = 
Àn
;

2689 
	`hex2bö
(
poﬁ
->
s¸ùtsig_ba£
 + 
ofs
, 
Êags
, 
Àn
);

2690 
ofs
 +
Àn
;

2693 
	`cgtime
(&
now
);

2694 
poﬁ
->
s¸ùtsig_ba£
[
ofs
++] = 0xfe;

2695 
u32
 = (
uöt32_t
 *)&
poﬁ
->
s¸ùtsig_ba£
[
ofs
];

2696 *
u32
 = 
	`htﬁe32
(
now
.
tv_£c
);

2697 
ofs
 += 4;

2698 
poﬁ
->
s¸ùtsig_ba£
[
ofs
++] = 0xfe;

2699 
u32
 = (
uöt32_t
 *)&
poﬁ
->
s¸ùtsig_ba£
[
ofs
];

2700 *
u32
 = 
	`htﬁe32
(
now
.
tv_u£c
);

2701 
ofs
 += 4;

2703 
	`cg_mem˝y
(
poﬁ
->
s¸ùtsig_ba£
 + 
ofs
, "\x09\x63\x67\x6d\x69\x6e\x65\x72\x34\x32", 10);

2704 
ofs
 += 10;

2707 
poﬁ
->
s¸ùtsig_ba£
[
ofs
++] = 8;

2708 
poﬁ
->
n⁄˚2_off£t
 = 41 + 
ofs
;

2709 
ofs
 += 8;

2711 i‡(
›t_btc_sig
)

2713 
Àn
 = 
	`°æí
(
›t_btc_sig
);

2714 i‡(
Àn
 > 32)

2715 
Àn
 = 32;

2716 
poﬁ
->
s¸ùtsig_ba£
[
ofs
++] = 
Àn
;

2717 
	`cg_mem˝y
(
poﬁ
->
s¸ùtsig_ba£
 + 
ofs
, 
›t_btc_sig
, 
Àn
);

2718 
ofs
 +
Àn
;

2721 
poﬁ
->
s¸ùtsig_ba£
[0] = 
ofs
++;

2722 
poﬁ
->
n1_Àn
 = 
ofs
;

2724 
Àn
 = 41

2725 + 
ofs


2731 
	`‰ì
(
poﬁ
->
coöba£
);

2732 
poﬁ
->
coöba£
 = 
	`cgˇŒoc
(
Àn
, 1);

2733 
	`cg_mem˝y
(
poﬁ
->
coöba£
 + 41,Öoﬁ->
s¸ùtsig_ba£
, 
ofs
);

2734 
	`cg_mem˝y
(
poﬁ
->
coöba£
 + 41 + 
ofs
, "\xff\xff\xff\xff", 4);

2735 
poﬁ
->
coöba£
[41 + 
ofs
 + 4] = 1;

2736 
u64
 = (
uöt64_t
 *)&(
poﬁ
->
coöba£
[41 + 
ofs
 + 4 + 1]);

2737 *
u64
 = 
	`htﬁe64
(
coöba£vÆue
);

2739 
poﬁ
->
n⁄˚2
 = 0;

2740 
poﬁ
->
n2size
 = 4;

2741 
poﬁ
->
coöba£_Àn
 = 41 + 
ofs
 + 4 + 1 + 8 + 1 + 25 + 4;

2742 
	`cg_wu∆ock
(&
poﬁ
->
gbt_lock
);

2744 
	`¢¥ötf
(
hódî
, 225, "%s%s%s%s%s%s%s",

2745 
poﬁ
->
bbvîsi⁄
,

2746 
poﬁ
->
¥ev_hash
,

2748 
poﬁ
->
¡ime
,

2749 
poﬁ
->
nbô
,

2751 
w‹k∑ddög
);

2752 i‡(
	`u∆ikñy
(!
	`hex2bö
(
poﬁ
->
hódî_bö
, 
hódî
, 112)))

2753 
	`quô
(1, "FailedÅo hex2bin header in gbt_solo_decode");

2755  
åue
;

2756 
	}
}

2758 
boﬁ
 
	$w‹k_decode
(
poﬁ
 *poﬁ, 
w‹k
 *w‹k, 
js⁄_t
 *
vÆ
)

2760 
js⁄_t
 *
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

2761 
boﬁ
 
ªt
 = 
Ál£
;

2763 
	`cgtime
(&
poﬁ
->
tv_œ°w‹k
);

2764 i‡(!
ªs_vÆ
 || 
	`js⁄_is_nuŒ
(res_val))

2766 
	`≠∂og
(
LOG_ERR
, "JSON FailedÅo decodeÑesult");

2767 
out
;

2770 i‡(
poﬁ
->
gbt_sﬁo
)

2772 i‡(
	`u∆ikñy
(!
	`gbt_sﬁo_decode
(
poﬁ
, 
ªs_vÆ
)))

2773 
out
;

2774 
out_åue
;

2776 i‡(
	`u∆ikñy
(!
	`gbt_decode
(
poﬁ
, 
ªs_vÆ
)))

2777 
out
;

2778 
w‹k
->
gbt
 = 
åue
;

2779 
	`mem£t
(
w‹k
->
hash
, 0, (work->hash));

2781 
	`cgtime
(&
w‹k
->
tv_°aged
);

2783 
out_åue
:

2785 
ªt
 = 
åue
;

2787 
out
:

2788  
ªt
;

2789 
	}
}

2793 
	#poﬁ_loˇlgí
(
poﬁ
Ë(
åue
)

	)

2794 
	#js⁄_Ωc_ˇŒ
(
cuæ
, 
uæ
, 
u£Ωass
, 
Ωc_ªq
, 
¥obe
, 
l⁄gpﬁl
, 
rﬁ…ime
, 
poﬁ
, 
sh¨e
Ë(
NULL
)

	)

2795 
	#w‹k_decode
(
poﬁ
, 
w‹k
, 
vÆ
Ë(
Ál£
)

	)

2796 
	#gí_gbt_w‹k
(
poﬁ
, 
w‹k
Ë{}

	)

2799 
	$dev_‰om_id
(
thr_id
)

2801 
cgpu_öfo
 *
cgpu
 = 
	`gë_thr_cgpu
(
thr_id
);

2803  
cgpu
->
devi˚_id
;

2804 
	}
}

2807 
	$deˇy_time
(*
f
, 
Ádd
, 
f£cs
, 
öãrvÆ
)

2809 
·ŸÆ
, 
Âr›
;

2811 i‡(
f£cs
 <= 0)

2816 
Âr›
 = 1.0 - 1 / (
	`exp
(
f£cs
 / 
öãrvÆ
));

2817 
·ŸÆ
 = 1.0 + 
Âr›
;

2818 *
f
 +(
Ádd
 / 
f£cs
 * 
Âr›
);

2819 *
f
 /
·ŸÆ
;

2820 
	}
}

2823 
	$__tŸÆ_°aged
()

2825  
	`HASH_COUNT
(
°aged_w‹k
);

2826 
	}
}

2829 
	$tŸÆ_°aged
()

2831 
ªt
;

2833 
	`muãx_lock
(
°gd_lock
);

2834 
ªt
 = 
	`__tŸÆ_°aged
();

2835 
	`muãx_u∆ock
(
°gd_lock
);

2837  
ªt
;

2838 
	}
}

2840 #ifde‡
HAVE_CURSES


2841 
WINDOW
 *
	gmaöwö
, *
	g°©uswö
, *
	glogwö
;

2844 
	gtŸÆ_£cs
 = 1.0;

2845 
	g√w_tŸÆ_£cs
 = 1.0;

2846 
	gœ°_tŸÆ_£cs
 = 1.0;

2848 
	g°©u¶öe
[256];

2850 
	gdevcurs‹
, 
	glog°¨t
, 
	glogcurs‹
;

2851 #ifde‡
HAVE_CURSES


2853 
	g°©usy
;

2856 #ifde‡
HAVE_CURSES


2857 
ölöe
 
	$u∆ock_cur£s
()

2859 
	`muãx_u∆ock
(&
c⁄sﬁe_lock
);

2860 
	}
}

2862 
ölöe
 
	$lock_cur£s
()

2864 
	`muãx_lock
(&
c⁄sﬁe_lock
);

2865 
	}
}

2867 
boﬁ
 
	$cur£s_a˘ive_locked
()

2869 
boﬁ
 
ªt
;

2871 
	`lock_cur£s
();

2872 
ªt
 = 
cur£s_a˘ive
;

2873 i‡(!
ªt
)

2874 
	`u∆ock_cur£s
();

2875  
ªt
;

2876 
	}
}

2881 
	$suffix_°rög
(
uöt64_t
 
vÆ
, *
buf
, 
size_t
 
bufsiz
, 
sigdigôs
)

2883 
dvÆ
;

2884 c⁄° 
dkûo
 = 1000.0;

2885 c⁄° 
uöt64_t
 
kûo
 = 1000ull;

2886 c⁄° 
uöt64_t
 
mega
 = 1000000ull;

2887 c⁄° 
uöt64_t
 
giga
 = 1000000000ull;

2888 c⁄° 
uöt64_t
 
ãø
 = 1000000000000ull;

2889 c⁄° 
uöt64_t
 
≥è
 = 1000000000000000ull;

2890 c⁄° 
uöt64_t
 
exa
 = 1000000000000000000ull;

2892 
suffix
[2] = "";

2893 
boﬁ
 
decimÆ
 = 
åue
;

2897 i‡(
vÆ
 >
exa
)

2899 
vÆ
 /
≥è
;

2900 
dvÆ
 = ()(
vÆ
 / 
dkûo
);

2901 
	`°r˝y
(
suffix
, "E");

2903 i‡(
vÆ
 >
≥è
)

2905 
vÆ
 /
ãø
;

2906 
dvÆ
 = ()(
vÆ
 / 
dkûo
);

2907 
	`°r˝y
(
suffix
, "P");

2909 i‡(
vÆ
 >
ãø
)

2911 
vÆ
 /
giga
;

2912 
dvÆ
 = ()(
vÆ
 / 
dkûo
);

2913 
	`°r˝y
(
suffix
, "T");

2915 i‡(
vÆ
 >
giga
)

2917 
vÆ
 /
mega
;

2918 
dvÆ
 = ()(
vÆ
 / 
dkûo
);

2919 
	`°r˝y
(
suffix
, "G");

2921 i‡(
vÆ
 >
mega
)

2923 
vÆ
 /
kûo
;

2924 
dvÆ
 = ()(
vÆ
 / 
dkûo
);

2925 
	`°r˝y
(
suffix
, "M");

2927 i‡(
vÆ
 >
kûo
)

2929 
dvÆ
 = ()(
vÆ
 / 
dkûo
);

2930 
	`°r˝y
(
suffix
, "K");

2934 
dvÆ
 = 
vÆ
;

2935 
decimÆ
 = 
Ál£
;

2938 i‡(!
sigdigôs
)

2940 i‡(
decimÆ
)

2942 
	`¢¥ötf
(
buf
, 
bufsiz
, "%.3g%s", 
dvÆ
, 
suffix
);

2946 
	`¢¥ötf
(
buf
, 
bufsiz
, "%d%s", ()
dvÆ
, 
suffix
);

2953 
ndigôs
 = 
sigdigôs
 - 1 - (
dvÆ
 > 0.0 ? 
	`Êo‹
(
	`log10
(dval)) : 0);

2954 
	`¢¥ötf
(
buf
, 
bufsiz
, "%*.*f%s", 
sigdigôs
 + 1, 
ndigôs
, 
dvÆ
, 
suffix
);

2957 
	}
}

2959 
	$cgpu_ru¡ime
(
cgpu_öfo
 *
cgpu
)

2961 
timevÆ
 
now
;

2962 
dev_ru¡ime
;

2964 i‡(
cgpu
->
dev_°¨t_tv
.
tv_£c
 == 0)

2966 
dev_ru¡ime
 = 
tŸÆ_£cs
;

2970 
	`cgtime
(&
now
);

2971 
dev_ru¡ime
 = 
	`tdiff
(&
now
, &(
cgpu
->
dev_°¨t_tv
));

2974 i‡(
dev_ru¡ime
 < 1.0)

2976 
dev_ru¡ime
 = 1.0;

2978  
dev_ru¡ime
;

2979 
	}
}

2982 
	$tsö˚_ª°¨t
()

2984 
timevÆ
 
now
;

2986 
	`cgtime
(&
now
);

2987  
	`tdiff
(&
now
, &
ª°¨t_tv_°¨t
);

2988 
	}
}

2991 
	$tsö˚_upd©e
()

2993 
timevÆ
 
now
;

2995 
	`cgtime
(&
now
);

2996  
	`tdiff
(&
now
, &
upd©e_tv_°¨t
);

2997 
	}
}

3000 
	$gë_°©löe
(*
buf
, 
size_t
 
bufsiz
, 
cgpu_öfo
 *
cgpu
)

3002 
di•œyed_hashes
[16], 
di•œyed_rﬁlög
[16];

3003 
dev_ru¡ime
, 
wu
;

3004 
uöt64_t
 
dh64
, 
dr64
;

3006 
dev_ru¡ime
 = 
	`cgpu_ru¡ime
(
cgpu
);

3008 
wu
 = ((
cgpu
->
diff1
 / 
dev_ru¡ime
) * 60.0);

3010 
dh64
 = 
cgpu
->
tŸÆ_mhashes
 / 
dev_ru¡ime
 * 1000000ull;

3011 
dr64
 = 
cgpu
->
rﬁlög
 * 1000000ull;

3012 
	`suffix_°rög
(
dh64
, 
di•œyed_hashes
, (displayed_hashes), 4);

3013 
	`suffix_°rög
(
dr64
, 
di•œyed_rﬁlög
, (displayed_rolling), 4);

3015 
	`¢¥ötf
(
buf
, 
bufsiz
, "%s%d ", 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

3016 
cgpu
->
drv
->
	`gë_°©löe_bef‹e
(
buf
, 
bufsiz
, cgpu);

3018 
	`èû•rötf
(
buf
,

3019 
bufsiz
,

3021 
›t_log_öãrvÆ
,

3022 
di•œyed_rﬁlög
,

3023 
di•œyed_hashes
,

3024 
cgpu
->
diff_ac˚±ed
,

3025 
cgpu
->
diff_ªje˘ed
,

3026 
cgpu
->
hw_îr‹s
,

3027 
wu
);

3029 
cgpu
->
drv
->
	`gë_°©löe
(
buf
, 
bufsiz
, cgpu);

3030 
	}
}

3033 
boﬁ
 
	$sh¨ed_°øãgy
()

3035  (
poﬁ_°øãgy
 =
POOL_LOADBALANCE
 ||Öoﬁ_°øãgy =
POOL_BALANCE
);

3036 
	}
}

3038 #ifde‡
HAVE_CURSES


3039 
	#CURBUFSIZ
 256

	)

3040 
	#cg_mvw¥ötw
(
wö
, 
y
, 
x
, 
fmt
, ...) do { \

3041 
tmp42
[
CURBUFSIZ
]; \

3042 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

3043 
	`mvw¥ötw
(
wö
, 
y
, 
x
, "%s", 
tmp42
); \

3044 } 0)

	)

3045 
	#cg_w¥ötw
(
wö
, 
fmt
, ...) do { \

3046 
tmp42
[
CURBUFSIZ
]; \

3047 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

3048 
	`w¥ötw
(
wö
, "%s", 
tmp42
); \

3049 } 0)

	)

3052 
	$cur£s_¥öt_°©us
()

3054 
poﬁ
 *poﬁ = 
	`cuºít_poﬁ
();

3055 
löewidth
 = 
›t_wides¸ìn
 ? 100 : 80;

3057 
	`w©å⁄
(
°©uswö
, 
A_BOLD
);

3058 
	`cg_mvw¥ötw
(
°©uswö
, 0, 0, " " 
PACKAGE
 " vîsi⁄ " 
VERSION
 " - Sèπed: %s", 
d©e°amp
);

3059 
	`w©åoff
(
°©uswö
, 
A_BOLD
);

3060 
	`mvwhlöe
(
°©uswö
, 1, 0, '-', 
löewidth
);

3061 
	`cg_mvw¥ötw
(
°©uswö
, 2, 0, " %s", 
°©u¶öe
);

3062 
	`w˛π€ﬁ
(
°©uswö
);

3063 i‡(
›t_wides¸ìn
)

3065 
	`cg_mvw¥ötw
(
°©uswö
, 3, 0, " A:%.0‡ R:%.0‡ HW:%d WU:%.1f/m | ST: %d SS: %"
PRId64
" NB: %d LW: %d GF: %d RF: %d",

3066 
tŸÆ_diff_ac˚±ed
, 
tŸÆ_diff_ªje˘ed
, 
hw_îr‹s
,

3067 
tŸÆ_diff1
 / 
tŸÆ_£cs
 * 60,

3068 
	`tŸÆ_°aged
(), 
tŸÆ_°Æe
, 
√w_blocks
, 
loˇl_w‹k
, 
tŸÆ_go
, 
tŸÆ_ro
);

3070 i‡(
Æt_°©us
)

3072 
	`cg_mvw¥ötw
(
°©uswö
, 3, 0, " ST: %d SS: %"
PRId64
" NB: %d LW: %d GF: %d RF: %d",

3073 
	`tŸÆ_°aged
(), 
tŸÆ_°Æe
, 
√w_blocks
, 
loˇl_w‹k
, 
tŸÆ_go
, 
tŸÆ_ro
);

3077 
	`cg_mvw¥ötw
(
°©uswö
, 3, 0, " A:%.0f R:%.0f HW:%d WU:%.1f/m",

3078 
tŸÆ_diff_ac˚±ed
, 
tŸÆ_diff_ªje˘ed
, 
hw_îr‹s
,

3079 
tŸÆ_diff1
 / 
tŸÆ_£cs
 * 60);

3081 
	`w˛π€ﬁ
(
°©uswö
);

3082 i‡(
	`sh¨ed_°øãgy
(Ë&& 
tŸÆ_poﬁs
 > 1)

3084 
	`cg_mvw¥ötw
(
°©uswö
, 4, 0, " ConnectedÅo multipleÖools with%s block changeÇotify",

3085 
have_l⁄gpﬁl
 ? "": "out");

3087 i‡(
poﬁ
->
has_°øtum
)

3089 
	`cg_mvw¥ötw
(
°©uswö
, 4, 0, " ConnectedÅo %s diff %s with stratumás user %s",

3090 
poﬁ
->
sockaddr_uæ
,Öoﬁ->
diff
,Öoﬁ->
Ωc_u£r
);

3094 
	`cg_mvw¥ötw
(
°©uswö
, 4, 0, " ConnectedÅo %s diff %s with%s %sás user %s",

3095 
poﬁ
->
sockaddr_uæ
,Öoﬁ->
diff
, 
have_l⁄gpﬁl
 ? "": "out",

3096 
poﬁ
->
has_gbt
 ? "GBT" : "LP",Öoﬁ->
Ωc_u£r
);

3098 
	`w˛π€ﬁ
(
°©uswö
);

3099 
	`cg_mvw¥ötw
(
°©uswö
, 5, 0, " Block: %s... Diff:%s Started: %s Best share: %s ",

3100 
¥ev_block
, 
block_diff
, 
blocktime
, 
be°_sh¨e
);

3101 
	`mvwhlöe
(
°©uswö
, 6, 0, '-', 
löewidth
);

3102 
	`mvwhlöe
(
°©uswö
, 
°©usy
 - 1, 0, '-', 
löewidth
);

3103 #ifde‡
USE_USBUTILS


3104 
	`cg_mvw¥ötw
(
°©uswö
, 
devcurs‹
 - 1, 1, "[U]SB management [P]ool management [S]ettings [D]isplay options [Q]uit");

3106 
	`cg_mvw¥ötw
(
°©uswö
, 
devcurs‹
 - 1, 1, "[P]ool management [S]ettings [D]isplay options [Q]uit");

3108 
	}
}

3110 
	$adj_width
(
v¨
, *
Àngth
)

3112 i‡(()(
	`log10
(
v¨
Ë+ 1Ë> *
Àngth
)

3113 (*
Àngth
)++;

3114 
	}
}

3116 
	$adj_fwidth
(
v¨
, *
Àngth
)

3118 i‡(()(
	`log10
(
v¨
Ë+ 1Ë> *
Àngth
)

3119 (*
Àngth
)++;

3120 
	}
}

3122 
	#STATBEFORELEN
 23

	)

3123 c⁄° 
	gbœnks
[] = " ";

3125 
	$cur£s_¥öt_dev°©us
(
cgpu_öfo
 *
cgpu
, 
devno
, 
cou¡
)

3127 
devno_width
 = 1, 
dawidth
 = 1, 
drwidth
 = 1, 
hwwidth
 = 1, 
wuwidth
 = 1;

3128 
loglöe
[256], 
unique_id
[12];

3129 
timevÆ
 
now
;

3130 
dev_ru¡ime
, 
wu
;

3131 
dev°©Àn
;

3133 i‡(
›t_com∑˘
)

3136 i‡(
devcurs‹
 + 
cou¡
 > 
LINES
 - 2)

3139 i‡(
cou¡
 >
mo°_devi˚s
)

3142 i‡(
cgpu
->
dev_°¨t_tv
.
tv_£c
 == 0)

3143 
dev_ru¡ime
 = 
tŸÆ_£cs
;

3146 
	`cgtime
(&
now
);

3147 
dev_ru¡ime
 = 
	`tdiff
(&
now
, &(
cgpu
->
dev_°¨t_tv
));

3150 i‡(
dev_ru¡ime
 < 1.0)

3151 
dev_ru¡ime
 = 1.0;

3153 
cgpu
->
utûôy
 = cgpu->
ac˚±ed
 / 
dev_ru¡ime
 * 60;

3154 
wu
 = 
cgpu
->
diff1
 / 
dev_ru¡ime
 * 60;

3156 
	`wmove
(
°©uswö
,
devcurs‹
 + 
cou¡
, 0);

3157 
	`adj_width
(
devno
, &
devno_width
);

3158 i‡(
cgpu
->
unique_id
)

3160 
unique_id
[8] = '\0';

3161 
	`cg_mem˝y
(
unique_id
, 
bœnks
, 8);

3162 
	`°∫˝y
(
unique_id
, 
cgpu
->unique_id, 8);

3165 
	`•rötf
(
unique_id
, "%-8d", 
cgpu
->
devi˚_id
);

3166 
	`cg_w¥ötw
(
°©uswö
, " %*d: %†%-8s: ", 
devno_width
, 
devno
, 
cgpu
->
drv
->
«me
,

3167 
unique_id
);

3168 
loglöe
[0] = '\0';

3169 
cgpu
->
drv
->
	`gë_°©löe_bef‹e
(
loglöe
, (logline), cgpu);

3170 
dev°©Àn
 = 
	`°æí
(
loglöe
);

3171 i‡(
dev°©Àn
 < 
STATBEFORELEN
)

3172 
	`°∫ˇt
(
loglöe
, 
bœnks
, 
STATBEFORELEN
 - 
dev°©Àn
);

3173 
	`cg_w¥ötw
(
°©uswö
, "%†| ", 
loglöe
);

3176 #ifde‡
USE_USBUTILS


3177 i‡(
cgpu
->
usböfo
.
nodev
)

3178 
	`cg_w¥ötw
(
°©uswö
, "ZOMBIE");

3181 i‡(
cgpu
->
°©us
 =
LIFE_DEAD
)

3182 
	`cg_w¥ötw
(
°©uswö
, "DEAD ");

3183 i‡(
cgpu
->
°©us
 =
LIFE_SICK
)

3184 
	`cg_w¥ötw
(
°©uswö
, "SICK ");

3185 i‡(
cgpu
->
deví
 =
DEV_DISABLED
)

3186 
	`cg_w¥ötw
(
°©uswö
, "OFF ");

3187 i‡(
cgpu
->
deví
 =
DEV_RECOVER
)

3188 
	`cg_w¥ötw
(
°©uswö
, "REST ");

3189 i‡(
›t_wides¸ìn
)

3191 
di•œyed_hashes
[16], 
di•œyed_rﬁlög
[16];

3192 
uöt64_t
 
d64
;

3194 
d64
 = 
cgpu
->
tŸÆ_mhashes
 / 
dev_ru¡ime
 * 1000000ull;

3195 
	`suffix_°rög
(
d64
, 
di•œyed_hashes
, (displayed_hashes), 4);

3196 
d64
 = 
cgpu
->
rﬁlög
 * 1000000ull;

3197 
	`suffix_°rög
(
d64
, 
di•œyed_rﬁlög
, (displayed_rolling), 4);

3198 
	`adj_width
(
wu
, &
wuwidth
);

3199 
	`adj_fwidth
(
cgpu
->
diff_ac˚±ed
, &
dawidth
);

3200 
	`adj_fwidth
(
cgpu
->
diff_ªje˘ed
, &
drwidth
);

3201 
	`adj_width
(
cgpu
->
hw_îr‹s
, &
hwwidth
);

3202 
	`cg_w¥ötw
(
°©uswö
, "%6s / %6sh/s WU:%*.1f/m "

3204 
di•œyed_rﬁlög
,

3205 
di•œyed_hashes
, 
wuwidth
 + 2, 
wu
,

3206 
dawidth
, 
cgpu
->
diff_ac˚±ed
,

3207 
drwidth
, 
cgpu
->
diff_ªje˘ed
,

3208 
hwwidth
, 
cgpu
->
hw_îr‹s
);

3210 i‡(!
Æt_°©us
)

3212 
di•œyed_hashes
[16], 
di•œyed_rﬁlög
[16];

3213 
uöt64_t
 
d64
;

3215 
d64
 = 
cgpu
->
tŸÆ_mhashes
 / 
dev_ru¡ime
 * 1000000ull;

3216 
	`suffix_°rög
(
d64
, 
di•œyed_hashes
, (displayed_hashes), 4);

3217 
d64
 = 
cgpu
->
rﬁlög
 * 1000000ull;

3218 
	`suffix_°rög
(
d64
, 
di•œyed_rﬁlög
, (displayed_rolling), 4);

3219 
	`adj_width
(
wu
, &
wuwidth
);

3220 
	`cg_w¥ötw
(
°©uswö
, "%6†/ %6sh/†WU:%*.1f/m", 
di•œyed_rﬁlög
,

3221 
di•œyed_hashes
, 
wuwidth
 + 2, 
wu
);

3225 
	`adj_fwidth
(
cgpu
->
diff_ac˚±ed
, &
dawidth
);

3226 
	`adj_fwidth
(
cgpu
->
diff_ªje˘ed
, &
drwidth
);

3227 
	`adj_width
(
cgpu
->
hw_îr‹s
, &
hwwidth
);

3229 
	`cg_w¥ötw
(
°©uswö
,

3231 
dawidth
, 
cgpu
->
diff_ac˚±ed
,

3232 
drwidth
, 
cgpu
->
diff_ªje˘ed
,

3233 
hwwidth
, 
cgpu
->
hw_îr‹s
);

3236 
loglöe
[0] = '\0';

3237 
cgpu
->
drv
->
	`gë_°©löe
(
loglöe
, (logline), cgpu);

3238 
	`cg_w¥ötw
(
°©uswö
, "%s", 
loglöe
);

3240 
	`w˛π€ﬁ
(
°©uswö
);

3241 
	}
}

3244 #ifde‡
HAVE_CURSES


3246 
ölöe
 
	$ch™ge_logwösize
()

3248 
x
, 
y
, 
logx
, 
logy
;

3250 
	`gëmaxyx
(
maöwö
, 
y
, 
x
);

3251 i‡(
x
 < 80 || 
y
 < 25)

3254 i‡(
y
 > 
°©usy
 + 2 && sètusy < 
log°¨t
)

3256 i‡(
y
 - 2 < 
log°¨t
)

3257 
°©usy
 = 
y
 - 2;

3259 
°©usy
 = 
log°¨t
;

3260 
logcurs‹
 = 
°©usy
 + 1;

3261 
	`mvwö
(
logwö
, 
logcurs‹
, 0);

3262 
	`wªsize
(
°©uswö
, 
°©usy
, 
x
);

3265 
y
 -
logcurs‹
;

3266 
	`gëmaxyx
(
logwö
, 
logy
, 
logx
);

3268 i‡(
x
 !
logx
 || 
y
 !
logy
)

3269 
	`wªsize
(
logwö
, 
y
, 
x
);

3270 
	}
}

3272 
	$check_wösizes
()

3274 i‡(!
u£_cur£s
)

3276 i‡(
	`cur£s_a˘ive_locked
())

3278 
y
, 
x
;

3280 
	`îa£
();

3281 
x
 = 
	`gëmaxx
(
°©uswö
);

3283 i‡(
log°¨t
 > 
LINES
 - 2)

3285 
°©usy
 = 
LINES
 - 2;

3289 
°©usy
 = 
log°¨t
;

3291 
logcurs‹
 = 
°©usy
;

3292 
	`wªsize
(
°©uswö
, 
°©usy
, 
x
);

3293 
	`gëmaxyx
(
maöwö
, 
y
, 
x
);

3294 
y
 -
logcurs‹
;

3295 
	`wªsize
(
logwö
, 
y
, 
x
);

3296 
	`mvwö
(
logwö
, 
logcurs‹
, 0);

3297 
	`u∆ock_cur£s
();

3299 
	}
}

3301 
dißbÀ_cur£s_wödows
();

3302 
íabÀ_cur£s_wödows
();

3304 
	$swôch_logsize
(
boﬁ
 
__maybe_unu£d
 
√wdevs
)

3306 i‡(
	`cur£s_a˘ive_locked
())

3308 i‡(
›t_com∑˘
)

3310 
log°¨t
 = 
devcurs‹
 + 1;

3311 
logcurs‹
 = 
log°¨t
 + 1;

3315 
log°¨t
 = 
devcurs‹
 + 
mo°_devi˚s
 + 1;

3316 
logcurs‹
 = 
log°¨t
 + 1;

3319 
	`u∆ock_cur£s
();

3320 
	`check_wösizes
();

3322 
	}
}

3325 
	$_wlog
(c⁄° *
°r
)

3327 
	`w¥ötw
(
logwö
, "%s", 
°r
);

3328 
	}
}

3332 
	$_wlog¥öt
(c⁄° *
°r
)

3334 i‡(
	`cur£s_a˘ive_locked
())

3336 
	`w¥ötw
(
logwö
, "%s", 
°r
);

3337 
	`u∆ock_cur£s
();

3339 
	}
}

3342 #ifde‡
HAVE_CURSES


3343 
boﬁ
 
	$log_cur£s_⁄ly
(
¥io
, c⁄° *
d©ëime
, c⁄° *
°r
)

3345 
boﬁ
 
high_¥io
;

3347 
high_¥io
 = (
¥io
 =
LOG_WARNING
 ||Öriÿ=
LOG_ERR
);

3349 i‡(
	`cur£s_a˘ive_locked
())

3351 i‡(!
›t_logöput
 || 
high_¥io
)

3353 
	`w¥ötw
(
logwö
, "%s%s\n", 
d©ëime
, 
°r
);

3354 i‡(
high_¥io
)

3356 
	`touchwö
(
logwö
);

3357 
	`wª‰esh
(
logwö
);

3360 
	`u∆ock_cur£s
();

3361  
åue
;

3363  
Ál£
;

3364 
	}
}

3366 
	$˛ór_logwö
()

3368 i‡(
	`cur£s_a˘ive_locked
())

3370 
	`îa£
();

3371 
	`w˛ór
(
logwö
);

3372 
	`u∆ock_cur£s
();

3374 
	}
}

3376 
	$logwö_upd©e
()

3378 i‡(
	`cur£s_a˘ive_locked
())

3380 
	`touchwö
(
logwö
);

3381 
	`wª‰esh
(
logwö
);

3382 
	`u∆ock_cur£s
();

3384 
	}
}

3387 
	$íabÀ_poﬁ
(
poﬁ
 *pool)

3389 i‡(
poﬁ
->
íabÀd
 !
POOL_ENABLED
)

3391 
íabÀd_poﬁs
++;

3392 
poﬁ
->
íabÀd
 = 
POOL_ENABLED
;

3394 
	}
}

3396 #ifde‡
HAVE_CURSES


3397 
	$dißbÀ_poﬁ
(
poﬁ
 *pool)

3399 i‡(
poﬁ
->
íabÀd
 =
POOL_ENABLED
)

3400 
íabÀd_poﬁs
--;

3401 
poﬁ
->
íabÀd
 = 
POOL_DISABLED
;

3402 
	}
}

3405 
	$ªje˘_poﬁ
(
poﬁ
 *pool)

3407 i‡(
poﬁ
->
íabÀd
 =
POOL_ENABLED
)

3409 
íabÀd_poﬁs
--;

3412 
poﬁ
->
íabÀd
 = 
POOL_REJECTING
;

3413 
	}
}

3415 
ª°¨t_thªads
();

3420 
	$sh¨e_ªsu…
(

3421 
js⁄_t
 *
vÆ
,

3422 
js⁄_t
 *
ªs
,

3423 
js⁄_t
 *
îr
,

3424 c⁄° 
w‹k
 *work,

3425 *
hashshow
,

3426 
boﬁ
 
ªsubmô
,

3427 *
w‹ktime


3430 
poﬁ
 *poﬁ = 
w‹k
->pool;

3431 
cgpu_öfo
 *
cgpu
;

3433 
cgpu
 = 
	`gë_thr_cgpu
(
w‹k
->
thr_id
);

3435 i‡(
	`js⁄_is_åue
(
ªs
)|| (
ALGO_BTM
 && 
	`js⁄_is_nuŒ
(
îr
)Ë|| (
w‹k
->
gbt
 && json_is_null(res)))

3437 
	`muãx_lock
(&
°©s_lock
);

3439 
cgpu
->
ac˚±ed
++;

3440 
tŸÆ_ac˚±ed
++;

3441 
poﬁ
->
ac˚±ed
++;

3443 
cgpu
->
diff_ac˚±ed
 +
w‹k
->
w‹k_difficu…y
;

3444 
tŸÆ_diff_ac˚±ed
 +
w‹k
->
w‹k_difficu…y
;

3445 
poﬁ
->
diff_ac˚±ed
 +
w‹k
->
w‹k_difficu…y
;

3447 
	`muãx_u∆ock
(&
°©s_lock
);

3449 
poﬁ
->
£q_ªje˘s
 = 0;

3450 
cgpu
->
œ°_sh¨e_poﬁ
 = 
poﬁ
->
poﬁ_no
;

3451 
cgpu
->
œ°_sh¨e_poﬁ_time
 = 
	`time
(
NULL
);

3452 
cgpu
->
œ°_sh¨e_diff
 = 
w‹k
->
w‹k_difficu…y
;

3453 
poﬁ
->
œ°_sh¨e_time
 = 
cgpu
->
œ°_sh¨e_poﬁ_time
;

3454 
poﬁ
->
œ°_sh¨e_diff
 = 
w‹k
->
w‹k_difficu…y
;

3456 
	`≠∂og
(
LOG_DEBUG
, "PROOF OF WORK RESULT:Årue (yay!!!)");

3458 i‡(!
QUIET
)

3460 i‡(
tŸÆ_poﬁs
 > 1)

3462 
	`≠∂og
(
LOG_DEBUG
, "Accepted %s %s %dÖool %d %s%s",

3463 
hashshow
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
, 
w‹k
->
poﬁ
->
poﬁ_no
, 
ªsubmô
 ? "‘esubmô)" : "", 
w‹ktime
);

3467 
	`≠∂og
(
LOG_DEBUG
, "Accepted %s %s %d %s%s",

3468 
hashshow
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
, 
ªsubmô
 ? "‘esubmô)" : "", 
w‹ktime
);

3471 
	`sh¨ñog
("ac˚±", 
w‹k
);

3473 i‡(
›t_sh¨es
 && 
tŸÆ_diff_ac˚±ed
 >= opt_shares)

3475 
	`≠∂og
(
LOG_WARNING
, "Suc˚ssfuŒy möed %dác˚±ed sh¨e†a†ªque°edándÉxôög.", 
›t_sh¨es
);

3476 
	`kûl_w‹k
();

3484 i‡(
	`u∆ikñy
(
poﬁ
->
íabÀd
 =
POOL_REJECTING
))

3486 
	`≠∂og
(
LOG_WARNING
, "Reje˘ögÖoﬁ %dÇowác˚±ög sh¨es,Ñe-íablög!", 
poﬁ
->
poﬁ_no
);

3487 
	`íabÀ_poﬁ
(
poﬁ
);

3488 
	`swôch_poﬁs
(
NULL
);

3493 i‡(
	`u∆ikñy
(
w‹k
->
block
))

3495 
	`ª°¨t_thªads
();

3500 
	`muãx_lock
(&
°©s_lock
);

3501 
cgpu
->
ªje˘ed
++;

3502 
tŸÆ_ªje˘ed
++;

3503 
poﬁ
->
ªje˘ed
++;

3504 
cgpu
->
diff_ªje˘ed
 +
w‹k
->
w‹k_difficu…y
;

3505 
tŸÆ_diff_ªje˘ed
 +
w‹k
->
w‹k_difficu…y
;

3506 
poﬁ
->
diff_ªje˘ed
 +
w‹k
->
w‹k_difficu…y
;

3507 
poﬁ
->
£q_ªje˘s
++;

3508 
	`muãx_u∆ock
(&
°©s_lock
);

3510 
	`≠∂og
(
LOG_DEBUG
, "PROOF OF WORK RESULT: false (booooo)");

3512 i‡(!
QUIET
)

3514 
whîe
[20];

3515 
di•osôi⁄
[36] = "reject";

3516 
ªas⁄
[32];

3518 
	`°r˝y
(
ªas⁄
, "");

3520 i‡(
tŸÆ_poﬁs
 > 1)

3522 
	`¢¥ötf
(
whîe
, (whîe), "poﬁ %d", 
w‹k
->
poﬁ
->
poﬁ_no
);

3526 
	`°r˝y
(
whîe
, "");

3529 i‡(!
w‹k
->
gbt
)

3531 
ªs
 = 
	`js⁄_obje˘_gë
(
vÆ
, "reject-reason");

3534 i‡(
ªs
)

3536 c⁄° *
ªas⁄tmp
 = 
	`js⁄_°rög_vÆue
(
ªs
);

3538 
size_t
 
ªas⁄Lí
 = 
	`°æí
(
ªas⁄tmp
);

3540 i‡(
ªas⁄Lí
 > 28)

3542 
ªas⁄Lí
 = 28;

3545 
ªas⁄
[0] = ' ';

3546 
ªas⁄
[1] = '(';

3548 
	`cg_mem˝y
(2 + 
ªas⁄
, 
ªas⁄tmp
, (
size_t
)
ªas⁄Lí
);

3550 
ªas⁄
[
ªas⁄Lí
 + 2] = ')';

3551 
ªas⁄
[
ªas⁄Lí
 + 3] = '\0';

3553 
	`cg_mem˝y
(
di•osôi⁄
 + 7, 
ªas⁄tmp
, (
size_t
)
ªas⁄Lí
);

3554 
di•osôi⁄
[6] = ':';

3555 
di•osôi⁄
[
ªas⁄Lí
 + 7] = '\0';

3557 i‡(
w‹k
->
°øtum
 && 
îr
)

3559 i‡(
	`js⁄_is_¨øy
(
îr
))

3561 
js⁄_t
 *
ªas⁄_vÆ
 = 
	`js⁄_¨øy_gë
(
îr
, 1);

3562 *
ªas⁄_°r
;

3564 i‡(
ªas⁄_vÆ
 && 
	`js⁄_is_°rög
(reason_val))

3566 
ªas⁄_°r
 = (*)
	`js⁄_°rög_vÆue
(
ªas⁄_vÆ
);

3567 
	`¢¥ötf
(
ªas⁄
, 31, " (%s)", 
ªas⁄_°r
);

3570 i‡(
	`js⁄_is_°rög
(
îr
))

3572 c⁄° *
s
 = 
	`js⁄_°rög_vÆue
(
îr
);

3573 
	`¢¥ötf
(
ªas⁄
, 31, " (%s)", 
s
);

3577 
	`≠∂og
(
LOG_DEBUG
,

3579 
hashshow
,

3580 
cgpu
->
drv
->
«me
,

3581 
cgpu
->
devi˚_id
,

3582 
whîe
,

3583 
ªas⁄
,

3584 
ªsubmô
 ? "‘esubmô)" : "", 
w‹ktime
);

3586 
	`sh¨ñog
(
di•osôi⁄
, 
w‹k
);

3595 i‡(
poﬁ
->
£q_ªje˘s
 > 10 && !
w‹k
->
°Æe
 && 
›t_dißbÀ_poﬁ
 && 
íabÀd_poﬁs
 > 1)

3597 
utûôy
 = 
tŸÆ_ac˚±ed
 / 
tŸÆ_£cs
 * 60;

3599 i‡(
poﬁ
->
£q_ªje˘s
 > 
utûôy
 * 3 && 
íabÀd_poﬁs
 > 1)

3601 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %dÑeje˘ed %d sequítü»sh¨es, dißblög!", 
poﬁ
->
poﬁ_no
,Öoﬁ->
£q_ªje˘s
);

3602 
	`ªje˘_poﬁ
(
poﬁ
);

3604 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

3606 
	`swôch_poﬁs
(
NULL
);

3609 
poﬁ
->
£q_ªje˘s
 = 0;

3613 
	}
}

3616 
	$show_hash
(
w‹k
 *w‹k, *
hashshow
)

3618 
rhash
[32];

3619 
diffdi•
[16];

3620 
h32
;

3621 
uöt32_t
 *
hash32
;

3622 
uöt64_t
 
uötdiff
;

3623 
ofs
;

3625 
	`swab256
(
rhash
, 
w‹k
->
hash
);

3627 
ofs
 = 0; ofs <= 28; ofs ++)

3629 i‡(
rhash
[
ofs
])

3635 
hash32
 = (
uöt32_t
 *)(
rhash
 + 
ofs
);

3636 
h32
 = 
	`be32toh
(*
hash32
);

3637 
uötdiff
 = 
	`round
(
w‹k
->
w‹k_difficu…y
);

3639 
	`suffix_°rög
(
w‹k
->
sh¨e_diff
, 
diffdi•
,  (diffdisp), 0);

3640 
	`¢¥ötf
(
hashshow
, 64, "%08lx Dif‡%s/%"
PRIu64
"%s", 
h32
, 
diffdi•
, 
uötdiff
,

3641 
w‹k
->
block
? " BLOCK!" : "");

3642 
	}
}

3644 #ifde‡
HAVE_LIBCURL


3645 
	$ãxt_¥öt_°©us
(
thr_id
)

3647 
cgpu_öfo
 *
cgpu
;

3648 
loglöe
[256];

3650 
cgpu
 = 
	`gë_thr_cgpu
(
thr_id
);

3651 i‡(
cgpu
)

3653 
	`gë_°©löe
(
loglöe
, ÷oglöe), 
cgpu
);

3654 
	`¥ötf
("%s\n", 
loglöe
);

3656 
	}
}

3658 
	$¥öt_°©us
(
thr_id
)

3660 i‡(!
cur£s_a˘ive
)

3661 
	`ãxt_¥öt_°©us
(
thr_id
);

3662 
	}
}

3664 
boﬁ
 
	$submô_up°ªam_w‹k
(
w‹k
 *w‹k, 
CURL
 *
cuæ
, 
boﬁ
 
ªsubmô
)

3666 
js⁄_t
 *
vÆ
, *
ªs
, *
îr
;

3667 *
s
;

3668 
boﬁ
 
rc
 = 
Ál£
;

3669 
thr_id
 = 
w‹k
->thr_id;

3670 
cgpu_öfo
 *
cgpu
 = 
	`gë_thr_cgpu
(
thr_id
);

3671 
poﬁ
 *poﬁ = 
w‹k
->pool;

3672 
rﬁ…ime
;

3673 
timevÆ
 
tv_submô
, 
tv_submô_ª∂y
;

3674 
hashshow
[64 + 4] = "";

3675 
w‹ktime
[200] = "";

3676 
timevÆ
 
now
;

3677 
dev_ru¡ime
;

3678 
gbt_block
[1024], 
v¨öt
[12];

3679 
d©a
[80];

3682 
	`Êù80
(
d©a
, 
w‹k
->data);

3683 
	`__bö2hex
(
gbt_block
, 
d©a
, 80);

3685 i‡(
w‹k
->
gbt_txns
 < 0xfd)

3687 
uöt8_t
 
vÆ8
 = 
w‹k
->
gbt_txns
;

3689 
	`__bö2hex
(
v¨öt
, (c⁄° *)&
vÆ8
, 1);

3691 i‡(
w‹k
->
gbt_txns
 <= 0xffff)

3693 
uöt16_t
 
vÆ16
 = 
	`htﬁe16
(
w‹k
->
gbt_txns
);

3695 
	`°rˇt
(
gbt_block
, "fd");

3696 
	`__bö2hex
(
v¨öt
, (c⁄° *)&
vÆ16
, 2);

3700 
uöt32_t
 
vÆ32
 = 
	`htﬁe32
(
w‹k
->
gbt_txns
);

3702 
	`°rˇt
(
gbt_block
, "fe");

3703 
	`__bö2hex
(
v¨öt
, (c⁄° *)&
vÆ32
, 4);

3705 
	`°rˇt
(
gbt_block
, 
v¨öt
);

3706 
	`°rˇt
(
gbt_block
, 
w‹k
->
coöba£
);

3708 
s
 = 
	`cgmÆloc
(1024);

3709 
	`•rötf
(
s
, "{\"id\": 0, \"mëhod\": \"submôblock\", \"∑øms\": [\"%s", 
gbt_block
);

3711 i‡(!
poﬁ
->
has_gbt
)

3713 
	`cg_æock
(&
poﬁ
->
gbt_lock
);

3714 i‡(
poﬁ
->
txn_d©a
)

3715 
s
 = 
	`ªÆloc_°rˇt
(s, 
poﬁ
->
txn_d©a
);

3716 
	`cg_ru∆ock
(&
poﬁ
->
gbt_lock
);

3718 i‡(
w‹k
->
job_id
)

3720 
s
 = 
	`ªÆloc_°rˇt
(s, "\", {\"workid\": \"");

3721 
s
 = 
	`ªÆloc_°rˇt
(s, 
w‹k
->
job_id
);

3722 
s
 = 
	`ªÆloc_°rˇt
(s, "\"}]}");

3725 
s
 = 
	`ªÆloc_°rˇt
(s, "\"]}");

3726 
	`≠∂og
(
LOG_DEBUG
, "DBG: sídög %†submô RPC cÆl: %s", 
poﬁ
->
Ωc_uæ
, 
s
);

3727 
s
 = 
	`ªÆloc_°rˇt
(s, "\n");

3729 
	`cgtime
(&
tv_submô
);

3731 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
cuæ
, 
poﬁ
->
Ωc_uæ
,Öoﬁ->
Ωc_u£Ωass
, 
s
, 
Ál£
, fÆ£, &
rﬁ…ime
,Öoﬁ, 
åue
);

3732 
	`cgtime
(&
tv_submô_ª∂y
);

3733 
	`‰ì
(
s
);

3735 i‡(
	`u∆ikñy
(!
vÆ
))

3737 
	`≠∂og
(
LOG_INFO
, "submit_upstream_work json_rpc_call failed");

3738 i‡(!
	`poﬁ_t£t
(
poﬁ
, &poﬁ->
submô_Áû
))

3740 
tŸÆ_ro
++;

3741 
poﬁ
->
ªmŸeÁû_ocˇsi⁄s
++;

3742 i‡(
›t_lowmem
)

3744 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %d communiˇti⁄ faûuª, disˇrdög sh¨es", 
poﬁ
->
poﬁ_no
);

3745 
out
;

3747 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %d communiˇti⁄ faûuª, cachög submissi⁄s", 
poﬁ
->
poﬁ_no
);

3749 
	`cg¶ìp_ms
(3500);

3750 
out
;

3752 i‡(
	`poﬁ_t˛ór
(
poﬁ
, &poﬁ->
submô_Áû
))

3753 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %d communiˇti⁄Ñesumed, submôtög w‹k", 
poﬁ
->
poﬁ_no
);

3755 
ªs
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

3756 
îr
 = 
	`js⁄_obje˘_gë
(
vÆ
, "error");

3758 i‡(!
QUIET
)

3760 
	`show_hash
(
w‹k
, 
hashshow
);

3762 i‡(
›t_w‹ktime
)

3764 
w‹k˛⁄e
[20];

3765 
tm
 *tm, 
tm_gëw‹k
, 
tm_submô_ª∂y
;

3766 
gëw‹k_time
 = 
	`tdiff
(&(
w‹k
->
tv_gëw‹k_ª∂y
),

3767 &(
w‹k
->
tv_gëw‹k
));

3768 
gëw‹k_to_w‹k
 = 
	`tdiff
(&(
w‹k
->
tv_w‹k_°¨t
),

3769 &(
w‹k
->
tv_gëw‹k_ª∂y
));

3770 
w‹k_time
 = 
	`tdiff
(&(
w‹k
->
tv_w‹k_found
),

3771 &(
w‹k
->
tv_w‹k_°¨t
));

3772 
w‹k_to_submô
 = 
	`tdiff
(&
tv_submô
,

3773 &(
w‹k
->
tv_w‹k_found
));

3774 
submô_time
 = 
	`tdiff
(&
tv_submô_ª∂y
, &
tv_submô
);

3775 
difÂœ˚s
 = 3;

3777 
time_t
 
tmp_time
 = 
w‹k
->
tv_gëw‹k
.
tv_£c
;

3778 
tm
 = 
	`loˇ…ime
(&
tmp_time
);

3779 
	`cg_mem˝y
(&
tm_gëw‹k
, 
tm
, (tm));

3780 
tmp_time
 = 
tv_submô_ª∂y
.
tv_£c
;

3781 
tm
 = 
	`loˇ…ime
(&
tmp_time
);

3782 
	`cg_mem˝y
(&
tm_submô_ª∂y
, 
tm
, (tm));

3784 i‡(
w‹k
->
˛⁄e
)

3786 
	`¢¥ötf
(
w‹k˛⁄e
, (workclone), "C:%1.3f",

3787 
	`tdiff
(&(
w‹k
->
tv_˛⁄ed
),

3788 &(
w‹k
->
tv_gëw‹k_ª∂y
)));

3791 
	`°r˝y
(
w‹k˛⁄e
, "O");

3793 i‡(
w‹k
->
w‹k_difficu…y
 < 1)

3794 
difÂœ˚s
 = 6;

3796 
	`¢¥ötf
(
w‹ktime
, (worktime),

3798 ()
	`be32toh
(*(
uöt32_t
 *)&(
w‹k
->
d©a
[28])),

3799 ()
	`be32toh
(*(
uöt32_t
 *)&(
w‹k
->
d©a
[24])),

3800 
w‹k
->
gëw‹k_mode
, 
difÂœ˚s
, w‹k->
w‹k_difficu…y
,

3801 
tm_gëw‹k
.
tm_hour
,Åm_gëw‹k.
tm_mö
,

3802 
tm_gëw‹k
.
tm_£c
, 
gëw‹k_time
, 
w‹k˛⁄e
,

3803 
gëw‹k_to_w‹k
, 
w‹k_time
, 
w‹k_to_submô
, 
submô_time
,

3804 
tm_submô_ª∂y
.
tm_hour
,Åm_submô_ª∂y.
tm_mö
,

3805 
tm_submô_ª∂y
.
tm_£c
);

3809 
	`sh¨e_ªsu…
(
vÆ
, 
ªs
, 
îr
, 
w‹k
, 
hashshow
, 
ªsubmô
, 
w‹ktime
);

3811 i‡(
cgpu
->
dev_°¨t_tv
.
tv_£c
 == 0)

3812 
dev_ru¡ime
 = 
tŸÆ_£cs
;

3815 
	`cgtime
(&
now
);

3816 
dev_ru¡ime
 = 
	`tdiff
(&
now
, &(
cgpu
->
dev_°¨t_tv
));

3819 i‡(
dev_ru¡ime
 < 1.0)

3820 
dev_ru¡ime
 = 1.0;

3822 
cgpu
->
utûôy
 = cgpu->
ac˚±ed
 / 
dev_ru¡ime
 * 60;

3824 i‡(!
›t_ªÆquõt
)

3825 
	`¥öt_°©us
(
thr_id
);

3826 i‡(!
w™t_≥r_devi˚_°©s
)

3828 
loglöe
[256];

3830 
	`gë_°©löe
(
loglöe
, ÷oglöe), 
cgpu
);

3831 
	`≠∂og
(
LOG_INFO
, "%s", 
loglöe
);

3834 
	`js⁄_de¸ef
(
vÆ
);

3836 
rc
 = 
åue
;

3837 
out
:

3838  
rc
;

3839 
	}
}

3841 
boﬁ
 
	$gë_up°ªam_w‹k
(
w‹k
 *w‹k, 
CURL
 *
cuæ
)

3843 
poﬁ
 *poﬁ = 
w‹k
->pool;

3844 
cgmöî_poﬁ_°©s
 *
poﬁ_°©s
 = &(
poﬁ
->cgminer_pool_stats);

3845 
timevÆ
 
tv_ñ≠£d
;

3846 
js⁄_t
 *
vÆ
 = 
NULL
;

3847 
boﬁ
 
rc
 = 
Ál£
;

3848 *
uæ
;

3850 
uæ
 = 
poﬁ
->
Ωc_uæ
;

3852 
	`≠∂og
(
LOG_DEBUG
, "DBG: sídög %†gë RPC cÆl: %s", 
uæ
, 
poﬁ
->
Ωc_ªq
);

3854 
	`cgtime
(&
w‹k
->
tv_gëw‹k
);

3856 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
cuæ
, 
uæ
, 
poﬁ
->
Ωc_u£Ωass
,Öoﬁ->
Ωc_ªq
, 
Ál£
,

3857 
Ál£
, &
w‹k
->
rﬁ…ime
, 
poﬁ
, false);

3858 
poﬁ_°©s
->
gëw‹k_©ãm±s
++;

3860 i‡(
	`likñy
(
vÆ
))

3862 
rc
 = 
	`w‹k_decode
(
poﬁ
, 
w‹k
, 
vÆ
);

3863 i‡(
	`u∆ikñy
(!
rc
))

3864 
	`≠∂og
(
LOG_DEBUG
, "FailedÅo decode work in get_upstream_work");

3867 
	`≠∂og
(
LOG_DEBUG
, "Failed json_rpc_call in get_upstream_work");

3869 
	`cgtime
(&
w‹k
->
tv_gëw‹k_ª∂y
);

3870 
	`timîsub
(&(
w‹k
->
tv_gëw‹k_ª∂y
), &(w‹k->
tv_gëw‹k
), &
tv_ñ≠£d
);

3871 
poﬁ_°©s
->
gëw‹k_waô_rﬁlög
 +(()
tv_ñ≠£d
.
tv_£c
 + ((Èv_ñ≠£d.
tv_u£c
 / 1000000)) * 0.63;

3872 
poﬁ_°©s
->
gëw‹k_waô_rﬁlög
 /= 1.63;

3874 
	`timîadd
(&
tv_ñ≠£d
, &(
poﬁ_°©s
->
gëw‹k_waô
), &(pool_stats->getwork_wait));

3875 i‡(
	`timîcmp
(&
tv_ñ≠£d
, &(
poﬁ_°©s
->
gëw‹k_waô_max
), >))

3877 
poﬁ_°©s
->
gëw‹k_waô_max
.
tv_£c
 = 
tv_ñ≠£d
.tv_sec;

3878 
poﬁ_°©s
->
gëw‹k_waô_max
.
tv_u£c
 = 
tv_ñ≠£d
.tv_usec;

3880 i‡(
	`timîcmp
(&
tv_ñ≠£d
, &(
poﬁ_°©s
->
gëw‹k_waô_mö
), <))

3882 
poﬁ_°©s
->
gëw‹k_waô_mö
.
tv_£c
 = 
tv_ñ≠£d
.tv_sec;

3883 
poﬁ_°©s
->
gëw‹k_waô_mö
.
tv_u£c
 = 
tv_ñ≠£d
.tv_usec;

3885 
poﬁ_°©s
->
gëw‹k_ˇŒs
++;

3887 
w‹k
->
poﬁ
 =Öool;

3888 
w‹k
->
l⁄gpﬁl
 = 
Ál£
;

3889 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_POOL
;

3890 
	`ˇlc_diff
(
w‹k
, 0);

3891 
tŸÆ_gëw‹ks
++;

3892 
poﬁ
->
gëw‹k_ªque°ed
++;

3894 i‡(
	`likñy
(
vÆ
))

3895 
	`js⁄_de¸ef
(
vÆ
);

3897  
rc
;

3898 
	}
}

3902 
boﬁ
 
	$poﬁ_unußbÀ
(
poﬁ
 *pool)

3904 i‡(
poﬁ
->
idÀ
)

3906  
åue
;

3909 i‡(
poﬁ
->
íabÀd
 !
POOL_ENABLED
)

3911  
åue
;

3914 i‡(
poﬁ
->
has_°øtum
 && (!poﬁ->
°øtum_a˘ive
 || !poﬁ->
°øtum_nŸify
))

3916  
åue
;

3918  
Ál£
;

3919 
	}
}

3926 
poﬁ
 *
	$£À˘_bÆ™˚d
(
poﬁ
 *
˝
)

3928 
i
, 
lowe°
 = 
˝
->
sh¨es
;

3929 
poﬁ
 *
ªt
 = 
˝
;

3931 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

3933 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

3935 i‡(
	`poﬁ_unußbÀ
(
poﬁ
))

3940 i‡(
poﬁ
->
sh¨es
 < 
lowe°
)

3942 
lowe°
 = 
poﬁ
->
sh¨es
;

3943 
ªt
 = 
poﬁ
;

3947 
ªt
->
sh¨es
++;

3948  
ªt
;

3949 
	}
}

3951 
poﬁ
 *
¥i‹ôy_poﬁ
(
choi˚
);

3956 
ölöe
 
poﬁ
 *
	$£À˘_poﬁ
()

3958 
rŸ©ög_poﬁ
 = 0;

3959 
poﬁ
 *poﬁ, *
˝
;

3960 
boﬁ
 
avaû
 = 
Ál£
;

3961 
ã°ed
, 
i
;

3963 
˝
 = 
	`cuºít_poﬁ
();

3965 i‡(
poﬁ_°øãgy
 =
POOL_BALANCE
)

3967 
poﬁ
 = 
	`£À˘_bÆ™˚d
(
˝
);

3968 
out
;

3971 i‡(
poﬁ_°øãgy
 !
POOL_LOADBALANCE
)

3973 
poﬁ
 = 
˝
;

3974 
out
;

3978 
poﬁ
 = 
NULL
;

3981 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

3983 
poﬁ
 *
ç
 = 
poﬁs
[
i
];

3985 i‡(
ç
->
quŸa_u£d
 <Åp->
quŸa_gcd
)

3987 
avaû
 = 
åue
;

3993 i‡(!
avaû
)

3995 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

3997 
poﬁs
[
i
]->
quŸa_u£d
 = 0;

4000 i‡(++
rŸ©ög_poﬁ
 >
tŸÆ_poﬁs
)

4002 
rŸ©ög_poﬁ
 = 0;

4007 
ã°ed
 = 0;

4009 !
poﬁ
 && 
ã°ed
++ < 
tŸÆ_poﬁs
)

4011 
poﬁ
 = 
poﬁs
[
rŸ©ög_poﬁ
];

4013 i‡(
poﬁ
->
quŸa_u£d
++ <Öoﬁ->
quŸa_gcd
)

4015 i‡(!
	`poﬁ_unußbÀ
(
poﬁ
))

4021 
poﬁ
 = 
NULL
;

4023 i‡(++
rŸ©ög_poﬁ
 >
tŸÆ_poﬁs
)

4025 
rŸ©ög_poﬁ
 = 0;

4031 i‡(!
poﬁ
)

4033 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

4035 
poﬁ
 *
ç
 = 
	`¥i‹ôy_poﬁ
(
i
);

4037 i‡(!
	`poﬁ_unußbÀ
(
ç
))

4039 
poﬁ
 = 
ç
;

4046 i‡(!
poﬁ
)

4048 
poﬁ
 = 
˝
;

4050 
out
:

4052 
	`≠∂og
(
LOG_DEBUG
, "Sñe˘ögÖoﬁ %d f‹ w‹k", 
poﬁ
->
poﬁ_no
);

4053  
poﬁ
;

4054 
	}
}

4060 c⁄° 
	gåuediff⁄e
 = 26959535291011309493156476344723991336010898738574164086137773096960.0;

4061 c⁄° 
	gbôs192
 = 6277101735386680763835789423207666416102355444464034512896.0;

4062 c⁄° 
	gbôs128
 = 340282366920938463463374607431768211456.0;

4063 c⁄° 
	gbôs64
 = 18446744073709551616.0;

4067 
	$À256todoubÀ
(c⁄° *
èrgë
)

4069 
uöt64_t
 *
d©a64
;

4070 
dcut64
;

4072 
d©a64
 = (
uöt64_t
 *)(
èrgë
 + 24);

4073 
dcut64
 = 
	`À64toh
(*
d©a64
Ë* 
bôs192
;

4075 
d©a64
 = (
uöt64_t
 *)(
èrgë
 + 16);

4076 
dcut64
 +
	`À64toh
(*
d©a64
Ë* 
bôs128
;

4078 
d©a64
 = (
uöt64_t
 *)(
èrgë
 + 8);

4079 
dcut64
 +
	`À64toh
(*
d©a64
Ë* 
bôs64
;

4081 
d©a64
 = (
uöt64_t
 *)(
èrgë
);

4082 
dcut64
 +
	`À64toh
(*
d©a64
);

4084  
dcut64
;

4085 
	}
}

4088 
	$diff_‰om_èrgë
(*
èrgë
)

4090 
d64
, 
dcut64
;

4092 
d64
 = 
åuediff⁄e
;

4093 
dcut64
 = 
	`À256todoubÀ
(
èrgë
);

4095 i‡(
	`u∆ikñy
(!
dcut64
))

4097 
dcut64
 = 1;

4100  
d64
 / 
dcut64
;

4101 
	}
}

4106 
	$ˇlc_diff
(
w‹k
 *w‹k, 
known
)

4108 
cgmöî_poﬁ_°©s
 *
poﬁ_°©s
 = &(
w‹k
->
poﬁ
->cgminer_pool_stats);

4109 
difficu…y
;

4110 
uöt64_t
 
uötdiff
;

4112 i‡(
known
)

4114 
w‹k
->
w‹k_difficu…y
 = 
known
;

4118 
w‹k
->
w‹k_difficu…y
 = 
	`diff_‰om_èrgë
(w‹k->
èrgë
);

4121 
difficu…y
 = 
w‹k
->
w‹k_difficu…y
;

4123 
poﬁ_°©s
->
œ°_diff
 = 
difficu…y
;

4124 
uötdiff
 = 
	`round
(
difficu…y
);

4125 
	`suffix_°rög
(
uötdiff
, 
w‹k
->
poﬁ
->
diff
, (work->pool->diff), 0);

4127 i‡(
difficu…y
 =
poﬁ_°©s
->
mö_diff
)

4129 
poﬁ_°©s
->
mö_diff_cou¡
++;

4131 i‡(
difficu…y
 < 
poﬁ_°©s
->
mö_diff
 ||Öool_stats->min_diff == 0)

4133 
poﬁ_°©s
->
mö_diff
 = 
difficu…y
;

4134 
poﬁ_°©s
->
mö_diff_cou¡
 = 1;

4137 i‡(
difficu…y
 =
poﬁ_°©s
->
max_diff
)

4139 
poﬁ_°©s
->
max_diff_cou¡
++;

4141 i‡(
difficu…y
 > 
poﬁ_°©s
->
max_diff
)

4143 
poﬁ_°©s
->
max_diff
 = 
difficu…y
;

4144 
poﬁ_°©s
->
max_diff_cou¡
 = 1;

4146 
	}
}

4149 
	gbích_hidiff_bös
[16][160];

4150 
	gbích_lodiff_bös
[16][160];

4151 
	gbích_èrgë
[32];

4155 
	$gë_bíchm¨k_w‹k
(
w‹k
 *work)

4157 
w‹k
->
w‹k_difficu…y
 = 32;

4158 
	`cg_mem˝y
(
w‹k
->
èrgë
, 
bích_èrgë
, 32);

4159 
w‹k
->
drv_rﬁŒimô
 = 0;

4160 
w‹k
->
m™d©‹y
 = 
åue
;

4161 
w‹k
->
poﬁ
 = 
poﬁs
[0];

4162 
	`cgtime
(&
w‹k
->
tv_gëw‹k
);

4163 
	`c›y_time
(&
w‹k
->
tv_gëw‹k_ª∂y
, &w‹k->
tv_gëw‹k
);

4164 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_BENCHMARK
;

4165 
	}
}

4168 
	$bíchfûe_d•w‹k
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
)

4170 
buf
[1024];

4171 
uöt32_t
 
dn
;

4172 
i
;

4174 
dn
 = 0;

4175 
i
 = 0; i < 4; i++)

4177 
dn
 *= 0x100;

4178 
dn
 +
n⁄˚
 & 0xff;

4179 
n⁄˚
 /= 0x100;

4182 
	`__bö2hex
(
buf
, 
w‹k
->
d©a
, (work->data));

4184 
	`≠∂og
(
LOG_ERR
, "BENCHFILEÇonce %u=0x%08x for work=%s",

4185 ()
dn
, ()dn, 
buf
);

4187 
	}
}

4189 
boﬁ
 
	$bíchfûe_gë_w‹k
(
w‹k
 *work)

4191 
buf
[1024];

4192 
ôem
[1024];

4193 
boﬁ
 
gŸ
 = 
Ál£
;

4195 i‡(!
bíchfûe_ö
)

4197 i‡(
›t_bíchfûe
)

4199 
bíchfûe_ö
 = 
	`f›í
(
›t_bíchfûe
, "r");

4203 
	`quô
(1, "BENCHFILE Invalid benchfile NULL");

4206 i‡(!
bíchfûe_ö
)

4208 
	`quô
(1, "BENCHFILE FaûedÅÿ›í bíchfûê'%s'", 
›t_bíchfûe
);

4211 
bíchfûe_löe
 = 0;

4213 i‡(!
	`fgës
(
buf
, 1024, 
bíchfûe_ö
))

4215 
	`quô
(1, "BENCHFILE FaûedÅÿªad bíchfûê'%s'", 
›t_bíchfûe
);

4218 
gŸ
 = 
åue
;

4219 
bíchfûe_w‹k
 = 0;

4222 i‡(!
gŸ
)

4224 i‡(!
	`fgës
(
buf
, 1024, 
bíchfûe_ö
))

4226 i‡(
bíchfûe_w‹k
 == 0)

4227 
	`quô
(1, "BENCHFILE Nÿw‹k i¿bíchfûê'%s'", 
›t_bíchfûe
);

4228 
	`f˛o£
(
bíchfûe_ö
);

4229 
bíchfûe_ö
 = 
NULL
;

4230  
	`bíchfûe_gë_w‹k
(
w‹k
);

4236 
bíchfûe_löe
++;

4239 i‡(*
buf
 != '\0' && *buf != '#' && *buf != '/')

4241 *
commas
[
BENCHWORK_COUNT
];

4242 
i
, 
j
, 
Àn
;

4243 
n⁄˚_time
;

4245 
commas
[0] = 
buf
;

4247 
i
 = 1; i < 
BENCHWORK_COUNT
; i++)

4249 
commas
[
i
] = 
	`°rchr
(commas[i-1], ',');

4251 i‡(!
commas
[
i
])

4253 
	`quô
(1, "BENCHFILE Invalid input fileÜine %d"

4255 
bíchfûe_löe
, 
i
, 
BENCHWORK_COUNT
);

4257 
Àn
 = (Ë(
commas
[
i
] - commas[i - 1]);

4258 i‡(
bíchfûe_d©a
[
i
-1].
Àngth
 &&

4259 (
Àn
 !
bíchfûe_d©a
[
i
-1].
Àngth
))

4261 
	`quô
(1, "BENCHFILE Invalid input fileÜine %d "

4263 
bíchfûe_löe
, 
i
,

4264 
bíchfûe_d©a
[
i
-1].
«me
,

4265 
Àn
, 
bíchfûe_d©a
[
i
-1].
Àngth
);

4268 *(
commas
[
i
]++) = '\0';

4272 
Àn
 = 
	`°æí
(
commas
[
BENCHWORK_NONCETIME
]);

4274 i‡(
Àn
 < 
bíchfûe_d©a
[
BENCHWORK_NONCETIME
].
Àngth
)

4276 
	`quô
(1, "BENCHFILE Invalid input fileÜine %d field %d"

4278 
bíchfûe_löe
, 
BENCHWORK_NONCETIME
+1,

4279 
bíchfûe_d©a
[
BENCHWORK_NONCETIME
].
«me
, 
Àn
,

4280 
bíchfûe_d©a
[
BENCHWORK_NONCETIME
].
Àngth
);

4283 
	`•rötf
(
ôem
, "0000000%c", 
commas
[
BENCHWORK_VERSION
][0]);

4285 
j
 = 
	`°æí
(
ôem
);

4287 
i
 = 
bíchfûe_d©a
[
BENCHWORK_PREVHASH
].
Àngth
-8; i >= 0; i -= 8)

4289 
	`•rötf
(&(
ôem
[
j
]), "%.8s", &
commas
[
BENCHWORK_PREVHASH
][
i
]);

4290 
j
 += 8;

4293 
i
 = 
bíchfûe_d©a
[
BENCHWORK_MERKLEROOT
].
Àngth
-8; i >= 0; i -= 8)

4295 
	`•rötf
(&(
ôem
[
j
]), "%.8s", &
commas
[
BENCHWORK_MERKLEROOT
][
i
]);

4296 
j
 += 8;

4299 
n⁄˚_time
 = 
	`©ﬁ
(
commas
[
BENCHWORK_NONCETIME
]);

4301 
	`•rötf
(&(
ôem
[
j
]), "%08lx", 
n⁄˚_time
);

4302 
j
 += 8;

4304 
	`°r˝y
(&(
ôem
[
j
]), 
commas
[
BENCHWORK_DIFFBITS
]);

4305 
j
 +
bíchfûe_d©a
[
BENCHWORK_DIFFBITS
].
Àngth
;

4307 
	`mem£t
(
w‹k
, 0, (*work));

4309 
	`hex2bö
(
w‹k
->
d©a
, 
ôem
, (
size_t
)(
j
 >> 1));

4311 
	`ˇlc_mid°©e
(
w‹k
);

4313 
bíchfûe_w‹k
++;

4315  
åue
;

4319 
	`fgës
(
buf
, 1024, 
bíchfûe_ö
));

4321 i‡(
bíchfûe_w‹k
 == 0)

4323 
	`quô
(1, "BENCHFILE Nÿw‹k i¿bíchfûê'%s'", 
›t_bíchfûe
);

4326 
	`f˛o£
(
bíchfûe_ö
);

4327 
bíchfûe_ö
 = 
NULL
;

4328  
	`bíchfûe_gë_w‹k
(
w‹k
);

4329 
	}
}

4332 
	$gë_bíchfûe_w‹k
(
w‹k
 *work)

4334 
	`bíchfûe_gë_w‹k
(
w‹k
);

4335 
w‹k
->
m™d©‹y
 = 
åue
;

4336 
w‹k
->
poﬁ
 = 
poﬁs
[0];

4337 
	`cgtime
(&
w‹k
->
tv_gëw‹k
);

4338 
	`c›y_time
(&
w‹k
->
tv_gëw‹k_ª∂y
, &w‹k->
tv_gëw‹k
);

4339 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_BENCHMARK
;

4340 
	`ˇlc_diff
(
w‹k
, 0);

4341 
	}
}

4344 #ifde‡
HAVE_CURSES


4345 
	$dißbÀ_cur£s_wödows
()

4347 
	`Àaveok
(
logwö
, 
Ál£
);

4348 
	`Àaveok
(
°©uswö
, 
Ál£
);

4349 
	`Àaveok
(
maöwö
, 
Ál£
);

4350 
	`nocbªak
();

4351 
	`echo
();

4352 
	`dñwö
(
logwö
);

4353 
	`dñwö
(
°©uswö
);

4354 
	}
}

4358 
boﬁ
 
	$cur£s_a˘ive_f‹˚locked
()

4360 
boﬁ
 
ªt
;

4362 
	`muãx_åylock
(&
c⁄sﬁe_lock
);

4363 
ªt
 = 
cur£s_a˘ive
;

4364 i‡(!
ªt
)

4365 
	`u∆ock_cur£s
();

4366  
ªt
;

4367 
	}
}

4369 
	$dißbÀ_cur£s
()

4371 i‡(
	`cur£s_a˘ive_f‹˚locked
())

4373 
u£_cur£s
 = 
Ál£
;

4374 
cur£s_a˘ive
 = 
Ál£
;

4375 
	`dißbÀ_cur£s_wödows
();

4376 
	`dñwö
(
maöwö
);

4377 
	`ídwö
();

4378 
	`u∆ock_cur£s
();

4380 
	}
}

4384 
	$kûl_timeout
(
thr_öfo
 *
thr
)

4386 
	`cg_com∂ëi⁄_timeout
(&
thr_öfo_ˇn˚l
, 
thr
, 1000);

4387 
	}
}

4390 
	$kûl_möög
()

4392 
thr_öfo
 *
thr
;

4393 
i
;

4395 
	`f‹˚log
(
LOG_DEBUG
, "Killing off miningÅhreads");

4397 
i
 = 0; i < 
möög_thªads
; i++)

4399 
±hªad_t
 *
±h
 = 
NULL
;

4401 
thr
 = 
	`gë_thªad
(
i
);

4403 i‡(
thr
 && 
	`PTH
(thr) != 0L)

4405 
±h
 = &
thr
->pth;

4410 
	`thr_öfo_ˇn˚l
(
thr
);

4412 i‡(
±h
 && *pth)

4414 
	`±hªad_joö
(*
±h
, 
NULL
);

4418 
	}
}

4420 
	$__kûl_w‹k
()

4422 
thr_öfo
 *
thr
;

4423 
i
;

4425 i‡(!
suc˚ssful_c⁄√˘
)

4428 
	`f‹˚log
(
LOG_INFO
, "Received kill message");

4430 #ifde‡
USE_USBUTILS


4433 
	`f‹˚log
(
LOG_DEBUG
, "Killing off HotPlugÅhread");

4434 
thr
 = &
c⁄åﬁ_thr
[
hŸ∂ug_thr_id
];

4435 
	`kûl_timeout
(
thr
);

4438 
	`f‹˚log
(
LOG_DEBUG
, "Killing off watchpoolÅhread");

4440 
thr
 = &
c⁄åﬁ_thr
[
w©chpoﬁ_thr_id
];

4441 
	`kûl_timeout
(
thr
);

4443 
	`f‹˚log
(
LOG_DEBUG
, "Killing off watchdogÅhread");

4445 
thr
 = &
c⁄åﬁ_thr
[
w©chdog_thr_id
];

4446 
	`kûl_timeout
(
thr
);

4448 
	`f‹˚log
(
LOG_DEBUG
, "Shutting down miningÅhreads");

4450 
i
 = 0; i < 
möög_thªads
; i++)

4452 
cgpu_öfo
 *
cgpu
;

4454 
thr
 = 
	`gë_thªad
(
i
);

4456 i‡(!
thr
)

4460 
cgpu
 = 
thr
->cgpu;

4462 i‡(!
cgpu
)

4467 
cgpu
->
shutdown
 = 
åue
;

4470 
	`¶ìp
(1);

4472 
	`cg_com∂ëi⁄_timeout
(&
kûl_möög
, 
NULL
, 3000);

4475 
	`f‹˚log
(
LOG_DEBUG
, "Killing off APIÅhread");

4476 
thr
 = &
c⁄åﬁ_thr
[
≠i_thr_id
];

4477 
	`kûl_timeout
(
thr
);

4479 #ifde‡
USE_USBUTILS


4482 
	`f‹˚log
(
LOG_DEBUG
, "Releasingáll USB devices");

4483 
	`cg_com∂ëi⁄_timeout
(&
usb_˛ónup
, 
NULL
, 1000);

4485 
	`f‹˚log
(
LOG_DEBUG
, "Killing off usbresÅhread");

4486 
thr
 = &
c⁄åﬁ_thr
[
usbªs_thr_id
];

4487 
	`kûl_timeout
(
thr
);

4490 
	}
}

4494 
	$kûl_w‹k
()

4496 
	`cg_com∂ëi⁄_timeout
(&
__kûl_w‹k
, 
NULL
, 5000);

4498 
	`quô
(0, "Shutdown signalÑeceived.");

4499 
	}
}

4502 **
	göôül_¨gs
;

4504 
˛ón_up
(
boﬁ
 
ª°¨tög
);

4507 
	$≠p_ª°¨t
()

4509 
	`≠∂og
(
LOG_WARNING
, "Aâem±ögÅÿª°¨à%s", 
∑ckagíame
);

4510 #ifde‡
USE_LIBSYSTEMD


4511 
	`sd_nŸify
(
Ál£
, "RELOADING=1\n"

4515 
	`cg_com∂ëi⁄_timeout
(&
__kûl_w‹k
, 
NULL
, 5000);

4516 
	`˛ón_up
(
åue
);

4518 #i‡
	`deföed
(
unix
Ë|| deföed(
__APPLE__
)

4519 i‡(
f‹kpid
 > 0)

4521 
	`kûl
(
f‹kpid
, 
SIGTERM
);

4522 
f‹kpid
 = 0;

4526 
	`execv
(
öôül_¨gs
[0], (
EXECV_2ND_ARG_TYPE
)initial_args);

4527 
	`≠∂og
(
LOG_WARNING
, "FailedÅoÑestartápplication");

4528 
	}
}

4531 
	$sigh™dÀr
(
__maybe_unu£d
 
sig
)

4534 
	`siga˘i⁄
(
SIGTERM
, &
ãrmh™dÀr
, 
NULL
);

4535 
	`siga˘i⁄
(
SIGINT
, &
öth™dÀr
, 
NULL
);

4536 
	`siga˘i⁄
(
SIGABRT
, &
abπh™dÀr
, 
NULL
);

4537 
	`kûl_w‹k
();

4538 
	}
}

4540 
_°age_w‹k
(
w‹k
 *work);

4542 
	#°age_w‹k
(
WORK
) do { \

4543 
	`_°age_w‹k
(
WORK
); \

4544 
WORK
 = 
NULL
; \

4545 } 0)

	)

4549 
	$modify_¡ime
(*
¡ime
, 
noff£t
)

4551 
bö
[4];

4552 
uöt32_t
 
h32
, *
be32
 = (uöt32_à*)
bö
;

4554 
	`hex2bö
(
bö
, 
¡ime
, (
size_t
) 4);

4555 
h32
 = 
	`be32toh
(*
be32
Ë+ 
noff£t
;

4556 *
be32
 = 
	`htobe32
(
h32
);

4557 
	`__bö2hex
(
¡ime
, 
bö
, (
size_t
) 4);

4558 
	}
}

4561 
	$rﬁl_w‹k
(
w‹k
 *work)

4563 
uöt32_t
 *
w‹k_¡ime
;

4564 
uöt32_t
 
¡ime
;

4566 
w‹k_¡ime
 = (
uöt32_t
 *)(
w‹k
->
d©a
 + 68);

4567 
¡ime
 = 
	`be32toh
(*
w‹k_¡ime
);

4568 
¡ime
++;

4569 *
w‹k_¡ime
 = 
	`htobe32
(
¡ime
);

4570 
loˇl_w‹k
++;

4571 
w‹k
->
rﬁls
++;

4572 
w‹k
->
n⁄˚
 = 0;

4573 
	`≠∂og
(
LOG_DEBUG
, "SuccessfullyÑolled work");

4576 i‡(
w‹k
->
¡ime
)

4578 
	`modify_¡ime
(
w‹k
->
¡ime
, 1);

4583 
w‹k
->
id
 = (
uöt32_t
Ë
	`tŸÆ_w‹k_öc
();

4584 
	}
}

4587 
w‹k
 *
	$make_˛⁄e
(
w‹k
 *work)

4589 
w‹k
 *
w‹k_˛⁄e
 = 
	`c›y_w‹k
(work);

4591 
w‹k_˛⁄e
->
˛⁄e
 = 
åue
;

4592 
	`cgtime
(&(
w‹k_˛⁄e
->
tv_˛⁄ed
));

4593 
w‹k_˛⁄e
->
l⁄gpﬁl
 = 
Ál£
;

4594 
w‹k_˛⁄e
->
m™d©‹y
 = 
Ál£
;

4597 
w‹k_˛⁄e
->
tv_°aged
.
tv_£c
 -= 1;

4599  
w‹k_˛⁄e
;

4600 
	}
}

4603 #ifde‡
HAVE_LIBCURL


4606 
	$ª¸uô_cuæ
(
poﬁ
 *pool)

4608 
cuæ_ít
 *
˚
 = 
	`cgˇŒoc
((curl_ent), 1);

4610 
˚
->
cuæ
 = 
	`cuæ_ósy_öô
();

4611 i‡(
	`u∆ikñy
(!
˚
->
cuæ
))

4612 
	`quô
(1, "FailedÅo init inÑecruit_curl");

4614 
	`li°_add
(&
˚
->
node
, &
poﬁ
->
cuærög
);

4615 
poﬁ
->
cuæs
++;

4616 
	}
}

4623 
cuæ_ít
 *
	$p›_cuæ_íåy
(
poﬁ
 *pool)

4625 
cuæ_limô
 = 
›t_dñay√t
 ? 5 : (
möög_thªads
 + 
›t_queue
) * 2;

4626 
boﬁ
 
ª¸uôed
 = 
Ál£
;

4627 
cuæ_ít
 *
˚
;

4629 
	`muãx_lock
(&
poﬁ
->
poﬁ_lock
);

4630 
ªåy
:

4631 i‡(!
poﬁ
->
cuæs
)

4633 
	`ª¸uô_cuæ
(
poﬁ
);

4634 
ª¸uôed
 = 
åue
;

4636 i‡(
	`li°_em±y
(&
poﬁ
->
cuærög
))

4638 i‡(
poﬁ
->
cuæs
 >
cuæ_limô
)

4640 
	`±hªad_c⁄d_waô
(&
poﬁ
->
¸_c⁄d
, &poﬁ->
poﬁ_lock
);

4641 
ªåy
;

4645 
	`ª¸uô_cuæ
(
poﬁ
);

4646 
ª¸uôed
 = 
åue
;

4649 
˚
 = 
	`li°_íåy
(
poﬁ
->
cuærög
.
√xt
, 
cuæ_ít
, 
node
);

4650 
	`li°_dñ
(&
˚
->
node
);

4651 
	`muãx_u∆ock
(&
poﬁ
->
poﬁ_lock
);

4653 i‡(
ª¸uôed
)

4654 
	`≠∂og
(
LOG_DEBUG
, "Re¸uôed cuæ f‹Öoﬁ %d", 
poﬁ
->
poﬁ_no
);

4655  
˚
;

4656 
	}
}

4658 
	$push_cuæ_íåy
(
cuæ_ít
 *
˚
, 
poﬁ
 *pool)

4660 
	`muãx_lock
(&
poﬁ
->
poﬁ_lock
);

4661 
	`li°_add_èû
(&
˚
->
node
, &
poﬁ
->
cuærög
);

4662 
	`cgtime
(&
˚
->
tv
);

4663 
	`±hªad_c⁄d_brﬂdˇ°
(&
poﬁ
->
¸_c⁄d
);

4664 
	`muãx_u∆ock
(&
poﬁ
->
poﬁ_lock
);

4665 
	}
}

4667 
boﬁ
 
°Æe_w‹k
(
w‹k
 *w‹k, boﬁ 
sh¨e
);

4669 
ölöe
 
boﬁ
 
	$should_rﬁl
(
w‹k
 *work)

4671 
timevÆ
 
now
;

4672 
time_t
 
expúy
;

4674 i‡(
w‹k
->
poﬁ
 !
	`cuºít_poﬁ
(Ë&& 
poﬁ_°øãgy
 !
POOL_LOADBALANCE
 &&Öoﬁ_°øãgy !
POOL_BALANCE
)

4675  
Ál£
;

4677 i‡(
w‹k
->
rﬁ…ime
 > 
›t_sˇ¡ime
)

4678 
expúy
 = 
w‹k
->
rﬁ…ime
;

4680 
expúy
 = 
›t_sˇ¡ime
;

4681 
expúy
 =Éxpiry * 2 / 3;

4685 
	`cgtime
(&
now
);

4686 i‡(
now
.
tv_£c
 - 
w‹k
->
tv_°aged
.tv_£¯> 
expúy
)

4687  
Ál£
;

4689  
åue
;

4690 
	}
}

4694 
ölöe
 
boﬁ
 
	$ˇn_rﬁl
(
w‹k
 *work)

4696  (!
w‹k
->
°øtum
 && w‹k->
poﬁ
 && w‹k->
rﬁ…ime
 && !w‹k->
˛⁄e
 &&

4697 
w‹k
->
rﬁls
 < 7000 && !
	`°Æe_w‹k
(w‹k, 
Ál£
));

4698 
	}
}

4700 *
	$submô_w‹k_thªad
(*
u£rd©a
)

4702 
w‹k
 *w‹k = (w‹k *)
u£rd©a
;

4703 
poﬁ
 *poﬁ = 
w‹k
->pool;

4704 
boﬁ
 
ªsubmô
 = 
Ál£
;

4705 
cuæ_ít
 *
˚
;

4707 
	`±hªad_dëach
(
	`±hªad_£lf
());

4709 
	`RíameThªad
("SubmitWork");

4711 
	`≠∂og
(
LOG_DEBUG
, "CreatingÉxtra submit workÅhread");

4713 
˚
 = 
	`p›_cuæ_íåy
(
poﬁ
);

4715 !
	`submô_up°ªam_w‹k
(
w‹k
, 
˚
->
cuæ
, 
ªsubmô
))

4717 i‡(
›t_lowmem
)

4719 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d sh¨êbeög disˇrdedÅÿmöimi£ mem‹y cache", 
poﬁ
->
poﬁ_no
);

4722 
ªsubmô
 = 
åue
;

4723 i‡(
	`°Æe_w‹k
(
w‹k
, 
åue
))

4725 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d sh¨êbeˇmê°Æêwhûêªåyög submô, disˇrdög", 
poﬁ
->
poﬁ_no
);

4727 
	`muãx_lock
(&
°©s_lock
);

4728 
tŸÆ_°Æe
++;

4729 
poﬁ
->
°Æe_sh¨es
++;

4730 
tŸÆ_diff_°Æe
 +
w‹k
->
w‹k_difficu…y
;

4731 
poﬁ
->
diff_°Æe
 +
w‹k
->
w‹k_difficu…y
;

4732 
	`muãx_u∆ock
(&
°©s_lock
);

4734 
	`‰ì_w‹k
(
w‹k
);

4739 
	`≠∂og
(
LOG_INFO
, "json_rpc_call failed on submit_work,Ñetrying");

4741 
	`push_cuæ_íåy
(
˚
, 
poﬁ
);

4743  
NULL
;

4744 
	}
}

4746 
boﬁ
 
	$˛⁄e_avaûabÀ
()

4748 
w‹k
 *
w‹k_˛⁄e
 = 
NULL
, *w‹k, *
tmp
;

4749 
boﬁ
 
˛⁄ed
 = 
Ál£
;

4751 
	`muãx_lock
(
°gd_lock
);

4752 i‡(!
°aged_rﬁœbÀ
)

4753 
out_u∆ock
;

4755 
	`HASH_ITER
(
hh
, 
°aged_w‹k
, 
w‹k
, 
tmp
)

4757 i‡(
	`ˇn_rﬁl
(
w‹k
Ë&& 
	`should_rﬁl
(work))

4759 
	`rﬁl_w‹k
(
w‹k
);

4760 
w‹k_˛⁄e
 = 
	`make_˛⁄e
(
w‹k
);

4761 
	`rﬁl_w‹k
(
w‹k
);

4762 
˛⁄ed
 = 
åue
;

4767 
out_u∆ock
:

4768 
	`muãx_u∆ock
(
°gd_lock
);

4770 i‡(
˛⁄ed
)

4772 
	`≠∂og
(
LOG_DEBUG
, "Pushing clonedávailable workÅo stageÅhread");

4773 
	`°age_w‹k
(
w‹k_˛⁄e
);

4775  
˛⁄ed
;

4776 
	}
}

4781 
w‹k
 *
	$˛⁄e_w‹k
(
w‹k
 *work)

4783 
mrs
 = 
möög_thªads
 + 
›t_queue
 - 
	`tŸÆ_°aged
();

4784 
w‹k
 *
w‹k_˛⁄e
;

4785 
boﬁ
 
˛⁄ed
;

4787 i‡(
mrs
 < 1)

4788  
w‹k
;

4790 
˛⁄ed
 = 
Ál£
;

4791 
w‹k_˛⁄e
 = 
	`make_˛⁄e
(
w‹k
);

4792 
mrs
-- > 0 && 
	`ˇn_rﬁl
(
w‹k
Ë&& 
	`should_rﬁl
(work))

4794 
	`≠∂og
(
LOG_DEBUG
, "PushingÑolled converted workÅo stageÅhread");

4795 
	`°age_w‹k
(
w‹k_˛⁄e
);

4796 
	`rﬁl_w‹k
(
w‹k
);

4797 
w‹k_˛⁄e
 = 
	`make_˛⁄e
(
w‹k
);

4800 
	`rﬁl_w‹k
(
w‹k
);

4801 
˛⁄ed
 = 
åue
;

4804 i‡(
˛⁄ed
)

4806 
	`°age_w‹k
(
w‹k
);

4807  
w‹k_˛⁄e
;

4810 
	`‰ì_w‹k
(
w‹k_˛⁄e
);

4812  
w‹k
;

4813 
	}
}

4816 *
	$submô_w‹k_thªad
(
__maybe_unu£d
 *
u£rd©a
)

4818 
	`±hªad_dëach
(
	`±hªad_£lf
());

4819  
NULL
;

4820 
	}
}

4825 *
	$off£t_¡ime
(c⁄° *
¡ime
, 
noff£t
)

4827 
bö
[4];

4828 
uöt32_t
 
h32
, *
be32
 = (uöt32_à*)
bö
;

4830 
	`hex2bö
(
bö
, 
¡ime
, (
size_t
) 4);

4831 
h32
 = 
	`be32toh
(*
be32
Ë+ 
noff£t
;

4832 *
be32
 = 
	`htobe32
(
h32
);

4834  
	`bö2hex
(
bö
, (
size_t
) 4);

4835 
	}
}

4839 
	$_c›y_w‹k
(
w‹k
 *w‹k, c⁄° w‹k *
ba£_w‹k
, 
noff£t
)

4841 
uöt32_t
 
id
 = 
w‹k
->id;

4843 
	`˛ón_w‹k
(
w‹k
);

4844 
	`cg_mem˝y
(
w‹k
, 
ba£_w‹k
, (work));

4847 
w‹k
->
id
 = id;

4849 i‡(
ba£_w‹k
->
job_id
)

4851 
w‹k
->
job_id
 = 
	`°rdup
(
ba£_w‹k
->job_id);

4854 i‡(
ba£_w‹k
->
n⁄˚1
)

4856 
w‹k
->
n⁄˚1
 = 
	`°rdup
(
ba£_w‹k
->nonce1);

4858 i‡(
ba£_w‹k
->
¡ime
)

4862 i‡(
noff£t
)

4864 
uöt32_t
 *
w‹k_¡ime
 = (uöt32_à*)(
w‹k
->
d©a
 + 68);

4865 
uöt32_t
 
¡ime
 = 
	`be32toh
(*
w‹k_¡ime
);

4867 
¡ime
 +
noff£t
;

4868 *
w‹k_¡ime
 = 
	`htobe32
(
¡ime
);

4869 
w‹k
->
¡ime
 = 
	`off£t_¡ime
(
ba£_w‹k
->¡ime, 
noff£t
);

4873 
w‹k
->
¡ime
 = 
	`°rdup
(
ba£_w‹k
->ntime);

4876 i‡(
noff£t
)

4878 
uöt32_t
 *
w‹k_¡ime
 = (uöt32_à*)(
w‹k
->
d©a
 + 68);

4879 
uöt32_t
 
¡ime
 = 
	`be32toh
(*
w‹k_¡ime
);

4881 
¡ime
 +
noff£t
;

4882 *
w‹k_¡ime
 = 
	`htobe32
(
¡ime
);

4885 i‡(
ba£_w‹k
->
coöba£
)

4887 
w‹k
->
coöba£
 = 
	`°rdup
(
ba£_w‹k
->coinbase);

4890 
w‹k
->
vîsi⁄
 = 
ba£_w‹k
->version;

4892 
	}
}

4894 
	$£t_w‹k_¡ime
(
w‹k
 *w‹k, 
¡ime
)

4896 
uöt32_t
 *
w‹k_¡ime
 = (uöt32_à*)(
w‹k
->
d©a
 + 68);

4898 *
w‹k_¡ime
 = 
	`htobe32
(
¡ime
);

4900 i‡(
w‹k
->
¡ime
)

4902 
	`‰ì
(
w‹k
->
¡ime
);

4903 
w‹k
->
¡ime
 = 
	`bö2hex
((*)
w‹k_¡ime
, (
size_t
) 4);

4905 
	}
}

4911 
w‹k
 *
	$c›y_w‹k_noff£t
(
w‹k
 *
ba£_w‹k
, 
noff£t
)

4913 
w‹k
 *w‹k = 
	`make_w‹k
();

4915 
	`_c›y_w‹k
(
w‹k
, 
ba£_w‹k
, 
noff£t
);

4917  
w‹k
;

4918 
	}
}

4920 
	$poﬁ_dõd
(
poﬁ
 *pool)

4922 i‡(!
	`poﬁ_t£t
(
poﬁ
, &poﬁ->
idÀ
))

4924 
	`cgtime
(&
poﬁ
->
tv_idÀ
);

4926 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

4928 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %d %†nŸÑe•⁄dög!", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

4929 
	`swôch_poﬁs
(
NULL
);

4933 
	`≠∂og
(
LOG_INFO
, "Poﬁ %d %†ÁûedÅÿªtu∫ w‹k", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

4936 
	}
}

4938 
boﬁ
 
	$°Æe_w‹k
(
w‹k
 *w‹k, 
boﬁ
 
sh¨e
)

4940 
timevÆ
 
now
;

4941 
time_t
 
w‹k_expúy
;

4942 
poﬁ
 *pool;

4943 
gëw‹k_dñay
;

4944  
Ál£
;

4945 i‡(
›t_bíchm¨k
 || 
›t_bíchfûe
)

4947  
Ál£
;

4950 i‡(
w‹k
->
w‹k_block
 != work_block)

4952 
	`≠∂og
(
LOG_DEBUG
, "Work stale dueÅo block mismatch");

4953  
åue
;

4959 i‡(
w‹k
->
rﬁ…ime
 > 
›t_sˇ¡ime
)

4961 
w‹k_expúy
 = 
w‹k
->
rﬁ…ime
;

4965 
w‹k_expúy
 = 
›t_expúy
;

4968 
poﬁ
 = 
w‹k
->pool;

4970 i‡(!
sh¨e
 && 
poﬁ
->
has_°øtum
)

4972 
boﬁ
 
ßme_job
;

4974 i‡(!
poﬁ
->
°øtum_a˘ive
 || !poﬁ->
°øtum_nŸify
)

4976 
	`≠∂og
(
LOG_DEBUG
, "Work stale dueÅo stratum inactive");

4977  
åue
;

4980 
ßme_job
 = 
åue
;

4982 
	`cg_æock
(&
poﬁ
->
d©a_lock
);

4984 i‡(
	`°rcmp
(
w‹k
->
job_id
, 
poﬁ
->
sw‹k
.job_id))

4986 
ßme_job
 = 
Ál£
;

4989 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

4991 i‡(!
ßme_job
)

4993 
	`≠∂og
(
LOG_DEBUG
, "Work stale dueÅo stratum job_id mismatch");

4994  
åue
;

5000 
gëw‹k_dñay
 = (Ë(
poﬁ
->
cgmöî_poﬁ_°©s
.
gëw‹k_waô_rﬁlög
 * 5 + 1);

5001 
w‹k_expúy
 -
gëw‹k_dñay
;

5003 i‡(
	`u∆ikñy
(
w‹k_expúy
 < 5))

5005 
w‹k_expúy
 = 5;

5008 
	`cgtime
(&
now
);

5010 i‡((
now
.
tv_£c
 - 
w‹k
->
tv_°aged
.tv_£cË>
w‹k_expúy
)

5012 
	`≠∂og
(
LOG_DEBUG
, "Work stale dueÅoÉxpiry");

5013  
åue
;

5016 i‡(
›t_Áû_⁄ly
 && !
sh¨e
 && 
poﬁ
 !
	`cuºít_poﬁ
(Ë&& !
w‹k
->
m™d©‹y
 &&

5017 
poﬁ_°øãgy
 !
POOL_LOADBALANCE
 &&Öoﬁ_°øãgy !
POOL_BALANCE
)

5019 
	`≠∂og
(
LOG_DEBUG
, "Work stale dueÅo fail onlyÖool mismatch");

5020  
åue
;

5023  
Ál£
;

5024 
	}
}

5027 
uöt64_t
 
	$sh¨e_diff
(c⁄° 
w‹k
 *work)

5029 
boﬁ
 
√w_be°
 = 
Ál£
;

5030 
d64
, 
s64
;

5031 
uöt64_t
 
ªt
;

5033 
d64
 = 
åuediff⁄e
;

5034 
s64
 = 
	`À256todoubÀ
(
w‹k
->
hash
);

5036 i‡(
	`u∆ikñy
(!
s64
))

5038 
s64
 = 0;

5041 
ªt
 = 
	`round
(
d64
 / 
s64
);

5043 
	`cg_wlock
(&
c⁄åﬁ_lock
);

5045 i‡(
	`u∆ikñy
(
ªt
 > 
be°_diff
))

5047 
√w_be°
 = 
åue
;

5048 
be°_diff
 = 
ªt
;

5049 
	`suffix_°rög
(
be°_diff
, 
be°_sh¨e
, (best_share), 0);

5052 i‡(
	`u∆ikñy
(
ªt
 > 
w‹k
->
poﬁ
->
be°_diff
))

5054 
w‹k
->
poﬁ
->
be°_diff
 = 
ªt
;

5057 
	`cg_wu∆ock
(&
c⁄åﬁ_lock
);

5059 i‡(
	`u∆ikñy
(
√w_be°
))

5061 
	`≠∂og
(
LOG_INFO
, "New be° sh¨e: %s", 
be°_sh¨e
);

5064  
ªt
;

5065 
	}
}

5067 
uöt64_t
 
	$sh¨e_ndiff
(c⁄° 
w‹k
 *work)

5069 
d64
, 
s64
;

5070 
uöt64_t
 
ªt
 = 0;

5072 if(
w‹k
 !
NULL
)

5074 
d64
 = 
åuediff⁄e
;

5075 
s64
 = 
	`À256todoubÀ
(
w‹k
->
hash
);

5077 i‡(
	`u∆ikñy
(!
s64
))

5079 
ªt
 = 0;

5083 
ªt
 = (
d64
 / 
s64
);

5086  
ªt
;

5087 
	}
}

5090 
	$ªgí_hash
(
w‹k
 *work)

5092 
uöt32_t
 *
d©a32
 = (uöt32_à*)(
w‹k
->
d©a
);

5093 
sw≠
[80];

5094 
uöt32_t
 *
sw≠32
 = (uöt32_à*)
sw≠
;

5095 
hash1
[32];

5097 
	`Êù80
(
sw≠32
, 
d©a32
);

5098 
	`sha256
(
sw≠
, 80, 
hash1
);

5099 
	`sha256
(
hash1
, 32, (*)(
w‹k
->
hash
));

5100 
	}
}

5102 
boﬁ
 
˙x_√eded
(
poﬁ
 *pool);

5105 
poﬁ
 *
	$¥i‹ôy_poﬁ
(
choi˚
)

5107 
poﬁ
 *
ªt
 = 
NULL
;

5108 
i
;

5110 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

5112 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

5114 i‡(
poﬁ
->
¥io
 =
choi˚
)

5116 
ªt
 = 
poﬁ
;

5121 i‡(
	`u∆ikñy
(!
ªt
))

5123 
	`≠∂og
(
LOG_ERR
, "WTF Nÿpoﬁ %d found!", 
choi˚
);

5124  
poﬁs
[
choi˚
];

5127  
ªt
;

5128 
	}
}

5131 
	$swôch_poﬁs
(
poﬁ
 *
£À˘ed
)

5133 
poﬁ
 *poﬁ, *
œ°_poﬁ
;

5134 
i
, 
poﬁ_no
, 
√xt_poﬁ
;

5136 
	`cg_wlock
(&
c⁄åﬁ_lock
);

5138 
œ°_poﬁ
 = 
cuºíçoﬁ
;

5139 
poﬁ_no
 = 
cuºíçoﬁ
->pool_no;

5142 i‡(
£À˘ed
)

5144 i‡(
£À˘ed
->
¥io
 != 0)

5146 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

5148 
poﬁ
 = 
poﬁs
[
i
];

5149 i‡(
poﬁ
->
¥io
 < 
£À˘ed
->prio)

5150 
poﬁ
->
¥io
++;

5152 
£À˘ed
->
¥io
 = 0;

5156 
poﬁ_°øãgy
)

5159 
POOL_BALANCE
:

5161 
POOL_FAILOVER
:

5163 
POOL_LOADBALANCE
:

5164 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

5166 
poﬁ
 = 
	`¥i‹ôy_poﬁ
(
i
);

5168 i‡(
	`poﬁ_unußbÀ
(
poﬁ
))

5172 
poﬁ_no
 = 
poﬁ
->pool_no;

5177 
POOL_ROUNDROBIN
:

5179 
POOL_ROTATE
:

5181 i‡(
£À˘ed
 && !£À˘ed->
idÀ
)

5183 
poﬁ_no
 = 
£À˘ed
->pool_no;

5186 
√xt_poﬁ
 = 
poﬁ_no
;

5188 
i
 = 1; i < 
tŸÆ_poﬁs
; i++)

5190 
√xt_poﬁ
++;

5192 i‡(
√xt_poﬁ
 >
tŸÆ_poﬁs
)

5194 
√xt_poﬁ
 = 0;

5197 
poﬁ
 = 
poﬁs
[
√xt_poﬁ
];

5199 i‡(
	`poﬁ_unußbÀ
(
poﬁ
))

5204 
poﬁ_no
 = 
√xt_poﬁ
;

5214 
cuºíçoﬁ
 = 
poﬁs
[
poﬁ_no
];

5215 
poﬁ
 = 
cuºíçoﬁ
;

5217 
	`cg_wu∆ock
(&
c⁄åﬁ_lock
);

5219 i‡(
poﬁ
 !
œ°_poﬁ
 && 
poﬁ_°øãgy
 !
POOL_LOADBALANCE
 &&Öoﬁ_°øãgy !
POOL_BALANCE
)

5221 
	`≠∂og
(
LOG_WARNING
, "SwôchögÅÿpoﬁ %d %s", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

5222 
	`˛ór_poﬁ_w‹k
(
œ°_poﬁ
);

5225 
	`muãx_lock
(&
Õ_lock
);

5226 
	`±hªad_c⁄d_brﬂdˇ°
(&
Õ_c⁄d
);

5227 
	`muãx_u∆ock
(&
Õ_lock
);

5229 
	}
}

5231 
	$_disˇrd_w‹k
(
w‹k
 **
w‹k±r
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

5233 
w‹k
 *w‹k = *
w‹k±r
;

5235 i‡(
	`u∆ikñy
(!
w‹k
))

5237 
	`≠∂og
(
LOG_ERR
, "Disˇrd w‹k cÆÀd wôh NULL w‹k from %†%s:%d", 
fûe
, 
func
, 
löe
);

5241 i‡(!
w‹k
->
˛⁄e
 && !w‹k->
rﬁls
 && !w‹k->
möed
)

5243 i‡(
w‹k
->
poﬁ
)

5245 
w‹k
->
poﬁ
->
disˇrded_w‹k
++;

5246 
w‹k
->
poﬁ
->
quŸa_u£d
--;

5247 
w‹k
->
poﬁ
->
w‹ks
--;

5249 
tŸÆ_disˇrded
++;

5250 
	`≠∂og
(
LOG_DEBUG
, "Discarded work");

5254 
	`≠∂og
(
LOG_DEBUG
, "Discarded cloned orÑolled work");

5256 
	`_‰ì_w‹k
(
w‹k±r
, 
fûe
, 
func
, 
löe
);

5257 
	}
}

5259 
	$wake_gws
()

5261 
	`muãx_lock
(
°gd_lock
);

5262 
	`±hªad_c⁄d_sig«l
(&
gws_c⁄d
);

5263 
	`muãx_u∆ock
(
°gd_lock
);

5264 
	}
}

5266 
	$disˇrd_°Æe
()

5268 
w‹k
 *w‹k, *
tmp
;

5269 
°Æe
 = 0;

5271 
	`muãx_lock
(
°gd_lock
);

5273 
	`HASH_ITER
(
hh
, 
°aged_w‹k
, 
w‹k
, 
tmp
)

5275 i‡(
	`°Æe_w‹k
(
w‹k
, 
Ál£
))

5277 
	`HASH_DEL
(
°aged_w‹k
, 
w‹k
);

5278 
	`disˇrd_w‹k
(
w‹k
);

5279 
°Æe
++;

5283 
	`±hªad_c⁄d_sig«l
(&
gws_c⁄d
);

5284 
	`muãx_u∆ock
(
°gd_lock
);

5286 i‡(
°Æe
)

5288 
	`≠∂og
(
LOG_DEBUG
, "Disˇrded %d sèÀ†th© didn'àm©ch cuºíàhash", 
°Æe
);

5290 
	}
}

5297 
	$ª°¨t_waô
(
thr_öfo
 *
thr
, 
m°ime
)

5299 
timevÆ
 
tdiff
;

5300 
timevÆ
 
thí
;

5301 
timevÆ
 
now
;

5302 
time•ec
 
ab°ime
;

5303 
rc
;

5305 
tdiff
.
tv_£c
 = 
m°ime
 / 1000;

5306 
tdiff
.
tv_u£c
 = 
m°ime
 * 1000 - (tdiff.
tv_£c
 * 1000000);

5308 
	`cgtime
(&
now
);

5309 
	`timîadd
(&
now
, &
tdiff
, &
thí
);

5311 
ab°ime
.
tv_£c
 = 
thí
.tv_sec;

5312 
ab°ime
.
tv_n£c
 = 
thí
.
tv_u£c
 * 1000;

5314 
	`muãx_lock
(&
ª°¨t_lock
);

5316 i‡(
thr
->
w‹k_ª°¨t
)

5318 
rc
 = 0;

5322 
rc
 = 
	`±hªad_c⁄d_timedwaô
(&
ª°¨t_c⁄d
, &
ª°¨t_lock
, &
ab°ime
);

5324 
	`muãx_u∆ock
(&
ª°¨t_lock
);

5326  
rc
;

5327 
	}
}

5329 *
	$ª°¨t_thªad
(
__maybe_unu£d
 *
¨g
)

5331 
cgpu_öfo
 *
cgpu
;

5332 
i
, 
mt
;

5333 
	`±hªad_dëach
(
	`±hªad_£lf
());

5336 
	`disˇrd_°Æe
();

5337 
	`rd_lock
(&
möög_thr_lock
);

5338 
mt
 = 
möög_thªads
;

5339 
	`rd_u∆ock
(&
möög_thr_lock
);

5341 
i
 = 0; i < 
mt
; i++)

5343 
cgpu
 = 
möög_thr
[
i
]->cgpu;

5345 i‡(
	`u∆ikñy
(!
cgpu
))

5350 i‡(
cgpu
->
deví
 !
DEV_ENABLED
)

5355 
möög_thr
[
i
]->
w‹k_ª°¨t
 = 
åue
;

5356 
	`Êush_queue
(
cgpu
);

5357 
cgpu
->
drv
->
	`Êush_w‹k
(cgpu);

5360 
	`muãx_lock
(&
ª°¨t_lock
);

5361 
	`±hªad_c⁄d_brﬂdˇ°
(&
ª°¨t_c⁄d
);

5362 
	`muãx_u∆ock
(&
ª°¨t_lock
);

5364 #ifde‡
USE_USBUTILS


5368 
	`ˇn˚l_usb_å™s„rs
();

5370  
NULL
;

5371 
	}
}

5376 
	$ª°¨t_thªads
()

5378 
±hªad_t
 
πhªad
;

5380 
	`cgtime
(&
ª°¨t_tv_°¨t
);

5382 i‡(
	`u∆ikñy
(
	`±hªad_¸óã
(&
πhªad
, 
NULL
, 
ª°¨t_thªad
, NULL)))

5384 
	`quô
(1, "FailedÅo createÑestartÅhread");

5386 
	}
}

5388 
	$sig«l_w‹k_upd©e
()

5390 
i
;

5392 
	`≠∂og
(
LOG_INFO
, "Work update messageÑeceived");

5394 
	`cgtime
(&
upd©e_tv_°¨t
);

5395 
	`rd_lock
(&
möög_thr_lock
);

5397 
i
 = 0; i < 
möög_thªads
; i++)

5399 
möög_thr
[
i
]->
w‹k_upd©e
 = 
åue
;

5402 
	`rd_u∆ock
(&
möög_thr_lock
);

5403 
	}
}

5405 
	$£t_curblock
(c⁄° *
hex°r
, c⁄° *
bed©a
)

5407 
ofs
;

5409 
	`cg_wlock
(&
ch_lock
);

5410 
	`cgtime
(&
block_timevÆ
);

5411 
	`°r˝y
(
cuºít_hash
, 
hex°r
);

5412 
	`cg_mem˝y
(
cuºít_block
, 
bed©a
, 32);

5413 
	`gë_time°amp
(
blocktime
, (blocktime), &
block_timevÆ
);

5414 
	`cg_wu∆ock
(&
ch_lock
);

5416 
ofs
 = 0; ofs <= 56; ofs++)

5418 i‡(
	`memcmp
(&
cuºít_hash
[
ofs
], "0", 1))

5423 
	`°∫˝y
(
¥ev_block
, &
cuºít_hash
[
ofs
], 8);

5424 
¥ev_block
[8] = '\0';

5426 
	`≠∂og
(
LOG_INFO
, "New block: %s... dif‡%s", 
cuºít_hash
, 
block_diff
);

5427 
	}
}

5429 
	$block_s‹t
(
block
 *
blocka
, block *
blockb
)

5431  
blocka
->
block_no
 - 
blockb
->block_no;

5432 
	}
}

5435 
	$£t_blockdiff
(c⁄° 
w‹k
 *work)

5437 
uöt8_t
 
pow
 = 
w‹k
->
d©a
[72];

5438 
powdiff
 = (8 * (0x1d - 3)Ë- (8 * (
pow
 - 3));

5440 i‡(
powdiff
 < 8)

5442 
powdiff
 = 8;

5445 
uöt32_t
 
diff32
 = 
	`be32toh
(*((uöt32_à*)(
w‹k
->
d©a
 + 72))) & 0x00FFFFFF;

5446 
numî©‹
 = 0xFFFFULL << 
powdiff
;

5447 
ddiff
 = 
numî©‹
 / ()
diff32
;

5449 i‡(
	`u∆ikñy
(
cuºít_diff
 !
ddiff
))

5451 
	`suffix_°rög
((
uöt64_t
)
ddiff
, 
block_diff
, (block_diff), 0);

5452 
cuºít_diff
 = 
ddiff
;

5453 
	`≠∂og
(
LOG_NOTICE
, "Nëw‹k dif‡£àtÿ%s", 
block_diff
);

5455 
	}
}

5459 
boﬁ
 
	$block_exi°s
(c⁄° *
hex°r
, c⁄° *
bed©a
, c⁄° 
w‹k
 *work)

5461 
dñëed_block
 = 0;

5462 
block
 *
s
;

5463 
boﬁ
 
ªt
 = 
åue
;

5465 
	`wr_lock
(&
blk_lock
);

5466 
	`HASH_FIND_STR
(
blocks
, 
hex°r
, 
s
);

5467 i‡(!
s
)

5469 
s
 = 
	`cgˇŒoc
((
block
), (
size_t
) 1);

5471 i‡(
	`u∆ikñy
(!
s
))

5473 
	`quô
 (1, "block_exists OOM");

5476 
	`°r˝y
(
s
->
hash
, 
hex°r
);

5477 
s
->
block_no
 = 
√w_blocks
++;

5479 
ªt
 = 
Ál£
;

5483 i‡(
	`HASH_COUNT
(
blocks
) > 3)

5485 
block
 *
ﬁdblock
;

5487 
	`HASH_SORT
(
blocks
, 
block_s‹t
);

5488 
ﬁdblock
 = 
blocks
;

5489 
dñëed_block
 = 
ﬁdblock
->
block_no
;

5490 
	`HASH_DEL
(
blocks
, 
ﬁdblock
);

5491 
	`‰ì
(
ﬁdblock
);

5494 
	`HASH_ADD_STR
(
blocks
, 
hash
, 
s
);

5495 
	`£t_blockdiff
(
w‹k
);

5497 i‡(
dñëed_block
)

5499 
	`≠∂og
(
LOG_DEBUG
, "Dñëed block %d from d©aba£", 
dñëed_block
);

5503 
	`wr_u∆ock
(&
blk_lock
);

5505 i‡(!
ªt
)

5507 
	`£t_curblock
(
hex°r
, 
bed©a
);

5510 i‡(
dñëed_block
)

5512 
	`≠∂og
(
LOG_DEBUG
, "Dñëed block %d from d©aba£", 
dñëed_block
);

5515  
ªt
;

5516 
	}
}

5519 
boﬁ
 
	$block_exi°s
(*
hex°r
)

5521 
block
 *
s
;

5523 
	`rd_lock
(&
blk_lock
);

5524 
	`HASH_FIND_STR
(
blocks
, 
hex°r
, 
s
);

5525 
	`rd_u∆ock
(&
blk_lock
);

5527 i‡(
s
)

5528  
åue
;

5529  
Ál£
;

5530 
	}
}

5532 
boﬁ
 
	$ã°_w‹k_cuºít
(
w‹k
 *work)

5534 
poﬁ
 *poﬁ = 
w‹k
->pool;

5535 
bed©a
[32];

5536 
hex°r
[68];

5537 
boﬁ
 
ªt
 = 
åue
;

5539 i‡(
w‹k
->
m™d©‹y
)

5540  
ªt
;

5544 i‡(!
	`block_exi°s
(
hex°r
))

5546 
block
 *
s
 = 
	`ˇŒoc
((block), 1);

5547 
dñëed_block
 = 0;

5549 i‡(
	`u∆ikñy
(!
s
))

5550 
	`quô
 (1, "test_work_current OOM");

5551 
	`°r˝y
(
s
->
hash
, 
hex°r
);

5552 
s
->
block_no
 = 
√w_blocks
++;

5554 
	`wr_lock
(&
blk_lock
);

5558 i‡(
	`HASH_COUNT
(
blocks
) > 6)

5560 
block
 *
ﬁdblock
;

5562 
	`HASH_SORT
(
blocks
, 
block_s‹t
);

5563 
ﬁdblock
 = 
blocks
;

5564 
dñëed_block
 = 
ﬁdblock
->
block_no
;

5565 
	`HASH_DEL
(
blocks
, 
ﬁdblock
);

5566 
	`‰ì
(
ﬁdblock
);

5568 
	`HASH_ADD_STR
(
blocks
, 
hash
, 
s
);

5569 
	`£t_blockdiff
(
w‹k
);

5570 
	`wr_u∆ock
(&
blk_lock
);

5572 i‡(
dñëed_block
)

5573 
	`≠∂og
(
LOG_DEBUG
, "Dñëed block %d from d©aba£", 
dñëed_block
);

5574 
	`£t_curblock
(
hex°r
, 
bed©a
);

5577 
	`mem˝y
(
poﬁ
->
¥ev_block
, 
bed©a
, 32);

5578 i‡(
	`u∆ikñy
(
√w_blocks
 == 1))

5580 
ªt
 = 
Ál£
;

5581 
out
;

5584 
w‹k
->
w‹k_block
 = ++work_block;

5586 i‡(
w‹k
->
l⁄gpﬁl
)

5588 i‡(
w‹k
->
°øtum
)

5590 
	`≠∂og
(
LOG_DEBUG
, "Stratum fromÖool %d detectedÇew block",

5591 
poﬁ
->
poﬁ_no
);

5595 
	`≠∂og
(
LOG_DEBUG
, "%sLONGPOLL fromÖool %d detectedÇew block",

5596 
w‹k
->
gbt
 ? "GBT " : "", w‹k->
poﬁ
->
poﬁ_no
);

5599 i‡(
have_l⁄gpﬁl
 && !
poﬁ
->
gbt_sﬁo
)

5600 
	`≠∂og
(
LOG_DEBUG
, "New block detected onÇetwork beforeÖoolÇotification");

5601 i‡(!
poﬁ
->
gbt_sﬁo
)

5602 
	`≠∂og
(
LOG_DEBUG
, "New block detected onÇetwork");

5603 
	`ª°¨t_thªads
();

5607 i‡(
	`memcmp
(
poﬁ
->
¥ev_block
, 
bed©a
, 32))

5613 i‡(
	`memcmp
(
bed©a
, 
cuºít_block
, 32))

5616 
	`≠∂og
(
LOG_DEBUG
, "SèÀ d©®‰omÖoﬁ %d", 
poﬁ
->
poﬁ_no
);

5617 
ªt
 = 
Ál£
;

5623 
	`≠∂og
(
LOG_DEBUG
, "Poﬁ %dÇow u∞tÿd©e", 
poﬁ
->
poﬁ_no
);

5624 
	`mem˝y
(
poﬁ
->
¥ev_block
, 
bed©a
, 32);

5631 i‡(
	`memcmp
(
bed©a
, 
cuºít_block
, 32))

5632 
	`≠∂og
(
LOG_DEBUG
, "Poﬁ %d stû»⁄ old block", 
poﬁ
->
poﬁ_no
);

5634 i‡(
w‹k
->
l⁄gpﬁl
)

5636 
w‹k
->
w‹k_block
 = ++work_block;

5637 i‡(
	`sh¨ed_°øãgy
(Ë|| 
w‹k
->
poﬁ
 =
	`cuºít_poﬁ
())

5639 i‡(
w‹k
->
°øtum
)

5641 
	`≠∂og
(
LOG_DEBUG
, "Stratum fromÖool %dÑequested workÑestart",

5642 
poﬁ
->
poﬁ_no
);

5646 
	`≠∂og
(
LOG_DEBUG
, "%sLONGPOLL fromÖool %dÑequested workÑestart",

5647 
w‹k
->
gbt
 ? "GBT " : "", w‹k->
poﬁ
->
poﬁ_no
);

5649 
	`ª°¨t_thªads
();

5653 
out
:

5654 
w‹k
->
l⁄gpﬁl
 = 
Ál£
;

5656  
ªt
;

5657 
	}
}

5659 
boﬁ
 
	$ã°_w‹k_cuºít
(
w‹k
 *work)

5661 
poﬁ
 *poﬁ = 
w‹k
->pool;

5662 
bed©a
[32];

5663 
hex°r
[68];

5664 
boﬁ
 
ªt
 = 
åue
;

5665 *
bö_height
 = &
poﬁ
->
coöba£
[43];

5666 
uöt8_t
 
cb_height_sz
 = 
bö_height
[-1];

5667 
uöt32_t
 
height
 = 0;

5669 i‡(
w‹k
->
m™d©‹y
)

5671  
ªt
;

5674 
	`sw≠256
(
bed©a
, 
w‹k
->
d©a
 + 4);

5675 
	`__bö2hex
(
hex°r
, 
bed©a
, (
size_t
) 32);

5678 i‡(
cb_height_sz
 <= 4)

5680 
	`cg_mem˝y
(&
height
, 
bö_height
, 
cb_height_sz
);

5681 
height
 = 
	`À32toh
(height);

5682 
height
--;

5685 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

5687 i‡(
poﬁ
->
sw‹k
.
˛ón
)

5689 
poﬁ
->
sw‹k
.
˛ón
 = 
Ál£
;

5690 
w‹k
->
l⁄gpﬁl
 = 
åue
;

5693 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

5697 i‡(!
	`block_exi°s
(
hex°r
, 
bed©a
, 
w‹k
))

5701 
	`cg_mem˝y
(
poﬁ
->
¥ev_block
, 
bed©a
, 32);

5703 i‡(
	`u∆ikñy
(
√w_blocks
 == 1))

5705 
ªt
 = 
Ál£
;

5706 
out
;

5709 
w‹k
->
w‹k_block
 = ++work_block;

5711 i‡(
w‹k
->
l⁄gpﬁl
)

5713 i‡(
w‹k
->
°øtum
)

5715 
	`≠∂og
(
LOG_NOTICE
, "Så©um fromÖoﬁ %d dëe˘edÇew blockáàheighà%d", 
poﬁ
->
poﬁ_no
, 
height
);

5719 
	`≠∂og
(
LOG_NOTICE
, "%sLONGPOLL fromÖoﬁ %d dëe˘edÇew block", 
w‹k
->
gbt
 ? "GBT " : "", w‹k->
poﬁ
->
poﬁ_no
);

5722 i‡(
have_l⁄gpﬁl
 && !
poﬁ
->
gbt_sﬁo
)

5724 
	`≠∂og
(
LOG_NOTICE
, "New block detected onÇetwork beforeÖoolÇotification");

5726 i‡(!
poﬁ
->
gbt_sﬁo
)

5728 
	`≠∂og
(
LOG_NOTICE
, "New block detected onÇetwork");

5730 
	`ª°¨t_thªads
();

5734 i‡(
	`memcmp
(
poﬁ
->
¥ev_block
, 
bed©a
, 32))

5740 i‡(
	`memcmp
(
bed©a
, 
cuºít_block
, 32))

5743 
	`≠∂og
(
LOG_DEBUG
, "SèÀ d©®‰omÖoﬁ %dáàheighà%d", 
poﬁ
->
poﬁ_no
, 
height
);

5744 
ªt
 = 
Ál£
;

5750 
	`≠∂og
(
LOG_INFO
, "Poﬁ %dÇow u∞tÿd©ê© heighà%d", 
poﬁ
->
poﬁ_no
, 
height
);

5751 
	`cg_mem˝y
(
poﬁ
->
¥ev_block
, 
bed©a
, 32);

5759 i‡(
	`memcmp
(
bed©a
, 
cuºít_block
, 32))

5761 
	`≠∂og
(
LOG_DEBUG
, "Poﬁ %d stû»⁄ old block", 
poﬁ
->
poﬁ_no
);

5764 i‡(
w‹k
->
l⁄gpﬁl
)

5766 
w‹k
->
w‹k_block
 = ++work_block;

5767 i‡(
	`sh¨ed_°øãgy
(Ë|| 
w‹k
->
poﬁ
 =
	`cuºít_poﬁ
())

5769 i‡(
w‹k
->
°øtum
)

5771 
	`≠∂og
(
LOG_NOTICE
, "Stratum fromÖool %dÑequested workÑestart",

5772 
poﬁ
->
poﬁ_no
);

5776 
	`≠∂og
(
LOG_NOTICE
, "%sLONGPOLL fromÖool %dÑequested workÑestart",

5777 
w‹k
->
gbt
 ? "GBT " : "", w‹k->
poﬁ
->
poﬁ_no
);

5779 
	`ª°¨t_thªads
();

5784 
out
:

5785 
w‹k
->
l⁄gpﬁl
 = 
Ál£
;

5787  
ªt
;

5788 
	}
}

5791 
	$tv_s‹t
(
w‹k
 *
w‹ka
, w‹k *
w‹kb
)

5793  
w‹ka
->
tv_°aged
.
tv_£c
 - 
w‹kb
->tv_staged.tv_sec;

5794 
	}
}

5797 
boﬁ
 
	$w‹k_rﬁœbÀ
(
w‹k
 *work)

5799  (!
w‹k
->
˛⁄e
 && w‹k->
rﬁ…ime
);

5800 
	}
}

5803 
boﬁ
 
	$hash_push
(
w‹k
 *work)

5805 
boﬁ
 
rc
 = 
åue
;

5807 
	`muãx_lock
(
°gd_lock
);

5809 i‡(
	`w‹k_rﬁœbÀ
(
w‹k
))

5811 
°aged_rﬁœbÀ
++;

5814 i‡(
	`likñy
(!
gëq
->
‰ozí
))

5816 
	`HASH_ADD_INT
(
°aged_w‹k
, 
id
, 
w‹k
);

5817 
	`HASH_SORT
(
°aged_w‹k
, 
tv_s‹t
);

5821 
rc
 = 
Ál£
;

5824 
	`±hªad_c⁄d_brﬂdˇ°
(&
gëq
->
c⁄d
);

5825 
	`muãx_u∆ock
(
°gd_lock
);

5827  
rc
;

5828 
	}
}

5831 
	$_°age_w‹k
(
w‹k
 *work)

5833 
	`≠∂og
(
LOG_DEBUG
, "Pushög w‹k fromÖoﬁ %dÅÿhash queue", 
w‹k
->
poﬁ
->
poﬁ_no
);

5834 
w‹k
->
w‹k_block
 = work_block;

5835 
	`ã°_w‹k_cuºít
(
w‹k
);

5836 
w‹k
->
poﬁ
->
w‹ks
++;

5837 
	`hash_push
(
w‹k
);

5838 
	}
}

5841 #ifde‡
HAVE_CURSES


5842 
	$cur£s_öt
(c⁄° *
quîy
)

5844 
ªt
;

5845 *
cv¨
;

5847 
cv¨
 = 
	`cur£s_öput
(
quîy
);

5848 
ªt
 = 
	`©oi
(
cv¨
);

5849 
	`‰ì
(
cv¨
);

5850  
ªt
;

5851 
	}
}

5854 #ifde‡
HAVE_CURSES


5855 
boﬁ
 
öput_poﬁ
(boﬁ 
live
);

5858 #ifde‡
HAVE_CURSES


5859 
	$di•œy_poﬁ_summ¨y
(
poﬁ
 *pool)

5861 
efficõncy
 = 0.0;

5863 i‡(
	`cur£s_a˘ive_locked
())

5865 
	`wlog
("Poﬁ: %s\n", 
poﬁ
->
Ωc_uæ
);

5866 i‡(
poﬁ
->
sﬁved
)

5867 
	`wlog
("SOLVED %d BLOCK%s!\n", 
poﬁ
->
sﬁved
,Öool->solved > 1 ? "S" : "");

5868 i‡(!
poﬁ
->
has_°øtum
)

5869 
	`wlog
("%†ow¿l⁄g-pﬁ»suµ‹t\n", 
poﬁ
->
hdr_∑th
 ? "Has" : "DoesÇot have");

5870 
	`wlog
(" Queued w‹kÑeque°s: %d\n", 
poﬁ
->
gëw‹k_ªque°ed
);

5871 
	`wlog
(" Sh¨êsubmissi⁄s: %"
PRId64
"\n", 
poﬁ
->
ac˚±ed
 +Öoﬁ->
ªje˘ed
);

5872 
	`wlog
(" Ac˚±ed sh¨es: %"
PRId64
"\n", 
poﬁ
->
ac˚±ed
);

5873 
	`wlog
(" Reje˘ed sh¨es: %"
PRId64
"\n", 
poﬁ
->
ªje˘ed
);

5874 
	`wlog
(" Ac˚±ed difficu…y sh¨es: %1.f\n", 
poﬁ
->
diff_ac˚±ed
);

5875 
	`wlog
(" Reje˘ed difficu…y sh¨es: %1.f\n", 
poﬁ
->
diff_ªje˘ed
);

5876 i‡(
poﬁ
->
ac˚±ed
 ||Öoﬁ->
ªje˘ed
)

5877 
	`wlog
(" Reje˘Ñ©io: %.1f%%\n", ()(
poﬁ
->
ªje˘ed
 * 100Ë/ ()’oﬁ->
ac˚±ed
 +Öool->rejected));

5878 
efficõncy
 = 
poﬁ
->
gëw‹k_ªque°ed
 ?Öoﬁ->
ac˚±ed
 * 100.0 /Öool->getwork_requested : 0.0;

5879 i‡(!
	`poﬁ_loˇlgí
(
poﬁ
))

5880 
	`wlog
(" Efficõncy (ac˚±ed / queued): %.0f%%\n", 
efficõncy
);

5882 
	`wlog
(" Iãm†w‹ked on: %d\n", 
poﬁ
->
w‹ks
);

5883 
	`wlog
(" Disˇrded w‹k duêtÿ√w blocks: %d\n", 
poﬁ
->
disˇrded_w‹k
);

5884 
	`wlog
(" SèÀ submissi⁄†disˇrded duêtÿ√w blocks: %d\n", 
poﬁ
->
°Æe_sh¨es
);

5885 
	`wlog
(" U«bÀÅÿgë w‹k from sîvî ocˇsi⁄s: %d\n", 
poﬁ
->
gëÁû_ocˇsi⁄s
);

5886 
	`wlog
(" Submôtög w‹kÑemŸñy dñay ocˇsi⁄s: %d\n\n", 
poﬁ
->
ªmŸeÁû_ocˇsi⁄s
);

5887 
	`u∆ock_cur£s
();

5889 
	}
}

5895 
	$ªmove_poﬁ
(
poﬁ
 *pool)

5897 
i
, 
œ°_poﬁ
 = 
tŸÆ_poﬁs
 - 1;

5898 
poﬁ
 *
Ÿhî
;

5901 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

5903 
Ÿhî
 = 
poﬁs
[
i
];

5904 i‡(
Ÿhî
->
¥io
 > 
poﬁ
->prio)

5905 
Ÿhî
->
¥io
--;

5908 i‡(
poﬁ
->
poﬁ_no
 < 
œ°_poﬁ
)

5911 (
poﬁs
[
œ°_poﬁ
])->
poﬁ_no
 = 
poﬁ
->pool_no;

5912 
poﬁs
[
poﬁ
->
poﬁ_no
] =Öoﬁs[
œ°_poﬁ
];

5916 
poﬁ
->
poﬁ_no
 = 
tŸÆ_poﬁs
;

5917 
poﬁ
->
ªmoved
 = 
åue
;

5918 
tŸÆ_poﬁs
--;

5919 
	}
}

5922 
	sJE


5924 *
	mbuf
;

5925 
JE
 *
	m√xt
;

5926 } *
	gjed©a
 = 
NULL
;

5929 
	$js⁄_esˇ≥_‰ì
()

5931 
JE
 *
jïå
 = 
jed©a
;

5932 
JE
 *
jíext
;

5934 
jed©a
 = 
NULL
;

5936 
jïå
)

5938 
jíext
 = 
jïå
->
√xt
;

5939 
	`‰ì
(
jïå
->
buf
);

5940 
	`‰ì
(
jïå
);

5941 
jïå
 = 
jíext
;

5943 
	}
}

5945 *
	$js⁄_esˇ≥
(*
°r
)

5947 
JE
 *
jïå
;

5948 *
buf
, *
±r
;

5951 
±r
 = 
buf
 = 
	`cgmÆloc
(
	`°æí
(
°r
) * 2 + 1);

5952 
jïå
 = 
	`cgmÆloc
((*jeptr));

5953 
jïå
->
buf
 = buf;

5954 
jïå
->
√xt
 = 
jed©a
;

5955 
jed©a
 = 
jïå
;

5957 *
°r
)

5959 i‡(*
°r
 == '\\' || *str == '"')

5960 *(
±r
++) = '\\';

5962 *(
±r
++Ë*(
°r
++);

5965 *
±r
 = '\0';

5967  
buf
;

5968 
	}
}

5971 
	$wrôe_c⁄fig
(
FILE
 *
fcfg
)

5973 
›t_èbÀ
 *
›t
;

5974 
i
;

5977 
	`Âuts
("{\n\"poﬁs\" : [", 
fcfg
);

5978 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

5980 
poﬁ
 *poﬁ = 
	`¥i‹ôy_poﬁ
(
i
);

5982 i‡(
poﬁ
->
quŸa
 != 1)

5984 
	`Ârötf
(
fcfg
, "%s\n\t{\n\t\t\"quŸa\" : \"%s%s%s%d;%s\",", 
i
 > 0 ? "," : "",

5985 
poﬁ
->
Ωc_¥oxy
 ? 
	`js⁄_esˇ≥
((*)
	`¥oxyty≥
’oﬁ->
Ωc_¥oxyty≥
)) : "",

5986 
poﬁ
->
Ωc_¥oxy
 ? 
	`js⁄_esˇ≥
(pool->rpc_proxy) : "",

5987 
poﬁ
->
Ωc_¥oxy
 ? "|" : "",

5988 
poﬁ
->
quŸa
,

5989 
	`js⁄_esˇ≥
(
poﬁ
->
Ωc_uæ
));

5993 
	`Ârötf
(
fcfg
, "%s\n\t{\n\t\t\"uæ\" : \"%s%s%s%s\",", 
i
 > 0 ? "," : "",

5994 
poﬁ
->
Ωc_¥oxy
 ? 
	`js⁄_esˇ≥
((*)
	`¥oxyty≥
’oﬁ->
Ωc_¥oxyty≥
)) : "",

5995 
poﬁ
->
Ωc_¥oxy
 ? 
	`js⁄_esˇ≥
(pool->rpc_proxy) : "",

5996 
poﬁ
->
Ωc_¥oxy
 ? "|" : "",

5997 
	`js⁄_esˇ≥
(
poﬁ
->
Ωc_uæ
));

6000 i‡(
poﬁ
->
exå™⁄˚_subs¸ibe
)

6002 
	`Âuts
("\n\t\t\"exå™⁄˚-subs¸ibe\" :Årue,", 
fcfg
);

6005 
	`Ârötf
(
fcfg
, "\n\t\t\"u£r\" : \"%s\",", 
	`js⁄_esˇ≥
(
poﬁ
->
Ωc_u£r
));

6006 
	`Ârötf
(
fcfg
, "\n\t\t\"∑ss\" : \"%s\"\n\t}", 
	`js⁄_esˇ≥
(
poﬁ
->
Ωc_∑ss
));

6008 
	`Âuts
("\n]\n", 
fcfg
);

6011 
›t
 = 
›t_c⁄fig_èbÀ
; o±->
ty≥
 !
OPT_END
; opt++)

6013 *
p
, *
«me
 = 
	`°rdup
(
›t
->
«mes
);

6015 
p
 = 
	`°πok
(
«me
, "|");Ö;Ö = såtok(
NULL
, "|"))

6017 i‡(
p
[1] != '-')

6022 i‡(
›t
->
desc
 =
›t_hiddí
)

6027 i‡(
›t
->
ty≥
 & 
OPT_NOARG
 &&

6028 ((*)
›t
->
cb
 =(*)
›t_£t_boﬁ
 || (*)›t->cb =(*)
›t_£t_övboﬁ
) &&

6029 (*(
boﬁ
 *)
›t
->
u
.
¨g
 =((*)›t->
cb
 =(*)
›t_£t_boﬁ
)))

6031 
	`Ârötf
(
fcfg
, ",\n\"%s\" :Årue", 
p
+2);

6035 i‡(
›t
->
ty≥
 & 
OPT_HASARG
 &&

6036 ((*)
›t
->
cb_¨g
 =(*)
›t_£t_ötvÆ
 ||

6037 (*)
›t
->
cb_¨g
 =(*)
£t_öt_0_to_9999
 ||

6038 (*)
›t
->
cb_¨g
 =(*)
£t_öt_1_to_65535
 ||

6039 (*)
›t
->
cb_¨g
 =(*)
£t_öt_0_to_10
 ||

6040 (*)
›t
->
cb_¨g
 =(*)
£t_öt_1_to_10
 ||

6041 (*)
›t
->
cb_¨g
 =(*)
£t_öt_0_to_100
 ||

6042 (*)
›t
->
cb_¨g
 =(*)
£t_öt_0_to_255
 ||

6043 (*)
›t
->
cb_¨g
 =(*)
£t_öt_1_to_255
 ||

6044 (*)
›t
->
cb_¨g
 =(*)
£t_öt_0_to_7680
 ||

6045 (*)
›t
->
cb_¨g
 =(*)
£t_öt_0_to_200
 ||

6046 (*)
›t
->
cb_¨g
 =(*)
£t_öt_0_to_4
 ||

6047 (*)
›t
->
cb_¨g
 =(*)
£t_öt_32_to_63
 ||

6048 (*)
›t
->
cb_¨g
 =(*)
£t_öt_22_to_75
 ||

6049 (*)
›t
->
cb_¨g
 =(*)
£t_öt_42_to_85
 ||

6050 (*)
›t
->
cb_¨g
 =(*)
£t_öt_22_to_55
 ||

6051 (*)
›t
->
cb_¨g
 =(*)
£t_öt_42_to_65
))

6053 
	`Ârötf
(
fcfg
, ",\n\"%s\" : \"%d\"", 
p
+2, *(*)
›t
->
u
.
¨g
);

6057 i‡(
›t
->
ty≥
 & 
OPT_HASARG
 &&

6058 (((*)
›t
->
cb_¨g
 =(*)
£t_Êﬂt_125_to_500
) ||

6059 (*)
›t
->
cb_¨g
 =(*)
£t_Êﬂt_100_to_250
))

6061 
	`Ârötf
(
fcfg
, ",\n\"%s\" : \"%.1f\"", 
p
+2, *(*)
›t
->
u
.
¨g
);

6065 i‡(
›t
->
ty≥
 & (
OPT_HASARG
 | 
OPT_PROCESSARG
) &&

6066 (
›t
->
u
.
¨g
 !&
›t_£t_nuŒ
))

6068 *
ˇrg
 = *(**)
›t
->
u
.
¨g
;

6070 i‡(
ˇrg
)

6072 
	`Ârötf
(
fcfg
, ",\n\"%s\" : \"%s\"", 
p
+2, 
	`js⁄_esˇ≥
(
ˇrg
));

6079 
	`‰ì
(
«me
);

6083 i‡(
poﬁ_°øãgy
 =
POOL_BALANCE
)

6085 
	`Âuts
(",\n\"bÆ™˚\" :Årue", 
fcfg
);

6088 i‡(
poﬁ_°øãgy
 =
POOL_LOADBALANCE
)

6090 
	`Âuts
(",\n\"lﬂd-bÆ™˚\" :Årue", 
fcfg
);

6093 i‡(
poﬁ_°øãgy
 =
POOL_ROUNDROBIN
)

6095 
	`Âuts
(",\n\"round-robö\" :Årue", 
fcfg
);

6098 i‡(
poﬁ_°øãgy
 =
POOL_ROTATE
)

6100 
	`Ârötf
(
fcfg
, ",\n\"rŸ©e\" : \"%d\"", 
›t_rŸ©e_≥riod
);

6103 
	`Âuts
("\n}\n", 
fcfg
);

6105 
	`js⁄_esˇ≥_‰ì
();

6106 
	}
}

6108 
	$zîo_be°sh¨e
()

6110 
i
;

6111 
be°_diff
 = 0;

6112 
	`mem£t
(
be°_sh¨e
, 0, 8);

6113 
	`suffix_°rög
(
be°_diff
, 
be°_sh¨e
, (best_share), 0);

6115 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

6117 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

6118 
poﬁ
->
be°_diff
 = 0;

6120 
	}
}

6123 
timevÆ
 
	gtv_hashmëî
;

6124 
time_t
 
	ghashdi•œy_t
;

6127 
	$zîo_°©s
()

6129 
i
;

6130 
sysöfo
 
sInfo
;

6131 i‡(
	`sysöfo
(&
sInfo
))

6133 
	`≠∂og
(
LOG_INFO
, "FailedÅo get sysinfo,Érrno:%u,Ñeason:%s\n",

6134 
î∫o
, 
	`°ªº‹
(errno));

6135 
tŸÆ_tv_°¨t_sys
=
	`time
(
NULL
);

6139 
tŸÆ_tv_°¨t_sys
=
sInfo
.
u±ime
;

6142 
	`cgtime
(&
tŸÆ_tv_°¨t
);

6143 
	`c›y_time
(&
tv_hashmëî
, &
tŸÆ_tv_°¨t
);

6145 
tŸÆ_rﬁlög
 = 0;

6146 
rﬁlög1
 = 0;

6147 
rﬁlög5
 = 0;

6148 
rﬁlög15
 = 0;

6149 
tŸÆ_mhashes_d⁄e
 = 0;

6150 
√w_tŸÆ_mhashes_d⁄e
 = 0;

6152 
i
 = 0; i < 
CG_LOCAL_MHASHES_MAX_NUM
; i++)

6154 
g_loˇl_mhashes_d⁄es
[
i
] = 0;

6157 
g_loˇl_mhashes_ödex
 = 0;

6158 
g_max_Án
 = 0;

6159 
g_max_ãmp
 = 0;

6160 
tŸÆ_gëw‹ks
 = 0;

6161 
tŸÆ_ac˚±ed
 = 0;

6162 
tŸÆ_ªje˘ed
 = 0;

6163 
hw_îr‹s
 = 0;

6164 
tŸÆ_°Æe
 = 0;

6165 
tŸÆ_disˇrded
 = 0;

6166 
loˇl_w‹k
 = 0;

6167 
tŸÆ_go
 = 0;

6168 
tŸÆ_ro
 = 0;

6169 
tŸÆ_£cs
 = 1.0;

6170 
√w_tŸÆ_£cs
 = 1.0;

6171 
œ°_tŸÆ_£cs
 = 1.0;

6172 
tŸÆ_diff1
 = 0;

6173 
found_blocks
 = 0;

6174 
tŸÆ_diff_ac˚±ed
 = 0;

6175 
tŸÆ_diff_ªje˘ed
 = 0;

6176 
tŸÆ_diff_°Æe
 = 0;

6178 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

6180 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

6182 
poﬁ
->
gëw‹k_ªque°ed
 = 0;

6183 
poﬁ
->
ac˚±ed
 = 0;

6184 
poﬁ
->
ªje˘ed
 = 0;

6185 
poﬁ
->
°Æe_sh¨es
 = 0;

6186 
poﬁ
->
disˇrded_w‹k
 = 0;

6187 
poﬁ
->
gëÁû_ocˇsi⁄s
 = 0;

6188 
poﬁ
->
ªmŸeÁû_ocˇsi⁄s
 = 0;

6189 
poﬁ
->
œ°_sh¨e_time
 = 0;

6190 
poﬁ
->
diff1
 = 0;

6191 
poﬁ
->
diff_ac˚±ed
 = 0;

6192 
poﬁ
->
diff_ªje˘ed
 = 0;

6193 
poﬁ
->
diff_°Æe
 = 0;

6194 
poﬁ
->
œ°_sh¨e_diff
 = 0;

6197 
	`zîo_be°sh¨e
();

6199 
i
 = 0; i < 
tŸÆ_devi˚s
; ++i)

6201 
cgpu_öfo
 *
cgpu
 = 
	`gë_devi˚s
(
i
);

6203 
	`c›y_time
(&
cgpu
->
dev_°¨t_tv
, &
tŸÆ_tv_°¨t
);

6205 
	`muãx_lock
(&
hash_lock
);

6207 
cgpu
->
tŸÆ_mhashes
 = 0;

6208 
cgpu
->
ac˚±ed
 = 0;

6209 
cgpu
->
ªje˘ed
 = 0;

6210 
cgpu
->
hw_îr‹s
 = 0;

6211 
cgpu
->
utûôy
 = 0.0;

6212 
cgpu
->
œ°_sh¨e_poﬁ_time
 = 0;

6213 
cgpu
->
diff1
 = 0;

6214 
cgpu
->
diff_ac˚±ed
 = 0;

6215 
cgpu
->
diff_ªje˘ed
 = 0;

6216 
cgpu
->
œ°_sh¨e_diff
 = 0;

6218 
	`muãx_u∆ock
(&
hash_lock
);

6223 
cgpu
->
drv
->
	`zîo_°©s
(cgpu);

6225 
	}
}

6228 
	$£t_high¥io
()

6231 
ªt
 = 
	`ni˚
(-10);

6233 i‡(!
ªt
)

6234 
	`≠∂og
(
LOG_DEBUG
, "UnableÅo setÅhreadÅo highÖriority");

6236 
	}
}

6239 
	$£t_low¥io
()

6242 
ªt
 = 
	`ni˚
(10);

6244 i‡(!
ªt
)

6246 
	`≠∂og
(
LOG_INFO
, "UnableÅo setÅhreadÅoÜowÖriority");

6249 
	}
}

6251 #ifde‡
HAVE_CURSES


6252 
	$di•œy_poﬁs
()

6254 
poﬁ
 *pool;

6255 
£À˘ed
, 
i
;

6256 
öput
;

6258 
›t_logöput
 = 
åue
;

6259 
	`immedok
(
logwö
, 
åue
);

6260 
	`˛ór_logwö
();

6262 
upd©ed
:

6264 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

6266 
poﬁ
 = 
poﬁs
[
i
];

6268 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

6270 
	`w©å⁄
(
logwö
, 
A_BOLD
);

6273 i‡(
poﬁ
->
íabÀd
 !
POOL_ENABLED
)

6275 
	`w©å⁄
(
logwö
, 
A_DIM
);

6278 
	`wlog¥öt
("%d: ", 
poﬁ
->
poﬁ_no
);

6279 
poﬁ
->
íabÀd
)

6281 
POOL_ENABLED
:

6282 
	`wlog¥öt
("Enabled ");

6284 
POOL_DISABLED
:

6285 
	`wlog¥öt
("Disabled ");

6287 
POOL_REJECTING
:

6288 
	`wlog¥öt
("Rejecting ");

6291 
	`wlog¥öt
("%s Quota %d Prio %d: %s User:%s\n",

6292 
poﬁ
->
idÀ
? "Dead" : "Alive",

6293 
poﬁ
->
quŸa
,

6294 
poﬁ
->
¥io
,

6295 
poﬁ
->
Ωc_uæ
,Öoﬁ->
Ωc_u£r
);

6296 
	`w©åoff
(
logwö
, 
A_BOLD
 | 
A_DIM
);

6298 
ªåy
:

6299 
	`wlog¥öt
("\nCurrentÖool management strategy: %s\n",

6300 
°øãgõs
[
poﬁ_°øãgy
].
s
);

6301 i‡(
poﬁ_°øãgy
 =
POOL_ROTATE
)

6302 
	`wlog¥öt
("SëÅÿrŸ©êevîy %d möuãs\n", 
›t_rŸ©e_≥riod
);

6303 
	`wlog¥öt
("[F]aûovî o∆y %s\n", 
›t_Áû_⁄ly
 ? "enabled" : "disabled");

6304 
	`wlog¥öt
("Pool [A]dd [R]emove [D]isable [E]nable [Q]uota change\n");

6305 
	`wlog¥öt
("[C]hange management strategy [S]witchÖool [I]nformation\n");

6306 
	`wlog¥öt
("OrÖressány other keyÅo continue\n");

6307 
	`logwö_upd©e
();

6308 
öput
 = 
	`gëch
();

6310 i‡(!
	`°∫ˇ£cmp
(&
öput
, "a", 1))

6312 
	`öput_poﬁ
(
åue
);

6313 
upd©ed
;

6315 i‡(!
	`°∫ˇ£cmp
(&
öput
, "r", 1))

6317 i‡(
tŸÆ_poﬁs
 <= 1)

6319 
	`wlog¥öt
("CannotÑemoveÜastÖool");

6320 
ªåy
;

6322 
£À˘ed
 = 
	`cur£s_öt
("SelectÖoolÇumber");

6323 i‡(
£À˘ed
 < 0 || sñe˘ed >
tŸÆ_poﬁs
)

6325 
	`wlog¥öt
("Invalid selection\n");

6326 
ªåy
;

6328 
poﬁ
 = 
poﬁs
[
£À˘ed
];

6329 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

6330 
	`swôch_poﬁs
(
NULL
);

6331 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

6333 
	`wlog¥öt
("UnableÅoÑemoveÖool dueÅoáctivity\n");

6334 
ªåy
;

6336 
	`dißbÀ_poﬁ
(
poﬁ
);

6337 
	`ªmove_poﬁ
(
poﬁ
);

6338 
upd©ed
;

6340 i‡(!
	`°∫ˇ£cmp
(&
öput
, "s", 1))

6342 
£À˘ed
 = 
	`cur£s_öt
("SelectÖoolÇumber");

6343 i‡(
£À˘ed
 < 0 || sñe˘ed >
tŸÆ_poﬁs
)

6345 
	`wlog¥öt
("Invalid selection\n");

6346 
ªåy
;

6348 
poﬁ
 = 
poﬁs
[
£À˘ed
];

6349 
	`íabÀ_poﬁ
(
poﬁ
);

6350 
	`swôch_poﬁs
(
poﬁ
);

6351 
upd©ed
;

6353 i‡(!
	`°∫ˇ£cmp
(&
öput
, "d", 1))

6355 i‡(
íabÀd_poﬁs
 <= 1)

6357 
	`wlog¥öt
("Cannot disableÜastÖool");

6358 
ªåy
;

6360 
£À˘ed
 = 
	`cur£s_öt
("SelectÖoolÇumber");

6361 i‡(
£À˘ed
 < 0 || sñe˘ed >
tŸÆ_poﬁs
)

6363 
	`wlog¥öt
("Invalid selection\n");

6364 
ªåy
;

6366 
poﬁ
 = 
poﬁs
[
£À˘ed
];

6367 
	`dißbÀ_poﬁ
(
poﬁ
);

6368 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

6369 
	`swôch_poﬁs
(
NULL
);

6370 
upd©ed
;

6372 i‡(!
	`°∫ˇ£cmp
(&
öput
, "e", 1))

6374 
£À˘ed
 = 
	`cur£s_öt
("SelectÖoolÇumber");

6375 i‡(
£À˘ed
 < 0 || sñe˘ed >
tŸÆ_poﬁs
)

6377 
	`wlog¥öt
("Invalid selection\n");

6378 
ªåy
;

6380 
poﬁ
 = 
poﬁs
[
£À˘ed
];

6381 
	`íabÀ_poﬁ
(
poﬁ
);

6382 i‡(
poﬁ
->
¥io
 < 
	`cuºít_poﬁ
()->prio)

6383 
	`swôch_poﬁs
(
poﬁ
);

6384 
upd©ed
;

6386 i‡(!
	`°∫ˇ£cmp
(&
öput
, "c", 1))

6388 
i
 = 0; i <
TOP_STRATEGY
; i++)

6389 
	`wlog¥öt
("%d: %s\n", 
i
, 
°øãgõs
[i].
s
);

6390 
£À˘ed
 = 
	`cur£s_öt
("Select strategyÇumberÅype");

6391 i‡(
£À˘ed
 < 0 || sñe˘ed > 
TOP_STRATEGY
)

6393 
	`wlog¥öt
("Invalid selection\n");

6394 
ªåy
;

6396 i‡(
£À˘ed
 =
POOL_ROTATE
)

6398 
›t_rŸ©e_≥riod
 = 
	`cur£s_öt
("Select interval in minutes");

6400 i‡(
›t_rŸ©e_≥riod
 < 0 || opt_rotate_period > 9999)

6402 
›t_rŸ©e_≥riod
 = 0;

6403 
	`wlog¥öt
("Invalid selection\n");

6404 
ªåy
;

6407 
poﬁ_°øãgy
 = 
£À˘ed
;

6408 
	`swôch_poﬁs
(
NULL
);

6409 
upd©ed
;

6411 i‡(!
	`°∫ˇ£cmp
(&
öput
, "i", 1))

6413 
£À˘ed
 = 
	`cur£s_öt
("SelectÖoolÇumber");

6414 i‡(
£À˘ed
 < 0 || sñe˘ed >
tŸÆ_poﬁs
)

6416 
	`wlog¥öt
("Invalid selection\n");

6417 
ªåy
;

6419 
poﬁ
 = 
poﬁs
[
£À˘ed
];

6420 
	`di•œy_poﬁ_summ¨y
(
poﬁ
);

6421 
ªåy
;

6423 i‡(!
	`°∫ˇ£cmp
(&
öput
, "q", 1))

6425 
£À˘ed
 = 
	`cur£s_öt
("SelectÖoolÇumber");

6426 i‡(
£À˘ed
 < 0 || sñe˘ed >
tŸÆ_poﬁs
)

6428 
	`wlog¥öt
("Invalid selection\n");

6429 
ªåy
;

6431 
poﬁ
 = 
poﬁs
[
£À˘ed
];

6432 
£À˘ed
 = 
	`cur£s_öt
("Set quota");

6433 i‡(
£À˘ed
 < 0)

6435 
	`wlog¥öt
("InvalidÇegative quota\n");

6436 
ªåy
;

6438 
poﬁ
->
quŸa
 = 
£À˘ed
;

6439 
	`adju°_quŸa_gcd
();

6440 
upd©ed
;

6443 
	`˛ór_logwö
();

6445 
	`immedok
(
logwö
, 
Ál£
);

6446 
›t_logöput
 = 
Ál£
;

6447 
	}
}

6449 
	$di•œy_›ti⁄s
()

6451 
£À˘ed
;

6452 
öput
;

6454 
›t_logöput
 = 
åue
;

6455 
	`immedok
(
logwö
, 
åue
);

6456 
	`˛ór_logwö
();

6457 
ªåy
:

6458 
	`wlog¥öt
("[N]ormal [C]lear [S]ilent mode (disableáll output)\n");

6459 
	`wlog¥öt
("[D]ebug:%s\n[P]er-device:%s\n[Q]uiet:%s\n[V]erbose:%s\n"

6465 
›t_debug
 ? "on" : "off",

6466 
w™t_≥r_devi˚_°©s
? "on" : "off",

6467 
›t_quõt
 ? "on" : "off",

6468 
›t_log_ouçut
 ? "on" : "off",

6469 
›t_¥Ÿocﬁ
 ? "on" : "off",

6470 
›t_w‹ktime
 ? "on" : "off",

6471 
›t_com∑˘
 ? "on" : "off",

6472 
swôch_°©us
 ? "enabled" : "disabled",

6473 
›t_wides¸ìn
 ? "enabled" : "disabled",

6474 
›t_log_öãrvÆ
);

6475 
	`wlog¥öt
("Selectán option orány other keyÅoÑeturn\n");

6476 
	`logwö_upd©e
();

6477 
öput
 = 
	`gëch
();

6478 i‡(!
	`°∫ˇ£cmp
(&
öput
, "q", 1))

6480 
›t_quõt
 ^
åue
;

6481 
	`wlog¥öt
("Quõàmodê%s\n", 
›t_quõt
 ? "enabled" : "disabled");

6482 
ªåy
;

6484 i‡(!
	`°∫ˇ£cmp
(&
öput
, "v", 1))

6486 
›t_log_ouçut
 ^
åue
;

6487 i‡(
›t_log_ouçut
)

6488 
›t_quõt
 = 
Ál£
;

6489 
	`wlog¥öt
("Vîbo£ modê%s\n", 
›t_log_ouçut
 ? "enabled" : "disabled");

6490 
ªåy
;

6492 i‡(!
	`°∫ˇ£cmp
(&
öput
, "n", 1))

6494 
›t_log_ouçut
 = 
Ál£
;

6495 
›t_debug
 = 
Ál£
;

6496 
›t_quõt
 = 
Ál£
;

6497 
›t_¥Ÿocﬁ
 = 
Ál£
;

6498 
›t_com∑˘
 = 
Ál£
;

6499 
w™t_≥r_devi˚_°©s
 = 
Ál£
;

6500 
	`wlog¥öt
("Output modeÑesetÅoÇormal\n");

6501 
	`swôch_logsize
(
Ál£
);

6502 
ªåy
;

6504 i‡(!
	`°∫ˇ£cmp
(&
öput
, "d", 1))

6506 
›t_debug
 ^
åue
;

6507 
›t_log_ouçut
 = 
›t_debug
;

6508 i‡(
›t_debug
)

6509 
›t_quõt
 = 
Ál£
;

6510 
	`wlog¥öt
("Debug modê%s\n", 
›t_debug
 ? "enabled" : "disabled");

6511 
ªåy
;

6513 i‡(!
	`°∫ˇ£cmp
(&
öput
, "m", 1))

6515 
›t_com∑˘
 ^
åue
;

6516 
	`wlog¥öt
("Com∑˘ modê%s\n", 
›t_com∑˘
 ? "enabled" : "disabled");

6517 
	`swôch_logsize
(
Ál£
);

6518 
ªåy
;

6520 i‡(!
	`°∫ˇ£cmp
(&
öput
, "p", 1))

6522 
w™t_≥r_devi˚_°©s
 ^
åue
;

6523 
›t_log_ouçut
 = 
w™t_≥r_devi˚_°©s
;

6524 
	`wlog¥öt
("Pî-devi˚ sèt†%s\n", 
w™t_≥r_devi˚_°©s
 ? "enabled" : "disabled");

6525 
ªåy
;

6527 i‡(!
	`°∫ˇ£cmp
(&
öput
, "r", 1))

6529 
›t_¥Ÿocﬁ
 ^
åue
;

6530 i‡(
›t_¥Ÿocﬁ
)

6531 
›t_quõt
 = 
Ál£
;

6532 
	`wlog¥öt
("RPCÖrŸocﬁ debuggög %s\n", 
›t_¥Ÿocﬁ
 ? "enabled" : "disabled");

6533 
ªåy
;

6535 i‡(!
	`°∫ˇ£cmp
(&
öput
, "c", 1))

6536 
	`˛ór_logwö
();

6537 i‡(!
	`°∫ˇ£cmp
(&
öput
, "l", 1))

6539 
£À˘ed
 = 
	`cur£s_öt
("Interval in seconds");

6540 i‡(
£À˘ed
 < 0 || selected > 9999)

6542 
	`wlog¥öt
("Invalid selection\n");

6543 
ªåy
;

6545 
›t_log_öãrvÆ
 = 
£À˘ed
;

6546 
	`wlog¥öt
("Log i¡îvÆ sëÅÿ%d sec⁄ds\n", 
›t_log_öãrvÆ
);

6547 
ªåy
;

6549 i‡(!
	`°∫ˇ£cmp
(&
öput
, "s", 1))

6551 
›t_ªÆquõt
 = 
åue
;

6553 i‡(!
	`°∫ˇ£cmp
(&
öput
, "w", 1))

6555 
›t_w‹ktime
 ^
åue
;

6556 
	`wlog¥öt
("W‹kTimêdëaû†%s\n", 
›t_w‹ktime
 ? "enabled" : "disabled");

6557 
ªåy
;

6559 i‡(!
	`°∫ˇ£cmp
(&
öput
, "t", 1))

6561 
swôch_°©us
 ^
åue
;

6562 
ªåy
;

6564 i‡(!
	`°∫ˇ£cmp
(&
öput
, "i", 1))

6566 
›t_wides¸ìn
 ^
åue
;

6567 
ªåy
;

6569 i‡(!
	`°∫ˇ£cmp
(&
öput
, "z", 1))

6571 
	`zîo_°©s
();

6572 
ªåy
;

6575 
	`˛ór_logwö
();

6577 
	`immedok
(
logwö
, 
Ál£
);

6578 
›t_logöput
 = 
Ál£
;

6579 
	}
}

6582 
	$deÁu…_ßve_fûe
(*
fûíame
)

6584 i‡(
deÁu…_c⁄fig
 && *default_config)

6586 
	`°r˝y
(
fûíame
, 
deÁu…_c⁄fig
);

6590 #i‡
	`deföed
(
unix
Ë|| deföed(
__APPLE__
)

6591 i‡(
	`gëív
("HOME") && *getenv("HOME"))

6593 
	`°r˝y
(
fûíame
, 
	`gëív
("HOME"));

6594 
	`°rˇt
(
fûíame
, "/");

6597 
	`°r˝y
(
fûíame
, "");

6598 
	`°rˇt
(
fûíame
, ".bmminer/");

6599 
	`mkdú
(
fûíame
, 0777);

6601 
	`°r˝y
(
fûíame
, "");

6603 
	`°rˇt
(
fûíame
, 
def_c⁄f
);

6604 
	}
}

6606 #ifde‡
HAVE_CURSES


6607 
	$£t_›ti⁄s
()

6609 
£À˘ed
;

6610 
öput
;

6612 
›t_logöput
 = 
åue
;

6613 
	`immedok
(
logwö
, 
åue
);

6614 
	`˛ór_logwö
();

6615 
ªåy
:

6616 
	`wlog¥öt
("[Q]ueue: %d\n[S]cantime: %d\n[E]xpiry: %d\n"

6618 
›t_queue
, 
›t_sˇ¡ime
, 
›t_expúy
);

6619 
	`wlog¥öt
("Selectán option orány other keyÅoÑeturn\n");

6620 
	`logwö_upd©e
();

6621 
öput
 = 
	`gëch
();

6623 i‡(!
	`°∫ˇ£cmp
(&
öput
, "q", 1))

6625 
£À˘ed
 = 
	`cur£s_öt
("Extra work itemsÅo queue");

6626 i‡(
£À˘ed
 < 0 || selected > 9999)

6628 
	`wlog¥öt
("Invalid selection\n");

6629 
ªåy
;

6631 
›t_queue
 = 
£À˘ed
;

6632 i‡(
›t_queue
 < 
max_queue
)

6633 
max_queue
 = 
›t_queue
;

6634 
ªåy
;

6636 i‡(!
	`°∫ˇ£cmp
(&
öput
, "s", 1))

6638 
£À˘ed
 = 
	`cur£s_öt
("Set scantime in seconds");

6639 i‡(
£À˘ed
 < 0 || selected > 9999)

6641 
	`wlog¥öt
("Invalid selection\n");

6642 
ªåy
;

6644 
›t_sˇ¡ime
 = 
£À˘ed
;

6645 
ªåy
;

6647 i‡(!
	`°∫ˇ£cmp
(&
öput
, "e", 1))

6649 
£À˘ed
 = 
	`cur£s_öt
("SetÉxpiryÅime in seconds");

6650 i‡(
£À˘ed
 < 0 || selected > 9999)

6652 
	`wlog¥öt
("Invalid selection\n");

6653 
ªåy
;

6655 
›t_expúy
 = 
£À˘ed
;

6656 
ªåy
;

6658 i‡(!
	`°∫ˇ£cmp
(&
öput
, "w", 1))

6660 
FILE
 *
fcfg
;

6661 *
°r
, 
fûíame
[
PATH_MAX
], 
¥om±
[PATH_MAX + 50];

6663 
	`deÁu…_ßve_fûe
(
fûíame
);

6664 
	`¢¥ötf
(
¥om±
, ’rom±), "C⁄fig fûíamêtÿwrôê(E¡î f‹ deÁu…Ë[%s]", 
fûíame
);

6665 
°r
 = 
	`cur£s_öput
(
¥om±
);

6666 i‡(
	`°rcmp
(
°r
, "-1"))

6668 
°©
 
°©buf
;

6670 
	`°r˝y
(
fûíame
, 
°r
);

6671 
	`‰ì
(
°r
);

6672 i‡(!
	`°©
(
fûíame
, &
°©buf
))

6674 
	`wlog¥öt
("FileÉxists, overwrite?\n");

6675 
öput
 = 
	`gëch
();

6676 i‡(
	`°∫ˇ£cmp
(&
öput
, "y", 1))

6677 
ªåy
;

6681 
	`‰ì
(
°r
);

6682 
fcfg
 = 
	`f›í
(
fûíame
, "w");

6683 i‡(!
fcfg
)

6685 
	`wlog¥öt
("Cannot open or create file\n");

6686 
ªåy
;

6688 
	`wrôe_c⁄fig
(
fcfg
);

6689 
	`f˛o£
(
fcfg
);

6690 
ªåy
;

6693 i‡(!
	`°∫ˇ£cmp
(&
öput
, "c", 1))

6695 
	`wlog¥öt
("Are you sure?\n");

6696 
öput
 = 
	`gëch
();

6697 i‡(!
	`°∫ˇ£cmp
(&
öput
, "y", 1))

6698 
	`≠p_ª°¨t
();

6700 
	`˛ór_logwö
();

6703 
	`˛ór_logwö
();

6705 
	`immedok
(
logwö
, 
Ál£
);

6706 
›t_logöput
 = 
Ál£
;

6707 
	}
}

6709 #ifde‡
USE_USBUTILS


6710 
	$mt_íabÀ
(
thr_öfo
 *
mythr
)

6712 
	`cg£m_po°
(&
mythr
->
£m
);

6713 
	}
}

6715 
	$£t_usb
()

6717 
£À˘ed
, 
i
, 
mt
, 
íabÀd
, 
dißbÀd
, 
zombõ
, 
tŸÆ
, 
bœckli°ed
;

6718 
cgpu_öfo
 *
cgpu
;

6719 
thr_öfo
 *
thr
;

6720 
vÆ
;

6721 
öput
;

6723 
›t_logöput
 = 
åue
;

6724 
	`immedok
(
logwö
, 
åue
);

6725 
	`˛ór_logwö
();

6727 
ªåy
:

6728 
íabÀd
 = 0;

6729 
dißbÀd
 = 0;

6730 
zombõ
 = 0;

6731 
tŸÆ
 = 0;

6732 
bœckli°ed
 = 0;

6734 
	`rd_lock
(&
möög_thr_lock
);

6735 
mt
 = 
möög_thªads
;

6736 
	`rd_u∆ock
(&
möög_thr_lock
);

6738 
i
 = 0; i < 
mt
; i++)

6740 
cgpu
 = 
möög_thr
[
i
]->cgpu;

6741 i‡(
	`u∆ikñy
(!
cgpu
))

6743 i‡(
cgpu
->
usböfo
.
nodev
)

6744 
zombõ
++;

6745 i‡(
cgpu
->
deví
 =
DEV_DISABLED
)

6746 
dißbÀd
++;

6748 
íabÀd
++;

6749 i‡(
cgpu
->
bœckli°ed
)

6750 
bœckli°ed
++;

6751 
tŸÆ
++;

6753 
	`wlog¥öt
("HŸ∂ug i¡îvÆ:%d\n", 
hŸ∂ug_time
);

6754 
	`wlog¥öt
("%d USB devices, %dÉnabled, %d disabled, %d zombie\n",

6755 
tŸÆ
, 
íabÀd
, 
dißbÀd
, 
zombõ
);

6756 
	`wlog¥öt
("[S]ummary of device information\n");

6757 
	`wlog¥öt
("[E]nable device\n");

6758 
	`wlog¥öt
("[D]isable device\n");

6759 
	`wlog¥öt
("[U]nplugÅoállow hotplugÑestart\n");

6760 
	`wlog¥öt
("[R]eset device USB\n");

6761 
	`wlog¥öt
("[L]istáll known devices\n");

6762 
	`wlog¥öt
("[B]lacklist current device from current instance of cgminer\n");

6763 
	`wlog¥öt
("[W]hitelistÖreviously blacklisted device\n");

6764 
	`wlog¥öt
("[H]otplug interval (0Åo disable)\n");

6765 
	`wlog¥öt
("Selectán option orány other keyÅoÑeturn\n");

6766 
	`logwö_upd©e
();

6767 
öput
 = 
	`gëch
();

6769 i‡(!
	`°∫ˇ£cmp
(&
öput
, "s", 1))

6771 
£À˘ed
 = 
	`cur£s_öt
("Select deviceÇumber");

6772 i‡(
£À˘ed
 < 0 || sñe˘ed >
mt
)

6774 
	`wlog¥öt
("Invalid selection\n");

6775 
ªåy
;

6777 
cgpu
 = 
möög_thr
[
£À˘ed
]->cgpu;

6778 
	`wlog¥öt
("Devi˚ %03u:%03u\n", 
cgpu
->
usböfo
.
bus_numbî
, cgpu->usböfo.
devi˚_addªss
);

6779 
	`wlog¥öt
("Namê%s\n", 
cgpu
->
drv
->
«me
);

6780 
	`wlog¥öt
("ID %d\n", 
cgpu
->
devi˚_id
);

6781 
	`wlog¥öt
("E«bÀd: %s\n", 
cgpu
->
deví
 !
DEV_DISABLED
 ? "Yes" : "No");

6782 
	`wlog¥öt
("Tem≥øtuª %.1f\n", 
cgpu
->
ãmp
);

6783 
	`wlog¥öt
("MHSáv %.0f\n", 
cgpu
->
tŸÆ_mhashes
 / 
	`cgpu_ru¡ime
(cgpu));

6784 
	`wlog¥öt
("Ac˚±ed %d\n", 
cgpu
->
ac˚±ed
);

6785 
	`wlog¥öt
("Reje˘ed %d\n", 
cgpu
->
ªje˘ed
);

6786 
	`wlog¥öt
("H¨dw¨êEº‹†%d\n", 
cgpu
->
hw_îr‹s
);

6787 
	`wlog¥öt
("La° Sh¨êPoﬁ %d\n", 
cgpu
->
œ°_sh¨e_poﬁ_time
 > 0 ? cgpu->
œ°_sh¨e_poﬁ
 : -1);

6788 
	`wlog¥öt
("TŸÆ MH %.1f\n", 
cgpu
->
tŸÆ_mhashes
);

6789 
	`wlog¥öt
("Diff1 W‹k %"
PRId64
"\n", 
cgpu
->
diff1
);

6790 
	`wlog¥öt
("Difficu…y Ac˚±ed %.1f\n", 
cgpu
->
diff_ac˚±ed
);

6791 
	`wlog¥öt
("Difficu…y Reje˘ed %.1f\n", 
cgpu
->
diff_ªje˘ed
);

6792 
	`wlog¥öt
("La° Sh¨êDifficu…y %.1f\n", 
cgpu
->
œ°_sh¨e_diff
);

6793 
	`wlog¥öt
("NÿDevi˚: %s\n", 
cgpu
->
usböfo
.
nodev
 ? "True" : "False");

6794 
	`wlog¥öt
("La° VÆid W‹k %"
PRIu64
"\n", (
uöt64_t
)
cgpu
->
œ°_devi˚_vÆid_w‹k
);

6795 
vÆ
 = 0;

6796 i‡(
cgpu
->
hw_îr‹s
 + cgpu->
diff1
)

6797 
vÆ
 = 
cgpu
->
hw_îr‹s
 / (cgpu->hw_îr‹†+ cgpu->
diff1
);

6798 
	`wlog¥öt
("Devi˚ H¨dw¨ê%.1f%%\n", 
vÆ
);

6799 
vÆ
 = 0;

6800 i‡(
cgpu
->
diff1
)

6801 
vÆ
 = 
cgpu
->
diff_ªje˘ed
 / cgpu->
diff1
;

6802 
	`wlog¥öt
("Devi˚ Reje˘ed %.1f%%\n", 
vÆ
);

6803 
ªåy
;

6805 i‡(!
	`°∫ˇ£cmp
(&
öput
, "e", 1))

6807 
£À˘ed
 = 
	`cur£s_öt
("Select deviceÇumber");

6808 i‡(
£À˘ed
 < 0 || sñe˘ed >
mt
)

6810 
	`wlog¥öt
("Invalid selection\n");

6811 
ªåy
;

6813 
cgpu
 = 
möög_thr
[
£À˘ed
]->cgpu;

6814 i‡(
cgpu
->
usböfo
.
nodev
)

6816 
	`wlog¥öt
("DeviceÑemoved, unableÅoÑe-enable!\n");

6817 
ªåy
;

6819 
thr
 = 
	`gë_thªad
(
£À˘ed
);

6820 
cgpu
->
deví
 = 
DEV_ENABLED
;

6821 
	`mt_íabÀ
(
thr
);

6822 
ªåy
;

6824 i‡(!
	`°∫ˇ£cmp
(&
öput
, "d", 1))

6826 
£À˘ed
 = 
	`cur£s_öt
("Select deviceÇumber");

6827 i‡(
£À˘ed
 < 0 || sñe˘ed >
mt
)

6829 
	`wlog¥öt
("Invalid selection\n");

6830 
ªåy
;

6832 
cgpu
 = 
möög_thr
[
£À˘ed
]->cgpu;

6833 
cgpu
->
deví
 = 
DEV_DISABLED
;

6834 
ªåy
;

6836 i‡(!
	`°∫ˇ£cmp
(&
öput
, "u", 1))

6838 
£À˘ed
 = 
	`cur£s_öt
("Select deviceÇumber");

6839 i‡(
£À˘ed
 < 0 || sñe˘ed >
mt
)

6841 
	`wlog¥öt
("Invalid selection\n");

6842 
ªåy
;

6844 
cgpu
 = 
möög_thr
[
£À˘ed
]->cgpu;

6845 i‡(
cgpu
->
usböfo
.
nodev
)

6847 
	`wlog¥öt
("DeviceálreadyÑemoved, unableÅo unplug!\n");

6848 
ªåy
;

6850 
	`usb_nodev
(
cgpu
);

6851 
ªåy
;

6853 i‡(!
	`°∫ˇ£cmp
(&
öput
, "r", 1))

6855 
£À˘ed
 = 
	`cur£s_öt
("Select deviceÇumber");

6856 i‡(
£À˘ed
 < 0 || sñe˘ed >
mt
)

6858 
	`wlog¥öt
("Invalid selection\n");

6859 
ªåy
;

6861 
cgpu
 = 
möög_thr
[
£À˘ed
]->cgpu;

6862 i‡(
cgpu
->
usböfo
.
nodev
)

6864 
	`wlog¥öt
("DeviceálreadyÑemoved, unableÅoÑeset!\n");

6865 
ªåy
;

6867 
	`usb_ª£t
(
cgpu
);

6868 
ªåy
;

6870 i‡(!
	`°∫ˇ£cmp
(&
öput
, "b", 1))

6872 
£À˘ed
 = 
	`cur£s_öt
("Select deviceÇumber");

6873 i‡(
£À˘ed
 < 0 || sñe˘ed >
mt
)

6875 
	`wlog¥öt
("Invalid selection\n");

6876 
ªåy
;

6878 
cgpu
 = 
möög_thr
[
£À˘ed
]->cgpu;

6879 i‡(
cgpu
->
usböfo
.
nodev
)

6881 
	`wlog¥öt
("DeviceálreadyÑemoved, unableÅo blacklist!\n");

6882 
ªåy
;

6884 
	`bœckli°_cgpu
(
cgpu
);

6885 
ªåy
;

6887 i‡(!
	`°∫ˇ£cmp
(&
öput
, "w", 1))

6889 i‡(!
bœckli°ed
)

6891 
	`wlog¥öt
("No blacklisted devices!\n");

6892 
ªåy
;

6894 
	`wlog¥öt
("Blacklisted devices:\n");

6895 
i
 = 0; i < 
mt
; i++)

6897 
cgpu
 = 
möög_thr
[
i
]->cgpu;

6898 i‡(
	`u∆ikñy
(!
cgpu
))

6900 i‡(
cgpu
->
bœckli°ed
)

6902 
	`wlog¥öt
("%d: %†%d %03u:%03u\n", 
i
, 
cgpu
->
drv
->
«me
,

6903 
cgpu
->
devi˚_id
, cgpu->
usböfo
.
bus_numbî
,

6904 
cgpu
->
usböfo
.
devi˚_addªss
);

6907 
£À˘ed
 = 
	`cur£s_öt
("Select deviceÇumber");

6908 i‡(
£À˘ed
 < 0 || sñe˘ed >
mt
)

6910 
	`wlog¥öt
("Invalid selection\n");

6911 
ªåy
;

6913 
cgpu
 = 
möög_thr
[
£À˘ed
]->cgpu;

6914 i‡(!
cgpu
->
bœckli°ed
)

6916 
	`wlog¥öt
("DeviceÇot blacklisted, unableÅo whitelist\n");

6917 
ªåy
;

6919 
	`whôñi°_cgpu
(
cgpu
);

6920 
ªåy
;

6922 i‡(!
	`°∫ˇ£cmp
(&
öput
, "h", 1))

6924 
£À˘ed
 = 
	`cur£s_öt
("Select hotplug interval in seconds (0Åo disable)");

6925 i‡(
£À˘ed
 < 0 || selected > 9999)

6927 
	`wlog¥öt
("Invalid value\n");

6928 
ªåy
;

6930 
hŸ∂ug_time
 = 
£À˘ed
;

6931 
ªåy
;

6933 i‡(!
	`°∫ˇ£cmp
(&
öput
, "l", 1))

6935 
	`usb_li°
();

6936 
ªåy
;

6939 
	`˛ór_logwö
();

6941 
	`immedok
(
logwö
, 
Ál£
);

6942 
›t_logöput
 = 
Ál£
;

6943 
	}
}

6946 *
	$öput_thªad
(
__maybe_unu£d
 *
u£rd©a
)

6948 
	`±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, 
NULL
);

6950 
	`RíameThªad
("Input");

6952 i‡(!
cur£s_a˘ive
)

6953  
NULL
;

6957 
öput
;

6959 
öput
 = 
	`gëch
();

6960 i‡(!
	`°∫ˇ£cmp
(&
öput
, "q", 1))

6962 
	`kûl_w‹k
();

6963  
NULL
;

6965 i‡(!
	`°∫ˇ£cmp
(&
öput
, "d", 1))

6966 
	`di•œy_›ti⁄s
();

6967 i‡(!
	`°∫ˇ£cmp
(&
öput
, "p", 1))

6968 
	`di•œy_poﬁs
();

6969 i‡(!
	`°∫ˇ£cmp
(&
öput
, "s", 1))

6970 
	`£t_›ti⁄s
();

6971 #ifde‡
USE_USBUTILS


6972 i‡(!
	`°∫ˇ£cmp
(&
öput
, "u", 1))

6973 
	`£t_usb
();

6975 i‡(
›t_ªÆquõt
)

6977 
	`dißbÀ_cur£s
();

6982  
NULL
;

6983 
	}
}

6986 *
	$≠i_thªad
(*
u£rd©a
)

6988 
thr_öfo
 *
mythr
 = 
u£rd©a
;

6990 
	`±hªad_dëach
(
	`±hªad_£lf
());

6991 
	`±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, 
NULL
);

6993 
	`RíameThªad
("API");

6995 
	`£t_low¥io
();

6996 
	`≠i
(
≠i_thr_id
);

6998 
	`PTH
(
mythr
) = 0L;

7000  
NULL
;

7001 
	}
}

7007 
	$thªad_ªp‹tö
(
thr_öfo
 *
thr
)

7009 
thr
->
gëw‹k
 = 
Ál£
;

7010 
	`cgtime
(&
thr
->
œ°
);

7012 
thr
->
cgpu
->
°©us
 = 
LIFE_WELL
;

7013 
thr
->
cgpu
->
devi˚_œ°_wñl
 = 
	`time
(
NULL
);

7014 
	}
}

7019 
	$thªad_ªp‹tout
(
thr_öfo
 *
thr
)

7021 
thr
->
gëw‹k
 = 
åue
;

7022 
	`cgtime
(&
thr
->
œ°
);

7024 
thr
->
cgpu
->
°©us
 = 
LIFE_WELL
;

7025 
thr
->
cgpu
->
devi˚_œ°_wñl
 = 
	`time
(
NULL
);

7026 
	}
}

7028 
	$hashmëî
(
thr_id
, 
uöt64_t
 
hashes_d⁄e
)

7030 
boﬁ
 
showlog
 = 
Ál£
;

7031 
tv_tdiff
;

7032 
time_t
 
now_t
;

7033 
diff_t
;

7035 
uöt64_t
 
loˇl_mhashes_d⁄e
 = 0;

7036 
uöt64_t
 
loˇl_mhashes_d⁄e_avg
 = 0;

7037 
loˇl_mhashes_d⁄e_cou¡
 = 0;

7038 
i
 = 0;

7040 
sysöfo
 
sInfo
;

7041 i‡(
	`sysöfo
(&
sInfo
))

7043 
	`≠∂og
(
LOG_INFO
, "FailedÅo get sysinfo,Érrno:%u,Ñeason:%s\n",

7044 
î∫o
, 
	`°ªº‹
(errno));

7045 
tŸÆ_tv_íd_sys
=
	`time
(
NULL
);

7049 
tŸÆ_tv_íd_sys
=
sInfo
.
u±ime
;

7052 
	`cgtime
(&
tŸÆ_tv_íd
);

7054 
tv_tdiff
 = 
	`tdiff
(&
tŸÆ_tv_íd
, &
tv_hashmëî
);

7055 
now_t
 = 
tŸÆ_tv_íd
.
tv_£c
;

7056 
diff_t
 = 
now_t
 - 
hashdi•œy_t
;

7058 i‡(
diff_t
 >
›t_log_öãrvÆ
)

7060 
Æt_°©us
 ^
swôch_°©us
;

7061 
hashdi•œy_t
 = 
now_t
;

7062 
showlog
 = 
åue
;

7064 i‡(
thr_id
 < 0)

7071 
	`c›y_time
(&
tv_hashmëî
, &
tŸÆ_tv_íd
);

7073 i‡(
thr_id
 >= 0)

7075 
thr_öfo
 *
thr
 = 
	`gë_thªad
(
thr_id
);

7076 
cgpu_öfo
 *
cgpu
 = 
thr
->cgpu;

7077 
devi˚_tdiff
, 
thr_mhs
;

7080 
	`c›y_time
(&
thr
->
œ°
, &
tŸÆ_tv_íd
);

7082 
cgpu
->
devi˚_œ°_wñl
 = 
now_t
;

7083 
devi˚_tdiff
 = 
	`tdiff
(&
tŸÆ_tv_íd
, &
cgpu
->
œ°_mesßge_tv
);

7085 
	`c›y_time
(&
cgpu
->
œ°_mesßge_tv
, &
tŸÆ_tv_íd
);

7087 
thr_mhs
 = (Ë(
hashes_d⁄e
 / 
devi˚_tdiff
 );

7089 
	`≠∂og
(
LOG_DEBUG
, "[thªad %d: %"
PRIu64
" hashes, %.1‡mhash/£c]", 
thr_id
, 
hashes_d⁄e
, 
thr_mhs
);

7092 
	`muãx_lock
(&
hash_lock
);

7093 
cgpu
->
tŸÆ_mhashes
 +
hashes_d⁄e
;

7095 
	`deˇy_time
(&
cgpu
->
rﬁlög
, ()(
hashes_d⁄e
 / 1), 
devi˚_tdiff
, 
›t_log_öãrvÆ
);

7096 
	`deˇy_time
(&
cgpu
->
rﬁlög1
, ()(
hashes_d⁄e
 / 1), 
devi˚_tdiff
, 60.0);

7097 
	`deˇy_time
(&
cgpu
->
rﬁlög5
, ()(
hashes_d⁄e
 / 1), 
devi˚_tdiff
, 300.0);

7098 
	`deˇy_time
(&
cgpu
->
rﬁlög15
, ()(
hashes_d⁄e
 / 1), 
devi˚_tdiff
, 900.0);

7099 
	`muãx_u∆ock
(&
hash_lock
);

7101 i‡(
w™t_≥r_devi˚_°©s
 && 
showlog
)

7103 
loglöe
[256];

7105 
	`gë_°©löe
(
loglöe
, ÷oglöe), 
cgpu
);

7106 i‡(!
cur£s_a˘ive
)

7108 
	`¥ötf
("%† \r", 
loglöe
);

7109 
	`fÊush
(
°dout
);

7113 
	`≠∂og
(
LOG_INFO
, "%s", 
loglöe
);

7121 
	`muãx_lock
(&
hash_lock
);

7123 
thr_id
 = 0;Åhr_id < 
möög_thªads
;Åhr_id++)

7125 
thr_öfo
 *
thr
 = 
	`gë_thªad
(
thr_id
);

7126 
cgpu_öfo
 *
cgpu
 = 
thr
->cgpu;

7127 
devi˚_tdiff
 = 
	`tdiff
(&
tŸÆ_tv_íd
, &
cgpu
->
œ°_mesßge_tv
);

7129 
	`c›y_time
(&
cgpu
->
œ°_mesßge_tv
, &
tŸÆ_tv_íd
);

7130 
	`deˇy_time
(&
cgpu
->
rﬁlög
, 0, 
devi˚_tdiff
, 
›t_log_öãrvÆ
);

7131 
	`deˇy_time
(&
cgpu
->
rﬁlög1
, 0, 
devi˚_tdiff
, 60.0);

7132 
	`deˇy_time
(&
cgpu
->
rﬁlög5
, 0, 
devi˚_tdiff
, 300.0);

7133 
	`deˇy_time
(&
cgpu
->
rﬁlög15
, 0, 
devi˚_tdiff
, 900.0);

7136 
	`muãx_u∆ock
(&
hash_lock
);

7139 
	`muãx_lock
(&
hash_lock
);

7140 
tŸÆ_mhashes_d⁄e
 +
hashes_d⁄e
;

7142 if(
showlog
)

7144 
g_loˇl_mhashes_ödex
++;

7146 if(
g_loˇl_mhashes_ödex
 >
CG_LOCAL_MHASHES_MAX_NUM
)

7148 
g_loˇl_mhashes_ödex
 = 0;

7151 
i
 = 0; i < 
CG_LOCAL_MHASHES_MAX_NUM
; i++)

7153 if(
g_loˇl_mhashes_d⁄es
[
i
] >= 0)

7155 
loˇl_mhashes_d⁄e_avg
 +
g_loˇl_mhashes_d⁄es
[
i
];

7157 
loˇl_mhashes_d⁄e_cou¡
++;

7161 if(
loˇl_mhashes_d⁄e_cou¡
 > 0)

7163 
loˇl_mhashes_d⁄e
 = 
loˇl_mhashes_d⁄e_avg
 / 
loˇl_mhashes_d⁄e_cou¡
;

7167 
loˇl_mhashes_d⁄e
 = 
hashes_d⁄e
;

7171 
	`deˇy_time
(&
tŸÆ_rﬁlög
, ()(
loˇl_mhashes_d⁄e
 / 1), 
›t_log_öãrvÆ
, opt_log_interval);

7172 
	`deˇy_time
(&
rﬁlög1
, ()(
hashes_d⁄e
 / 1), 
tv_tdiff
, 60.0);

7173 
	`deˇy_time
(&
rﬁlög5
, ()(
hashes_d⁄e
 / 1),
tv_tdiff
, 300.0);

7174 
	`deˇy_time
(&
rﬁlög15
, ()(
hashes_d⁄e
 / 1), 
tv_tdiff
, 900.0);

7175 
globÆ_hashøã
 = (Ë(
tŸÆ_rﬁlög
 * 1000000ull);

7177 
g_loˇl_mhashes_d⁄es
[
g_loˇl_mhashes_ödex
] = 0;

7180 
g_loˇl_mhashes_d⁄es
[
g_loˇl_mhashes_ödex
] +
hashes_d⁄e
;

7182 
tŸÆ_£cs
 = 
tŸÆ_tv_íd_sys
*1.0-
tŸÆ_tv_°¨t_sys
*1.0;

7184 if(
tŸÆ_£cs
 - 
œ°_tŸÆ_£cs
 > 86400)

7186 
	`≠∂og
(
LOG_ERR
, "cgmöîÅimêîr‹ÅŸÆ_£c†%dÜa°_tŸÆ_£c†%d", 
tŸÆ_£cs
, 
œ°_tŸÆ_£cs
);

7187 
	`muãx_u∆ock
(&
hash_lock
);

7188 
	`zîo_°©s
();

7189 
	`muãx_lock
(&
hash_lock
);

7193 
œ°_tŸÆ_£cs
 = 
tŸÆ_£cs
;

7196 i‡(
showlog
)

7198 
di•œyed_hashes
[16], 
di•œyed_rﬁlög
[16];

7199 
di•œyed_r1
[16], 
di•œyed_r5
[16], 
di•œyed_r15
[16];

7200 
uöt64_t
 
d64
;

7202 
d64
 = 
tŸÆ_mhashes_d⁄e
 / 
tŸÆ_£cs
 * 1000000ull;

7203 
	`suffix_°rög
(
d64
, 
di•œyed_hashes
, (displayed_hashes), 4);

7205 
d64
 = 
tŸÆ_rﬁlög
 * 1000000ull;

7206 
g_di•œyed_rﬁlög
 = (((()
tŸÆ_rﬁlög
)/10)*1.0) / 100.0;

7208 
	`suffix_°rög
(
d64
, 
di•œyed_rﬁlög
, (displayed_rolling), 4);

7209 
d64
 = 
rﬁlög1
 * 1000000ull;

7211 
	`suffix_°rög
(
d64
, 
di•œyed_r1
, (
di•œyed_rﬁlög
), 4);

7212 
d64
 = 
rﬁlög5
 * 1000000ull;

7214 
	`suffix_°rög
(
d64
, 
di•œyed_r5
, (
di•œyed_rﬁlög
), 4);

7215 
d64
 = 
rﬁlög15
 * 1000000ull;

7217 
	`suffix_°rög
(
d64
, 
di•œyed_r15
, (
di•œyed_rﬁlög
), 4);

7219 
	`¢¥ötf
(
°©u¶öe
,

7220 (
°©u¶öe
),

7222 
›t_log_öãrvÆ
,

7223 
di•œyed_rﬁlög
,

7224 
di•œyed_r1
,

7225 
di•œyed_r5
,

7226 
di•œyed_r15
,

7227 
di•œyed_hashes
);

7230 
	`muãx_u∆ock
(&
hash_lock
);

7232 #ifde‡
USE_LIBSYSTEMD


7233 
	`sd_nŸifyf
(
Ál£
, "STATUS=%s", 
°©u¶öe
);

7236 i‡(
showlog
)

7238 i‡(!
cur£s_a˘ive
)

7240 
	`¥ötf
("%† \r", 
°©u¶öe
);

7241 
	`fÊush
(
°dout
);

7245 
	`≠∂og
(
LOG_INFO
, "%s", 
°©u¶öe
);

7248 
	}
}

7250 
	$°øtum_sh¨e_ªsu…
(
js⁄_t
 *
vÆ
, js⁄_à*
ªs_vÆ
, js⁄_à*
îr_vÆ
, 
°øtum_sh¨e
 *
ssh¨e
)

7252 
w‹k
 *w‹k = 
ssh¨e
->work;

7253 
time_t
 
now_t
 = 
	`time
(
NULL
);

7254 
hashshow
[64];

7255 
§diff
;

7257 
§diff
 = 
now_t
 - 
ssh¨e
->
ssh¨e_£¡
;

7259 i‡(
›t_debug
 || 
§diff
 > 0)

7261 
	`≠∂og
(
LOG_INFO
, "Poﬁ %d så©um sh¨êªsu…ÜagÅimê%d sec⁄ds", 
w‹k
->
poﬁ
->
poﬁ_no
, 
§diff
);

7264 
	`show_hash
(
w‹k
, 
hashshow
);

7265 
	`sh¨e_ªsu…
(
vÆ
, 
ªs_vÆ
, 
îr_vÆ
, 
w‹k
, 
hashshow
, 
Ál£
, "");

7266 
	}
}

7271 
boﬁ
 
	$∑r£_°øtum_ª•⁄£
(
poﬁ
 *poﬁ, *
s
)

7273 
js⁄_t
 *
vÆ
 = 
NULL
, *
îr_vÆ
, *
ªs_vÆ
, *
id_vÆ
;

7274 
°øtum_sh¨e
 *
ssh¨e
;

7275 
js⁄_îr‹_t
 
îr
;

7276 
boﬁ
 
ªt
 = 
Ál£
;

7277 
id
;

7279 
vÆ
 = 
	`JSON_LOADS
(
s
, &
îr
);

7281 i‡(!
vÆ
)

7283 
	`≠∂og
(
LOG_INFO
,"JSON decodêÁûed(%d): %s", 
îr
.
löe
,Éº.
ãxt
);

7284 
out
;

7287 
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

7288 
îr_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "error");

7289 
id_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "id");

7293 *
ss
;

7295 i‡(
îr_vÆ
)

7297 
ss
 = 
	`js⁄_dumps
(
îr_vÆ
, 
	`JSON_INDENT
(3));

7301 
ss
 = 
	`°rdup
("(unknownÑeason)");

7304 
	`≠∂og
(
LOG_INFO
, "JSON-RPCÇ⁄ mëhod decodêÁûed: %s", 
ss
);

7306 
	`‰ì
(
ss
);

7308 
out
;

7311 
id
 = 
	`js⁄_öãgî_vÆue
(
id_vÆ
);

7313 
	`muãx_lock
(&
ssh¨e_lock
);

7315 
	`HASH_FIND_INT
(
°øtum_sh¨es
, &
id
, 
ssh¨e
);

7316 i‡(
ssh¨e
)

7318 
	`HASH_DEL
(
°øtum_sh¨es
, 
ssh¨e
);

7319 
poﬁ
->
ssh¨es
--;

7321 
	`muãx_u∆ock
(&
ssh¨e_lock
);

7323 i‡(!
ssh¨e
)

7325 
poﬁ_diff
;

7327 i‡(!
ªs_vÆ
)

7329 
out
;

7333 
	`cg_æock
(&
poﬁ
->
d©a_lock
);

7334 
poﬁ_diff
 = 
poﬁ
->
sdiff
;

7335 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

7337 i‡(
	`js⁄_is_åue
(
ªs_vÆ
))

7339 
	`≠∂og
(
LOG_NOTICE
, "Ac˚±ed u¡øcked så©um sh¨ê‰omÖoﬁ %d", 
poﬁ
->
poﬁ_no
);

7343 
	`muãx_lock
(&
°©s_lock
);

7344 
tŸÆ_ac˚±ed
++;

7345 
poﬁ
->
ac˚±ed
++;

7346 
tŸÆ_diff_ac˚±ed
 +
poﬁ_diff
;

7347 
poﬁ
->
diff_ac˚±ed
 +
poﬁ_diff
;

7348 
	`muãx_u∆ock
(&
°©s_lock
);

7352 
	`≠∂og
(
LOG_NOTICE
, "Reje˘ed u¡øcked så©um sh¨ê‰omÖoﬁ %d", 
poﬁ
->
poﬁ_no
);

7354 
	`muãx_lock
(&
°©s_lock
);

7355 
tŸÆ_ªje˘ed
++;

7356 
poﬁ
->
ªje˘ed
++;

7357 
tŸÆ_diff_ªje˘ed
 +
poﬁ_diff
;

7358 
poﬁ
->
diff_ªje˘ed
 +
poﬁ_diff
;

7359 
	`muãx_u∆ock
(&
°©s_lock
);

7362 
out
;

7365 
	`°øtum_sh¨e_ªsu…
(
vÆ
, 
ªs_vÆ
, 
îr_vÆ
, 
ssh¨e
);

7366 
	`‰ì_w‹k
(
ssh¨e
->
w‹k
);

7367 
	`‰ì
(
ssh¨e
);

7369 
ªt
 = 
åue
;

7371 
out
:

7373 i‡(
vÆ
)

7375 
	`js⁄_de¸ef
(
vÆ
);

7378  
ªt
;

7379 
	}
}

7382 
	$˛ór_°øtum_sh¨es
(
poﬁ
 *pool)

7384 
°øtum_sh¨e
 *
ssh¨e
, *
tmpsh¨e
;

7385 
diff_˛óªd
 = 0;

7386 
˛óªd
 = 0;

7388 
	`muãx_lock
(&
ssh¨e_lock
);

7390 
	`HASH_ITER
(
hh
, 
°øtum_sh¨es
, 
ssh¨e
, 
tmpsh¨e
)

7392 i‡(
ssh¨e
->
w‹k
->
poﬁ
 ==Öool)

7394 
	`HASH_DEL
(
°øtum_sh¨es
, 
ssh¨e
);

7395 
diff_˛óªd
 +
ssh¨e
->
w‹k
->
w‹k_difficu…y
;

7396 
	`‰ì_w‹k
(
ssh¨e
->
w‹k
);

7397 
poﬁ
->
ssh¨es
--;

7398 
	`‰ì
(
ssh¨e
);

7399 
˛óªd
++;

7402 
	`muãx_u∆ock
(&
ssh¨e_lock
);

7404 i‡(
˛óªd
)

7406 
	`≠∂og
(
LOG_WARNING
, "Lo° %d sh¨e†duêtÿ°øtum disc⁄√˘ o¿poﬁ %d", 
˛óªd
, 
poﬁ
->
poﬁ_no
);

7407 
poﬁ
->
°Æe_sh¨es
 +
˛óªd
;

7408 
tŸÆ_°Æe
 +
˛óªd
;

7409 
poﬁ
->
diff_°Æe
 +
diff_˛óªd
;

7410 
tŸÆ_diff_°Æe
 +
diff_˛óªd
;

7412 
	}
}

7414 
	$˛ór_poﬁ_w‹k
(
poﬁ
 *pool)

7416 
w‹k
 *w‹k, *
tmp
;

7417 
˛óªd
 = 0;

7419 
	`muãx_lock
(
°gd_lock
);

7420 
	`HASH_ITER
(
hh
, 
°aged_w‹k
, 
w‹k
, 
tmp
)

7422 i‡(
w‹k
->
poﬁ
 ==Öool)

7424 
	`HASH_DEL
(
°aged_w‹k
, 
w‹k
);

7425 
	`‰ì_w‹k
(
w‹k
);

7426 
˛óªd
++;

7429 
	`muãx_u∆ock
(
°gd_lock
);

7431 i‡(
˛óªd
)

7432 
	`≠∂og
(
LOG_INFO
, "CÀ¨ed %d w‹k iãm†duêtÿ°øtum disc⁄√˘ o¿poﬁ %d", 
˛óªd
, 
poﬁ
->
poﬁ_no
);

7433 
	}
}

7435 
	$˝_¥io
()

7437 
¥io
;

7439 
	`cg_æock
(&
c⁄åﬁ_lock
);

7440 
¥io
 = 
cuºíçoﬁ
->prio;

7441 
	`cg_ru∆ock
(&
c⁄åﬁ_lock
);

7443  
¥io
;

7444 
	}
}

7448 
boﬁ
 
	$˙x_√eded
(
poﬁ
 *pool)

7450 
poﬁ
 *
˝
;

7452 i‡(
poﬁ
->
íabÀd
 !
POOL_ENABLED
)

7453  
Ál£
;

7456 i‡(
poﬁ_°øãgy
 =
POOL_BALANCE
)

7457  
åue
;

7458 i‡(
poﬁ_°øãgy
 =
POOL_LOADBALANCE
)

7459  
åue
;

7462 i‡(
poﬁ
->
has_°øtum
 &&Öoﬁ->
idÀ
)

7463  
åue
;

7467 
˝
 = 
	`cuºít_poﬁ
();

7468 i‡(
˝
 =
poﬁ
)

7469  
åue
;

7470 i‡(!
	`poﬁ_loˇlgí
(
˝
Ë&& (!
›t_Áû_⁄ly
 || !˝->
hdr_∑th
))

7471  
åue
;

7474 i‡(
poﬁ
->
ssh¨es
)

7475  
åue
;

7479 i‡(
poﬁ_°øãgy
 =
POOL_FAILOVER
 && 
poﬁ
->
¥io
 < 
	`˝_¥io
())

7480  
åue
;

7482 i‡(
no_w‹k
)

7483  
åue
;

7484  
Ál£
;

7485 
	}
}

7487 
waô_Õcuºít
(
poﬁ
 *pool);

7488 
poﬁ_ªsus
(
poﬁ
 *pool);

7489 
gí_°øtum_w‹k
(
poﬁ
 *poﬁ, 
w‹k
 *work);

7491 
	$°øtum_ªsumed
(
poﬁ
 *pool)

7493 i‡(
	`poﬁ_t˛ór
(
poﬁ
, &poﬁ->
idÀ
))

7495 
	`≠∂og
(
LOG_INFO
, "Så©um c⁄√˘i⁄Åÿpoﬁ %dÑesumed", 
poﬁ
->
poﬁ_no
);

7496 
	`poﬁ_ªsus
(
poﬁ
);

7498 
	}
}

7500 
boﬁ
 
	$suµ‹ts_ªsume
(
poﬁ
 *pool)

7502 
boﬁ
 
ªt
;

7504 
	`cg_æock
(&
poﬁ
->
d©a_lock
);

7505 
ªt
 = (
poﬁ
->
£ssi⁄id
 !
NULL
);

7506 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

7508  
ªt
;

7509 
	}
}

7515 *
	$°øtum_πhªad
(*
u£rd©a
)

7517 
poﬁ
 *poﬁ = (poﬁ *)
u£rd©a
;

7518 
thªad«me
[16];

7520 
	`±hªad_dëach
(
	`±hªad_£lf
());

7522 
	`¢¥ötf
(
thªad«me
, —hªad«me), "%d/RSå©um", 
poﬁ
->
poﬁ_no
);

7523 
	`RíameThªad
(
thªad«me
);

7527 
timevÆ
 
timeout
;

7528 
£l_ªt
;

7529 
fd_£t
 
rd
;

7530 *
s
;

7532 i‡(
	`u∆ikñy
(
poﬁ
->
ªmoved
))

7534 
	`su•íd_°øtum
(
poﬁ
);

7541 i‡(!
	`sock_fuŒ
(
poﬁ
Ë&& !
	`˙x_√eded
(pool))

7543 
	`su•íd_°øtum
(
poﬁ
);

7544 
	`˛ór_°øtum_sh¨es
(
poﬁ
);

7545 
	`˛ór_poﬁ_w‹k
(
poﬁ
);

7547 
	`waô_Õcuºít
(
poﬁ
);

7548 !
	`ª°¨t_°øtum
(
poﬁ
))

7550 
	`poﬁ_dõd
(
poﬁ
);

7551 i‡(
poﬁ
->
ªmoved
)

7552 
out
;

7553 
	`cg¶ìp_ms
(5000);

7557 
	`FD_ZERO
(&
rd
);

7558 
	`FD_SET
(
poﬁ
->
sock
, &
rd
);

7559 
timeout
.
tv_£c
 = 90;

7560 
timeout
.
tv_u£c
 = 0;

7566 i‡(!
	`sock_fuŒ
(
poﬁ
Ë&& (
£l_ªt
 = 
	`£À˘
’oﬁ->
sock
 + 1, &
rd
, 
NULL
, NULL, &
timeout
)) < 1)

7568 
	`≠∂og
(
LOG_DEBUG
, "Så©um sñe˘ faûed o¿poﬁ %d wôh vÆuê%d", 
poﬁ
->
poﬁ_no
, 
£l_ªt
);

7569 
s
 = 
NULL
;

7572 
s
 = 
	`ªcv_löe
(
poﬁ
);

7573 i‡(!
s
)

7575 
	`≠∂og
(
LOG_NOTICE
, "Så©um c⁄√˘i⁄Åÿpoﬁ %d i¡îru±ed", 
poﬁ
->
poﬁ_no
);

7576 
poﬁ
->
gëÁû_ocˇsi⁄s
++;

7577 
tŸÆ_go
++;

7582 i‡(!
	`suµ‹ts_ªsume
(
poﬁ
Ë|| 
›t_lowmem
)

7583 
	`˛ór_°øtum_sh¨es
(
poﬁ
);

7584 
	`˛ór_poﬁ_w‹k
(
poﬁ
);

7585 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

7586 
	`ª°¨t_thªads
();

7588 !
	`ª°¨t_°øtum
(
poﬁ
))

7590 
	`poﬁ_dõd
(
poﬁ
);

7591 i‡(
poﬁ
->
ªmoved
)

7592 
out
;

7593 
	`cg¶ìp_ms
(5000);

7600 
	`°øtum_ªsumed
(
poﬁ
);

7602 i‡(!
	`∑r£_mëhod
(
poﬁ
, 
s
Ë&& !
	`∑r£_°øtum_ª•⁄£
(pool, s))

7604 
	`≠∂og
(
LOG_INFO
, "Unknow¿°øtum msg: %s", 
s
);

7606 i‡(
poﬁ
->
sw‹k
.
˛ón
)

7608 
w‹k
 *w‹k = 
	`make_w‹k
();

7612 
poﬁ
->
sw‹k
.
˛ón
 = 
Ál£
;

7614 
w‹k
->
l⁄gpﬁl
 = 
åue
;

7618 
	`‰ì_w‹k
(
w‹k
);

7620 
	`‰ì
(
s
);

7623 
out
:

7624  
NULL
;

7625 
	}
}

7631 *
	$°øtum_°hªad
(*
u£rd©a
)

7633 
poﬁ
 *poﬁ = (poﬁ *)
u£rd©a
;

7634 
uöt64_t
 
œ°_n⁄˚2
 = 0;

7635 
uöt32_t
 
œ°_n⁄˚
 = 0;

7636 
thªad«me
[16];

7637 
i
;

7639 
	`±hªad_dëach
(
	`±hªad_£lf
());

7641 
	`¢¥ötf
(
thªad«me
, —hªad«me), "%d/SSå©um", 
poﬁ
->
poﬁ_no
);

7642 
	`RíameThªad
(
thªad«me
);

7644 
poﬁ
->
°øtum_q
 = 
	`tq_√w
();

7645 i‡(!
poﬁ
->
°øtum_q
)

7646 
	`quô
(1, "FailedÅo create stratum_q in stratum_sthread");

7650 
n⁄˚hex
[33], 
n⁄˚2hex
[20], 
s
[1024];

7651 
°øtum_sh¨e
 *
ssh¨e
;

7652 
uöt32_t
 *
hash32
, 
n⁄˚
;

7653 
n⁄˚2
[8];

7654 
uöt64_t
 *
n⁄˚2_64
;

7655 
w‹k
 *work;

7656 
boﬁ
 
submôãd
;

7658 i‡(
	`u∆ikñy
(
poﬁ
->
ªmoved
))

7661 
w‹k
 = 
	`tq_p›
(
poﬁ
->
°øtum_q
, 
NULL
);

7662 i‡(
	`u∆ikñy
(!
w‹k
))

7663 
	`quô
(1, "Stratum qÑeturnedÉmpty work");

7664 i‡(!(
ssh¨e
 = (
°øtum_sh¨e
 *)
	`ˇŒoc
((stratum_share), 1)))

7666 
	`quô
(1, "%s: cÆloc(ËÁûed o¿ssh¨e.", 
__func__
);

7668 i‡(
	`u∆ikñy
(
w‹k
->
n⁄˚2_Àn
 > 8))

7670 
	`≠∂og
(
LOG_ERR
, "Pool %dásking for inappropriatelyÜongÇonce2Üength %d",

7671 
poﬁ
->
poﬁ_no
, ()
w‹k
->
n⁄˚2_Àn
);

7672 
	`≠∂og
(
LOG_ERR
, "NotáttemptingÅo submit shares");

7673 
	`‰ì_w‹k
(
w‹k
);

7679 *
ASCIIResu…
;

7681 
ssh¨e
->
ssh¨e_time
 = 
	`time
(
NULL
);

7683 
ssh¨e
->
w‹k
 = work;

7684 
uöt64_t
 
tmp_n⁄˚
 = 
	`htobe64
(
w‹k
->
btm_n⁄˚
);

7685 *
ASCIIN⁄˚
 = 
	`bö2hex
((c⁄° *)&
tmp_n⁄˚
, 8);

7687 
	`muãx_lock
(&
ssh¨e_lock
);

7689 
ssh¨e
->
id
 = 
sw‹k_id
++;

7690 
	`muãx_u∆ock
(&
ssh¨e_lock
);

7692 
	`¢¥ötf
(
s
, (s), "{\"mëhod\": \"submô\", \"∑øms\": {\"id\": \"%s\", \"job_id\": \"%s\", \"n⁄˚\": \"%s\"}, \"id\":%d}", 
poﬁ
->
BTMAuthID
, 
w‹k
->
job_id
, 
ASCIIN⁄˚
, 
ssh¨e
->
id
);

7694 
	`‰ì
(
ASCIIN⁄˚
);

7700 
	`time
(
NULL
Ë< 
ssh¨e
->
ssh¨e_time
 + 120)

7702 
boﬁ
 
£ssi⁄id_m©ch
;

7704 i‡(
	`likñy
(
	`°øtum_£nd
(
poﬁ
, 
s
, 
	`°æí
(s))))

7706 
	`muãx_lock
(&
ssh¨e_lock
);

7707 
	`HASH_ADD_INT
(
°øtum_sh¨es
, 
id
, 
ssh¨e
);

7708 
poﬁ
->
ssh¨es
++;

7709 
	`muãx_u∆ock
(&
ssh¨e_lock
);

7711 i‡(
	`poﬁ_t˛ór
(
poﬁ
, &poﬁ->
submô_Áû
))

7712 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %d communiˇti⁄Ñesumed, submôtög w‹k", 
poﬁ
->
poﬁ_no
);

7713 
	`≠∂og
(
LOG_DEBUG
, "Successfully submitted,áddingÅo stratum_shares db");

7714 
submôãd
 = 
åue
;

7717 i‡(!
	`poﬁ_t£t
(
poﬁ
, &poﬁ->
submô_Áû
Ë&& 
	`˙x_√eded
(pool))

7719 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %d så©um sh¨êsubmissi⁄ faûuª", 
poﬁ
->
poﬁ_no
);

7720 
tŸÆ_ro
++;

7721 
poﬁ
->
ªmŸeÁû_ocˇsi⁄s
++;

7724 i‡(
›t_lowmem
)

7726 
	`≠∂og
(
LOG_DEBUG
, "Lowmem optionÖreventsÑesubmitting stratum share");

7730 
	`cg_æock
(&
poﬁ
->
d©a_lock
);

7731 
£ssi⁄id_m©ch
 = (
poﬁ
->
n⁄˚1
 && !
	`°rcmp
(
w‹k
->nonce1,Öool->nonce1));

7732 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

7734 i‡(!
£ssi⁄id_m©ch
)

7736 
	`≠∂og
(
LOG_DEBUG
, "No matching session id forÑesubmitting stratum share");

7740 
	`¶ìp
(5);

7743 i‡(
	`u∆ikñy
(!
submôãd
))

7745 
	`≠∂og
(
LOG_DEBUG
, "FailedÅo submit stratum share, discarding");

7746 
	`‰ì_w‹k
(
w‹k
);

7747 
	`‰ì
(
ssh¨e
);

7748 
poﬁ
->
°Æe_sh¨es
++;

7749 
tŸÆ_°Æe
++;

7753 
ssdiff
;

7755 
ssh¨e
->
ssh¨e_£¡
 = 
	`time
(
NULL
);

7756 
ssdiff
 = 
ssh¨e
->
ssh¨e_£¡
 - ssh¨e->
ssh¨e_time
;

7757 i‡(
›t_debug
 || 
ssdiff
 > 0)

7759 
	`≠∂og
(
LOG_INFO
, "Pool %d stratum share submissionÜagÅime %d seconds",

7760 
poﬁ
->
poﬁ_no
, 
ssdiff
);

7767 
	`tq_‰ìze
(
poﬁ
->
°øtum_q
);

7769  
NULL
;

7770 
	}
}

7773 
	$öô_°øtum_thªads
(
poﬁ
 *pool)

7775 
have_l⁄gpﬁl
 = 
åue
;

7777 i‡(
	`u∆ikñy
(
	`±hªad_¸óã
(&
poﬁ
->
°øtum_°hªad
, 
NULL
, stratum_sthread, (*)pool)))

7778 
	`quô
(1, "FailedÅo create stratum sthread");

7779 i‡(
	`u∆ikñy
(
	`±hªad_¸óã
(&
poﬁ
->
°øtum_πhªad
, 
NULL
, stratum_rthread, (*)pool)))

7780 
	`quô
(1, "FailedÅo create stratumÑthread");

7781 
	}
}

7783 *
l⁄gpﬁl_thªad
(*
u£rd©a
);

7786 
boﬁ
 
	$°øtum_w‹ks
(
poﬁ
 *pool)

7788 
	`≠∂og
(
LOG_INFO
, "Te°ögÖoﬁ %d så©um %s", 
poﬁ
->
poﬁ_no
,Öoﬁ->
°øtum_uæ
);

7789 i‡(!
	`exåa˘_sockaddr
(
poﬁ
->
°øtum_uæ
, &poﬁ->
sockaddr_uæ
, &poﬁ->
°øtum_p‹t
))

7790  
Ál£
;

7792 i‡(!
	`öôüã_°øtum
(
poﬁ
))

7793  
Ál£
;

7795  
åue
;

7796 
	}
}

7799 #ifde‡
HAVE_LIBCURL


7800 
	$__£tup_gbt_sﬁo
(
poﬁ
 *pool)

7802 
	`cg_wlock
(&
poﬁ
->
gbt_lock
);

7803 
	`cg_mem˝y
(
poﬁ
->
coöba£
, 
s¸ùtsig_hódî_bö
, 41);

7804 
poﬁ
->
coöba£
[41 +Öoﬁ->
n1_Àn
 + 4 + 1 + 8] = 25;

7805 
	`cg_mem˝y
(
poﬁ
->
coöba£
 + 41 +Öoﬁ->
n1_Àn
 + 4 + 1 + 8 + 1,Öoﬁ->
s¸ùt_pubkey
, 25);

7806 
	`cg_wu∆ock
(&
poﬁ
->
gbt_lock
);

7807 
	}
}

7809 
boﬁ
 
	$£tup_gbt_sﬁo
(
CURL
 *
cuæ
, 
poﬁ
 *pool)

7811 
s
[256];

7812 
	`unöôüli£d_v¨
(
rﬁ…ime
);

7813 
boﬁ
 
ªt
 = 
Ál£
;

7814 
js⁄_t
 *
vÆ
 = 
NULL
, *
ªs_vÆ
, *
vÆid_vÆ
;

7816 i‡(!
›t_btc_addªss
)

7818 
	`≠∂og
(
LOG_ERR
, "No BTCáddress specified, unableÅo mine solo on %s",

7819 
poﬁ
->
Ωc_uæ
);

7820 
out
;

7822 
	`¢¥ötf
(
s
, 256, "{\"id\": 1, \"mëhod\": \"vÆid©óddªss\", \"∑øms\": [\"%s\"]}\n", 
›t_btc_addªss
);

7823 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
cuæ
, 
poﬁ
->
Ωc_uæ
,Öoﬁ->
Ωc_u£Ωass
, 
s
, 
åue
,

7824 
Ál£
, &
rﬁ…ime
, 
poﬁ
, false);

7825 i‡(!
vÆ
)

7826 
out
;

7827 
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

7828 i‡(!
ªs_vÆ
)

7829 
out
;

7830 
vÆid_vÆ
 = 
	`js⁄_obje˘_gë
(
ªs_vÆ
, "isvalid");

7831 i‡(!
vÆid_vÆ
)

7832 
out
;

7833 i‡(!
	`js⁄_is_åue
(
vÆid_vÆ
))

7835 
	`≠∂og
(
LOG_ERR
, "Bôcoöáddªs†%†i†NOT vÆid", 
›t_btc_addªss
);

7836 
out
;

7838 
	`≠∂og
(
LOG_NOTICE
, "SﬁÿmöögÅÿvÆidáddªss: %s", 
›t_btc_addªss
);

7839 
ªt
 = 
åue
;

7840 
	`addªss_to_pubkeyhash
(
poﬁ
->
s¸ùt_pubkey
, 
›t_btc_addªss
);

7841 
	`hex2bö
(
s¸ùtsig_hódî_bö
, 
s¸ùtsig_hódî
, 41);

7842 
	`__£tup_gbt_sﬁo
(
poﬁ
);

7844 i‡(
›t_debug
)

7846 *
cb
 = 
	`bö2hex
(
poﬁ
->
coöba£
,Öoﬁ->
coöba£_Àn
);

7848 
	`≠∂og
(
LOG_DEBUG
, "Poﬁ %d coöba£ %s", 
poﬁ
->
poﬁ_no
, 
cb
);

7849 
	`‰ì
(
cb
);

7851 
poﬁ
->
gbt_cuæ
 = 
	`cuæ_ósy_öô
();

7852 i‡(
	`u∆ikñy
(!
poﬁ
->
gbt_cuæ
))

7853 
	`quô
(1, "GBT CURL initialisation failed");

7855 
out
:

7856 i‡(
vÆ
)

7857 
	`js⁄_de¸ef
(
vÆ
);

7858  
ªt
;

7859 
	}
}

7861 
boﬁ
 
	$£tup_gbt_sﬁo
(
CURL
 
__maybe_unu£d
 *
cuæ
, 
poﬁ
 __maybe_unused *pool)

7863  
Ál£
;

7864 
	}
}

7867 
	$poﬁ_°¨t_Õ
(
poﬁ
 *pool)

7869 i‡(!
poﬁ
->
Õ_°¨ãd
)

7871 
poﬁ
->
Õ_°¨ãd
 = 
åue
;

7872 i‡(
	`u∆ikñy
(
	`±hªad_¸óã
(&
poﬁ
->
l⁄gpﬁl_thªad
, 
NULL
,Üongpoll_thread, (*)pool)))

7874 
	`quô
(1, "FailedÅo createÖoolÜongpollÅhread");

7877 
	}
}

7879 
boﬁ
 
	$poﬁ_a˘ive
(
poﬁ
 *poﬁ, 
boﬁ
 
pögög
)

7881 
timevÆ
 
tv_gëw‹k
, 
tv_gëw‹k_ª∂y
;

7882 
js⁄_t
 *
vÆ
 = 
NULL
;

7883 
boﬁ
 
ªt
 = 
Ál£
;

7884 
CURL
 *
cuæ
;

7885 
	`unöôüli£d_v¨
(
rﬁ…ime
);

7887 i‡(
poﬁ
->
has_gbt
)

7889 
	`≠∂og
(
LOG_DEBUG
, "Rërõvög blockÅem∂©ê‰omÖoﬁ %s", 
poﬁ
->
Ωc_uæ
);

7893 
	`≠∂og
(
LOG_INFO
, "Te°ögÖoﬁ %s", 
poﬁ
->
Ωc_uæ
);

7897 
ªåy_°øtum
:

7899 i‡(
poﬁ
->
has_°øtum
)

7905 
boﬁ
 
öô
 = 
	`poﬁ_t£t
(
poﬁ
, &poﬁ->
°øtum_öô
);

7907 i‡(!
öô
)

7909 
boﬁ
 
ªt
 = 
	`öôüã_°øtum
(
poﬁ
Ë&& (!poﬁ->
exå™⁄˚_subs¸ibe
 || 
	`subs¸ibe_exå™⁄˚
’oﬁ)Ë&& 
	`auth_°øtum
(pool);

7911 i‡(
ªt
)

7913 
	`öô_°øtum_thªads
(
poﬁ
);

7917 
	`poﬁ_t˛ór
(
poﬁ
, &poﬁ->
°øtum_öô
);

7919  
ªt
;

7921  
poﬁ
->
°øtum_a˘ive
;

7924 
cuæ
 = 
	`cuæ_ósy_öô
();

7926 i‡(
	`u∆ikñy
(!
cuæ
))

7928 
	`≠∂og
(
LOG_ERR
, "CURL initialisation failed");

7929  
Ál£
;

7933 i‡(!
poﬁ
->
¥obed
)

7935 
	`≠∂og
(
LOG_DEBUG
, "Probing for GBT support");

7937 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
cuæ
, 
poﬁ
->
Ωc_uæ
,Öoﬁ->
Ωc_u£Ωass
, 
gbt_ªq
, 
åue
, 
Ál£
, &
rﬁ…ime
,Öool, false);

7939 i‡(
vÆ
)

7941 
boﬁ
 
≠≥nd
 = 
Ál£
, 
submô
 = fÆ£, 
å™ß˘i⁄s
 = false;

7942 
js⁄_t
 *
ªs_vÆ
, *
muèbÀs
;

7943 
i
, 
mutsize
 = 0;

7945 
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

7947 i‡(
ªs_vÆ
)

7949 
muèbÀs
 = 
	`js⁄_obje˘_gë
(
ªs_vÆ
, "mutable");

7950 
mutsize
 = 
	`js⁄_¨øy_size
(
muèbÀs
);

7953 
i
 = 0; i < 
mutsize
; i++)

7955 
js⁄_t
 *
¨rvÆ
 = 
	`js⁄_¨øy_gë
(
muèbÀs
, 
i
);

7957 i‡(
	`js⁄_is_°rög
(
¨rvÆ
))

7959 c⁄° *
muèbÀ
 = 
	`js⁄_°rög_vÆue
(
¨rvÆ
);

7961 i‡(!
	`°∫ˇ£cmp
(
muèbÀ
, "coinbase/append", 15))

7962 
≠≥nd
 = 
åue
;

7963 i‡(!
	`°∫ˇ£cmp
(
muèbÀ
, "submit/coinbase", 15))

7964 
submô
 = 
åue
;

7965 i‡(!
	`°∫ˇ£cmp
(
muèbÀ
, "transactions", 12))

7966 
å™ß˘i⁄s
 = 
åue
;

7970 
	`js⁄_de¸ef
(
vÆ
);

7974 i‡(
≠≥nd
 && 
submô
)

7976 
poﬁ
->
has_gbt
 = 
åue
;

7977 
poﬁ
->
Ωc_ªq
 = 
gbt_ªq
;

7979 i‡(
å™ß˘i⁄s
)

7981 
poﬁ
->
gbt_sﬁo
 = 
åue
;

7982 
poﬁ
->
Ωc_ªq
 = 
gbt_sﬁo_ªq
;

7987 
poﬁ
->
¥obed
 = 
Ál£
;

7989 i‡(
poﬁ
->
has_gbt
)

7991 
	`≠∂og
(
LOG_DEBUG
, "GBT coinbase +áppend support found, switchingÅo GBTÖrotocol");

7993 i‡(
poﬁ
->
gbt_sﬁo
)

7995 
	`≠∂og
(
LOG_DEBUG
, "GBT coinbase withoutáppend found, switchingÅo GBT soloÖrotocol");

7999 
	`≠∂og
(
LOG_DEBUG
, "No GBT coinbase +áppend support found,Öool unusable if it hasÇo stratum");

8003 
	`cgtime
(&
tv_gëw‹k
);

8004 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
cuæ
, 
poﬁ
->
Ωc_uæ
,Öoﬁ->
Ωc_u£Ωass
,Öoﬁ->
Ωc_ªq
, 
åue
, 
Ál£
, &
rﬁ…ime
,Öool, false);

8005 
	`cgtime
(&
tv_gëw‹k_ª∂y
);

8009 i‡(
poﬁ
->
°øtum_uæ
 && !
›t_fix_¥Ÿocﬁ
 && 
	`°øtum_w‹ks
(pool))

8011 
	`≠∂og
(
LOG_NOTICE
, "SwôchögÖoﬁ %d %†tÿ%s", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
,Öoﬁ->
°øtum_uæ
);

8013 i‡(!
poﬁ
->
Ωc_uæ
)

8015 
poﬁ
->
Ωc_uæ
 = 
	`°rdup
’oﬁ->
°øtum_uæ
);

8018 
poﬁ
->
has_°øtum
 = 
åue
;

8019 
	`cuæ_ósy_˛ónup
(
cuæ
);

8021 
ªåy_°øtum
;

8024 i‡(!
poﬁ
->
has_°øtum
 && !poﬁ->
gbt_sﬁo
 && !poﬁ->
has_gbt
)

8026 
	`≠∂og
(
LOG_DEBUG
, "NÿSå©um, GBT o∏Sﬁÿsuµ‹àöÖoﬁ %d %†u«bÀÅÿu£", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

8027  
Ál£
;

8030 i‡(
vÆ
)

8032 
w‹k
 *w‹k = 
	`make_w‹k
();

8033 
boﬁ
 
rc
;

8035 
rc
 = 
	`w‹k_decode
(
poﬁ
, 
w‹k
, 
vÆ
);

8037 i‡(
rc
)

8039 
	`≠∂og
(
LOG_DEBUG
, "SuccessfullyÑetrievedánd deciphered work fromÖool %u %s",

8040 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

8042 i‡(
poﬁ
->
gbt_sﬁo
)

8044 
ªt
 = 
	`£tup_gbt_sﬁo
(
cuæ
, 
poﬁ
);

8045 i‡(
ªt
)

8046 
	`poﬁ_°¨t_Õ
(
poﬁ
);

8047 
	`‰ì_w‹k
(
w‹k
);

8048 
out
;

8051 
w‹k
->
poﬁ
 =Öool;

8052 
w‹k
->
rﬁ…ime
 =Ñolltime;

8054 
	`c›y_time
(&
w‹k
->
tv_gëw‹k
, &tv_getwork);

8055 
	`c›y_time
(&
w‹k
->
tv_gëw‹k_ª∂y
, &tv_getwork_reply);

8056 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_TESTPOOL
;

8057 
	`ˇlc_diff
(
w‹k
, 0);

8058 
	`≠∂og
(
LOG_DEBUG
, "PushingÖooltest workÅo baseÖool");

8060 
	`°age_w‹k
(
w‹k
);

8061 
tŸÆ_gëw‹ks
++;

8062 
poﬁ
->
gëw‹k_ªque°ed
++;

8063 
ªt
 = 
åue
;

8067 
	`≠∂og
(
LOG_DEBUG
, "Suc˚ssfuŒyÑërõved buàFAILEDÅÿdecùhî w‹k fromÖoﬁ %u %s", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

8068 
	`‰ì_w‹k
(
w‹k
);

8071 i‡(
poﬁ
->
Õ_uæ
)

8073 
out
;

8077 i‡(
poﬁ
->
hdr_∑th
)

8079 *
c›y_°¨t
, *
hdr_∑th
;

8080 
boﬁ
 
√ed_¶ash
 = 
Ál£
;

8081 
size_t
 
siz
;

8083 
hdr_∑th
 = 
poﬁ
->hdr_path;

8085 i‡(
	`°r°r
(
hdr_∑th
, "://"))

8087 
poﬁ
->
Õ_uæ
 = 
hdr_∑th
;

8088 
hdr_∑th
 = 
NULL
;

8093 
c›y_°¨t
 = (*
hdr_∑th
 == '/') ? (hdr_path + 1) : hdr_path;

8095 i‡(
poﬁ
->
Ωc_uæ
[
	`°æí
(pool->rpc_url) - 1] != '/')

8097 
√ed_¶ash
 = 
åue
;

8100 
siz
 = 
	`°æí
(
poﬁ
->
Ωc_uæ
Ë+ såÀn(
c›y_°¨t
) + 2;

8101 
poﬁ
->
Õ_uæ
 = 
	`cgmÆloc
(
siz
);

8102 
	`¢¥ötf
(
poﬁ
->
Õ_uæ
, 
siz
, "%s%s%s",Öoﬁ->
Ωc_uæ
, 
√ed_¶ash
 ? "/" : "", 
c›y_°¨t
);

8107 
poﬁ
->
Õ_uæ
 = 
NULL
;

8110 
	`poﬁ_°¨t_Õ
(
poﬁ
);

8114 
	`≠∂og
(
LOG_DEBUG
, "FAILEDÅÿªåõvêw‹k fromÖoﬁ %u %s", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

8116 i‡(!
pögög
 && !
poﬁ
->
idÀ
)

8118 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %u slow/dow¿‹ URL o∏¸edítül†övÆid", 
poﬁ
->
poﬁ_no
);

8121 
out
:

8123 i‡(
vÆ
)

8125 
	`js⁄_de¸ef
(
vÆ
);

8128 
	`cuæ_ósy_˛ónup
(
cuæ
);

8129  
ªt
;

8130 
	}
}

8133 
	$poﬁ_ªsus
(
poﬁ
 *pool)

8135 
poﬁ
->
£q_gëÁûs
 = 0;

8136 i‡(
poﬁ_°øãgy
 =
POOL_FAILOVER
 && 
poﬁ
->
¥io
 < 
	`˝_¥io
())

8138 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %d %†Æive,Åe°ög sèbûôy", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

8142 
	`≠∂og
(
LOG_INFO
, "Poﬁ %d %†Æive", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

8144 
	}
}

8149 
w‹k
 *
	$hash_p›
(
boﬁ
 
blockög
)

8151 
w‹k
 *w‹k = 
NULL
, *
tmp
;

8152 
hc
;

8154 
	`muãx_lock
(
°gd_lock
);

8156 i‡(!
	`HASH_COUNT
(
°aged_w‹k
))

8158 
w‹k_em±õd
 = 
åue
;

8160 i‡(!
blockög
)

8162 
out_u∆ock
;

8166 
time•ec
 
thí
;

8167 
timevÆ
 
now
;

8168 
rc
;

8170 
	`cgtime
(&
now
);

8171 
thí
.
tv_£c
 = 
now
.tv_sec + 10;

8172 
thí
.
tv_n£c
 = 
now
.
tv_u£c
 * 1000;

8173 
	`±hªad_c⁄d_sig«l
(&
gws_c⁄d
);

8174 
rc
 = 
	`±hªad_c⁄d_timedwaô
(&
gëq
->
c⁄d
, 
°gd_lock
, &
thí
);

8178 i‡(
rc
 && !
no_w‹k
)

8180 
no_w‹k
 = 
åue
;

8181 
	`≠∂og
(
LOG_WARNING
, "Waiting for workÅo beávailable fromÖools.");

8184 !
	`HASH_COUNT
(
°aged_w‹k
));

8187 i‡(
no_w‹k
)

8189 
	`≠∂og
(
LOG_WARNING
, "Workávailable fromÖools,Ñesuming.");

8190 
no_w‹k
 = 
Ál£
;

8193 
hc
 = 
	`HASH_COUNT
(
°aged_w‹k
);

8196 i‡(
hc
 > 
°aged_rﬁœbÀ
)

8198 
	`HASH_ITER
(
hh
, 
°aged_w‹k
, 
w‹k
, 
tmp
)

8200 i‡(!
	`w‹k_rﬁœbÀ
(
w‹k
))

8206 
w‹k
 = 
°aged_w‹k
;

8209 
	`HASH_DEL
(
°aged_w‹k
, 
w‹k
);

8211 i‡(
	`w‹k_rﬁœbÀ
(
w‹k
))

8213 
°aged_rﬁœbÀ
--;

8217 
	`±hªad_c⁄d_sig«l
(&
gws_c⁄d
);

8220 
	`±hªad_c⁄d_sig«l
(&
gëq
->
c⁄d
);

8223 
œ°_gëw‹k
 = 
	`time
(
NULL
);

8225 
out_u∆ock
:

8226 
	`muãx_u∆ock
(
°gd_lock
);

8227  
w‹k
;

8229 
	}
}

8231 
	$gí_hash
(*
d©a
, *
hash
, 
Àn
)

8233 
hash1
[32];

8235 
	`sha256
(
d©a
, (Ë
Àn
, 
hash1
);

8236 
	`sha256
(
hash1
, 32, 
hash
);

8237 
	}
}

8240 
	$£t_èrgë
(*
de°_èrgë
, 
diff
)

8242 
èrgë
[32];

8243 
uöt64_t
 *
d©a64
, 
h64
;

8244 
d64
, 
dcut64
;

8246 i‡(
	`u∆ikñy
(
diff
 == 0.0))

8249 
	`≠∂og
(
LOG_ERR
, "Diff zeroÖassedÅo set_target");

8250 
diff
 = 1.0;

8253 
d64
 = 
åuediff⁄e
;

8254 
d64
 /
diff
;

8255 
dcut64
 = 
d64
 / 
bôs192
;

8256 
h64
 = 
dcut64
;

8257 
d©a64
 = (
uöt64_t
 *)(
èrgë
 + 24);

8258 *
d©a64
 = 
	`htﬁe64
(
h64
);

8259 
dcut64
 = 
h64
;

8260 
dcut64
 *
bôs192
;

8261 
d64
 -
dcut64
;

8262 
dcut64
 = 
d64
 / 
bôs128
;

8263 
h64
 = 
dcut64
;

8264 
d©a64
 = (
uöt64_t
 *)(
èrgë
 + 16);

8265 *
d©a64
 = 
	`htﬁe64
(
h64
);

8266 
dcut64
 = 
h64
;

8267 
dcut64
 *
bôs128
;

8268 
d64
 -
dcut64
;

8269 
dcut64
 = 
d64
 / 
bôs64
;

8270 
h64
 = 
dcut64
;

8271 
d©a64
 = (
uöt64_t
 *)(
èrgë
 + 8);

8272 *
d©a64
 = 
	`htﬁe64
(
h64
);

8273 
dcut64
 = 
h64
;

8274 
dcut64
 *
bôs64
;

8275 
d64
 -
dcut64
;

8276 
h64
 = 
d64
;

8277 
d©a64
 = (
uöt64_t
 *)(
èrgë
);

8278 *
d©a64
 = 
	`htﬁe64
(
h64
);

8280 i‡(
›t_debug
)

8282 *
hèrgë
 = 
	`bö2hex
(
èrgë
, (
size_t
)32);

8284 
	`≠∂og
(
LOG_DEBUG
, "Gíî©edÅ¨gë %s", 
hèrgë
);

8285 
	`‰ì
(
hèrgë
);

8288 
	`cg_mem˝y
(
de°_èrgë
, 
èrgë
, 32);

8289 
	}
}

8293 
	$gë_w‹k_by_n⁄˚2
(
thr_öfo
 *
thr
,

8294 
w‹k
 **work,

8295 
poﬁ
 *pool,

8296 
poﬁ
 *
ªÆ_poﬁ
,

8297 
uöt64_t
 
n⁄˚2
,

8298 
uöt32_t
 
¡ime
,

8299 
uöt32_t
 
vîsi⁄
)

8301 *
w‹k
 = 
	`make_w‹k
();

8302 c⁄° 
thr_id
 = 
thr
->
id
;

8303 
cgpu_öfo
 *
cgpu
 = 
thr
->cgpu;

8304 
devi˚_drv
 *
drv
 = 
cgpu
->drv;

8305 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

8306 
poﬁ
->
n⁄˚2
 =Çonce2;

8308 
vîsi⁄
 = 
	`Sw≠32
(version);

8309 
	`cg_mem˝y
(
poﬁ
->
hódî_bö
, &
vîsi⁄
, 4);

8310 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

8312 
	`gí_°øtum_w‹k
(
poﬁ
, *
w‹k
);

8314 (*
w‹k
)->
poﬁ
 = 
ªÆ_poﬁ
;

8316 (*
w‹k
)->
thr_id
 =Åhr_id;

8317 (*
w‹k
)->
w‹k_block
 = work_block;

8318 (*
w‹k
)->
poﬁ
->
w‹ks
++;

8320 (*
w‹k
)->
möed
 = 
åue
;

8321 (*
w‹k
)->
vîsi⁄
 = version;

8322 
	}
}

8330 
	$gí_°øtum_w‹k
(
poﬁ
 *poﬁ, 
w‹k
 *work)

8332 
mîkÀ_roŸ
[32], 
mîkÀ_sha
[64];

8333 
uöt32_t
 *
d©a32
, *
sw≠32
;

8334 
uöt64_t
 
n⁄˚2À
;

8335 
i
;

8337 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

8341 
n⁄˚2À
 = 
	`htﬁe64
(
poﬁ
->
n⁄˚2
);

8342 
	`cg_mem˝y
(
poﬁ
->
coöba£
 +Öoﬁ->
n⁄˚2_off£t
, &
n⁄˚2À
, (Ìoﬁ->
n2size
);

8344 
w‹k
->
n⁄˚2
 = 
poﬁ
->nonce2++;

8345 
w‹k
->
n⁄˚2_Àn
 = 
poﬁ
->
n2size
;

8348 
	`cg_dwlock
(&
poﬁ
->
d©a_lock
);

8351 
	`gí_hash
(
poﬁ
->
coöba£
, 
mîkÀ_roŸ
,Öoﬁ->
coöba£_Àn
);

8352 
	`cg_mem˝y
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 32);

8354 
i
 = 0; i < 
poﬁ
->
mîkÀs
; i++)

8356 
	`cg_mem˝y
(
mîkÀ_sha
 + 32, 
poﬁ
->
sw‹k
.
mîkÀ_bö
[
i
], 32);

8357 
	`gí_hash
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 64);

8358 
	`cg_mem˝y
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 32);

8361 
d©a32
 = (
uöt32_t
 *)
mîkÀ_sha
;

8362 
sw≠32
 = (
uöt32_t
 *)
mîkÀ_roŸ
;

8364 
	`Êù32
(
sw≠32
, 
d©a32
);

8367 
	`cg_mem˝y
(
w‹k
->
d©a
, 
poﬁ
->
hódî_bö
, 112);

8368 
	`cg_mem˝y
(
w‹k
->
d©a
 + 36, 
mîkÀ_roŸ
, 32);

8372 
w‹k
->
sdiff
 = 
poﬁ
->sdiff;

8375 
w‹k
->
job_id
 = 
	`°rdup
(
poﬁ
->
sw‹k
.job_id);

8376 
w‹k
->
n⁄˚1
 = 
	`°rdup
(
poﬁ
->nonce1);

8377 
w‹k
->
¡ime
 = 
	`°rdup
(
poﬁ
->ntime);

8379 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

8381 i‡(
›t_debug
)

8383 *
hódî
, *
mîkÀ_hash
;

8385 
hódî
 = 
	`bö2hex
(
w‹k
->
d©a
, (
size_t
)112);

8386 
mîkÀ_hash
 = 
	`bö2hex
((c⁄° *)
mîkÀ_roŸ
, (
size_t
)32);

8388 
	`≠∂og
(
LOG_DEBUG
, "Gíî©ed så©um mîkÀ %s", 
mîkÀ_hash
);

8389 
	`≠∂og
(
LOG_DEBUG
, "Gíî©ed så©um hódî %s", 
hódî
);

8390 
	`≠∂og
(
LOG_DEBUG
, "W‹k job_id %†n⁄˚2 %"
PRIu64
"Çtimê%s", 
w‹k
->
job_id
, w‹k->
n⁄˚2
, w‹k->
¡ime
);

8392 
	`‰ì
(
hódî
);

8393 
	`‰ì
(
mîkÀ_hash
);

8396 
	`ˇlc_mid°©e
(
w‹k
);

8398 
	`£t_èrgë
(
w‹k
->
èrgë
, w‹k->
sdiff
);

8400 
loˇl_w‹k
++;

8402 if((
	`time
(
NULL
Ë- 
loˇl_w‹k_œ°time
) > 5)

8404 
diff
 = 
loˇl_w‹k
 - 
loˇl_w‹k_œ°
;

8406 
loˇl_w‹k_œ°time
 = 
	`time
(
NULL
);

8407 
loˇl_w‹k_œ°
 = 
loˇl_w‹k
;

8410 
w‹k
->
poﬁ
 =Öool;

8411 
w‹k
->
°øtum
 = 
åue
;

8412 
w‹k
->
n⁄˚
 = 0;

8413 
w‹k
->
l⁄gpﬁl
 = 
Ál£
;

8414 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_STRATUM
;

8415 
w‹k
->
w‹k_block
 = work_block;

8417 
w‹k
->
drv_rﬁŒimô
 = 60;

8420 
	`ˇlc_diff
(
w‹k
, w‹k->
sdiff
);

8422 
	`cgtime
(&
w‹k
->
tv_°aged
);

8423 
	}
}

8426 
	$gí_°øtum_w‹k
(
poﬁ
 *poﬁ, 
w‹k
 *work)

8428 
uöt32_t
 
èrgë_tmp
, 
n
 = 0;

8430 
	`cg_æock
(&
poﬁ
->
d©a_lock
);

8431 
w‹k
->
job_id
 = 
	`°rdup
(
poﬁ
->
sw‹k
.job_id);

8432 
	`mem˝y
(
w‹k
->
d©a
, 
poﬁ
->
hódî_bö
, 136);

8433 
w‹k
->
btm_èrgë
 = 
poﬁ
->
btm_tgt
;

8434 
èrgë_tmp
 = 
poﬁ
->
btm_tgt
;

8435 
èrgë_tmp
)

8437 
èrgë_tmp
 >>= 1;

8438 
n
++;

8440 
w‹k
->
btm_dff
 = 32 - 
n
;

8441 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

8445 *
hódî
;

8446 
hódî
 = 
	`bö2hex
(
w‹k
->
d©a
, (
size_t
)136);

8447 
	`≠∂og
(
LOG_NOTICE
, "Gíî©ed så©um hódî %s", 
hódî
);

8448 
	`‰ì
(
hódî
);

8451 
loˇl_w‹k
++;

8453 if((
	`time
(
NULL
Ë- 
loˇl_w‹k_œ°time
) > 5)

8455 
diff
 = 
loˇl_w‹k
 - 
loˇl_w‹k_œ°
;

8457 
loˇl_w‹k_œ°time
 = 
	`time
(
NULL
);

8458 
loˇl_w‹k_œ°
 = 
loˇl_w‹k
;

8461 
w‹k
->
poﬁ
 =Öool;

8462 
w‹k
->
°øtum
 = 
åue
;

8463 
w‹k
->
n⁄˚
 = 0;

8464 
w‹k
->
l⁄gpﬁl
 = 
Ál£
;

8465 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_STRATUM
;

8466 
w‹k
->
w‹k_block
 = work_block;

8468 
w‹k
->
drv_rﬁŒimô
 = 60;

8472 
	`cgtime
(&
w‹k
->
tv_°aged
);

8473 
	}
}

8476 #ifde‡
HAVE_LIBCURL


8477 
gí_sﬁo_w‹k
(
poﬁ
 *poﬁ, 
w‹k
 *work);

8481 
	$gë_gbt_cuæ
(
poﬁ
 *poﬁ, 
pﬁl
)

8483 
	`cg_ûock
(&
poﬁ
->
gbt_lock
);

8484 
poﬁ
->
gbt_cuæ_öu£
)

8486 
	`cg_uûock
(&
poﬁ
->
gbt_lock
);

8487 
	`cg¶ìp_ms
(
pﬁl
);

8488 
	`cg_ûock
(&
poﬁ
->
gbt_lock
);

8490 
	`cg_ulock
(&
poﬁ
->
gbt_lock
);

8491 
poﬁ
->
gbt_cuæ_öu£
 = 
åue
;

8492 
	`cg_wu∆ock
(&
poﬁ
->
gbt_lock
);

8493 
	}
}

8496 
ölöe
 
	$ªÀa£_gbt_cuæ
(
poﬁ
 *pool)

8498 
poﬁ
->
gbt_cuæ_öu£
 = 
Ál£
;

8499 
	}
}

8501 
	$upd©e_gbt_sﬁo
(
poﬁ
 *pool)

8503 
w‹k
 *w‹k = 
	`make_w‹k
();

8504 
rﬁ…ime
;

8505 
js⁄_t
 *
vÆ
;

8507 
	`gë_gbt_cuæ
(
poﬁ
, 10);

8508 
ªåy
:

8510 
	`cuæ_ósy_£t›t
(
poﬁ
->
gbt_cuæ
, 
CURLOPT_FORBID_REUSE
, 1);

8511 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
poﬁ
->
gbt_cuæ
,Öoﬁ->
Ωc_uæ
,Öoﬁ->
Ωc_u£Ωass
,Öoﬁ->
Ωc_ªq
,

8512 
åue
, 
Ál£
, &
rﬁ…ime
, 
poﬁ
, false);

8514 i‡(
	`likñy
(
vÆ
))

8516 
boﬁ
 
rc
 = 
	`w‹k_decode
(
poﬁ
, 
w‹k
, 
vÆ
);

8518 i‡(
rc
)

8520 
	`__£tup_gbt_sﬁo
(
poﬁ
);

8521 
	`gí_sﬁo_w‹k
(
poﬁ
, 
w‹k
);

8522 
	`°age_w‹k
(
w‹k
);

8525 
	`‰ì_w‹k
(
w‹k
);

8526 
	`js⁄_de¸ef
(
vÆ
);

8530 
	`≠∂og
(
LOG_DEBUG
, "Pool %d json_rpc_call failed on get gbt,Ñetrying in 5s",

8531 
poﬁ
->
poﬁ_no
);

8532 i‡(++
poﬁ
->
£q_gëÁûs
 > 5)

8534 
	`poﬁ_dõd
(
poﬁ
);

8535 
out
;

8537 
	`cg¶ìp_ms
(5000);

8538 
ªåy
;

8540 
out
:

8541 
	`ªÀa£_gbt_cuæ
(
poﬁ
);

8542 
	}
}

8544 
	$gí_sﬁo_w‹k
(
poﬁ
 *poﬁ, 
w‹k
 *work)

8546 
mîkÀ_roŸ
[32], 
mîkÀ_sha
[64];

8547 
uöt32_t
 *
d©a32
, *
sw≠32
;

8548 
timevÆ
 
now
;

8549 
uöt64_t
 
n⁄˚2À
;

8550 
i
;

8552 
	`cgtime
(&
now
);

8553 i‡(
now
.
tv_£c
 - 
poﬁ
->
tv_œ°w‹k
.tv_sec > 60)

8554 
	`upd©e_gbt_sﬁo
(
poﬁ
);

8556 
	`cg_wlock
(&
poﬁ
->
gbt_lock
);

8560 
n⁄˚2À
 = 
	`htﬁe64
(
poﬁ
->
n⁄˚2
);

8561 
	`cg_mem˝y
(
poﬁ
->
coöba£
 +Öoﬁ->
n⁄˚2_off£t
, &
n⁄˚2À
,Öoﬁ->
n2size
);

8562 
w‹k
->
n⁄˚2
 = 
poﬁ
->nonce2++;

8563 
w‹k
->
n⁄˚2_Àn
 = 
poﬁ
->
n2size
;

8564 
w‹k
->
gbt_txns
 = 
poﬁ
->
å™ß˘i⁄s
 + 1;

8567 
	`cg_dwlock
(&
poﬁ
->
gbt_lock
);

8568 
w‹k
->
coöba£
 = 
	`bö2hex
(
poﬁ
->coöba£,Öoﬁ->
coöba£_Àn
);

8570 
	`gí_hash
(
poﬁ
->
coöba£
, 
mîkÀ_roŸ
,Öoﬁ->
coöba£_Àn
);

8571 
	`cg_mem˝y
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 32);

8572 
i
 = 0; i < 
poﬁ
->
mîkÀs
; i++)

8574 *
mîkÀ_bö
;

8576 
mîkÀ_bö
 = 
poﬁ
->
mîkÀbö
 + (
i
 * 32);

8577 
	`cg_mem˝y
(
mîkÀ_sha
 + 32, 
mîkÀ_bö
, 32);

8578 
	`gí_hash
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 64);

8579 
	`cg_mem˝y
(
mîkÀ_sha
, 
mîkÀ_roŸ
, 32);

8581 
d©a32
 = (
uöt32_t
 *)
mîkÀ_sha
;

8582 
sw≠32
 = (
uöt32_t
 *)
mîkÀ_roŸ
;

8583 
	`Êù32
(
sw≠32
, 
d©a32
);

8586 
	`cg_mem˝y
(
w‹k
->
d©a
, 
poﬁ
->
hódî_bö
, 112);

8587 
	`cg_mem˝y
(
w‹k
->
d©a
 + 36, 
mîkÀ_roŸ
, 32);

8589 
w‹k
->
sdiff
 = 
poﬁ
->sdiff;

8592 
w‹k
->
¡ime
 = 
	`°rdup
(
poﬁ
->ntime);

8593 
	`cg_mem˝y
(
w‹k
->
èrgë
, 
poﬁ
->
gbt_èrgë
, 32);

8594 
	`cg_ru∆ock
(&
poﬁ
->
gbt_lock
);

8596 i‡(
›t_debug
)

8598 *
hódî
, *
mîkÀ_hash
;

8600 
hódî
 = 
	`bö2hex
(
w‹k
->
d©a
, 112);

8601 
mîkÀ_hash
 = 
	`bö2hex
((c⁄° *)
mîkÀ_roŸ
, 32);

8602 
	`≠∂og
(
LOG_DEBUG
, "Gíî©ed GBT sﬁÿmîkÀ %s", 
mîkÀ_hash
);

8603 
	`≠∂og
(
LOG_DEBUG
, "Gíî©ed GBT sﬁÿhódî %s", 
hódî
);

8604 
	`≠∂og
(
LOG_DEBUG
, "W‹kÇ⁄˚2 %"
PRIu64
"Çtimê%s", 
w‹k
->
n⁄˚2
,

8605 
w‹k
->
¡ime
);

8606 
	`‰ì
(
hódî
);

8607 
	`‰ì
(
mîkÀ_hash
);

8610 
	`ˇlc_mid°©e
(
w‹k
);

8612 
loˇl_w‹k
++;

8613 
w‹k
->
gbt
 = 
åue
;

8614 
w‹k
->
poﬁ
 =Öool;

8615 
w‹k
->
n⁄˚
 = 0;

8616 
w‹k
->
l⁄gpﬁl
 = 
Ál£
;

8617 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_SOLO
;

8618 
w‹k
->
w‹k_block
 = work_block;

8620 
w‹k
->
drv_rﬁŒimô
 = 60;

8621 
	`ˇlc_diff
(
w‹k
, w‹k->
sdiff
);

8623 
	`cgtime
(&
w‹k
->
tv_°aged
);

8624 
	}
}

8629 
	$sh¨e_w‹k_tdiff
(
cgpu_öfo
 *
cgpu
)

8631  
œ°_gëw‹k
 - 
cgpu
->
œ°_devi˚_vÆid_w‹k
;

8632 
	}
}

8634 
	$£t_bíchm¨k_w‹k
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work)

8636 
cgpu
->
lodiff
 +cgpu->
dúe˘i⁄
;

8637 i‡(
cgpu
->
lodiff
 < 1)

8639 
cgpu
->
dúe˘i⁄
 = 1;

8642 i‡(
cgpu
->
lodiff
 > 15)

8644 
cgpu
->
dúe˘i⁄
 = -1;

8646 i‡(++
cgpu
->
hidiff
 > 15)

8648 
cgpu
->
hidiff
 = 0;

8651 
	`cg_mem˝y
(
w‹k
, &
bích_hidiff_bös
[
cgpu
->
hidiff
][0], 160);

8655 
	`cg_mem˝y
(
w‹k
, &
bích_lodiff_bös
[
cgpu
->
lodiff
][0], 160);

8657 
	}
}

8659 
w‹k
 *
	$gë_w‹k
(
thr_öfo
 *
thr
, c⁄° 
thr_id
)

8661 
cgpu_öfo
 *
cgpu
 = 
thr
->cgpu;

8662 
w‹k
 *w‹k = 
NULL
;

8663 
time_t
 
diff_t
;

8665 
	`thªad_ªp‹tout
(
thr
);

8666 
	`≠∂og
(
LOG_DEBUG
, "Popping work from get queueÅo get work");

8667 
diff_t
 = 
	`time
(
NULL
);

8669 !
w‹k
)

8671 
w‹k
 = 
	`hash_p›
(
åue
);

8672 i‡(
	`°Æe_w‹k
(
w‹k
, 
Ál£
))

8674 
	`disˇrd_w‹k
(
w‹k
);

8675 
	`wake_gws
();

8679 
diff_t
 = 
	`time
(
NULL
) - diff_t;

8683 i‡(
diff_t
 > 0)

8685 
	`≠∂og
(
LOG_DEBUG
, "Gë w‹k blocked f‹ %d sec⁄ds", (
time_t
)
diff_t
);

8686 
cgpu
->
œ°_devi˚_vÆid_w‹k
 +
diff_t
;

8689 
	`≠∂og
(
LOG_DEBUG
, "GŸ w‹k from gë queuêtÿgë w‹k f‹Åhªad %d", 
thr_id
);

8691 
w‹k
->
thr_id
 =Åhr_id;

8693 i‡(
›t_bíchm¨k
)

8695 
	`£t_bíchm¨k_w‹k
(
cgpu
, 
w‹k
);

8698 
	`thªad_ªp‹tö
(
thr
);

8699 
w‹k
->
möed
 = 
åue
;

8700 
w‹k
->
devi˚_diff
 = 
	`MIN
(
cgpu
->
drv
->
max_diff
, w‹k->
w‹k_difficu…y
);

8701 
w‹k
->
devi˚_diff
 = 
	`MAX
(
cgpu
->
drv
->
mö_diff
, work->device_diff);

8702  
w‹k
;

8703 
	}
}

8707 
	$submô_w‹k_async
(
w‹k
 *work)

8709 
poﬁ
 *poﬁ = 
w‹k
->pool;

8710 
±hªad_t
 
submô_thªad
;

8712 
	`cgtime
(&
w‹k
->
tv_w‹k_found
);

8714 i‡(
›t_bíchm¨k
)

8716 
cgpu_öfo
 *
cgpu
 = 
	`gë_thr_cgpu
(
w‹k
->
thr_id
);

8718 
	`muãx_lock
(&
°©s_lock
);

8719 
cgpu
->
ac˚±ed
++;

8720 
tŸÆ_ac˚±ed
++;

8721 
poﬁ
->
ac˚±ed
++;

8722 
cgpu
->
diff_ac˚±ed
 +
w‹k
->
w‹k_difficu…y
;

8723 
tŸÆ_diff_ac˚±ed
 +
w‹k
->
w‹k_difficu…y
;

8724 
poﬁ
->
diff_ac˚±ed
 +
w‹k
->
w‹k_difficu…y
;

8725 
	`muãx_u∆ock
(&
°©s_lock
);

8727 
	`≠∂og
(
LOG_NOTICE
, "Ac˚±ed %†%d bíchm¨k sh¨ên⁄˚ %08x", 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
, *(
uöt32_t
 *)(
w‹k
->
d©a
 + 64 + 12));

8731 i‡(
	`°Æe_w‹k
(
w‹k
, 
åue
))

8733 i‡(
›t_submô_°Æe
)

8735 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d sèÀ sh¨êdëe˘ed, submôtögá†u£∏ªque°ed", 
poﬁ
->
poﬁ_no
);

8737 i‡(
poﬁ
->
submô_ﬁd
)

8739 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d sèÀ sh¨êdëe˘ed, submôtögá†poﬁÑeque°ed", 
poﬁ
->
poﬁ_no
);

8743 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d sèÀ sh¨êdëe˘ed, disˇrdög", 
poﬁ
->
poﬁ_no
);

8744 
	`sh¨ñog
("disˇrd", 
w‹k
);

8746 
	`muãx_lock
(&
°©s_lock
);

8747 
tŸÆ_°Æe
++;

8748 
poﬁ
->
°Æe_sh¨es
++;

8750 
tŸÆ_diff_°Æe
 +
w‹k
->
w‹k_difficu…y
;

8751 
poﬁ
->
diff_°Æe
 +
w‹k
->
w‹k_difficu…y
;

8753 
	`muãx_u∆ock
(&
°©s_lock
);

8755 
	`‰ì_w‹k
(
w‹k
);

8758 
w‹k
->
°Æe
 = 
åue
;

8761 i‡(
w‹k
->
°øtum
)

8763 
	`≠∂og
(
LOG_DEBUG
, "PushögÖoﬁ %d w‹kÅÿ°øtum queue", 
poﬁ
->
poﬁ_no
);

8764 i‡(
	`u∆ikñy
(!
poﬁ
->
°øtum_q
 || !
	`tq_push
’oﬁ->°øtum_q, 
w‹k
)))

8766 
	`≠∂og
(
LOG_DEBUG
, "Discarding work fromÑemovedÖool");

8767 
	`‰ì_w‹k
(
w‹k
);

8772 
	`≠∂og
(
LOG_DEBUG
, "Pushing submit workÅo workÅhread");

8773 i‡(
	`u∆ikñy
(
	`±hªad_¸óã
(&
submô_thªad
, 
NULL
, 
submô_w‹k_thªad
, (*)
w‹k
)))

8774 
	`quô
(1, "FailedÅo create submit_work_thread");

8776 
	}
}

8779 
	$öc_hw_îr‹s
(
thr_öfo
 *
thr
)

8781 
	`≠∂og
(
LOG_INFO
, "%†%d: invÆidÇ⁄˚ - HWÉº‹", 
thr
->
cgpu
->
drv
->
«me
,

8782 
thr
->
cgpu
->
devi˚_id
);

8784 
	`muãx_lock
(&
°©s_lock
);

8785 
hw_îr‹s
++;

8786 
thr
->
cgpu
->
hw_îr‹s
++;

8787 
	`muãx_u∆ock
(&
°©s_lock
);

8789 
thr
->
cgpu
->
drv
->
	`hw_îr‹
(thr);

8790 
	}
}

8792 
	$öc_hw_îr‹s_wôh_diff
(
thr_öfo
 *
thr
, 
diff
)

8794 
	`≠∂og
(
LOG_ERR
, "%s%d: invÆidÇ⁄˚ - HWÉº‹", 
thr
->
cgpu
->
drv
->
«me
,

8795 
thr
->
cgpu
->
devi˚_id
);

8797 
	`muãx_lock
(&
°©s_lock
);

8798 
hw_îr‹s
 +
diff
 ;

8799 
thr
->
cgpu
->
hw_îr‹s
 +
diff
;

8800 
	`muãx_u∆ock
(&
°©s_lock
);

8802 
thr
->
cgpu
->
drv
->
	`hw_îr‹
(thr);

8803 
	}
}

8807 
	$öc_dev_°©us
(
max_Án
, 
max_ãmp
)

8809 
	`muãx_lock
(&
°©s_lock
);

8810 
g_max_Án
 = 
max_Án
;

8811 
g_max_ãmp
 = 
max_ãmp
;

8812 
	`muãx_u∆ock
(&
°©s_lock
);

8813 
	}
}

8817 
	$ªbuûd_n⁄˚
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
)

8819 
uöt32_t
 *
w‹k_n⁄˚
 = (uöt32_à*)(
w‹k
->
d©a
 + 64 + 12);

8821 *
w‹k_n⁄˚
 = 
	`htﬁe32
(
n⁄˚
);

8823 
	`ªgí_hash
(
w‹k
);

8824 
	}
}

8827 
boﬁ
 
	$ã°_n⁄˚
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
)

8829 
uöt32_t
 *
hash_32
 = (uöt32_à*)(
w‹k
->
hash
 + 28);

8831 
	`ªbuûd_n⁄˚
(
w‹k
, 
n⁄˚
);

8832  (*
hash_32
 == 0);

8833 
	}
}

8836 
boﬁ
 
	$ã°_n⁄˚_diff
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
, 
diff
)

8838 
uöt64_t
 *
hash64
 = (uöt64_à*)(
w‹k
->
hash
 + 24), 
diff64
;

8840 
	`ªbuûd_n⁄˚
(
w‹k
, 
n⁄˚
);

8841 
diff64
 = 0x00000000ffff0000ULL;

8842 
diff64
 /
diff
;

8844  (
	`À64toh
(*
hash64
Ë<
diff64
);

8845 
	}
}

8847 
	$upd©e_w‹k_°©s
(
thr_öfo
 *
thr
, 
w‹k
 *work)

8849 
ã°_diff
 = 
cuºít_diff
;

8851 
w‹k
->
sh¨e_diff
 = 
	`sh¨e_diff
(work);

8853 i‡(
	`u∆ikñy
(
w‹k
->
sh¨e_diff
 >
ã°_diff
))

8855 
w‹k
->
block
 = 
åue
;

8856 
w‹k
->
poﬁ
->
sﬁved
++;

8857 
found_blocks
++;

8858 
w‹k
->
m™d©‹y
 = 
åue
;

8859 
	`≠∂og
(
LOG_NOTICE
, "Found block f‹Öoﬁ %d!", 
w‹k
->
poﬁ
->
poﬁ_no
);

8862 
	`muãx_lock
(&
°©s_lock
);

8863 
tŸÆ_diff1
 +
w‹k
->
devi˚_diff
;

8864 
thr
->
cgpu
->
diff1
 +
w‹k
->
devi˚_diff
;

8865 
w‹k
->
poﬁ
->
diff1
 +w‹k->
devi˚_diff
;

8866 
thr
->
cgpu
->
œ°_devi˚_vÆid_w‹k
 = 
	`time
(
NULL
);

8867 
	`muãx_u∆ock
(&
°©s_lock
);

8868 
	}
}

8870 
	$öc_w‹k_°©s
(
thr_öfo
 *
thr
, 
poﬁ
 *poﬁ, 
diff1
)

8872 
	`muãx_lock
(&
°©s_lock
);

8873 
tŸÆ_diff1
 +
diff1
;

8874 
thr
->
cgpu
->
diff1
 += diff1;

8876 if(
poﬁ
)

8878 
poﬁ
->
diff1
 += diff1;

8882 
poﬁ
 = 
	`cuºít_poﬁ
();

8883 
poﬁ
->
diff1
 += diff1;

8885 
thr
->
cgpu
->
œ°_devi˚_vÆid_w‹k
 = 
	`time
(
NULL
);

8886 
	`muãx_u∆ock
(&
°©s_lock
);

8887 
	}
}

8892 
boﬁ
 
	$submô_ã°ed_w‹k
(
thr_öfo
 *
thr
, 
w‹k
 *work)

8894 
w‹k
 *
w‹k_out
;

8895 
	`upd©e_w‹k_°©s
(
thr
, 
w‹k
);

8897 i‡(!
	`fuŒã°
(
w‹k
->
hash
, w‹k->
èrgë
))

8899 
	`≠∂og
(
LOG_INFO
, "%†%†%d: Sh¨êabovêèrgë",
__FUNCTION__
, 
thr
->
cgpu
->
drv
->
«me
,Åhr->cgpu->
devi˚_id
);

8900  
Ál£
;

8903 
w‹k_out
 = 
	`c›y_w‹k
(
w‹k
);

8904 
	`submô_w‹k_async
(
w‹k_out
);

8905  
åue
;

8906 
	}
}

8910 
boﬁ
 
	$√w_n⁄˚
(
thr_öfo
 *
thr
, 
uöt32_t
 
n⁄˚
)

8912 
cgpu_öfo
 *
cgpu
 = 
thr
->cgpu;

8914 i‡(
	`u∆ikñy
(
cgpu
->
œ°_n⁄˚
 =
n⁄˚
))

8916 
	`≠∂og
(
LOG_INFO
, "%†%d du∂iˇã sh¨êdëe˘edá†HWÉº‹", 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

8917  
Ál£
;

8920 
cgpu
->
œ°_n⁄˚
 = 
n⁄˚
;

8921  
åue
;

8922 
	}
}

8924 
boﬁ
 
	$Hex2Bö
(*
hex
, *
pByãs
)

8926 
i
;

8927 
j
=0;

8928 
i
=0; i<
	`°æí
(
hex
); i++)

8930 
tmp
;

8931 if(
hex
[
i
]>='0' && hex[i]<='9')

8933 
tmp
=
hex
[
i
]-'0';

8935 if(
hex
[
i
]>='a' && hex[i]<='f')

8937 
tmp
=
hex
[
i
]-'a'+10;

8939 if(
hex
[
i
]>='A' && hex[i]<='F')

8941 
tmp
=
hex
[
i
]-'A'+10;

8943  
Ál£
;

8945 if((
i
%2)==0)

8946 
pByãs
[
j
]=(
tmp
<<4)&0xf0;

8947 
pByãs
[
j
++]+=
tmp
;

8949  
åue
;

8950 
	}
}

8952 
	$gëChùIndex
(*
n⁄˚4
)

8954 
n⁄˚
[9];

8955 
n⁄˚_byãs
[4];

8957 if(
	`Hex2Bö
(
n⁄˚
,
n⁄˚_byãs
))

8959 
chùIndex
;

8960 
¶ŸIndex
;

8961 
c‹eIndex
;

8963 
chùIndex
=
n⁄˚_byãs
[0]/4;

8965  
chùIndex
;

8968 
	}
}

8970 
FILE
 *
	gfd_log
=
NULL
;

8971 
	$cg_ßvñogw‹k
(
w‹k
 *w‹k, *
n⁄˚_bö
)

8973 if(!
fd_log
)

8974 
fd_log
=
	`f›í
("/etc/config/worklog.txt","wb");

8978 
chùIndex
;

8979 
szmsg
[1024] = {0};

8980 
mid°©e_tmp
[32] = {0};

8981 
d©a_tmp
[32] = {0};

8982 
hash_tmp
[32] = {0};

8983 * 
szw‹kd©a
 = 
NULL
;

8984 * 
szmid°©e
 = 
NULL
;

8985 * 
szd©a
 = 
NULL
;

8986 * 
szn⁄˚4
 = 
NULL
;

8987 * 
szn⁄˚5
 = 
NULL
;

8988 * 
szhash
 = 
NULL
;

8989 
asi˙um
 = 0;

8990 
uöt64_t
 
w‹ksh¨ediff
 = 0;

8991 
	`mem˝y
(
mid°©e_tmp
, 
w‹k
->
mid°©e
, 32);

8992 
	`mem˝y
(
d©a_tmp
, 
w‹k
->
d©a
+64, 12);

8993 
	`mem˝y
(
hash_tmp
, 
w‹k
->
hash
, 32);

8994 
	`ªv
((*)
mid°©e_tmp
, 32);

8995 
	`ªv
((*)
d©a_tmp
, 12);

8996 
	`ªv
((*)
hash_tmp
, 32);

8997 
szw‹kd©a
 = 
	`bö2hex
((*)
w‹k
->
d©a
, 128);

8998 
szmid°©e
 = 
	`bö2hex
((*)
mid°©e_tmp
, 32);

8999 
szd©a
 = 
	`bö2hex
((*)
d©a_tmp
, 12);

9000 
szn⁄˚4
 = 
	`bö2hex
((*)
n⁄˚_bö
, 4);

9001 
szn⁄˚5
 = 
	`bö2hex
((*)
n⁄˚_bö
, 5);

9002 
szhash
 = 
	`bö2hex
((*)
hash_tmp
, 32);

9003 
w‹ksh¨ediff
 = 
	`sh¨e_ndiff
(
w‹k
);

9005 
chùIndex
=
	`gëChùIndex
(
szn⁄˚4
);

9009 
	`•rötf
(
szmsg
, "mid°©ê%†d©®%†n⁄˚ %†\r\n", 
szmid°©e
, 
szd©a
, 
szn⁄˚4
);

9010 
	`fwrôe
(
szmsg
, 
	`°æí
(szmsg), 1, 
fd_log
);

9011 
	`fÊush
(
fd_log
);

9014 if(
szw‹kd©a
Ë
	`‰ì
(szworkdata);

9015 if(
szmid°©e
Ë
	`‰ì
(szmidstate);

9016 if(
szd©a
Ë
	`‰ì
(szdata);

9017 if(
szn⁄˚4
Ë
	`‰ì
(sznonce4);

9018 if(
szn⁄˚5
Ë
	`‰ì
(sznonce5);

9019 if(
szhash
Ë
	`‰ì
(szhash);

9021 
	}
}

9023 
	$cg_ßvñogw‹k_uöt32
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
)

9027 
n⁄˚_bö
[5] = {0};

9028 
	`mem˝y
(
n⁄˚_bö
, &
n⁄˚
, 4);

9029 
	`cg_ßvñogw‹k
(
w‹k
, 
n⁄˚_bö
);

9031 
	}
}

9037 
boﬁ
 
	$ßvñog_n⁄˚
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
)

9039 i‡(
	`ã°_n⁄˚
(
w‹k
, 
n⁄˚
))

9040 
	`cg_ßvñogw‹k_uöt32
(
w‹k
, 
n⁄˚
);

9041 
	}
}

9045 
boﬁ
 
	$submô_n⁄˚
(
thr_öfo
 *
thr
, 
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
)

9047 i‡(
	`√w_n⁄˚
(
thr
, 
n⁄˚
Ë&& 
	`ã°_n⁄˚
(
w‹k
,Çonce))

9049 
	`submô_ã°ed_w‹k
(
thr
, 
w‹k
);

9053 
	`öc_hw_îr‹s
(
thr
);

9054  
Ál£
;

9057 i‡(
›t_bíchfûe
 && 
›t_bíchfûe_di•œy
)

9059 
	`bíchfûe_d•w‹k
(
w‹k
, 
n⁄˚
);

9062  
åue
;

9063 
	}
}

9065 
boﬁ
 
	$submô_n⁄˚_1
(
thr_öfo
 *
thr
, 
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
, * 
nofuŒ
)

9067 if(
nofuŒ
)

9069 *
nofuŒ
 = 0;

9072 i‡(
	`ã°_n⁄˚
(
w‹k
, 
n⁄˚
))

9074 
	`upd©e_w‹k_°©s
(
thr
, 
w‹k
);

9076 i‡(!
	`fuŒã°
(
w‹k
->
hash
, w‹k->
èrgë
))

9078 if(
nofuŒ
) *nofull = 1;

9079 
	`≠∂og
(
LOG_INFO
, "ShareáboveÅarget");

9080  
Ál£
;

9085 
	`öc_hw_îr‹s
(
thr
);

9086  
Ál£
;

9089  
åue
;

9090 
	}
}

9092 
	$submô_n⁄˚_2
(
w‹k
 *work)

9094 
w‹k
 *
w‹k_out
;

9095 
w‹k_out
 = 
	`c›y_w‹k
(
w‹k
);

9096 
	`submô_w‹k_async
(
w‹k_out
);

9097 
	}
}

9099 
boﬁ
 
	$submô_n⁄˚_dúe˘
(
thr_öfo
 *
thr
, 
w‹k
 *w‹k, 
uöt64_t
 
n⁄˚
)

9101 
w‹k
 *
w‹k_out
;

9102 
uöt64_t
 *
w‹k_n⁄˚
 = (uöt64_à*)(
w‹k
->
d©a
 + 128);

9103 *
w‹k_n⁄˚
 = 
	`htﬁe64
(
n⁄˚
);

9104 
w‹k
->
btm_n⁄˚
 = 
n⁄˚
;

9105 
w‹k_out
 = 
	`c›y_w‹k
(
w‹k
);

9106 
	`submô_w‹k_async
(
w‹k_out
);

9107  
åue
;

9108 
	}
}

9114 
boﬁ
 
	$submô_noff£t_n⁄˚
(
thr_öfo
 *
thr
, 
w‹k
 *
w‹k_ö
, 
uöt32_t
 
n⁄˚
,

9115 
noff£t
)

9117 
w‹k
 *w‹k = 
	`make_w‹k
();

9118 
boﬁ
 
ªt
 = 
Ál£
;

9120 
	`_c›y_w‹k
(
w‹k
, 
w‹k_ö
, 
noff£t
);

9122 i‡(!
	`ã°_n⁄˚
(
w‹k
, 
n⁄˚
))

9124 
	`‰ì_w‹k
(
w‹k
);

9125 
	`öc_hw_îr‹s
(
thr
);

9126 
out
;

9129 
	`upd©e_w‹k_°©s
(
thr
, 
w‹k
);

9131 i‡(
›t_bíchfûe
 && 
›t_bíchfûe_di•œy
)

9133 
	`bíchfûe_d•w‹k
(
w‹k
, 
n⁄˚
);

9136 
ªt
 = 
åue
;

9138 i‡(!
	`fuŒã°
(
w‹k
->
hash
, w‹k->
èrgë
))

9140 
	`‰ì_w‹k
(
w‹k
);

9141 
	`≠∂og
(
LOG_INFO
, "%†%d: Sh¨êabovêèrgë", 
thr
->
cgpu
->
drv
->
«me
,Åhr->cgpu->
devi˚_id
);

9142 
out
;

9144 
	`submô_w‹k_async
(
w‹k
);

9146 
out
:

9147  
ªt
;

9148 
	}
}

9150 
ölöe
 
boﬁ
 
	$ab™d⁄_w‹k
(
w‹k
 *w‹k, 
timevÆ
 *
wdiff
, 
uöt64_t
 
hashes
)

9152 i‡(
wdiff
->
tv_£c
 > 
›t_sˇ¡ime
 || 
hashes
 >0xffffff„ || 
	`°Æe_w‹k
(
w‹k
, 
Ál£
))

9154  
åue
;

9157  
Ál£
;

9158 
	}
}

9161 
	$mt_dißbÀ
(
thr_öfo
 *
mythr
, c⁄° 
thr_id
, 
devi˚_drv
 *
drv
)

9163 
	`≠∂og
(
LOG_WARNING
, "Thªad %d beög dißbÀd", 
thr_id
);

9164 
mythr
->
cgpu
->
rﬁlög
 = 0;

9165 
	`≠∂og
(
LOG_DEBUG
, "Waiting on sem in minerÅhread");

9166 
	`cg£m_waô
(&
mythr
->
£m
);

9167 
	`≠∂og
(
LOG_WARNING
, "Thªad %d beögÑe-íabÀd", 
thr_id
);

9168 
drv
->
	`thªad_íabÀ
(
mythr
);

9169 
	}
}

9174 
	$hash_sﬁe_w‹k
(
thr_öfo
 *
mythr
)

9176 c⁄° 
thr_id
 = 
mythr
->
id
;

9177 
cgpu_öfo
 *
cgpu
 = 
mythr
->cgpu;

9178 
devi˚_drv
 *
drv
 = 
cgpu
->drv;

9179 
timevÆ
 
gëw‹k_°¨t
, 
tv_°¨t
, *
tv_íd
, 
tv_w‹k°¨t
, 
tv_œ°upd©e
;

9180 
cgmöî_°©s
 *
dev_°©s
 = &(
cgpu
->cgminer_stats);

9181 
cgmöî_°©s
 *
poﬁ_°©s
;

9183 c⁄° 
cy˛e
 = 
›t_log_öãrvÆ
 / 5 ? : 1;

9184 c⁄° 
boﬁ
 
¥im¨y
 = (!
mythr
->
devi˚_thªad
Ë|| mythr->
¥im¨y_thªad
;

9185 
timevÆ
 
sdiff
;

9186 
timevÆ
 
diff
;

9187 
timevÆ
 
wdiff
 = {0, 0};

9188 
uöt32_t
 
max_n⁄˚
 = 
drv
->
	`ˇn_limô_w‹k
(
mythr
);

9189 
öt64_t
 
hashes_d⁄e
 = 0;

9191 
tv_íd
 = &
gëw‹k_°¨t
;

9192 
	`cgtime
(&
gëw‹k_°¨t
);

9193 
sdiff
.
tv_£c
 = sdiff.
tv_u£c
 = 0;

9194 
	`cgtime
(&
tv_œ°upd©e
);

9196 
	`likñy
(!
cgpu
->
shutdown
))

9198 
w‹k
 *w‹k = 
	`gë_w‹k
(
mythr
, 
thr_id
);

9199 
öt64_t
 
hashes
;

9201 
mythr
->
w‹k_ª°¨t
 = 
Ál£
;

9202 
cgpu
->
√w_w‹k
 = 
åue
;

9204 
	`cgtime
(&
tv_w‹k°¨t
);

9205 
w‹k
->
n⁄˚
 = 0;

9206 
cgpu
->
max_hashes
 = 0;

9208 i‡(!
drv
->
	`¥ï¨e_w‹k
(
mythr
, 
w‹k
))

9210 
	`≠∂og
(
LOG_ERR
, "w‹kÖª∑ª faûed,Éxôög möögÅhªad %d", 
thr_id
);

9214 
w‹k
->
devi˚_diff
 = 
	`MIN
(
drv
->
max_diff
, w‹k->
w‹k_difficu…y
);

9215 
w‹k
->
devi˚_diff
 = 
	`MAX
(
drv
->
mö_diff
, work->device_diff);

9219 
	`cgtime
(&
tv_°¨t
);

9221 
	`subtime
(&
tv_°¨t
, &
gëw‹k_°¨t
);

9223 
	`addtime
(&
gëw‹k_°¨t
, &
dev_°©s
->
gëw‹k_waô
);

9225 i‡(
	`time_m‹e
(&
gëw‹k_°¨t
, &
dev_°©s
->
gëw‹k_waô_max
))

9227 
	`c›y_time
(&
dev_°©s
->
gëw‹k_waô_max
, &
gëw‹k_°¨t
);

9230 i‡(
	`time_Àss
(&
gëw‹k_°¨t
, &
dev_°©s
->
gëw‹k_waô_mö
))

9232 
	`c›y_time
(&
dev_°©s
->
gëw‹k_waô_mö
, &
gëw‹k_°¨t
);

9234 
dev_°©s
->
gëw‹k_ˇŒs
++;

9236 
poﬁ_°©s
 = &(
w‹k
->
poﬁ
->
cgmöî_°©s
);

9238 
	`addtime
(&
gëw‹k_°¨t
, &
poﬁ_°©s
->
gëw‹k_waô
);

9240 i‡(
	`time_m‹e
(&
gëw‹k_°¨t
, &
poﬁ_°©s
->
gëw‹k_waô_max
))

9242 
	`c›y_time
(&
poﬁ_°©s
->
gëw‹k_waô_max
, &
gëw‹k_°¨t
);

9245 i‡(
	`time_Àss
(&
gëw‹k_°¨t
, &
poﬁ_°©s
->
gëw‹k_waô_mö
))

9247 
	`c›y_time
(&
poﬁ_°©s
->
gëw‹k_waô_mö
, &
gëw‹k_°¨t
);

9249 
poﬁ_°©s
->
gëw‹k_ˇŒs
++;

9251 
	`cgtime
(&(
w‹k
->
tv_w‹k_°¨t
));

9255 
	`±hªad_£tˇn˚l°©e
(
PTHREAD_CANCEL_DISABLE
, 
NULL
);

9257 
	`thªad_ªp‹tö
(
mythr
);

9258 
hashes
 = 
drv
->
	`sˇnhash
(
mythr
, 
w‹k
, (
öt64_t
)(w‹k->
n⁄˚
 + 
max_n⁄˚
));

9259 
	`thªad_ªp‹tout
(
mythr
);

9261 
	`±hªad_£tˇn˚l°©e
(
PTHREAD_CANCEL_ENABLE
, 
NULL
);

9262 
	`±hªad_ã°ˇn˚l
();

9265 
	`cgtime
(&
gëw‹k_°¨t
);

9267 i‡(
	`u∆ikñy
(
hashes
 == -1))

9269 
	`≠∂og
(
LOG_ERR
, "%†%d faûuª, dißblög!", 
drv
->
«me
, 
cgpu
->
devi˚_id
);

9270 
cgpu
->
deví
 = 
DEV_DISABLED
;

9271 
	`dev_îr‹
(
cgpu
, 
REASON_THREAD_ZERO_HASH
);

9272 
cgpu
->
shutdown
 = 
åue
;

9276 
hashes_d⁄e
 +
hashes
;

9278 i‡(
hashes
 > 
cgpu
->
max_hashes
)

9280 
cgpu
->
max_hashes
 = 
hashes
;

9283 
	`timîsub
(
tv_íd
, &
tv_°¨t
, &
diff
);

9284 
sdiff
.
tv_£c
 +
diff
.tv_sec;

9285 
sdiff
.
tv_u£c
 +
diff
.tv_usec;

9287 i‡(
sdiff
.
tv_u£c
 > 1000000)

9289 ++
sdiff
.
tv_£c
;

9290 
sdiff
.
tv_u£c
 -= 1000000;

9293 
	`timîsub
(
tv_íd
, &
tv_w‹k°¨t
, &
wdiff
);

9295 i‡(
	`u∆ikñy
(()
sdiff
.
tv_£c
 < 
cy˛e
))

9297 
mu…
;

9299 i‡(
	`likñy
(
max_n⁄˚
 == 0xffffffff))

9304 
mu…
 = 1000000 / ((
sdiff
.
tv_u£c
 + 0x400) / 0x400) + 0x10;

9305 
mu…
 *
cy˛e
;

9307 i‡(
max_n⁄˚
 > (0xfffffff‡* 0x400Ë/ 
mu…
)

9309 
max_n⁄˚
 = 0xffffffff;

9313 
max_n⁄˚
 = (max_n⁄˚ * 
mu…
) / 0x400;

9316 i‡(
	`u∆ikñy
(
sdiff
.
tv_£c
 > 
cy˛e
))

9318 
max_n⁄˚
 = max_n⁄˚ * 
cy˛e
 / 
sdiff
.
tv_£c
;

9320 i‡(
	`u∆ikñy
(
sdiff
.
tv_u£c
 > 100000))

9322 
max_n⁄˚
 = max_n⁄˚ * 0x400 / (((
cy˛e
 * 1000000Ë+ 
sdiff
.
tv_u£c
) / (cycle * 1000000 / 0x400));

9325 
	`timîsub
(
tv_íd
, &
tv_œ°upd©e
, &
diff
);

9328 i‡((
hashes_d⁄e
 && (
diff
.
tv_£c
 > 0 || diff.
tv_u£c
 > 200000)) ||

9329 
diff
.
tv_£c
 >
›t_log_öãrvÆ
)

9331 
	`hashmëî
(
thr_id
, (
uöt64_t
)
hashes_d⁄e
);

9332 
hashes_d⁄e
 = 0;

9333 
	`c›y_time
(&
tv_œ°upd©e
, 
tv_íd
);

9336 i‡(
	`u∆ikñy
(
mythr
->
w‹k_ª°¨t
))

9342 i‡(!
¥im¨y
)

9344 
time•ec
 
rgç
;

9346 
rgç
.
tv_£c
 = 0;

9347 
rgç
.
tv_n£c
 = 250 * 
mythr
->
devi˚_thªad
 * 1000000;

9348 
	`«no¶ìp
(&
rgç
, 
NULL
);

9354 i‡(
	`u∆ikñy
(
mythr
->
∑u£
 || 
cgpu
->
deví
 !
DEV_ENABLED
))

9356 
	`mt_dißbÀ
(
mythr
, 
thr_id
, 
drv
);

9359 
sdiff
.
tv_£c
 = sdiff.
tv_u£c
 = 0;

9362 !
	`ab™d⁄_w‹k
(
w‹k
, &
wdiff
, (
uöt64_t
)
cgpu
->
max_hashes
));

9364 
	`‰ì_w‹k
(
w‹k
);

9367 
cgpu
->
deví
 = 
DEV_DISABLED
;

9368 
	}
}

9374 
	$fûl_queue
(
thr_öfo
 *
mythr
, 
cgpu_öfo
 *
cgpu
, 
devi˚_drv
 *
drv
, c⁄° 
thr_id
)

9378 
boﬁ
 
√ed_w‹k
;

9381 
√ed_w‹k
 = (!
cgpu
->
unqueued_w‹k
);

9385 i‡(
√ed_w‹k
)

9387 
w‹k
 *w‹k = 
	`gë_w‹k
(
mythr
, 
thr_id
);

9389 
	`wr_lock
(&
cgpu
->
qlock
);

9392 i‡(
	`likñy
(!
cgpu
->
unqueued_w‹k
))

9394 
cgpu
->
unqueued_w‹k
 = 
w‹k
;

9398 
√ed_w‹k
 = 
Ál£
;

9400 
	`wr_u∆ock
(&
cgpu
->
qlock
);

9402 i‡(
	`u∆ikñy
(!
√ed_w‹k
))

9404 
	`disˇrd_w‹k
(
w‹k
);

9412 !
drv
->
	`queue_fuŒ
(
cgpu
));

9413 
	}
}

9416 
	$__add_queued
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work)

9418 
cgpu
->
queued_cou¡
++;

9419 
	`HASH_ADD_INT
(
cgpu
->
queued_w‹k
, 
id
, 
w‹k
);

9420 
	}
}

9422 
w‹k
 *
	$__gë_queued
(
cgpu_öfo
 *
cgpu
)

9424 
w‹k
 *w‹k = 
NULL
;

9426 i‡(
cgpu
->
unqueued_w‹k
)

9428 
w‹k
 = 
cgpu
->
unqueued_w‹k
;

9430 i‡(
	`u∆ikñy
(
	`°Æe_w‹k
(
w‹k
, 
Ál£
)))

9432 
	`disˇrd_w‹k
(
w‹k
);

9433 
	`wake_gws
();

9437 
	`__add_queued
(
cgpu
, 
w‹k
);

9440 
cgpu
->
unqueued_w‹k
 = 
NULL
;

9443  
w‹k
;

9444 
	}
}

9449 
w‹k
 *
	$gë_queued
(
cgpu_öfo
 *
cgpu
)

9451 
w‹k
 *work;

9453 
	`wr_lock
(&
cgpu
->
qlock
);

9454 
w‹k
 = 
	`__gë_queued
(
cgpu
);

9455 
	`wr_u∆ock
(&
cgpu
->
qlock
);

9457  
w‹k
;

9458 
	}
}

9460 
	$add_queued
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work)

9462 
	`wr_lock
(&
cgpu
->
qlock
);

9463 
	`__add_queued
(
cgpu
, 
w‹k
);

9464 
	`wr_u∆ock
(&
cgpu
->
qlock
);

9465 
	}
}

9468 
w‹k
 *
	$gë_queue_w‹k
(
thr_öfo
 *
thr
, 
cgpu_öfo
 *
cgpu
, 
thr_id
)

9470 
w‹k
 *w‹k = 
	`gë_w‹k
(
thr
, 
thr_id
);

9472 
	`add_queued
(
cgpu
, 
w‹k
);

9473  
w‹k
;

9474 
	}
}

9482 
w‹k
 *
	$__föd_w‹k_bymid°©e
(
w‹k
 *
que
, *
mid°©e
, 
size_t
 
mid°©ñí
, *
d©a
, 
off£t
, size_à
d©Æí
)

9484 
w‹k
 *w‹k, *
tmp
, *
ªt
 = 
NULL
;

9486 
	`HASH_ITER
(
hh
, 
que
, 
w‹k
, 
tmp
)

9488 i‡(
	`memcmp
(
w‹k
->
mid°©e
, mid°©e, 
mid°©ñí
) == 0 &&

9489 
	`memcmp
(
w‹k
->
d©a
 + 
off£t
, d©a, 
d©Æí
) == 0)

9491 
ªt
 = 
w‹k
;

9496  
ªt
;

9497 
	}
}

9504 
w‹k
 *
	$föd_queued_w‹k_bymid°©e
(
cgpu_öfo
 *
cgpu
, *
mid°©e
, 
size_t
 
mid°©ñí
, *
d©a
, 
off£t
, size_à
d©Æí
)

9506 
w‹k
 *
ªt
;

9508 
	`rd_lock
(&
cgpu
->
qlock
);

9509 
ªt
 = 
	`__föd_w‹k_bymid°©e
(
cgpu
->
queued_w‹k
, 
mid°©e
, 
mid°©ñí
, 
d©a
, 
off£t
, 
d©Æí
);

9510 
	`rd_u∆ock
(&
cgpu
->
qlock
);

9512  
ªt
;

9513 
	}
}

9516 
w‹k
 *
	$˛⁄e_queued_w‹k_bymid°©e
(
cgpu_öfo
 *
cgpu
, *
mid°©e
, 
size_t
 
mid°©ñí
, *
d©a
, 
off£t
, size_à
d©Æí
)

9518 
w‹k
 *w‹k, *
ªt
 = 
NULL
;

9520 
	`rd_lock
(&
cgpu
->
qlock
);

9521 
w‹k
 = 
	`__föd_w‹k_bymid°©e
(
cgpu
->
queued_w‹k
, 
mid°©e
, 
mid°©ñí
, 
d©a
, 
off£t
, 
d©Æí
);

9522 i‡(
w‹k
)

9523 
ªt
 = 
	`c›y_w‹k
(
w‹k
);

9524 
	`rd_u∆ock
(&
cgpu
->
qlock
);

9526  
ªt
;

9527 
	}
}

9534 
w‹k
 *
	$__föd_w‹k_byid
(
w‹k
 *
que
, 
uöt32_t
 
id
)

9536 
w‹k
 *w‹k, *
tmp
, *
ªt
 = 
NULL
;

9538 
	`HASH_ITER
(
hh
, 
que
, 
w‹k
, 
tmp
)

9540 i‡(
w‹k
->
id
 == id)

9542 
ªt
 = 
w‹k
;

9547  
ªt
;

9548 
	}
}

9551 
w‹k
 *
	$föd_queued_w‹k_byid
(
cgpu_öfo
 *
cgpu
, 
uöt32_t
 
id
)

9553 
w‹k
 *
ªt
;

9555 
	`rd_lock
(&
cgpu
->
qlock
);

9556 
ªt
 = 
	`__föd_w‹k_byid
(
cgpu
->
queued_w‹k
, 
id
);

9557 
	`rd_u∆ock
(&
cgpu
->
qlock
);

9559  
ªt
;

9560 
	}
}

9563 
w‹k
 *
	$˛⁄e_queued_w‹k_byid
(
cgpu_öfo
 *
cgpu
, 
uöt32_t
 
id
)

9565 
w‹k
 *w‹k, *
ªt
 = 
NULL
;

9567 
	`rd_lock
(&
cgpu
->
qlock
);

9568 
w‹k
 = 
	`__föd_w‹k_byid
(
cgpu
->
queued_w‹k
, 
id
);

9569 i‡(
w‹k
)

9570 
ªt
 = 
	`c›y_w‹k
(
w‹k
);

9571 
	`rd_u∆ock
(&
cgpu
->
qlock
);

9573  
ªt
;

9574 
	}
}

9576 
	$__w‹k_com∂ëed
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work)

9578 
cgpu
->
queued_cou¡
--;

9579 
	`HASH_DEL
(
cgpu
->
queued_w‹k
, 
w‹k
);

9580 
	}
}

9585 
	$age_queued_w‹k
(
cgpu_öfo
 *
cgpu
, 
£cs
)

9587 
w‹k
 *w‹k, *
tmp
;

9588 
timevÆ
 
tv_now
;

9589 
aged
 = 0;

9591 
	`cgtime
(&
tv_now
);

9593 
	`wr_lock
(&
cgpu
->
qlock
);

9594 
	`HASH_ITER
(
hh
, 
cgpu
->
queued_w‹k
, 
w‹k
, 
tmp
)

9596 i‡(
	`tdiff
(&
tv_now
, &
w‹k
->
tv_w‹k_°¨t
Ë> 
£cs
)

9598 
	`__w‹k_com∂ëed
(
cgpu
, 
w‹k
);

9599 
	`‰ì_w‹k
(
w‹k
);

9600 
aged
++;

9604 
	`wr_u∆ock
(&
cgpu
->
qlock
);

9606  
aged
;

9607 
	}
}

9612 
	$w‹k_com∂ëed
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work)

9614 
	`wr_lock
(&
cgpu
->
qlock
);

9615 
	`__w‹k_com∂ëed
(
cgpu
, 
w‹k
);

9616 
	`wr_u∆ock
(&
cgpu
->
qlock
);

9618 
	`‰ì_w‹k
(
w‹k
);

9619 
	}
}

9623 
w‹k
 *
	$èke_queued_w‹k_bymid°©e
(
cgpu_öfo
 *
cgpu
, *
mid°©e
, 
size_t
 
mid°©ñí
, *
d©a
, 
off£t
, size_à
d©Æí
)

9625 
w‹k
 *work;

9627 
	`wr_lock
(&
cgpu
->
qlock
);

9628 
w‹k
 = 
	`__föd_w‹k_bymid°©e
(
cgpu
->
queued_w‹k
, 
mid°©e
, 
mid°©ñí
, 
d©a
, 
off£t
, 
d©Æí
);

9629 i‡(
w‹k
)

9630 
	`__w‹k_com∂ëed
(
cgpu
, 
w‹k
);

9631 
	`wr_u∆ock
(&
cgpu
->
qlock
);

9633  
w‹k
;

9634 
	}
}

9636 
	$Êush_queue
(
cgpu_öfo
 *
cgpu
)

9638 
w‹k
 *w‹k = 
NULL
;

9640 i‡(
	`u∆ikñy
(!
cgpu
))

9647 i‡(
	`wr_åylock
(&
cgpu
->
qlock
))

9652 
w‹k
 = 
cgpu
->
unqueued_w‹k
;

9653 
cgpu
->
unqueued_w‹k
 = 
NULL
;

9654 
	`wr_u∆ock
(&
cgpu
->
qlock
);

9656 i‡(
w‹k
)

9658 
	`‰ì_w‹k
(
w‹k
);

9659 
	`≠∂og
(
LOG_DEBUG
, "Discarded queued work item");

9661 
	}
}

9667 
	$hash_queued_w‹k
(
thr_öfo
 *
mythr
)

9669 
timevÆ
 
tv_°¨t
 = {0, 0}, 
tv_íd
;

9670 
cgpu_öfo
 *
cgpu
 = 
mythr
->cgpu;

9671 
devi˚_drv
 *
drv
 = 
cgpu
->drv;

9672 c⁄° 
thr_id
 = 
mythr
->
id
;

9673 
öt64_t
 
hashes_d⁄e
 = 0;

9675 
	`likñy
(!
cgpu
->
shutdown
))

9677 
timevÆ
 
diff
;

9678 
öt64_t
 
hashes
;

9680 
mythr
->
w‹k_upd©e
 = 
Ál£
;

9682 
	`fûl_queue
(
mythr
, 
cgpu
, 
drv
, 
thr_id
);

9684 
hashes
 = 
drv
->
	`sˇnw‹k
(
mythr
);

9688 
mythr
->
w‹k_ª°¨t
 = 
Ál£
;

9690 i‡(
	`u∆ikñy
(
hashes
 == -1 ))

9692 
	`≠∂og
(
LOG_ERR
, "%†%d faûuª, dißblög!", 
drv
->
«me
, 
cgpu
->
devi˚_id
);

9693 
cgpu
->
deví
 = 
DEV_DISABLED
;

9694 
	`dev_îr‹
(
cgpu
, 
REASON_THREAD_ZERO_HASH
);

9698 
hashes_d⁄e
 +
hashes
;

9699 
	`cgtime
(&
tv_íd
);

9700 
	`timîsub
(&
tv_íd
, &
tv_°¨t
, &
diff
);

9703 i‡((
hashes_d⁄e
 && (
diff
.
tv_£c
 > 0 || diff.
tv_u£c
 > 200000)Ë|| diff.tv_£¯>
›t_log_öãrvÆ
)

9705 
	`hashmëî
(
thr_id
, (
uöt64_t
)
hashes_d⁄e
);

9706 
hashes_d⁄e
 = 0;

9707 
	`c›y_time
(&
tv_°¨t
, &
tv_íd
);

9710 i‡(
	`u∆ikñy
(
mythr
->
∑u£
 || 
cgpu
->
deví
 !
DEV_ENABLED
))

9712 
	`mt_dißbÀ
(
mythr
, 
thr_id
, 
drv
);

9715 i‡(
mythr
->
w‹k_upd©e
)

9717 
drv
->
	`upd©e_w‹k
(
cgpu
);

9720 
cgpu
->
deví
 = 
DEV_DISABLED
;

9721 
	}
}

9727 
	$hash_drivî_w‹k
(
thr_öfo
 *
mythr
)

9729 
timevÆ
 
tv_°¨t
 = {0, 0}, 
tv_íd
;

9730 
cgpu_öfo
 *
cgpu
 = 
mythr
->cgpu;

9731 
devi˚_drv
 *
drv
 = 
cgpu
->drv;

9732 c⁄° 
thr_id
 = 
mythr
->
id
;

9733 
öt64_t
 
hashes_d⁄e
 = 0;

9735 
	`likñy
(!
cgpu
->
shutdown
))

9737 
timevÆ
 
diff
;

9738 
öt64_t
 
hashes
;

9740 
mythr
->
w‹k_upd©e
 = 
Ál£
;

9742 
hashes
 = 
drv
->
	`sˇnw‹k
(
mythr
);

9746 
mythr
->
w‹k_ª°¨t
 = 
Ál£
;

9748 i‡(
	`u∆ikñy
(
hashes
 == -1 ))

9750 
	`≠∂og
(
LOG_ERR
, "%†%d faûuª, dißblög!", 
drv
->
«me
, 
cgpu
->
devi˚_id
);

9751 
cgpu
->
deví
 = 
DEV_DISABLED
;

9752 
	`dev_îr‹
(
cgpu
, 
REASON_THREAD_ZERO_HASH
);

9756 
hashes_d⁄e
 +
hashes
;

9757 
	`cgtime
(&
tv_íd
);

9758 
	`timîsub
(&
tv_íd
, &
tv_°¨t
, &
diff
);

9761 i‡((
hashes_d⁄e
 && (
diff
.
tv_£c
 > 0 || diff.
tv_u£c
 > 200000)Ë|| diff.tv_£¯>
›t_log_öãrvÆ
)

9763 
	`hashmëî
(
thr_id
, (
uöt64_t
)
hashes_d⁄e
);

9764 
hashes_d⁄e
 = 0;

9765 
	`c›y_time
(&
tv_°¨t
, &
tv_íd
);

9768 i‡(
	`u∆ikñy
(
mythr
->
∑u£
 || 
cgpu
->
deví
 !
DEV_ENABLED
))

9770 
	`mt_dißbÀ
(
mythr
, 
thr_id
, 
drv
);

9775 i‡(
mythr
->
w‹k_upd©e
)

9777 
	`muãx_lock
(&
upd©e_job_lock
);

9778 
drv
->
	`upd©e_w‹k
(
cgpu
);

9779 
	`muãx_u∆ock
(&
upd©e_job_lock
);

9782 
cgpu
->
deví
 = 
DEV_DISABLED
;

9783 
	}
}

9785 *
	$möî_thªad
(*
u£rd©a
)

9787 
thr_öfo
 *
mythr
 = 
u£rd©a
;

9788 c⁄° 
thr_id
 = 
mythr
->
id
;

9789 
cgpu_öfo
 *
cgpu
 = 
mythr
->cgpu;

9790 
devi˚_drv
 *
drv
 = 
cgpu
->drv;

9792 
thªad«me
[16];

9794 
	`¢¥ötf
(
thªad«me
, —hªad«me), "%d/Möî", 
thr_id
);

9795 
	`RíameThªad
(
thªad«me
);

9797 
	`thªad_ªp‹tout
(
mythr
);

9799 i‡(!
drv
->
	`thªad_öô
(
mythr
))

9801 
	`dev_îr‹
(
cgpu
, 
REASON_THREAD_FAIL_INIT
);

9802 
out
;

9805 
	`≠∂og
(
LOG_DEBUG
, "Waiting on sem in minerÅhread");

9806 
	`cg£m_waô
(&
mythr
->
£m
);

9808 
cgpu
->
œ°_devi˚_vÆid_w‹k
 = 
	`time
(
NULL
);

9809 
drv
->
	`hash_w‹k
(
mythr
);

9810 
drv
->
	`thªad_shutdown
(
mythr
);

9812 
out
:

9814  
NULL
;

9816 
	}
}

9820 
	mSTAT_SLEEP_INTERVAL
 = 1,

9821 
	mSTAT_CTR_INTERVAL
 = 10000000,

9822 
	mFAILURE_INTERVAL
 = 30,

9825 #ifde‡
HAVE_LIBCURL


9827 
	$c⁄vît_to_w‹k
(
js⁄_t
 *
vÆ
, 
rﬁ…ime
, 
poﬁ
 *poﬁ, 
timevÆ
 *
tv_Õ
, timevÆ *
tv_Õ_ª∂y
)

9829 
w‹k
 *work;

9830 
boﬁ
 
rc
;

9832 
w‹k
 = 
	`make_w‹k
();

9834 
rc
 = 
	`w‹k_decode
(
poﬁ
, 
w‹k
, 
vÆ
);

9835 i‡(
	`u∆ikñy
(!
rc
))

9837 
	`≠∂og
(
LOG_ERR
, "CouldÇot convertÜongpoll dataÅo work");

9838 
	`‰ì_w‹k
(
w‹k
);

9841 
tŸÆ_gëw‹ks
++;

9842 
poﬁ
->
gëw‹k_ªque°ed
++;

9843 
w‹k
->
poﬁ
 =Öool;

9844 
w‹k
->
rﬁ…ime
 =Ñolltime;

9845 
	`c›y_time
(&
w‹k
->
tv_gëw‹k
, 
tv_Õ
);

9846 
	`c›y_time
(&
w‹k
->
tv_gëw‹k_ª∂y
, 
tv_Õ_ª∂y
);

9847 
	`ˇlc_diff
(
w‹k
, 0);

9849 i‡(
poﬁ
->
íabÀd
 =
POOL_REJECTING
)

9850 
w‹k
->
m™d©‹y
 = 
åue
;

9852 i‡(
poﬁ
->
has_gbt
)

9853 
	`gí_gbt_w‹k
(
poﬁ
, 
w‹k
);

9854 
w‹k
->
l⁄gpﬁl
 = 
åue
;

9855 
w‹k
->
gëw‹k_mode
 = 
GETWORK_MODE_LP
;

9861 
	`ã°_w‹k_cuºít
(
w‹k
);

9867 i‡(
poﬁ
 !
	`cuºít_poﬁ
(Ë&& 
›t_Áû_⁄ly
 &&Öoﬁ->
íabÀd
 !
POOL_REJECTING
)

9869 
	`‰ì_w‹k
(
w‹k
);

9873 
w‹k
 = 
	`˛⁄e_w‹k
(work);

9875 
	`≠∂og
(
LOG_DEBUG
, "Pushing converted workÅo stageÅhread");

9877 
	`°age_w‹k
(
w‹k
);

9878 
	`≠∂og
(
LOG_DEBUG
, "ConvertedÜongpoll dataÅo work");

9879 
	}
}

9884 
poﬁ
 *
	$£À˘_l⁄gpﬁl_poﬁ
(
poﬁ
 *
˝
)

9886 
i
;

9888 i‡(
˝
->
hdr_∑th
 || cp->
has_gbt
 || cp->
gbt_sﬁo
)

9889  
˝
;

9890 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

9892 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

9894 i‡(
poﬁ
->
has_°øtum
 ||Öoﬁ->
hdr_∑th
)

9895  
poﬁ
;

9897  
NULL
;

9898 
	}
}

9904 
	$waô_Õcuºít
(
poﬁ
 *pool)

9907 !
	`˙x_√eded
(
poﬁ
) &&

9909 
poﬁ
->
íabÀd
 =
POOL_DISABLED
 ||

9911 
poﬁ
 !
	`cuºít_poﬁ
() &&

9912 
poﬁ_°øãgy
 !
POOL_LOADBALANCE
 &&

9913 
poﬁ_°øãgy
 !
POOL_BALANCE


9918 
	`muãx_lock
(&
Õ_lock
);

9919 
	`±hªad_c⁄d_waô
(&
Õ_c⁄d
, &
Õ_lock
);

9920 
	`muãx_u∆ock
(&
Õ_lock
);

9922 
	}
}

9924 #ifde‡
HAVE_LIBCURL


9925 *
	$l⁄gpﬁl_thªad
(*
u£rd©a
)

9927 
poﬁ
 *
˝
 = (poﬁ *)
u£rd©a
;

9930 
timevÆ
 
°¨t
, 
ª∂y
, 
íd
;

9931 
poﬁ
 *poﬁ = 
NULL
;

9932 
thªad«me
[16];

9933 
CURL
 *
cuæ
 = 
NULL
;

9934 
Áûuªs
 = 0;

9935 
Õªq
[1024];

9936 *
Õ_uæ
;

9937 
rﬁ…ime
;

9939 
	`¢¥ötf
(
thªad«me
, —hªad«me), "%d/L⁄gpﬁl", 
˝
->
poﬁ_no
);

9940 
	`RíameThªad
(
thªad«me
);

9942 
ªåy_poﬁ
:

9943 
poﬁ
 = 
	`£À˘_l⁄gpﬁl_poﬁ
(
˝
);

9944 i‡(!
poﬁ
)

9946 
	`≠∂og
(
LOG_WARNING
, "NÿsuôabÀÜ⁄g-pﬁ»found f‹ %s", 
˝
->
Ωc_uæ
);

9947 !
poﬁ
)

9949 
	`cg¶ìp_ms
(60000);

9950 
poﬁ
 = 
	`£À˘_l⁄gpﬁl_poﬁ
(
˝
);

9954 i‡(
poﬁ
->
has_°øtum
)

9956 
	`≠∂og
(
LOG_WARNING
, "Block change for %s detection via %s stratum",

9957 
˝
->
Ωc_uæ
, 
poﬁ
->rpc_url);

9958 
out
;

9961 i‡(
poﬁ
->
gbt_sﬁo
)

9963 
	`≠∂og
(
LOG_WARNING
, "Block change for %s detection via getblockcountÖolling",

9964 
˝
->
Ωc_uæ
);

9967 
js⁄_t
 *
vÆ
, *
ªs_vÆ
 = 
NULL
;

9969 i‡(
	`u∆ikñy
(
poﬁ
->
ªmoved
))

9970  
NULL
;

9972 
	`cgtime
(&
°¨t
);

9973 
	`waô_Õcuºít
(
˝
);

9974 
	`•rötf
(
Õªq
, "{\"id\": 0, \"method\": \"getblockcount\"}\n");

9978 
	`gë_gbt_cuæ
(
poﬁ
, 500);

9979 
	`cuæ_ósy_£t›t
(
poﬁ
->
gbt_cuæ
, 
CURLOPT_FORBID_REUSE
, 0);

9980 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
poﬁ
->
gbt_cuæ
,Öoﬁ->
Ωc_uæ
,Öoﬁ->
Ωc_u£Ωass
, 
Õªq
, 
åue
,

9981 
Ál£
, &
rﬁ…ime
, 
poﬁ
, false);

9982 
	`ªÀa£_gbt_cuæ
(
poﬁ
);

9984 i‡(
	`likñy
(
vÆ
))

9985 
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

9986 i‡(
	`likñy
(
ªs_vÆ
))

9988 
height
 = 
	`js⁄_öãgî_vÆue
(
ªs_vÆ
);

9989 c⁄° *
¥ev_hash
;

9991 
Áûuªs
 = 0;

9992 
	`js⁄_de¸ef
(
vÆ
);

9993 i‡(
height
 >
˝
->height)

9995 
	`≠∂og
(
LOG_WARNING
, "Block height changeÅo %d detected onÖool %d",

9996 
height
, 
˝
->
poﬁ_no
);

9997 
	`upd©e_gbt_sﬁo
(
poﬁ
);

10001 
	`•rötf
(
Õªq
, "{\"id\": 0, \"mëhod\": \"gëblockhash\", \"∑øms\": [%d]}\n", 
height
);

10002 
	`gë_gbt_cuæ
(
poﬁ
, 500);

10003 
	`cuæ_ósy_£t›t
(
poﬁ
->
gbt_cuæ
, 
CURLOPT_FORBID_REUSE
, 1);

10004 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
poﬁ
->
gbt_cuæ
,Öoﬁ->
Ωc_uæ
,Öoﬁ->
Ωc_u£Ωass
,

10005 
Õªq
, 
åue
, 
Ál£
, &
rﬁ…ime
, 
poﬁ
, false);

10006 
	`ªÀa£_gbt_cuæ
(
poﬁ
);

10008 i‡(
vÆ
)

10013 
¥ev_hash
 = 
	`js⁄_°rög_vÆue
(
	`js⁄_obje˘_gë
(
vÆ
, "result"));

10014 i‡(
	`u∆ikñy
(
¥ev_hash
 && 
	`°∫ˇ£cmp
’ªv_hash + 56, 
poﬁ
->prev_hash, 8)))

10016 
	`≠∂og
(
LOG_WARNING
, "Mining on orphan branch detected, switching!");

10017 
	`upd©e_gbt_sﬁo
(
poﬁ
);

10019 
	`js⁄_de¸ef
(
vÆ
);

10022 
	`cg¶ìp_ms
(500);

10026 i‡(
vÆ
)

10027 
	`js⁄_de¸ef
(
vÆ
);

10028 
	`cgtime
(&
íd
);

10029 i‡(
íd
.
tv_£c
 - 
°¨t
.tv_sec > 30)

10031 i‡(
Áûuªs
 == 1)

10032 
	`≠∂og
(
LOG_WARNING
, "l⁄gpﬁ»Áûed f‹ %s,ÑëryögÉvîy 30s", 
Õ_uæ
);

10033 
	`cg¶ìp_ms
(30000);

10038 
cuæ
 = 
	`cuæ_ósy_öô
();

10039 i‡(
	`u∆ikñy
(!
cuæ
))

10040 
	`quô
 (1, "Longpoll CURL initialisation failed");

10043 
have_l⁄gpﬁl
 = 
åue
;

10045 
	`waô_Õcuºít
(
˝
);

10047 
Õ_uæ
 = 
poﬁ
->
Ωc_uæ
;

10048 
	`≠∂og
(
LOG_WARNING
, "GBTÜ⁄gpﬁ»IDá˘iv©ed f‹ %s", 
Õ_uæ
);

10052 
js⁄_t
 *
vÆ
, *
sovÆ
;

10054 
	`waô_Õcuºít
(
˝
);

10056 
	`cgtime
(&
°¨t
);

10060 i‡(
poﬁ
->
has_gbt
)

10062 
	`cg_æock
(&
poﬁ
->
gbt_lock
);

10063 
	`¢¥ötf
(
Õªq
, (lpreq),

10066 "\"l⁄gpﬁlid\": \"%s\"}]}\n", 
poﬁ
->
l⁄gpﬁlid
);

10067 
	`cg_ru∆ock
(&
poﬁ
->
gbt_lock
);

10074 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_FRESH_CONNECT
, 1);

10075 
vÆ
 = 
	`js⁄_Ωc_ˇŒ
(
cuæ
, 
Õ_uæ
, 
poﬁ
->
Ωc_u£Ωass
,

10076 
Õªq
, 
Ál£
, 
åue
, &
rﬁ…ime
, 
poﬁ
, false);

10078 
	`cgtime
(&
ª∂y
);

10080 i‡(
	`likñy
(
vÆ
))

10082 
sovÆ
 = 
	`js⁄_obje˘_gë
(js⁄_obje˘_gë(
vÆ
, "result"), "submitold");

10083 i‡(
sovÆ
)

10084 
poﬁ
->
submô_ﬁd
 = 
	`js⁄_is_åue
(
sovÆ
);

10086 
poﬁ
->
submô_ﬁd
 = 
Ál£
;

10087 
	`c⁄vît_to_w‹k
(
vÆ
, 
rﬁ…ime
, 
poﬁ
, &
°¨t
, &
ª∂y
);

10088 
Áûuªs
 = 0;

10089 
	`js⁄_de¸ef
(
vÆ
);

10097 
	`cgtime
(&
íd
);

10098 i‡(
íd
.
tv_£c
 - 
°¨t
.tv_sec > 30)

10100 i‡(
Áûuªs
 == 1)

10101 
	`≠∂og
(
LOG_WARNING
, "l⁄gpﬁ»Áûed f‹ %s,ÑëryögÉvîy 30s", 
Õ_uæ
);

10102 
	`cg¶ìp_ms
(30000);

10105 i‡(
poﬁ
 !
˝
)

10107 
poﬁ
 = 
	`£À˘_l⁄gpﬁl_poﬁ
(
˝
);

10108 i‡(
poﬁ
->
has_°øtum
)

10110 
	`≠∂og
(
LOG_WARNING
, "Block change for %s detection via %s stratum",

10111 
˝
->
Ωc_uæ
, 
poﬁ
->rpc_url);

10114 i‡(
	`u∆ikñy
(!
poﬁ
))

10115 
ªåy_poﬁ
;

10118 i‡(
	`u∆ikñy
(
poﬁ
->
ªmoved
))

10122 
out
:

10123 
	`cuæ_ósy_˛ónup
(
cuæ
);

10125  
NULL
;

10126 
	}
}

10128 *
	$l⁄gpﬁl_thªad
(
__maybe_unu£d
 *
u£rd©a
)

10130 
	`±hªad_dëach
(
	`±hªad_£lf
());

10131  
NULL
;

10132 
	}
}

10136 
	$ªöô_devi˚
(
cgpu_öfo
 *
cgpu
)

10138 i‡(
cgpu
->
deví
 =
DEV_DISABLED
)

10143 #ifde‡
USE_USBUTILS


10145 i‡(
cgpu
->
usbdev
 && cgpu->usbdev->
h™dÀ
)

10146 
	`libusb_ª£t_devi˚
(
cgpu
->
usbdev
->
h™dÀ
);

10148 
cgpu
->
drv
->
	`ªöô_devi˚
(cgpu);

10149 
	}
}

10151 
timevÆ
 
	grŸ©e_tv
;

10155 
	$ª≠_cuæ
(
poﬁ
 *pool)

10157 
cuæ_ít
 *
ít
, *
ôî
;

10158 
timevÆ
 
now
;

10159 
ª≠ed
 = 0;

10161 
	`cgtime
(&
now
);

10163 
	`muãx_lock
(&
poﬁ
->
poﬁ_lock
);

10165 
	`li°_f‹_óch_íåy_ß„
(
ít
, 
ôî
, &
poﬁ
->
cuærög
, 
node
)

10167 i‡(
poﬁ
->
cuæs
 < 2)

10172 i‡(
now
.
tv_£c
 - 
ít
->
tv
.tv_sec > 300)

10174 
ª≠ed
++;

10175 
poﬁ
->
cuæs
--;

10176 
	`li°_dñ
(&
ít
->
node
);

10177 
	`cuæ_ósy_˛ónup
(
ít
->
cuæ
);

10178 
	`‰ì
(
ít
);

10181 
	`muãx_u∆ock
(&
poﬁ
->
poﬁ_lock
);

10183 i‡(
ª≠ed
)

10185 
	`≠∂og
(
LOG_DEBUG
, "Ró≥d %d cuæ%†‰omÖoﬁ %d", 
ª≠ed
,Ñó≥d > 1 ? "s" : "", 
poﬁ
->
poﬁ_no
);

10187 
	}
}

10193 
	$¥u√_°øtum_sh¨es
(
poﬁ
 *pool)

10195 
°øtum_sh¨e
 *
ssh¨e
, *
tmpsh¨e
;

10196 
time_t
 
cuºít_time
 = 
	`time
(
NULL
);

10197 
˛óªd
 = 0;

10199 
	`muãx_lock
(&
ssh¨e_lock
);

10201 
	`HASH_ITER
(
hh
, 
°øtum_sh¨es
, 
ssh¨e
, 
tmpsh¨e
)

10203 i‡(
ssh¨e
->
w‹k
->
poﬁ
 =poﬁ && 
cuºít_time
 > ssh¨e->
ssh¨e_time
 + 120)

10205 
	`HASH_DEL
(
°øtum_sh¨es
, 
ssh¨e
);

10206 
	`‰ì_w‹k
(
ssh¨e
->
w‹k
);

10207 
	`‰ì
(
ssh¨e
);

10208 
˛óªd
++;

10212 
	`muãx_u∆ock
(&
ssh¨e_lock
);

10214 i‡(
˛óªd
)

10216 
	`≠∂og
(
LOG_WARNING
, "Lo° %d sh¨e†duêtÿnÿ°øtum sh¨êª•⁄£ fromÖoﬁ %d", 
˛óªd
, 
poﬁ
->
poﬁ_no
);

10217 
poﬁ
->
°Æe_sh¨es
 +
˛óªd
;

10218 
tŸÆ_°Æe
 +
˛óªd
;

10220 
	}
}

10223 *
	$w©chpoﬁ_thªad
(
__maybe_unu£d
 *
u£rd©a
)

10225 
öãrvÆs
 = 0;

10226 
cgtimî_t
 
cgt
;

10228 
	`±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, 
NULL
);

10230 
	`RíameThªad
("Watchpool");

10232 
	`£t_low¥io
();

10233 
	`cgtimî_time
(&
cgt
);

10237 
timevÆ
 
now
;

10238 
i
;

10240 i‡(++
öãrvÆs
 > 120)

10241 
öãrvÆs
 = 0;

10242 
	`cgtime
(&
now
);

10244 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

10246 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

10248 i‡(!
›t_bíchm¨k
 && !
›t_bíchfûe
)

10250 
	`ª≠_cuæ
(
poﬁ
);

10251 
	`¥u√_°øtum_sh¨es
(
poﬁ
);

10254 i‡(
öãrvÆs
 > 119)

10257 
sh¨es
 = 
poﬁ
->
diff1
 -Öoﬁ->
œ°_sh¨es
;

10258 
poﬁ
->
œ°_sh¨es
 =Öoﬁ->
diff1
;

10259 
poﬁ
->
utûôy
 = (poﬁ->utûôy + 
sh¨es
 * 0.63) / 1.63;

10260 
poﬁ
->
sh¨es
 = (Ëpoﬁ->
utûôy
;

10263 i‡(
poﬁ
->
íabÀd
 =
POOL_DISABLED
)

10270 i‡(
	`u∆ikñy
(
poﬁ
->
ã°ög
))

10275 i‡(
	`poﬁ_a˘ive
(
poﬁ
, 
åue
))

10277 i‡(
	`poﬁ_t˛ór
(
poﬁ
, &poﬁ->
idÀ
))

10279 
	`poﬁ_ªsus
(
poﬁ
);

10284 
	`cgtime
(&
poﬁ
->
tv_idÀ
);

10291 !
poﬁ
->
idÀ
 &&

10292 
poﬁ_°øãgy
 =
POOL_FAILOVER
 &&

10293 
poﬁ
->
¥io
 < 
	`˝_¥io
() &&

10294 
now
.
tv_£c
 - 
poﬁ
->
tv_idÀ
.tv_£¯> 
›t_poﬁ_ÁŒback


10297 
	`≠∂og
(
LOG_WARNING
, "Poﬁ %d %†°abÀ f‹ >%d sec⁄ds", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
, 
›t_poﬁ_ÁŒback
);

10298 
	`swôch_poﬁs
(
NULL
);

10302 i‡(
	`cuºít_poﬁ
()->
idÀ
)

10304 
	`swôch_poﬁs
(
NULL
);

10307 i‡(
poﬁ_°øãgy
 =
POOL_ROTATE
 && 
now
.
tv_£c
 - 
rŸ©e_tv
.tv_£¯> 60 * 
›t_rŸ©e_≥riod
)

10309 
	`cgtime
(&
rŸ©e_tv
);

10310 
	`swôch_poﬁs
(
NULL
);

10313 
	`cg¶ìp_ms_r
(&
cgt
, 5000);

10314 
	`cgtimî_time
(&
cgt
);

10318  
NULL
;

10319 
	}
}

10324 
	#WATCHDOG_INTERVAL
 2

	)

10325 
	#WATCHDOG_SICK_TIME
 120

	)

10326 
	#WATCHDOG_DEAD_TIME
 600

	)

10327 
	#WATCHDOG_SICK_COUNT
 (
WATCHDOG_SICK_TIME
/
WATCHDOG_INTERVAL
)

	)

10328 
	#WATCHDOG_DEAD_COUNT
 (
WATCHDOG_DEAD_TIME
/
WATCHDOG_INTERVAL
)

	)

10330 *
	$w©chdog_thªad
(
__maybe_unu£d
 *
u£rd©a
)

10332 c⁄° 
öãrvÆ
 = 
WATCHDOG_INTERVAL
;

10333 
timevÆ
 
zîo_tv
;

10335 #ifde‡
USE_LIBSYSTEMD


10336 
uöt64_t
 
nŸify_u£c
;

10337 
timevÆ
 
nŸify_öãrvÆ
, 
nŸify_tv
;

10339 i‡(
	`sd_w©chdog_íabÀd
(
Ál£
, &
nŸify_u£c
))

10341 
nŸify_u£c
 =Çotify_usec / 2;

10342 
	`us_to_timevÆ
(&
nŸify_öãrvÆ
, 
nŸify_u£c
);

10343 
	`cgtime
(&
nŸify_tv
);

10344 
	`addtime
(&
nŸify_öãrvÆ
, &
nŸify_tv
);

10346 
	`≠∂og
(
LOG_DEBUG
, "WatchdogÇotify interval: %.3gs",

10347 
nŸify_u£c
 / 1000000.0);

10351 
	`±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, 
NULL
);

10353 
	`RíameThªad
("Watchdog");

10355 
	`£t_low¥io
();

10356 
	`mem£t
(&
zîo_tv
, 0, (
timevÆ
));

10357 
	`cgtime
(&
rŸ©e_tv
);

10361 
i
;

10362 
timevÆ
 
now
;

10364 
	`¶ìp
(
öãrvÆ
);

10366 
	`disˇrd_°Æe
();

10368 
	`hashmëî
(-1, (
uöt64_t
)0);

10370 #ifde‡
HAVE_CURSES


10371 i‡(
	`cur£s_a˘ive_locked
())

10373 
cgpu_öfo
 *
cgpu
;

10374 
cou¡
;

10376 
	`ch™ge_logwösize
();

10377 
	`cur£s_¥öt_°©us
();

10378 
cou¡
 = 0;

10379 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

10381 
cgpu
 = 
	`gë_devi˚s
(
i
);

10382 #i‚de‡
USE_USBUTILS


10383 i‡(
cgpu
)

10385 i‡(
cgpu
 && !cgpu->
usböfo
.
nodev
)

10387 
	`cur£s_¥öt_dev°©us
(
cgpu
, 
i
, 
cou¡
++);

10389 #ifde‡
USE_USBUTILS


10390 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

10392 
cgpu
 = 
	`gë_devi˚s
(
i
);

10393 i‡(
cgpu
 && cgpu->
usböfo
.
nodev
)

10394 
	`cur£s_¥öt_dev°©us
(
cgpu
, 
i
, 
cou¡
++);

10397 
	`touchwö
(
°©uswö
);

10398 
	`wª‰esh
(
°©uswö
);

10399 
	`touchwö
(
logwö
);

10400 
	`wª‰esh
(
logwö
);

10401 
	`u∆ock_cur£s
();

10405 
	`cgtime
(&
now
);

10407 #i‡
USE_LIBSYSTEMD


10408 i‡(
nŸify_u£c
 && !
	`time_m‹e
(&
nŸify_tv
, &
now
))

10410 
	`sd_nŸify
(
Ál£
, "WATCHDOG=1");

10411 
	`c›y_time
(&
nŸify_tv
, &
now
);

10412 
	`addtime
(&
nŸify_öãrvÆ
, &
nŸify_tv
);

10413 
	`≠∂og
(
LOG_DEBUG
, "Notified watchdog");

10417 i‡(!
sched_∑u£d
 && !
	`should_run
())

10419 
	`≠∂og
(
LOG_WARNING
, "PausögÉxecuti⁄á†≥∏°›Åimê%02d:%02d scheduÀd", 
sched°›
.
tm
.
tm_hour
, sched°›.tm.
tm_mö
);

10421 i‡(!
sched°¨t
.
íabÀ
)

10427 
	`≠∂og
(
LOG_WARNING
, "Wû»ª°¨àexecuti⁄á†scheduÀdáà%02d:%02d", 
sched°¨t
.
tm
.
tm_hour
, sched°¨t.tm.
tm_mö
);

10428 
sched_∑u£d
 = 
åue
;

10430 
	`rd_lock
(&
möög_thr_lock
);

10432 
i
 = 0; i < 
möög_thªads
; i++)

10434 
möög_thr
[
i
]->
∑u£
 = 
åue
;

10437 
	`rd_u∆ock
(&
möög_thr_lock
);

10439 i‡(
sched_∑u£d
 && 
	`should_run
())

10441 
	`≠∂og
(
LOG_WARNING
, "Re°¨tögÉxecuti⁄á†≥∏°¨àtimê%02d:%02d scheduÀd", 
sched°¨t
.
tm
.
tm_hour
, sched°¨t.tm.
tm_mö
);

10443 i‡(
sched°›
.
íabÀ
)

10445 
	`≠∂og
(
LOG_WARNING
, "Wû»∑u£Éxecuti⁄á†scheduÀdáà%02d:%02d", 
sched°›
.
tm
.
tm_hour
, sched°›.tm.
tm_mö
);

10448 
sched_∑u£d
 = 
Ál£
;

10450 
i
 = 0; i < 
möög_thªads
; i++)

10452 
thr_öfo
 *
thr
;

10454 
thr
 = 
	`gë_thªad
(
i
);

10457 i‡(
thr
->
cgpu
->
deví
 =
DEV_DISABLED
)

10462 
thr
->
∑u£
 = 
Ál£
;

10463 
	`≠∂og
(
LOG_DEBUG
, "Pushög semÖo°Åÿthªad %d", 
thr
->
id
);

10464 
	`cg£m_po°
(&
thr
->
£m
);

10468 
i
 = 0; i < 
tŸÆ_devi˚s
; ++i)

10470 
cgpu_öfo
 *
cgpu
 = 
	`gë_devi˚s
(
i
);

10471 
thr_öfo
 *
thr
 = 
cgpu
->thr[0];

10472 
dev_íabÀ
 *
díabÀ
;

10473 
dev_°r
[8];

10475 i‡(!
thr
)

10480 
cgpu
->
drv
->
	`gë_°©s
(cgpu);

10482 
díabÀ
 = &
cgpu
->
deví
;

10483 
	`¢¥ötf
(
dev_°r
, (dev_°r), "%†%d", 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
);

10486 i‡(
thr
->
gëw‹k
 || *
díabÀ
 =
DEV_DISABLED
)

10491 i‡(
cgpu
->
°©us
 !
LIFE_WELL
 && (
now
.
tv_£c
 - 
thr
->
œ°
.tv_£¯< 
WATCHDOG_SICK_TIME
))

10493 i‡(
cgpu
->
°©us
 !
LIFE_INIT
)

10494 
	`≠∂og
(
LOG_ERR
, "%s: Recovîed, de˛¨ög WELL!", 
dev_°r
);

10495 
cgpu
->
°©us
 = 
LIFE_WELL
;

10496 
cgpu
->
devi˚_œ°_wñl
 = 
	`time
(
NULL
);

10498 i‡(
cgpu
->
°©us
 =
LIFE_WELL
 && (
now
.
tv_£c
 - 
thr
->
œ°
.tv_£¯> 
WATCHDOG_SICK_TIME
))

10500 
cgpu
->
rﬁlög
 = 0;

10501 
cgpu
->
°©us
 = 
LIFE_SICK
;

10502 
	`≠∂og
(
LOG_ERR
, "%s: IdÀ f‹ m‹êth™ 60 sec⁄ds, de˛¨ög SICK!", 
dev_°r
);

10503 
	`cgtime
(&
thr
->
sick
);

10505 
	`dev_îr‹
(
cgpu
, 
REASON_DEV_SICK_IDLE_60
);

10506 i‡(
›t_ª°¨t
)

10508 
	`≠∂og
(
LOG_ERR
, "%s: Aâem±ögÅÿª°¨t", 
dev_°r
);

10509 
	`ªöô_devi˚
(
cgpu
);

10512 i‡(
cgpu
->
°©us
 =
LIFE_SICK
 && (
now
.
tv_£c
 - 
thr
->
œ°
.tv_£¯> 
WATCHDOG_DEAD_TIME
))

10514 
cgpu
->
°©us
 = 
LIFE_DEAD
;

10515 
	`≠∂og
(
LOG_ERR
, "%s: NŸÑe•⁄ded f‹ m‹êth™ 10 möuãs, de˛¨ög DEAD!", 
dev_°r
);

10516 
	`cgtime
(&
thr
->
sick
);

10518 
	`dev_îr‹
(
cgpu
, 
REASON_DEV_DEAD_IDLE_600
);

10520 i‡(
now
.
tv_£c
 - 
thr
->
sick
.tv_£¯> 60 && (
cgpu
->
°©us
 =
LIFE_SICK
 || cgpu->°©u†=
LIFE_DEAD
))

10523 
	`cgtime
(&
thr
->
sick
);

10525 i‡(
›t_ª°¨t
)

10527 
	`ªöô_devi˚
(
cgpu
);

10533  
NULL
;

10534 
	}
}

10536 
	$log_¥öt_°©us
(
cgpu_öfo
 *
cgpu
)

10538 
loglöe
[255];

10540 
	`gë_°©löe
(
loglöe
, ÷oglöe), 
cgpu
);

10541 
	`≠∂og
(
LOG_WARNING
, "%s", 
loglöe
);

10542 
	}
}

10544 
no›_gë_°©löe
(
__maybe_unu£d
 *
buf
, 
size_t
 __maybe_unu£d 
bufsiz
, 
cgpu_öfo
 __maybe_unu£d *
cgpu
);

10545 
bœnk_gë_°©löe_bef‹e
(*
buf
, 
size_t
 
bufsiz
, 
cgpu_öfo
 
__maybe_unu£d
 *
cgpu
);

10547 
	$¥öt_summ¨y
()

10549 
timevÆ
 
diff
;

10550 
hours
, 
mös
, 
£cs
, 
i
;

10551 
utûôy
, 
di•œyed_hashes
, 
w‹k_utû
;

10553 
	`timîsub
(&
tŸÆ_tv_íd
, &
tŸÆ_tv_°¨t
, &
diff
);

10554 
hours
 = 
diff
.
tv_£c
 / 3600;

10555 
mös
 = (
diff
.
tv_£c
 % 3600) / 60;

10556 
£cs
 = 
diff
.
tv_£c
 % 60;

10558 
utûôy
 = 
tŸÆ_ac˚±ed
 / 
tŸÆ_£cs
 * 60;

10559 
w‹k_utû
 = 
tŸÆ_diff1
 / 
tŸÆ_£cs
 * 60;

10561 
	`≠∂og
(
LOG_WARNING
, "\nSummary ofÑuntime statistics:\n");

10562 
	`≠∂og
(
LOG_WARNING
, "Sèπedáà%s", 
d©e°amp
);

10564 i‡(
tŸÆ_poﬁs
 == 1)

10566 
	`≠∂og
(
LOG_WARNING
, "Poﬁ: %s", 
poﬁs
[0]->
Ωc_uæ
);

10569 
	`≠∂og
(
LOG_WARNING
, "Ru¡ime: %d hr†: %d mö†: %d secs", 
hours
, 
mös
, 
£cs
);

10570 
di•œyed_hashes
 = 
tŸÆ_mhashes_d⁄e
 / 
tŸÆ_£cs
;

10572 
	`≠∂og
(
LOG_WARNING
, "Avîagêhashøã: %.1‡Mhash/s", 
di•œyed_hashes
);

10573 
	`≠∂og
(
LOG_WARNING
, "Sﬁved blocks: %d", 
found_blocks
);

10574 
	`≠∂og
(
LOG_WARNING
, "Be° sh¨êdifficu…y: %s", 
be°_sh¨e
);

10575 
	`≠∂og
(
LOG_WARNING
, "Sh¨êsubmissi⁄s: %"
PRId64
, 
tŸÆ_ac˚±ed
 + 
tŸÆ_ªje˘ed
);

10576 
	`≠∂og
(
LOG_WARNING
, "Ac˚±ed sh¨es: %"
PRId64
, 
tŸÆ_ac˚±ed
);

10577 
	`≠∂og
(
LOG_WARNING
, "Reje˘ed sh¨es: %"
PRId64
, 
tŸÆ_ªje˘ed
);

10578 
	`≠∂og
(
LOG_WARNING
, "Ac˚±ed difficu…y sh¨es: %1.f", 
tŸÆ_diff_ac˚±ed
);

10579 
	`≠∂og
(
LOG_WARNING
, "Reje˘ed difficu…y sh¨es: %1.f", 
tŸÆ_diff_ªje˘ed
);

10581 i‡(
tŸÆ_ac˚±ed
 || 
tŸÆ_ªje˘ed
)

10583 
	`≠∂og
(
LOG_WARNING
, "Reje˘Ñ©io: %.1f%%", ()(
tŸÆ_ªje˘ed
 * 100Ë/ ()(
tŸÆ_ac˚±ed
 +Åotal_rejected));

10586 
	`≠∂og
(
LOG_WARNING
, "H¨dw¨êîr‹s: %d", 
hw_îr‹s
);

10587 
	`≠∂og
(
LOG_WARNING
, "Utûôy (ac˚±ed sh¨e†/ mö): %.2f/mö", 
utûôy
);

10588 
	`≠∂og
(
LOG_WARNING
, "W‹k Utûôy (diff1 sh¨e†sﬁved / mö): %.2f/mö\n", 
w‹k_utû
);

10590 
	`≠∂og
(
LOG_WARNING
, "SèÀ submissi⁄†disˇrded duêtÿ√w blocks: %"
PRId64
, 
tŸÆ_°Æe
);

10591 
	`≠∂og
(
LOG_WARNING
, "U«bÀÅÿgë w‹k from sîvî ocˇsi⁄s: %d", 
tŸÆ_go
);

10592 
	`≠∂og
(
LOG_WARNING
, "W‹k iãm†gíî©edÜoˇŒy: %d", 
loˇl_w‹k
);

10593 
	`≠∂og
(
LOG_WARNING
, "Submôtög w‹kÑemŸñy dñay ocˇsi⁄s: %d", 
tŸÆ_ro
);

10594 
	`≠∂og
(
LOG_WARNING
, "New block†dëe˘ed o¿√tw‹k: %d\n", 
√w_blocks
);

10596 i‡(
tŸÆ_poﬁs
 > 1)

10598 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

10600 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

10602 
	`≠∂og
(
LOG_WARNING
, "Poﬁ: %s", 
poﬁ
->
Ωc_uæ
);

10604 i‡(
poﬁ
->
sﬁved
)

10606 
	`≠∂og
(
LOG_WARNING
, "SOLVED %d BLOCK%s!", 
poﬁ
->
sﬁved
,Öool->solved > 1 ? "S" : "");

10609 
	`≠∂og
(
LOG_WARNING
, " Sh¨êsubmissi⁄s: %"
PRId64
, 
poﬁ
->
ac˚±ed
 +Öoﬁ->
ªje˘ed
);

10610 
	`≠∂og
(
LOG_WARNING
, " Ac˚±ed sh¨es: %"
PRId64
, 
poﬁ
->
ac˚±ed
);

10611 
	`≠∂og
(
LOG_WARNING
, " Reje˘ed sh¨es: %"
PRId64
, 
poﬁ
->
ªje˘ed
);

10612 
	`≠∂og
(
LOG_WARNING
, " Ac˚±ed difficu…y sh¨es: %1.f", 
poﬁ
->
diff_ac˚±ed
);

10613 
	`≠∂og
(
LOG_WARNING
, " Reje˘ed difficu…y sh¨es: %1.f", 
poﬁ
->
diff_ªje˘ed
);

10615 i‡(
poﬁ
->
ac˚±ed
 ||Öoﬁ->
ªje˘ed
)

10617 
	`≠∂og
(
LOG_WARNING
, " Reje˘Ñ©io: %.1f%%", ()(
poﬁ
->
ªje˘ed
 * 100Ë/ ()’oﬁ->
ac˚±ed
 +Öool->rejected));

10620 
	`≠∂og
(
LOG_WARNING
, " Iãm†w‹ked on: %d", 
poﬁ
->
w‹ks
);

10621 
	`≠∂og
(
LOG_WARNING
, " SèÀ submissi⁄†disˇrded duêtÿ√w blocks: %d", 
poﬁ
->
°Æe_sh¨es
);

10622 
	`≠∂og
(
LOG_WARNING
, " U«bÀÅÿgë w‹k from sîvî ocˇsi⁄s: %d", 
poﬁ
->
gëÁû_ocˇsi⁄s
);

10623 
	`≠∂og
(
LOG_WARNING
, " Submôtög w‹kÑemŸñy dñay ocˇsi⁄s: %d\n", 
poﬁ
->
ªmŸeÁû_ocˇsi⁄s
);

10627 
	`≠∂og
(
LOG_WARNING
, "Summary ofÖer device statistics:\n");

10629 
i
 = 0; i < 
tŸÆ_devi˚s
; ++i)

10631 
cgpu_öfo
 *
cgpu
 = 
	`gë_devi˚s
(
i
);

10633 
cgpu
->
drv
->
gë_°©löe_bef‹e
 = ((*)(*, 
size_t
, 
cgpu_öfo
 *)Ë&
bœnk_gë_°©löe_bef‹e
;

10634 
cgpu
->
drv
->
gë_°©löe
 = ((*)(*, 
size_t
, 
cgpu_öfo
 *)Ë&
no›_gë_°©löe
;

10635 
	`log_¥öt_°©us
(
cgpu
);

10638 i‡(
›t_sh¨es
)

10640 
	`≠∂og
(
LOG_WARNING
, "Möed %.0‡ac˚±ed sh¨e†o‡%dÑeque°ed\n", 
tŸÆ_diff_ac˚±ed
, 
›t_sh¨es
);

10641 i‡(
›t_sh¨es
 > 
tŸÆ_diff_ac˚±ed
)

10642 
	`≠∂og
(
LOG_WARNING
, "WARNING - Möed o∆y %.0‡sh¨e†o‡%dÑeque°ed.", 
tŸÆ_diff_ac˚±ed
, 
›t_sh¨es
);

10645 
	`≠∂og
(
LOG_WARNING
, " ");

10647 
	`fÊush
(
°dîr
);

10648 
	`fÊush
(
°dout
);

10649 
	}
}

10651 
	$˛ón_up
(
boﬁ
 
ª°¨tög
)

10653 
sysöfo
 
sInfo
;

10654 i‡(
	`sysöfo
(&
sInfo
))

10656 
	`≠∂og
(
LOG_INFO
, "FailedÅo get sysinfo,Érrno:%u,Ñeason:%s\n",

10657 
î∫o
, 
	`°ªº‹
(errno));

10658 
tŸÆ_tv_íd_sys
=
	`time
(
NULL
);

10662 
tŸÆ_tv_íd_sys
=
sInfo
.
u±ime
;

10665 #ifde‡
USE_USBUTILS


10666 
usb_pﬁlög
 = 
Ál£
;

10667 
	`±hªad_joö
(
usb_pﬁl_thªad
, 
NULL
);

10668 
	`libusb_exô
(
NULL
);

10671 
	`cgtime
(&
tŸÆ_tv_íd
);

10673 #ifde‡
HAVE_CURSES


10674 
	`dißbÀ_cur£s
();

10676 i‡(!
ª°¨tög
 && !
›t_ªÆquõt
 && 
suc˚ssful_c⁄√˘
)

10678 
	`¥öt_summ¨y
();

10681 
	`cuæ_globÆ_˛ónup
();

10682 
	}
}

10686 *
	$kûœŒ_thªad
(
__maybe_unu£d
 *
¨g
)

10688 
	`±hªad_dëach
(
	`±hªad_£lf
());

10689 
	`±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, 
NULL
);

10690 
	`¶ìp
(7);

10691 
	`exô
(1);

10692  
NULL
;

10693 
	}
}

10695 
	$__quô
(
°©us
, 
boﬁ
 
˛ón
)

10697 
±hªad_t
 
kûœŒ_t
;

10699 #ifde‡
USE_LIBSYSTEMD


10700 
	`sd_nŸify
(
Ál£
, "STOPPING=1\n"

10704 i‡(
	`u∆ikñy
(
	`±hªad_¸óã
(&
kûœŒ_t
, 
NULL
, 
kûœŒ_thªad
, NULL)))

10706 
	`exô
(1);

10709 i‡(
˛ón
)

10711 
	`˛ón_up
(
Ál£
);

10714 #ifde‡
HAVE_CURSES


10716 
	`dißbÀ_cur£s
();

10719 #i‡
	`deföed
(
unix
Ë|| deföed(
__APPLE__
)

10720 i‡(
f‹kpid
 > 0)

10722 
	`kûl
(
f‹kpid
, 
SIGTERM
);

10723 
f‹kpid
 = 0;

10726 
	`±hªad_ˇn˚l
(
kûœŒ_t
);

10728 
	`exô
(
°©us
);

10729 
	}
}

10731 
	$_quô
(
°©us
)

10733 
	`__quô
(
°©us
, 
åue
);

10734 
	}
}

10736 #ifde‡
HAVE_CURSES


10737 *
	$cur£s_öput
(c⁄° *
quîy
)

10739 *
öput
;

10741 
	`echo
();

10742 
öput
 = 
	`cgmÆloc
(255);

10743 
	`Àaveok
(
logwö
, 
Ál£
);

10744 
	`wlog¥öt
("%s:\n", 
quîy
);

10745 
	`wgën°r
(
logwö
, 
öput
, 255);

10746 i‡(!
	`°æí
(
öput
))

10747 
	`°r˝y
(
öput
, "-1");

10748 
	`Àaveok
(
logwö
, 
åue
);

10749 
	`n€cho
();

10750  
öput
;

10751 
	}
}

10754 
boﬁ
 
	gpoﬁs_a˘ive
 = 
Ál£
;

10756 *
	$ã°_poﬁ_thªad
(*
¨g
)

10758 
poﬁ
 *poﬁ = (poﬁ *)
¨g
;

10760 i‡(!
poﬁ
->
blockög
)

10762 
	`±hªad_dëach
(
	`±hªad_£lf
());

10765 
ªåy
:

10766 i‡(
poﬁ
->
ªmoved
)

10768 
out
;

10771 i‡(
	`poﬁ_a˘ive
(
poﬁ
, 
Ál£
))

10773 
	`poﬁ_t˛ór
(
poﬁ
, &poﬁ->
idÀ
);

10774 
boﬁ
 
fú°_poﬁ
 = 
Ál£
;

10776 
	`cg_wlock
(&
c⁄åﬁ_lock
);

10778 i‡(!
poﬁs_a˘ive
)

10780 
cuºíçoﬁ
 = 
poﬁ
;

10782 i‡(
poﬁ
->
poﬁ_no
 != 0)

10784 
fú°_poﬁ
 = 
åue
;

10787 
poﬁs_a˘ive
 = 
åue
;

10790 
	`cg_wu∆ock
(&
c⁄åﬁ_lock
);

10792 i‡(
	`u∆ikñy
(
fú°_poﬁ
))

10794 
	`≠∂og
(
LOG_NOTICE
, "SwôchögÅÿpoﬁ %d %†- fú°álivêpoﬁ", 
poﬁ
->
poﬁ_no
,Öoﬁ->
Ωc_uæ
);

10797 
	`poﬁ_ªsus
(
poﬁ
);

10798 
	`swôch_poﬁs
(
NULL
);

10802 
	`poﬁ_dõd
(
poﬁ
);

10804 i‡(!
poﬁ
->
blockög
)

10806 
	`¶ìp
(30);

10807 
ªåy
;

10811 
poﬁ
->
ã°ög
 = 
Ál£
;

10812 
out
:

10813  
NULL
;

10814 
	}
}

10820 
boﬁ
 
	$add_poﬁ_dëaûs
(
poﬁ
 *poﬁ, 
boﬁ
 
live
, *
uæ
, *
u£r
, *
∑ss
)

10822 
size_t
 
siz
;

10824 
uæ
 = 
	`gë_¥oxy
(uæ, 
poﬁ
);

10825 
poﬁ
->
Ωc_uæ
 = 
uæ
;

10826 
poﬁ
->
Ωc_u£r
 = 
u£r
;

10827 
poﬁ
->
Ωc_∑ss
 = 
∑ss
;

10828 
siz
 = 
	`°æí
(
poﬁ
->
Ωc_u£r
Ë+ såÀn’oﬁ->
Ωc_∑ss
) + 2;

10829 
poﬁ
->
Ωc_u£Ωass
 = 
	`cgmÆloc
(
siz
);

10831 
	`¢¥ötf
(
poﬁ
->
Ωc_u£Ωass
, 
siz
, "%s:%s",Öoﬁ->
Ωc_u£r
,Öoﬁ->
Ωc_∑ss
);

10833 
poﬁ
->
ã°ög
 = 
åue
;

10834 
poﬁ
->
idÀ
 = 
åue
;

10835 
poﬁ
->
blockög
 = !
live
;

10837 
	`íabÀ_poﬁ
(
poﬁ
);

10839 
	`±hªad_¸óã
(&
poﬁ
->
ã°_thªad
, 
NULL
, 
ã°_poﬁ_thªad
, (*)pool);

10841 i‡(!
live
)

10843 
	`±hªad_joö
(
poﬁ
->
ã°_thªad
, 
NULL
);

10844  
poﬁs_a˘ive
;

10847  
åue
;

10848 
	}
}

10850 #ifde‡
HAVE_CURSES


10851 
boﬁ
 
	$öput_poﬁ
(
boﬁ
 
live
)

10853 *
uæ
, *
u£r
, *
∑ss
;

10854 
poﬁ
 *pool;

10855 
boﬁ
 
ªt
 = 
Ál£
;

10857 
	`immedok
(
logwö
, 
åue
);

10858 
	`wlog¥öt
("Input server details.\n");

10860 
ªåy
:

10861 
uæ
 = 
NULL
;

10862 
u£r
 = 
NULL
;

10863 
∑ss
 = 
NULL
;

10864 
uæ
 = 
	`cur£s_öput
("URL");

10865 i‡(!
	`°rcmp
(
uæ
, "-1"))

10867 
	`wlog¥öt
("Invalid input\n");

10868 
out
;

10871 
u£r
 = 
	`cur£s_öput
("Username");

10872 i‡(!
	`°rcmp
(
u£r
, "-1"))

10874 
	`wlog¥öt
("Invalid input\n");

10875 
out
;

10878 
∑ss
 = 
	`cur£s_öput
("Password [enter forÇone]");

10879 i‡(!
	`°rcmp
(
∑ss
, "-1"))

10881 
	`‰ì
(
∑ss
);

10882 
∑ss
 = 
	`°rdup
("");

10885 
poﬁ
 = 
	`add_poﬁ
();

10886 
uæ
 = 
	`£tup_uæ
(
poﬁ
, url);

10887 
ªt
 = 
	`add_poﬁ_dëaûs
(
poﬁ
, 
live
, 
uæ
, 
u£r
, 
∑ss
);

10888 i‡(!
ªt
)

10890 
	`ªmove_poﬁ
(
poﬁ
);

10891 
	`wlog¥öt
("URL %†Áûedálivêã°ög,Ñeöpuàdëaûs\n", 
uæ
);

10892 
	`‰ì
(
uæ
);

10893 
	`‰ì
(
u£r
);

10894 
	`‰ì
(
∑ss
);

10895 
ªåy
;

10897 
out
:

10898 
	`immedok
(
logwö
, 
Ál£
);

10900 i‡(!
ªt
)

10902 
	`‰ì
(
uæ
);

10903 
	`‰ì
(
u£r
);

10904 
	`‰ì
(
∑ss
);

10906  
ªt
;

10907 
	}
}

10910 #i‡
deföed
(
unix
Ë|| deföed(
__APPLE__
)

10911 
	$f‹k_m⁄ô‹
()

10914 
pfd
[2];

10915 
r
 = 
	`pùe
(
pfd
);

10917 i‡(
r
 < 0)

10919 
	`≥º‹
("pipe - failedÅo createÖipe for --monitor");

10920 
	`exô
(1);

10924 
	`fÊush
(
°dîr
);

10925 
r
 = 
	`dup2
(
pfd
[1], 2);

10926 i‡(
r
 < 0)

10928 
	`≥º‹
("dup2 - failedÅoálias stderrÅo writeÉnd ofÖipe for --monitor");

10929 
	`exô
(1);

10931 
r
 = 
	`˛o£
(
pfd
[1]);

10932 i‡(
r
 < 0)

10934 
	`≥º‹
("close - failedÅo close writeÉnd ofÖipe for --monitor");

10935 
	`exô
(1);

10939 
sigh™dÀr_t
 
§0
 = 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

10940 
sigh™dÀr_t
 
§1
 = 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

10941 i‡(
SIG_ERR
 =
§0
 || SIG_ERR =
§1
)

10943 
	`≥º‹
("signal - failedÅoÉdit signal mask for --monitor");

10944 
	`exô
(1);

10948 
f‹kpid
 = 
	`f‹k
();

10949 i‡(
f‹kpid
 < 0)

10951 
	`≥º‹
("fork - failedÅo fork childÖrocess for --monitor");

10952 
	`exô
(1);

10956 i‡(0 =
f‹kpid
)

10959 
r
 = 
	`dup2
(
pfd
[0], 0);

10960 i‡(
r
 < 0)

10962 
	`≥º‹
("dup2 - in child, failedÅoáliasÑeadÉnd ofÖipeÅo stdin for --monitor");

10963 
	`exô
(1);

10965 
	`˛o£
(
pfd
[0]);

10966 i‡(
r
 < 0)

10968 
	`≥º‹
("close - in child, failedÅo closeÑeadÉnd ofÖipe for --monitor");

10969 
	`exô
(1);

10973 
	`exe˛
("/bö/bash", "/bö/bash", "-c", 
›t_°dîr_cmd
, (*)
NULL
);

10974 
	`≥º‹
("execl - in child failedÅoÉxec user specified command for --monitor");

10975 
	`exô
(1);

10979 
r
 = 
	`˛o£
(
pfd
[0]);

10980 i‡(
r
 < 0)

10982 
	`≥º‹
("close - failedÅo closeÑeadÉnd ofÖipe for --monitor");

10983 
	`exô
(1);

10985 
	}
}

10988 #ifde‡
HAVE_CURSES


10989 
	$íabÀ_cur£s_wödows
()

10991 
x
,
y
;

10993 
	`gëmaxyx
(
maöwö
, 
y
, 
x
);

10994 
°©uswö
 = 
	`√wwö
(
log°¨t
, 
x
, 0, 0);

10995 
	`Àaveok
(
°©uswö
, 
åue
);

10996 
logwö
 = 
	`√wwö
(
y
 - 
logcurs‹
, 0,Üogcursor, 0);

10997 
	`idlok
(
logwö
, 
åue
);

10998 
	`s¸ﬁlok
(
logwö
, 
åue
);

10999 
	`Àaveok
(
logwö
, 
åue
);

11000 
	`cbªak
();

11001 
	`n€cho
();

11002 
	}
}

11003 
	$íabÀ_cur£s
()

11005 
	`lock_cur£s
();

11006 i‡(
cur£s_a˘ive
)

11008 
	`u∆ock_cur£s
();

11012 
maöwö
 = 
	`öôs¸
();

11013 
	`íabÀ_cur£s_wödows
();

11014 
cur£s_a˘ive
 = 
åue
;

11015 
°©usy
 = 
log°¨t
;

11016 
	`u∆ock_cur£s
();

11017 
	}
}

11020 
	gcgmöî_id_cou¡
 = 0;

11024 
	$no›_ªöô_devi˚
(
cgpu_öfo
 
__maybe_unu£d
 *
cgpu
)

11026 
	}
}

11029 
	$bœnk_gë_°©löe_bef‹e
(
__maybe_unu£d
 *
buf
,
size_t
 __maybe_unu£d 
bufsiz
, 
cgpu_öfo
 __maybe_unu£d *
cgpu
)

11031 
	}
}

11034 
	$no›_gë_°©löe
(
__maybe_unu£d
 *
buf
, 
size_t
 __maybe_unu£d 
bufsiz
, 
cgpu_öfo
 __maybe_unu£d *
cgpu
)

11036 
	}
}

11039 
boﬁ
 
	$no›_gë_°©s
(
cgpu_öfo
 
__maybe_unu£d
 *
cgpu
)

11041  
åue
;

11042 
	}
}

11045 
boﬁ
 
	$no›_thªad_¥ï¨e
(
thr_öfo
 
__maybe_unu£d
 *
thr
)

11047  
åue
;

11048 
	}
}

11050 
uöt64_t
 
	$no›_ˇn_limô_w‹k
(
thr_öfo
 
__maybe_unu£d
 *
thr
)

11052  (
uöt64_t
)0xffffffff;

11053 
	}
}

11055 
boﬁ
 
	$no›_thªad_öô
(
thr_öfo
 
__maybe_unu£d
 *
thr
)

11057  
åue
;

11058 
	}
}

11061 
boﬁ
 
	$no›_¥ï¨e_w‹k
(
thr_öfo
 
__maybe_unu£d
 *
thr
, 
w‹k
 __maybe_unused *work)

11063  
åue
;

11064 
	}
}

11067 
	$no›_hw_îr‹
(
thr_öfo
 
__maybe_unu£d
 *
thr
)

11069 
	}
}

11072 
	$no›_thªad_shutdown
(
thr_öfo
 
__maybe_unu£d
 *
thr
)

11074 
	}
}

11077 
	$no›_thªad_íabÀ
(
thr_öfo
 
__maybe_unu£d
 *
thr
)

11079 
	}
}

11082 
	$no›_dëe˘
(
boﬁ
 
__maybe_unu£d
 
hŸ∂ug
)

11084 
	}
}

11087 
≠i_d©a
 *
	$no›_gë_≠i_°©s
(
cgpu_öfo
 
__maybe_unu£d
 *
cgpu
)

11089  
NULL
;

11090 
	}
}

11093 
	$no›_hash_w‹k
(
thr_öfo
 
__maybe_unu£d
 *
thr
)

11095 
	}
}

11098 
	$gíîic_zîo_°©s
(
cgpu_öfo
 *
cgpu
)

11100 
cgpu
->
diff_ac˚±ed
 = cgpu->
diff_ªje˘ed
 = cgpu->
hw_îr‹s
 = 0;

11101 
	}
}

11104 
	#no›_Êush_w‹k
 
no›_ªöô_devi˚


	)

11105 
	#no›_upd©e_w‹k
 
no›_ªöô_devi˚


	)

11106 
	#no›_queue_fuŒ
 
no›_gë_°©s


	)

11107 
	#no›_zîo_°©s
 
no›_ªöô_devi˚


	)

11108 
	#no›_idítify_devi˚
 
no›_ªöô_devi˚


	)

11111 
	$fûl_devi˚_drv
(
devi˚_drv
 *
drv
)

11113 i‡(!
drv
->
drv_dëe˘
)

11115 
drv
->
drv_dëe˘
 = ((*)(
boﬁ
)Ë&
no›_dëe˘
;

11118 i‡(!
drv
->
ªöô_devi˚
)

11120 
drv
->
ªöô_devi˚
 = &
no›_ªöô_devi˚
;

11123 i‡(!
drv
->
gë_°©löe_bef‹e
)

11125 
drv
->
gë_°©löe_bef‹e
 = ((*)(*, 
size_t
, 
cgpu_öfo
 *)Ë&
bœnk_gë_°©löe_bef‹e
;

11128 i‡(!
drv
->
gë_°©löe
)

11130 
drv
->
gë_°©löe
 = ((*)(*, 
size_t
, 
cgpu_öfo
 *)Ë&
no›_gë_°©löe
;

11133 i‡(!
drv
->
gë_°©s
)

11135 
drv
->
gë_°©s
 = (
	`boﬁ
 (*)(
cgpu_öfo
 *)Ë&
no›_gë_°©s
;

11138 i‡(!
drv
->
thªad_¥ï¨e
)

11140 
drv
->
thªad_¥ï¨e
 = (
	`boﬁ
 (*)(
thr_öfo
 *)Ë&
no›_thªad_¥ï¨e
;

11143 i‡(!
drv
->
ˇn_limô_w‹k
)

11148 i‡(!
drv
->
thªad_öô
)

11150 
drv
->
thªad_öô
 = (
	`boﬁ
 (*)(
thr_öfo
 *)Ë&
no›_thªad_öô
;

11153 i‡(!
drv
->
¥ï¨e_w‹k
)

11155 
drv
->
¥ï¨e_w‹k
 = (
	`boﬁ
 (*)(
thr_öfo
 *, 
w‹k
 *)Ë&
no›_¥ï¨e_w‹k
;

11158 i‡(!
drv
->
hw_îr‹
)

11160 
drv
->
hw_îr‹
 = &
no›_hw_îr‹
;

11163 i‡(!
drv
->
thªad_shutdown
)

11165 
drv
->
thªad_shutdown
 = &
no›_thªad_shutdown
;

11168 i‡(!
drv
->
thªad_íabÀ
)

11170 
drv
->
thªad_íabÀ
 = &
no›_thªad_íabÀ
;

11173 i‡(!
drv
->
hash_w‹k
)

11175 
drv
->
hash_w‹k
 = &
hash_sﬁe_w‹k
;

11178 i‡(!
drv
->
Êush_w‹k
)

11180 
drv
->
Êush_w‹k
 = &
no›_Êush_w‹k
;

11183 i‡(!
drv
->
upd©e_w‹k
)

11185 
drv
->
upd©e_w‹k
 = &
no›_upd©e_w‹k
;

11188 i‡(!
drv
->
queue_fuŒ
)

11190 
drv
->
queue_fuŒ
 = (
	`boﬁ
 (*)(
cgpu_öfo
 *)Ë&
no›_queue_fuŒ
;

11193 i‡(!
drv
->
zîo_°©s
)

11195 
drv
->
zîo_°©s
 = &
gíîic_zîo_°©s
;

11200 i‡(!
drv
->
max_diff
)

11202 
drv
->
max_diff
 = 1;

11204 
	}
}

11206 
	$nuŒ_devi˚_drv
(
devi˚_drv
 *
drv
)

11208 
drv
->
drv_dëe˘
 = ((*)(
boﬁ
)Ë&
no›_dëe˘
;

11209 
drv
->
ªöô_devi˚
 = &
no›_ªöô_devi˚
;

11210 
drv
->
gë_°©löe_bef‹e
 = ((*)(*, 
size_t
, 
cgpu_öfo
 *)Ë&
bœnk_gë_°©löe_bef‹e
;

11211 
drv
->
gë_°©löe
 = ((*)(*, 
size_t
, 
cgpu_öfo
 *)Ë&
no›_gë_°©löe
;

11212 
drv
->
gë_≠i_°©s
 = &
no›_gë_≠i_°©s
;

11213 
drv
->
gë_°©s
 = (
	`boﬁ
 (*)(
cgpu_öfo
 *)Ë&
no›_gë_°©s
;

11214 
drv
->
idítify_devi˚
 = &
no›_idítify_devi˚
;

11215 
drv
->
£t_devi˚
 = 
NULL
;

11216 
drv
->
thªad_¥ï¨e
 = (
	`boﬁ
 (*)(
thr_öfo
 *)Ë&
no›_thªad_¥ï¨e
;

11217 
drv
->
ˇn_limô_w‹k
 = (
	`uöt32_t
 (*)(
thr_öfo
 *)Ë&
no›_ˇn_limô_w‹k
;

11218 
drv
->
thªad_öô
 = (
	`boﬁ
 (*)(
thr_öfo
 *)Ë&
no›_thªad_öô
;

11219 
drv
->
¥ï¨e_w‹k
 = (
	`boﬁ
 (*)(
thr_öfo
 *, 
w‹k
 *)Ë&
no›_¥ï¨e_w‹k
;

11221 
drv
->
hash_w‹k
 = &
no›_hash_w‹k
;

11222 
drv
->
hw_îr‹
 = &
no›_hw_îr‹
;

11223 
drv
->
thªad_shutdown
 = &
no›_thªad_shutdown
;

11224 
drv
->
thªad_íabÀ
 = &
no›_thªad_íabÀ
;

11225 
drv
->
zîo_°©s
 = &
gíîic_zîo_°©s
;

11226 
drv
->
hash_w‹k
 = &
no›_hash_w‹k
;

11227 
drv
->
queue_fuŒ
 = (
	`boﬁ
 (*)(
cgpu_öfo
 *)Ë&
no›_queue_fuŒ
;

11228 
drv
->
Êush_w‹k
 = &
no›_Êush_w‹k
;

11229 
drv
->
upd©e_w‹k
 = &
no›_upd©e_w‹k
;

11230 
drv
->
max_diff
 = 1;

11231 
drv
->
mö_diff
 = 1;

11233 
	}
}

11235 
	$íabÀ_devi˚
(
cgpu_öfo
 *
cgpu
)

11237 
cgpu
->
deví
 = 
DEV_ENABLED
;

11239 
	`wr_lock
(&
devi˚s_lock
);

11240 
devi˚s
[
cgpu
->
cgmöî_id
 = 
cgmöî_id_cou¡
++] = cgpu;

11241 
	`wr_u∆ock
(&
devi˚s_lock
);

11243 i‡(
hŸ∂ug_mode
)

11245 
√w_thªads
 +
cgpu
->
thªads
;

11249 
möög_thªads
 +
cgpu
->
thªads
;

11252 
	`rwlock_öô
(&
cgpu
->
qlock
);

11253 
cgpu
->
queued_w‹k
 = 
NULL
;

11254 
	}
}

11257 
	s_cgpu_devid_cou¡î


11259 
	m«me
[4];

11260 
	mœ°id
;

11261 
UT_hash_h™dÀ
 
	mhh
;

11265 
	$adju°_mo°devs
()

11267 i‡(
tŸÆ_devi˚s
 - 
zombõ_devs
 > 
mo°_devi˚s
)

11269 
mo°_devi˚s
 = 
tŸÆ_devi˚s
 - 
zombõ_devs
;

11271 
	}
}

11274 
boﬁ
 
	$add_cgpu
(
cgpu_öfo
 *
cgpu
)

11276 
_cgpu_devid_cou¡î
 *
devids
 = 
NULL
;

11277 
_cgpu_devid_cou¡î
 *
d
;

11279 
	`HASH_FIND_STR
(
devids
, 
cgpu
->
drv
->
«me
, 
d
);

11280 i‡(
d
)

11282 
cgpu
->
devi˚_id
 = ++
d
->
œ°id
;

11286 
d
 = 
	`cgmÆloc
((*d));

11287 
	`cg_mem˝y
(
d
->
«me
, 
cgpu
->
drv
->name, (d->name));

11288 
cgpu
->
devi˚_id
 = 
d
->
œ°id
 = 0;

11289 
	`HASH_ADD_STR
(
devids
, 
«me
, 
d
);

11292 
	`wr_lock
(&
devi˚s_lock
);

11293 
devi˚s
 = 
	`cgªÆloc
(devi˚s, (
cgpu_öfo
 *Ë* (
tŸÆ_devi˚s
 + 
√w_devi˚s
 + 2));

11294 
	`wr_u∆ock
(&
devi˚s_lock
);

11296 
	`muãx_lock
(&
°©s_lock
);

11297 
cgpu
->
œ°_devi˚_vÆid_w‹k
 = 
	`time
(
NULL
);

11298 
	`muãx_u∆ock
(&
°©s_lock
);

11300 i‡(
hŸ∂ug_mode
)

11302 
devi˚s
[
tŸÆ_devi˚s
 + 
√w_devi˚s
++] = 
cgpu
;

11306 
devi˚s
[
tŸÆ_devi˚s
++] = 
cgpu
;

11309 
	`adju°_mo°devs
();

11310 #ifde‡
USE_USBUTILS


11311 i‡(
cgpu
->
usbdev
 && !cgpu->
unique_id
 && cgpu->usbdev->
£rül_°rög
 &&

11312 
	`°æí
(
cgpu
->
usbdev
->
£rül_°rög
) > 4)

11313 
cgpu
->
unique_id
 = 
	`°r_ãxt
(cgpu->
usbdev
->
£rül_°rög
);

11315  
åue
;

11316 
	}
}

11318 
devi˚_drv
 *
	$c›y_drv
(
devi˚_drv
 *
drv
)

11320 
devi˚_drv
 *
c›y
;

11322 
c›y
 = 
	`cgmÆloc
((*copy));

11323 
	`cg_mem˝y
(
c›y
, 
drv
, (*copy));

11324 
c›y
->c›y = 
åue
;

11325  
c›y
;

11326 
	}
}

11328 #ifde‡
USE_USBUTILS


11329 
	$hŸ∂ug_¥o˚ss
()

11331 
thr_öfo
 *
thr
;

11332 
i
, 
j
;

11334 
i
 = 0; i < 
√w_devi˚s
; i++)

11336 
cgpu_öfo
 *
cgpu
;

11337 
dev_no
 = 
tŸÆ_devi˚s
 + 
i
;

11339 
cgpu
 = 
devi˚s
[
dev_no
];

11340 
	`íabÀ_devi˚
(
cgpu
);

11341 
cgpu
->
cgmöî_°©s
.
gëw‹k_waô_mö
.
tv_£c
 = 
MIN_SEC_UNSET
;

11342 
cgpu
->
rﬁlög
 = cgpu->
tŸÆ_mhashes
 = 0;

11345 
	`wr_lock
(&
möög_thr_lock
);

11346 
möög_thr
 = 
	`cgªÆloc
(möög_thr, (
thr
Ë* (
möög_thªads
 + 
√w_thªads
 + 1));

11347 
i
 = 0; i < 
√w_thªads
; i++)

11348 
möög_thr
[
möög_thªads
 + 
i
] = 
	`cgˇŒoc
(1, (*
thr
));

11351 
i
 = 0; i < 
√w_devi˚s
; ++i)

11353 
cgpu_öfo
 *
cgpu
 = 
devi˚s
[
tŸÆ_devi˚s
];

11354 
cgpu
->
thr
 = 
	`cgmÆloc
((*cgpu->thrË* (cgpu->
thªads
+1));

11355 
cgpu
->
thr
[cgpu->
thªads
] = 
NULL
;

11356 
cgpu
->
°©us
 = 
LIFE_INIT
;

11357 
	`cgtime
(&(
cgpu
->
dev_°¨t_tv
));

11359 
j
 = 0; j < 
cgpu
->
thªads
; ++j)

11361 
thr
 = 
	`__gë_thªad
(
möög_thªads
);

11362 
thr
->
id
 = 
möög_thªads
;

11363 
thr
->
cgpu
 = cgpu;

11364 
thr
->
devi˚_thªad
 = 
j
;

11366 i‡(!
cgpu
->
drv
->
	`thªad_¥ï¨e
(
thr
))

11368 
	`nuŒ_devi˚_drv
(
cgpu
->
drv
);

11369 
cgpu
->
deví
 = 
DEV_DISABLED
;

11373 i‡(
	`u∆ikñy
(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
möî_thªad
,Åhr)))

11374 
	`quô
(1, "hŸ∂ugÅhªad %d cª©êÁûed", 
thr
->
id
);

11376 
cgpu
->
thr
[
j
] =Åhr;

11380 i‡(
cgpu
->
deví
 !
DEV_DISABLED
)

11382 
	`≠∂og
(
LOG_DEBUG
, "Pushög semÖo°Åÿthªad %d", 
thr
->
id
);

11383 
	`cg£m_po°
(&
thr
->
£m
);

11386 
möög_thªads
++;

11388 
tŸÆ_devi˚s
++;

11389 
	`≠∂og
(
LOG_WARNING
, "HŸ∂ug: %†added %†%i", 
cgpu
->
drv
->
d«me
, cgpu->drv->
«me
, cgpu->
devi˚_id
);

11391 
	`wr_u∆ock
(&
möög_thr_lock
);

11393 
	`adju°_mo°devs
();

11394 #ifde‡
HAVE_CURSES


11395 
	`swôch_logsize
(
åue
);

11397 
	}
}

11399 
	#DRIVER_DRV_DETECT_HOTPLUG
(
X
ËX##
_drv
.
	`drv_dëe˘
(
åue
);

	)

11401 *
	$hŸ∂ug_thªad
(
__maybe_unu£d
 *
u£rd©a
)

11403 
	`±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, 
NULL
);

11405 
	`RíameThªad
("Hotplug");

11407 
hŸ∂ug_mode
 = 
åue
;

11409 
	`cg¶ìp_ms
(5000);

11415 i‡(
hŸ∂ug_time
 == 0)

11416 
	`cg¶ìp_ms
(5000);

11419 
√w_devi˚s
 = 0;

11420 
√w_thªads
 = 0;

11424 
	`DRIVER_PARSE_COMMANDS
(
DRIVER_DRV_DETECT_HOTPLUG
)

11426 i‡(
√w_devi˚s
)

11427 
	`hŸ∂ug_¥o˚ss
();

11430 
	`cg¶ìp_ms
(
hŸ∂ug_time
 * 1000);

11434  
NULL
;

11435 
	}
}

11438 
	$¥obe_poﬁs
()

11440 
i
;

11442 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

11444 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

11446 
poﬁ
->
ã°ög
 = 
åue
;

11447 
	`±hªad_¸óã
(&
poﬁ
->
ã°_thªad
, 
NULL
, 
ã°_poﬁ_thªad
, (*)pool);

11449 
	}
}

11451 
	#DRIVER_FILL_DEVICE_DRV
(
X
Ë
	`fûl_devi˚_drv
(&X##
_drv
);

	)

11452 
	#DRIVER_DRV_DETECT_ALL
(
X
ËX##
_drv
.
	`drv_dëe˘
(
Ál£
);

	)

11454 #ifde‡
USE_USBUTILS


11455 *
	$libusb_pﬁl_thªad
(
__maybe_unu£d
 *
¨g
)

11457 
timevÆ
 
tv_íd
 = {0, 100000};

11459 
	`RíameThªad
("USBPoll");

11461 
	`likñy
(
usb_pﬁlög
))

11463 
	`libusb_h™dÀ_evíts_timeout_com∂ëed
(
NULL
, &
tv_íd
, NULL);

11467 
	`ˇn˚l_usb_å™s„rs
();

11471 
tv_íd
.
tv_£c
 = 0;

11472 
	`async_usb_å™s„rs
())

11474 
	`libusb_h™dÀ_evíts_timeout_com∂ëed
(
NULL
, &
tv_íd
, NULL);

11477  
NULL
;

11478 
	}
}

11480 
	$öôüli£_usb
()

11482 
îr
 = 
	`libusb_öô
(
NULL
);

11484 i‡(
îr
)

11486 
	`Ârötf
(
°dîr
, "libusb_öô(ËÁûedÉº %d", 
îr
);

11487 
	`fÊush
(
°dîr
);

11488 
	`quô
(1, "libusb_init() failed");

11490 
	`öôüli£_usblocks
();

11491 
usb_pﬁlög
 = 
åue
;

11492 
	`±hªad_¸óã
(&
usb_pﬁl_thªad
, 
NULL
, 
libusb_pﬁl_thªad
, NULL);

11493 
	}
}

11496 
	#öôüli£_usb
(Ë{}

	)

11500 
	$maö
(
¨gc
, *
¨gv
[])

11502 
siga˘i⁄
 
h™dÀr
;

11504 
w‹k
 *w‹k = 
NULL
;

11505 
boﬁ
 
poﬁ_msg
 = 
Ál£
;

11507 
thr_öfo
 *
thr
;

11508 
block
 *block;

11509 
i
, 
j
, 
¶ït
 = 0;

11510 
k
;

11511 *
s
;

11512 
sysöfo
 
sInfo
;

11514 
g_logfûe_íabÀ
 = 
Ál£
;

11516 #ifde‡
USE_BITMAIN_C5


11517 
	`°r˝y
(
g_logfûe_∑th
, "bmminer.log");

11520 #ifde‡
USE_BITMAIN


11521 
	`°r˝y
(
g_logfûe_∑th
, "cgminer.log");

11524 
	`°r˝y
(
g_logfûe_›íÊag
, "a+");

11527 i‡(
	`u∆ikñy
(
	`cuæ_globÆ_öô
(
CURL_GLOBAL_ALL
)))

11529 
	`óæy_quô
(1, "FailedÅo curl_global_init");

11532 #ifde‡
USE_LIBSYSTEMD


11533 
	`sd_nŸify
(
Ál£
, "STATUS=Starting up...");

11536 #ifde‡
__löux


11540 i‡(
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
) == 1)

11541 
£À˘ive_yõld
 = &
sched_yõld
;

11544 #i‡
LOCK_TRACKING


11546 i‡(
	`u∆ikñy
(
	`±hªad_muãx_öô
(&
lock°©_lock
, 
NULL
)))

11547 
	`quôhîe
(1, "FaûedÅÿ±hªad_muãx_öôÜock°©_lockÉºno=%d", 
î∫o
);

11550 
öôül_¨gs
 = 
	`cgmÆloc
((*Ë* (
¨gc
 + 1));

11552 
i
 = 0; i < 
¨gc
; i++)

11554 
öôül_¨gs
[
i
] = 
	`°rdup
(
¨gv
[i]);

11557 
öôül_¨gs
[
¨gc
] = 
NULL
;

11559 
	`muãx_öô
(&
hash_lock
);

11560 
	`muãx_öô
(&
upd©e_job_lock
);

11561 
	`muãx_öô
(&
c⁄sﬁe_lock
);

11562 
	`cglock_öô
(&
c⁄åﬁ_lock
);

11563 
	`muãx_öô
(&
°©s_lock
);

11564 
	`muãx_öô
(&
sh¨ñog_lock
);

11565 
	`cglock_öô
(&
ch_lock
);

11566 
	`muãx_öô
(&
ssh¨e_lock
);

11567 
	`rwlock_öô
(&
blk_lock
);

11568 
	`rwlock_öô
(&
√ècc_lock
);

11569 
	`rwlock_öô
(&
möög_thr_lock
);

11570 
	`rwlock_öô
(&
devi˚s_lock
);

11572 
	`muãx_öô
(&
Õ_lock
);

11574 i‡(
	`u∆ikñy
(
	`±hªad_c⁄d_öô
(&
Õ_c⁄d
, 
NULL
)))

11576 
	`óæy_quô
(1, "FailedÅoÖthread_cond_initÜp_cond");

11579 
	`muãx_öô
(&
ª°¨t_lock
);

11581 i‡(
	`u∆ikñy
(
	`±hªad_c⁄d_öô
(&
ª°¨t_c⁄d
, 
NULL
)))

11583 
	`óæy_quô
(1, "FailedÅoÖthread_cond_initÑestart_cond");

11586 i‡(
	`u∆ikñy
(
	`±hªad_c⁄d_öô
(&
gws_c⁄d
, 
NULL
)))

11588 
	`óæy_quô
(1, "FailedÅoÖthread_cond_init gws_cond");

11592 
gëq
 = 
	`tq_√w
();

11594 i‡(!
gëq
)

11596 
	`óæy_quô
(1, "FailedÅo create getq");

11601 
°gd_lock
 = &
gëq
->
muãx
;

11603 
	`öôüli£_usb
();

11605 
	`¢¥ötf
(
∑ckagíame
, ’ackagíame), "%†%s", 
PACKAGE
, 
VERSION
);

11607 
h™dÀr
.
ß_h™dÀr
 = &
sigh™dÀr
;

11608 
h™dÀr
.
ß_Êags
 = 0;

11609 
	`sigem±y£t
(&
h™dÀr
.
ß_mask
);

11610 
	`siga˘i⁄
(
SIGTERM
, &
h™dÀr
, &
ãrmh™dÀr
);

11611 
	`siga˘i⁄
(
SIGINT
, &
h™dÀr
, &
öth™dÀr
);

11612 
	`siga˘i⁄
(
SIGABRT
, &
h™dÀr
, &
abπh™dÀr
);

11614 
›t_kî√l_∑th
 = 
	`Æloˇ
(
PATH_MAX
);

11615 
	`°r˝y
(
›t_kî√l_∑th
, 
CGMINER_PREFIX
);

11616 
cgmöî_∑th
 = 
	`Æloˇ
(
PATH_MAX
);

11617 
s
 = 
	`°rdup
(
¨gv
[0]);

11618 
	`°r˝y
(
cgmöî_∑th
, 
	`dú«me
(
s
));

11619 
	`‰ì
(
s
);

11620 
	`°rˇt
(
cgmöî_∑th
, "/");

11622 
devcurs‹
 = 8;

11623 
log°¨t
 = 
devcurs‹
 + 1;

11624 
logcurs‹
 = 
log°¨t
 + 1;

11626 
block
 = 
	`cgˇŒoc
((block), (
size_t
) 1);

11628 
i
 = 0; i < 36; i++)

11630 
	`°rˇt
(
block
->
hash
, "0");

11633 
	`HASH_ADD_STR
(
blocks
, 
hash
, 
block
);

11634 
	`°r˝y
(
cuºít_hash
, 
block
->
hash
);

11636 
	`INIT_LIST_HEAD
(&
sˇn_devi˚s
);

11639 
	`›t_ªgi°î_èbÀ
(
›t_c⁄fig_èbÀ
,

11642 
	`›t_ªgi°î_èbÀ
(
›t_cmdlöe_èbÀ
,

11645 
	`›t_∑r£
(&
¨gc
, 
¨gv
, 
≠∂og_™d_exô
);

11647 i‡(
¨gc
 != 1)

11649 
	`óæy_quô
(1, "UnexpectedÉxtra commandlineárguments");

11652 i‡(!
c⁄fig_lﬂded
)

11654 
	`lﬂd_deÁu…_c⁄fig
();

11657 i‡(
›t_bíchm¨k
 || 
›t_bíchfûe
)

11659 
poﬁ
 *pool;

11661 
poﬁ
 = 
	`add_poﬁ
();

11662 
poﬁ
->
Ωc_uæ
 = 
	`cgmÆloc
((
size_t
)255);

11664 i‡(
›t_bíchfûe
)

11666 
	`°r˝y
(
poﬁ
->
Ωc_uæ
, "Benchfile");

11670 
	`°r˝y
(
poﬁ
->
Ωc_uæ
, "Benchmark");

11673 
poﬁ
->
Ωc_u£r
 =Öoﬁ->
Ωc_uæ
;

11674 
poﬁ
->
Ωc_∑ss
 =Öoﬁ->
Ωc_uæ
;

11675 
poﬁ
->
Ωc_u£Ωass
 =Öoﬁ->
Ωc_uæ
;

11676 
poﬁ
->
sockaddr_uæ
 =Öoﬁ->
Ωc_uæ
;

11677 
	`°∫˝y
(
poﬁ
->
diff
, "?", (pool->diff)-1);

11678 
poﬁ
->
diff
[(pool->diff)-1] = '\0';

11679 
	`íabÀ_poﬁ
(
poﬁ
);

11680 
poﬁ
->
idÀ
 = 
Ál£
;

11681 
suc˚ssful_c⁄√˘
 = 
åue
;

11683 
i
 = 0; i < 16; i++)

11685 
	`hex2bö
(&
bích_hidiff_bös
[
i
][0], &
bích_hidiffs
[i][0], (
size_t
) 160);

11686 
	`hex2bö
(&
bích_lodiff_bös
[
i
][0], &
bích_lodiffs
[i][0], (
size_t
) 160);

11689 
	`£t_èrgë
(
bích_èrgë
, 32);

11692 if(
›t_vîsi⁄_∑th
)

11694 
FILE
 * 
Âvîsi⁄
 = 
	`f›í
(
›t_vîsi⁄_∑th
, "rb");

11695 
tmp
[256] = {0};

11696 
Àn
 = 0;

11697 * 
°¨t
 = 0;

11699 if(
Âvîsi⁄
 =
NULL
)

11701 
	`≠∂og
(
LOG_ERR
, "O≥¿möî vîsi⁄ fûê%†îr‹", 
›t_vîsi⁄_∑th
);

11705 
Àn
 = 
	`‰ód
(
tmp
, 1, 256, 
Âvîsi⁄
);

11707 if(
Àn
 <= 0)

11709 
	`≠∂og
(
LOG_ERR
, "Ród möî vîsi⁄ fûê%†îr‹ %d", 
›t_vîsi⁄_∑th
, 
Àn
);

11713 
°¨t
 = 
	`°r°r
(
tmp
, "\n");

11715 if(
°¨t
 =
NULL
)

11717 
	`°r˝y
(
g_möî_compûëime
, 
tmp
);

11721 
	`cg_mem˝y
(
g_möî_compûëime
, 
tmp
, 
°¨t
-tmp);

11722 
	`°r˝y
(
tmp
, 
°¨t
+1);

11723 
°¨t
 = 
	`°r°r
(
tmp
,"\n");

11724 if(
°¨t
 =
NULL
)

11726 
	`°r˝y
(
g_möî_ty≥
, 
tmp
);

11730 
	`cg_mem˝y
(
g_möî_ty≥
, 
tmp
, 
°¨t
-tmp);

11734 if(
g_möî_compûëime
[
	`°æí
(g_miner_compiletime)-1] == '\n')

11736 
g_möî_compûëime
[
	`°æí
(g_miner_compiletime)-1] = 0;

11739 if(
g_möî_compûëime
[
	`°æí
(g_miner_compiletime)-1] == '\r')

11741 
g_möî_compûëime
[
	`°æí
(g_miner_compiletime)-1] = 0;

11744 if(
g_möî_ty≥
[
	`°æí
(g_miner_type)-1] == '\n')

11746 
g_möî_ty≥
[
	`°æí
(g_miner_type)-1] = 0;

11749 if(
g_möî_ty≥
[
	`°æí
(g_miner_type)-1] == '\r')

11751 
g_möî_ty≥
[
	`°æí
(g_miner_type)-1] = 0;

11756 
	`≠∂og
(
LOG_ERR
, "Möî compûêtime: %†ty≥: %s", 
g_möî_compûëime
, 
g_möî_ty≥
);

11759 if(
›t_logfûe_∑th
)

11761 
g_logfûe_íabÀ
 = 
åue
;

11762 
	`°r˝y
(
g_logfûe_∑th
, 
›t_logfûe_∑th
);

11764 if(
›t_logfûe_›íÊag
)

11766 
	`°r˝y
(
g_logfûe_›íÊag
, 
›t_logfûe_›íÊag
);

11769 
	`≠∂og
(
LOG_ERR
, "Log fûê∑th: %†O≥¿Êag: %s", 
g_logfûe_∑th
, 
g_logfûe_›íÊag
);

11772 if(
›t_logw‹k_∑th
)

11774 
szfûï©h
[256] = {0};

11776 if(
›t_logw‹k_asi˙um
)

11778 if(
	`°æí
(
›t_logw‹k_asi˙um
) <= 0)

11780 
	`quô
(1, "Log workásicÇumÉmpty");

11783 
g_logw‹k_asi˙um
 = 
	`©oi
(
›t_logw‹k_asi˙um
);

11785 if(
g_logw‹k_asi˙um
 != 1 && g_logwork_asicnum != 32 && g_logwork_asicnum != 64)

11787 
	`quô
(1, "Log workásicÇum must be 1, 32, 64");

11790 
	`≠∂og
(
LOG_ERR
, "Log w‹kÖ©h: %†Asi¯num: %s", 
›t_logw‹k_∑th
, 
›t_logw‹k_asi˙um
);

11794 
	`≠∂og
(
LOG_ERR
, "Log w‹kÖ©h: %s", 
›t_logw‹k_∑th
);

11797 
	`•rötf
(
szfûï©h
, "%s.txt", 
›t_logw‹k_∑th
);

11798 
g_logw‹k_fûe
 = 
	`f›í
(
szfûï©h
, "a+");

11799 
	`≠∂og
(
LOG_ERR
, "Log w‹k o≥¿fûê%s", 
szfûï©h
);

11801 if(
g_logw‹k_asi˙um
 == 1)

11803 
	`•rötf
(
szfûï©h
, "%s%02d.txt", 
›t_logw‹k_∑th
, 
g_logw‹k_asi˙um
);

11804 
g_logw‹k_fûes
[0] = 
	`f›í
(
szfûï©h
, "a+");

11805 
	`≠∂og
(
LOG_ERR
, "Log w‹k o≥¿asi¯%d fûê%s", 
g_logw‹k_asi˙um
, 
szfûï©h
);

11807 if(
g_logw‹k_asi˙um
 == 32 || g_logwork_asicnum == 64)

11809 
i
 = 0; i <
g_logw‹k_asi˙um
; i++)

11811 
	`•rötf
(
szfûï©h
, "%s%02d_%02d.txt", 
›t_logw‹k_∑th
, 
g_logw‹k_asi˙um
, 
i
);

11812 
g_logw‹k_fûes
[
i
] = 
	`f›í
(
szfûï©h
, "a+");

11813 
	`≠∂og
(
LOG_ERR
, "Log w‹k o≥¿asi¯%d fûê%s", 
g_logw‹k_asi˙um
, 
szfûï©h
);

11817 if(
›t_logw‹k_diff
)

11819 
i
 = 0; i <= 64; i++)

11821 
	`•rötf
(
szfûï©h
, "%s_diff_%02d.txt", 
›t_logw‹k_∑th
, 
i
);

11822 
g_logw‹k_diffs
[
i
] = 
	`f›í
(
szfûï©h
, "a+");

11823 
	`≠∂og
(
LOG_ERR
, "Log w‹k o≥¿dif‡fûê%s", 
szfûï©h
);

11828 #ifde‡
HAVE_CURSES


11829 i‡(
›t_ªÆquõt
 || 
›t_di•œy_devs
)

11830 
u£_cur£s
 = 
Ál£
;

11832 i‡(
u£_cur£s
)

11833 
	`íabÀ_cur£s
();

11836 
	`≠∂og
(
LOG_WARNING
, "Sèπed %s", 
∑ckagíame
);

11837 i‡(
˙fbuf
)

11839 
	`≠∂og
(
LOG_NOTICE
, "Lﬂded c⁄figuøti⁄ fûê%s", 
˙fbuf
);

11840 
fûec⁄f_lﬂd
)

11843 
	`≠∂og
(
LOG_WARNING
, "Fatal JSONÉrror in configuration file.");

11844 
	`≠∂og
(
LOG_WARNING
, "Configuration file couldÇot be used.");

11848 
	`≠∂og
(
LOG_WARNING
, "Error in configuration file,ÖartiallyÜoaded.");

11850 i‡(
u£_cur£s
)

11852 
	`≠∂og
(
LOG_WARNING
, "Start cgminer with -TÅo see what failedÅoÜoad.");

11862 
	`‰ì
(
˙fbuf
);

11863 
˙fbuf
 = 
NULL
;

11866 
	`°rˇt
(
›t_kî√l_∑th
, "/");

11868 i‡(
w™t_≥r_devi˚_°©s
)

11870 
›t_log_ouçut
 = 
åue
;

11873 #ifde‡
HAVE_SYSLOG_H


11874 i‡(
›t_log_ouçut
)

11875 
	`£éogmask
(
	`LOG_UPTO
(
LOG_DEBUG
));

11877 
	`£éogmask
(
	`LOG_UPTO
(
LOG_NOTICE
));

11880 i‡(
›t_sˇ¡ime
 < 0)

11882 
›t_sˇ¡ime
 = 60;

11885 
tŸÆ_c⁄åﬁ_thªads
 = 8;

11886 
c⁄åﬁ_thr
 = 
	`cgˇŒoc
(
tŸÆ_c⁄åﬁ_thªads
, (*
thr
));

11888 
gwsched_thr_id
 = 0;

11890 #ifde‡
USE_USBUTILS


11891 
	`usb_öôüli£
();

11894 
	`cg£m_öô
(&
usb_ªsour˚_£m
);

11895 
usbªs_thr_id
 = 1;

11896 
thr
 = &
c⁄åﬁ_thr
[
usbªs_thr_id
];

11897 i‡(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
usb_ªsour˚_thªad
,Åhr))

11898 
	`óæy_quô
(1, "usbÑesourceÅhread create failed");

11899 
	`±hªad_dëach
(
thr
->
±h
);

11903 
	`DRIVER_PARSE_COMMANDS
(
DRIVER_FILL_DEVICE_DRV
)

11906 
	`DRIVER_PARSE_COMMANDS
(
DRIVER_DRV_DETECT_ALL
)

11908 i‡(
›t_di•œy_devs
)

11910 
	`≠∂og
(
LOG_ERR
, "Devices detected:");

11911 
i
 = 0; i < 
tŸÆ_devi˚s
; ++i)

11913 
cgpu_öfo
 *
cgpu
 = 
devi˚s
[
i
];

11914 i‡(
cgpu
->
«me
)

11916 
	`≠∂og
(
LOG_ERR
, " %2d. %†%d: %†(drivî: %s)", 
i
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
, cgpu->«me, cgpu->drv->
d«me
);

11920 
	`≠∂og
(
LOG_ERR
, " %2d. %†%d (drivî: %s)", 
i
, 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
, cgpu->drv->
d«me
);

11924 
	`óæy_quô
(0, "%d devi˚†li°ed", 
tŸÆ_devi˚s
);

11927 
möög_thªads
 = 0;

11928 
i
 = 0; i < 
tŸÆ_devi˚s
; ++i)

11930 
	`íabÀ_devi˚
(
devi˚s
[
i
]);

11933 #ifde‡
USE_USBUTILS


11934 i‡(!
tŸÆ_devi˚s
)

11936 
	`≠∂og
(
LOG_WARNING
, "No devices detected!");

11937 
	`≠∂og
(
LOG_WARNING
, "Waiting for USB hotplug devices orÖress qÅo quit");

11940 i‡(!
tŸÆ_devi˚s
)

11942 
	`óæy_quô
(1, "All devices disabled, cannot mint!");

11946 
mo°_devi˚s
 = 
tŸÆ_devi˚s
;

11948 
	`lﬂd_ãmp_cutoffs
();

11950 
i
 = 0; i < 
tŸÆ_devi˚s
; ++i)

11952 
devi˚s
[
i
]->
cgmöî_°©s
.
gëw‹k_waô_mö
.
tv_£c
 = 
MIN_SEC_UNSET
;

11955 i‡(!
›t_com∑˘
)

11957 
log°¨t
 +
mo°_devi˚s
;

11958 
logcurs‹
 = 
log°¨t
 + 1;

11959 #ifde‡
HAVE_CURSES


11960 
	`check_wösizes
();

11965 i‡(!
tŸÆ_poﬁs
)

11967 
	`≠∂og
(
LOG_WARNING
, "NeedÅo specifyátÜeast oneÖool server.");

11968 #ifde‡
HAVE_CURSES


11969 i‡(!
u£_cur£s
 || !
	`öput_poﬁ
(
Ál£
))

11971 
	`óæy_quô
(1, "Pool setup failed");

11974 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

11976 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

11977 
size_t
 
siz
;

11979 
poﬁ
->
cgmöî_°©s
.
gëw‹k_waô_mö
.
tv_£c
 = 
MIN_SEC_UNSET
;

11980 
poﬁ
->
cgmöî_poﬁ_°©s
.
gëw‹k_waô_mö
.
tv_£c
 = 
MIN_SEC_UNSET
;

11982 i‡(!
poﬁ
->
Ωc_u£Ωass
)

11984 i‡(!
poﬁ
->
Ωc_∑ss
)

11986 
poﬁ
->
Ωc_∑ss
 = 
	`°rdup
("");

11989 i‡(!
poﬁ
->
Ωc_u£r
)

11991 
	`óæy_quô
(1, "Nÿlogö cªdítül†suµlõd f‹Öoﬁ %u %s", 
i
, 
poﬁ
->
Ωc_uæ
);

11994 
siz
 = 
	`°æí
(
poﬁ
->
Ωc_u£r
Ë+ såÀn’oﬁ->
Ωc_∑ss
) + 2;

11995 
poﬁ
->
Ωc_u£Ωass
 = 
	`cgmÆloc
(
siz
);

11996 
	`¢¥ötf
(
poﬁ
->
Ωc_u£Ωass
, 
siz
, "%s:%s",Öoﬁ->
Ωc_u£r
,Öoﬁ->
Ωc_∑ss
);

12000 
cuºíçoﬁ
 = 
poﬁs
[0];

12002 #ifde‡
HAVE_SYSLOG_H


12003 i‡(
u£_sy¶og
)

12004 
	`›ílog
(
PACKAGE
, 
LOG_PID
, 
LOG_USER
);

12007 #i‡
	`deföed
(
unix
Ë|| deföed(
__APPLE__
)

12008 i‡(
›t_°dîr_cmd
)

12009 
	`f‹k_m⁄ô‹
();

12012 
möög_thr
 = 
	`cgˇŒoc
(
möög_thªads
, (
thr
));

12014 
i
 = 0; i < 
möög_thªads
; i++)

12016 
möög_thr
[
i
] = 
	`cgˇŒoc
(1, (*
thr
));

12020 
k
 = 0;

12022 
i
 = 0; i < 
tŸÆ_devi˚s
; ++i)

12024 
cgpu_öfo
 *
cgpu
 = 
devi˚s
[
i
];

12025 
cgpu
->
thr
 = 
	`cgmÆloc
((*cgpu->thrË* (cgpu->
thªads
+1));

12026 
cgpu
->
thr
[cgpu->
thªads
] = 
NULL
;

12027 
cgpu
->
°©us
 = 
LIFE_INIT
;

12029 
j
 = 0; j < 
cgpu
->
thªads
; ++j, ++
k
)

12031 
thr
 = 
	`gë_thªad
(
k
);

12032 
thr
->
id
 = 
k
;

12033 
thr
->
cgpu
 = cgpu;

12034 
thr
->
devi˚_thªad
 = 
j
;

12036 i‡(!
cgpu
->
drv
->
	`thªad_¥ï¨e
(
thr
))

12041 i‡(
	`u∆ikñy
(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
möî_thªad
,Åhr)))

12043 
	`óæy_quô
(1, "thªad %d cª©êÁûed", 
thr
->
id
);

12046 
cgpu
->
thr
[
j
] =Åhr;

12050 i‡(
cgpu
->
deví
 !
DEV_DISABLED
)

12052 
	`≠∂og
(
LOG_DEBUG
, "Pushög semÖo°Åÿthªad %d", 
thr
->
id
);

12053 
	`cg£m_po°
(&
thr
->
£m
);

12058 i‡(
›t_bíchm¨k
 || 
›t_bíchfûe
)

12059 
begö_bích
;

12061 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

12063 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

12065 
	`íabÀ_poﬁ
(
poﬁ
);

12066 
poﬁ
->
idÀ
 = 
åue
;

12070 
	`≠∂og
(
LOG_NOTICE
, "Probing foránáliveÖool");

12071 
	`¥obe_poﬁs
();

12075 
	`¶ìp
(1);

12076 
¶ït
++;

12079 !
poﬁs_a˘ive
 && 
¶ït
 < 60);

12081 !
poﬁs_a˘ive
)

12083 i‡(!
poﬁ_msg
)

12085 
	`≠∂og
(
LOG_ERR
, "No servers were foundÅhat could be usedÅo get work from.");

12086 
	`≠∂og
(
LOG_ERR
, "Please checkÅhe details fromÅheÜist below ofÅhe servers you have input");

12087 
	`≠∂og
(
LOG_ERR
, "MostÜikely you have inputÅhe wrong URL, forgottenÅoáddáÖort, or haveÇot set up workers");

12089 
i
 = 0; i < 
tŸÆ_poﬁs
; i++)

12091 
poﬁ
 *poﬁ = 
poﬁs
[
i
];

12093 
	`≠∂og
(
LOG_WARNING
, "Pool: %d URL: %s User: %s Password: %s",

12094 
i
, 
poﬁ
->
Ωc_uæ
,Öoﬁ->
Ωc_u£r
,Öoﬁ->
Ωc_∑ss
);

12097 
poﬁ_msg
 = 
åue
;

12098 i‡(
u£_cur£s
)

12100 
	`≠∂og
(
LOG_ERR
, "Pressány keyÅoÉxit, or cgminer will wait indefinitely foránáliveÖool.");

12104 i‡(!
u£_cur£s
)

12106 
	`óæy_quô
(0, "No servers could be used! Exiting.");

12108 #ifde‡
HAVE_CURSES


12109 
	`touchwö
(
logwö
);

12110 
	`wª‰esh
(
logwö
);

12111 
	`hÆfdñay
(10);

12112 i‡(
	`gëch
(Ë!
ERR
)

12113 
	`óæy_quô
(0, "No servers could be used! Exiting.");

12114 
	`cbªak
();

12118 
begö_bích
:

12119 
tŸÆ_mhashes_d⁄e
 = 0;

12121 
i
 = 0; i < 
CG_LOCAL_MHASHES_MAX_NUM
; i++)

12123 
g_loˇl_mhashes_d⁄es
[
i
] = 0;

12126 
g_loˇl_mhashes_ödex
 = 0;

12128 
i
 = 0; i < 
tŸÆ_devi˚s
; i++)

12130 
cgpu_öfo
 *
cgpu
 = 
devi˚s
[
i
];

12132 
cgpu
->
rﬁlög
 = cgpu->
tŸÆ_mhashes
 = 0;

12135 i‡(
	`sysöfo
(&
sInfo
))

12137 
	`≠∂og
(
LOG_INFO
, "FailedÅo get sysinfo,Érrno:%u,Ñeason:%s\n",

12138 
î∫o
, 
	`°ªº‹
(errno));

12139 
tŸÆ_tv_íd_sys
=
	`time
(
NULL
);

12140 
tŸÆ_tv_°¨t_sys
=
	`time
(
NULL
);

12144 
tŸÆ_tv_íd_sys
=
sInfo
.
u±ime
;

12145 
tŸÆ_tv_°¨t_sys
=
sInfo
.
u±ime
;

12148 
	`cgtime
(&
tŸÆ_tv_°¨t
);

12149 
	`cgtime
(&
tŸÆ_tv_íd
);

12150 
	`cgtime
(&
tv_hashmëî
);

12151 
	`gë_d©e°amp
(
d©e°amp
, (d©e°amp), &
tŸÆ_tv_°¨t
);

12153 
w©chpoﬁ_thr_id
 = 2;

12154 
thr
 = &
c⁄åﬁ_thr
[
w©chpoﬁ_thr_id
];

12157 i‡(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
w©chpoﬁ_thªad
, NULL))

12159 
	`óæy_quô
(1, "watchpoolÅhread create failed");

12162 
	`±hªad_dëach
(
thr
->
±h
);

12164 
w©chdog_thr_id
 = 3;

12165 
thr
 = &
c⁄åﬁ_thr
[
w©chdog_thr_id
];

12168 i‡(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
w©chdog_thªad
, NULL))

12170 
	`óæy_quô
(1, "watchdogÅhread create failed");

12172 
	`±hªad_dëach
(
thr
->
±h
);

12175 
≠i_thr_id
 = 5;

12176 
thr
 = &
c⁄åﬁ_thr
[
≠i_thr_id
];

12178 i‡(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
≠i_thªad
,Åhr))

12180 
	`óæy_quô
(1, "APIÅhread create failed");

12183 #ifde‡
USE_USBUTILS


12184 
hŸ∂ug_thr_id
 = 6;

12185 
thr
 = &
c⁄åﬁ_thr
[
hŸ∂ug_thr_id
];

12186 i‡(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
hŸ∂ug_thªad
,Åhr))

12187 
	`óæy_quô
(1, "hotplugÅhread create failed");

12188 
	`±hªad_dëach
(
thr
->
±h
);

12191 #ifde‡
HAVE_CURSES


12195 
öput_thr_id
 = 7;

12196 
thr
 = &
c⁄åﬁ_thr
[
öput_thr_id
];

12197 i‡(
	`thr_öfo_¸óã
(
thr
, 
NULL
, 
öput_thªad
,Åhr))

12198 
	`óæy_quô
(1, "inputÅhread create failed");

12199 
	`±hªad_dëach
(
thr
->
±h
);

12203 i‡(
tŸÆ_c⁄åﬁ_thªads
 != 8)

12205 
	`óæy_quô
(1, "öc‹ª˘ÅŸÆ_c⁄åﬁ_thªad†(%dËshould bê8", 
tŸÆ_c⁄åﬁ_thªads
);

12208 
	`£t_high¥io
();

12210 #ifde‡
USE_LIBSYSTEMD


12211 
	`sd_nŸify
(
Ál£
, "READY=1\n"

12218 
ts
, 
max_°aged
 = 
max_queue
;

12219 
poﬁ
 *pool;

12221 i‡(
›t_w‹k_upd©e
)

12223 
	`sig«l_w‹k_upd©e
();

12226 
›t_w‹k_upd©e
 = 
Ál£
;

12228 
	`muãx_lock
(
°gd_lock
);

12229 
ts
 = 
	`__tŸÆ_°aged
();

12232 i‡(
ts
 > 
max_°aged
)

12234 
w‹k_fûÀd
 = 
åue
;

12235 
	`±hªad_c⁄d_waô
(&
gws_c⁄d
, 
°gd_lock
);

12236 
ts
 = 
	`__tŸÆ_°aged
();

12239 
	`muãx_u∆ock
(
°gd_lock
);

12241 i‡(
ts
 > 
max_°aged
)

12246 
w‹k_fûÀd
 = 
åue
;

12247 
w‹k
 = 
	`hash_p›
(
Ál£
);

12249 i‡(
w‹k
)

12251 
	`disˇrd_w‹k
(
w‹k
);

12257 i‡(
w‹k
)

12259 
	`disˇrd_w‹k
(
w‹k
);

12262 
w‹k
 = 
	`make_w‹k
();

12266 
poﬁ
 = 
	`£À˘_poﬁ
();

12268 i‡(!
	`poﬁ_unußbÀ
(
poﬁ
))

12273 
	`swôch_poﬁs
(
NULL
);

12274 
poﬁ
 = 
	`£À˘_poﬁ
();

12276 i‡(
	`poﬁ_unußbÀ
(
poﬁ
))

12278 
	`cg¶ìp_ms
(11);

12282 i‡(
poﬁ
->
has_°øtum
)

12284 
	`gí_°øtum_w‹k
(
poﬁ
, 
w‹k
);

12285 
	`≠∂og
(
LOG_DEBUG
, "Generated stratum work");

12286 
	`°age_w‹k
(
w‹k
);

12290 i‡(
›t_bíchfûe
)

12292 
	`gë_bíchfûe_w‹k
(
w‹k
);

12293 
	`≠∂og
(
LOG_DEBUG
, "Generated benchfile work");

12294 
	`°age_w‹k
(
w‹k
);

12297 i‡(
›t_bíchm¨k
)

12299 
	`gë_bíchm¨k_w‹k
(
w‹k
);

12300 
	`≠∂og
(
LOG_DEBUG
, "Generated benchmark work");

12301 
	`°age_w‹k
(
w‹k
);

12305 #ifde‡
HAVE_LIBCURL


12306 i‡(
poﬁ
->
gbt_sﬁo
)

12308 
	`gí_sﬁo_w‹k
(
poﬁ
, 
w‹k
);

12309 
	`≠∂og
(
LOG_DEBUG
, "Generated GBT SOLO work");

12310 
	`°age_w‹k
(
w‹k
);

12314 i‡(
poﬁ
->
has_gbt
)

12316 
	`gí_gbt_w‹k
(
poﬁ
, 
w‹k
);

12317 
	`≠∂og
(
LOG_DEBUG
, "Generated GBT work");

12318 
	`°age_w‹k
(
w‹k
);

12322 i‡(
›t_bíchfûe
)

12324 
	`gë_bíchfûe_w‹k
(
w‹k
);

12325 
	`≠∂og
(
LOG_DEBUG
, "Generated benchfile work");

12326 
	`°age_w‹k
(
w‹k
);

12329 i‡(
›t_bíchm¨k
)

12331 
	`gë_bíchm¨k_w‹k
(
w‹k
);

12332 
	`≠∂og
(
LOG_DEBUG
, "Generated benchmark work");

12333 
	`°age_w‹k
(
w‹k
);

12339 
	}
}

	@compat.h

1 #i‚de‡
__COMPAT_H__


2 
	#__COMPAT_H__


	)

5 
	#PTH
(
thr
Ë(—hr)->
±h
)

	)

	@config.h

20 
	#CGMINER_MAJOR_VERSION
 1

	)

23 
	#CGMINER_MINOR_SUBVERSION
 0

	)

26 
	#CGMINER_MINOR_VERSION
 0

	)

29 
	#CGMINER_PREFIX
 "/u§/bö"

	)

43 
	#EXECV_2ND_ARG_TYPE
 * c⁄°*

	)

46 
	#GNULIB_TEST_MEMCHR
 1

	)

49 
	#GNULIB_TEST_MEMMEM
 1

	)

52 
	#GNULIB_TEST_SIGACTION
 1

	)

55 
	#GNULIB_TEST_SIGPROCMASK
 1

	)

58 
	#HAVE_ALLOCA
 1

	)

62 
	#HAVE_ALLOCA_H
 1

	)

65 
	#HAVE_ATTRIBUTE_COLD
 1

	)

68 
	#HAVE_ATTRIBUTE_CONST
 1

	)

71 
	#HAVE_ATTRIBUTE_NORETURN
 1

	)

74 
	#HAVE_ATTRIBUTE_PRINTF
 1

	)

77 
	#HAVE_ATTRIBUTE_UNUSED
 1

	)

80 
	#HAVE_ATTRIBUTE_USED
 1

	)

86 
	#HAVE_BUILTIN_CONSTANT_P
 1

	)

89 
	#HAVE_BUILTIN_TYPES_COMPATIBLE_P
 1

	)

92 #unde‡
HAVE_CURSES


96 
	#HAVE_DECL_MEMMEM
 1

	)

99 
	#HAVE_DLFCN_H
 1

	)

102 
	#HAVE_INTTYPES_H
 1

	)

108 
	#HAVE_LIBPTHREAD
 1

	)

117 
	#HAVE_LONG_LONG_INT
 1

	)

121 
	#HAVE_MAP_ANONYMOUS
 1

	)

124 
	#HAVE_MEMMEM
 1

	)

127 
	#HAVE_MEMORY_H
 1

	)

130 
	#HAVE_MPROTECT
 1

	)

133 
	#HAVE_RAW_DECL_MEMMEM
 1

	)

136 
	#HAVE_RAW_DECL_MEMPCPY
 1

	)

139 
	#HAVE_RAW_DECL_MEMRCHR
 1

	)

142 
	#HAVE_RAW_DECL_RAWMEMCHR
 1

	)

145 
	#HAVE_RAW_DECL_SIGACTION
 1

	)

148 
	#HAVE_RAW_DECL_SIGADDSET
 1

	)

151 
	#HAVE_RAW_DECL_SIGDELSET
 1

	)

154 
	#HAVE_RAW_DECL_SIGEMPTYSET
 1

	)

157 
	#HAVE_RAW_DECL_SIGFILLSET
 1

	)

160 
	#HAVE_RAW_DECL_SIGISMEMBER
 1

	)

163 
	#HAVE_RAW_DECL_SIGPENDING
 1

	)

166 
	#HAVE_RAW_DECL_SIGPROCMASK
 1

	)

169 
	#HAVE_RAW_DECL_STPCPY
 1

	)

172 
	#HAVE_RAW_DECL_STPNCPY
 1

	)

175 
	#HAVE_RAW_DECL_STRCASESTR
 1

	)

178 
	#HAVE_RAW_DECL_STRCHRNUL
 1

	)

181 
	#HAVE_RAW_DECL_STRDUP
 1

	)

184 
	#HAVE_RAW_DECL_STRERROR_R
 1

	)

187 
	#HAVE_RAW_DECL_STRNCAT
 1

	)

190 
	#HAVE_RAW_DECL_STRNDUP
 1

	)

193 
	#HAVE_RAW_DECL_STRNLEN
 1

	)

196 
	#HAVE_RAW_DECL_STRPBRK
 1

	)

199 
	#HAVE_RAW_DECL_STRSEP
 1

	)

202 
	#HAVE_RAW_DECL_STRSIGNAL
 1

	)

205 
	#HAVE_RAW_DECL_STRTOK_R
 1

	)

208 
	#HAVE_RAW_DECL_STRVERSCMP
 1

	)

211 
	#HAVE_SIGACTION
 1

	)

214 
	#HAVE_SIGALTSTACK
 1

	)

220 
	#HAVE_SIGINTERRUPT
 1

	)

235 
	#HAVE_STDINT_H
 1

	)

238 
	#HAVE_STDLIB_H
 1

	)

241 
	#HAVE_STRINGS_H
 1

	)

244 
	#HAVE_STRING_H
 1

	)

247 
	#HAVE_STRUCT_SIGACTION_SA_SIGACTION
 1

	)

250 
	#HAVE_SYSLOG_H
 1

	)

259 
	#HAVE_SYS_MMAN_H
 1

	)

262 
	#HAVE_SYS_STAT_H
 1

	)

265 
	#HAVE_SYS_TYPES_H
 1

	)

268 
	#HAVE_UNISTD_H
 1

	)

271 
	#HAVE_UNSIGNED_LONG_LONG_INT
 1

	)

274 
	#HAVE_WARN_UNUSED_RESULT
 1

	)

277 
	#HAVE_WCHAR_H
 1

	)

280 
	#HAVE_WCHAR_T
 1

	)

284 
	#LT_OBJDIR
 ".libs/"

	)

293 
	#PACKAGE
 "bmmöî"

	)

296 
	#PACKAGE_BUGREPORT
 "suµ‹t@bômaö.com"

	)

299 
	#PACKAGE_NAME
 "bmmöî"

	)

302 
	#PACKAGE_STRING
 "bmmöî 1.0.0"

	)

305 
	#PACKAGE_TARNAME
 "bmmöî"

	)

308 
	#PACKAGE_URL
 ""

	)

311 
	#PACKAGE_VERSION
 "1.0.0"

	)

334 
	#STDC_HEADERS
 1

	)

361 
	#USE_BITMAIN_C5
 1

	)

362 
	#ALGO_BTM
 1

	)

411 
	#VERSION
 "2.0.0"

	)

438 #i‚de‡
_ALL_SOURCE


439 
	#_ALL_SOURCE
 1

	)

442 #i‚de‡
_GNU_SOURCE


443 
	#_GNU_SOURCE
 1

	)

446 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


447 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

450 #i‚de‡
_TANDEM_SOURCE


451 
	#_TANDEM_SOURCE
 1

	)

454 #i‚de‡
__EXTENSIONS__


455 
	#__EXTENSIONS__
 1

	)

464 #i‚de‡
__˝lu•lus


474 #i‡
deföed
 
__APPLE__
 && deföed 
__MACH__
 && 
__APPLE_CC__
 >5465 && !deföed 
__˝lu•lus
 && 
__STDC_VERSION__
 >199901L && !deföed 
__GNUC_STDC_INLINE__


475 
	#__GNUC_STDC_INLINE__
 1

	)

481 
	#ª°ri˘
 
__ª°ri˘


	)

487 #i‡
deföed
 
__SUNPRO_CC
 && !deföed 
__RESTRICT


488 
	#_Re°ri˘


	)

489 
	#__ª°ri˘__


	)

501 #i‡
__GNUC__
 >3 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 7)

502 
	#_GL_UNUSED
 
	`__©åibuã__
 ((
__unu£d__
))

	)

504 
	#_GL_UNUSED


	)

508 
	#_UNUSED_PARAMETER_
 
_GL_UNUSED


	)

511 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 96)

512 
	#_GL_ATTRIBUTE_PURE
 
	`__©åibuã__
 ((
__puª__
))

	)

514 
	#_GL_ATTRIBUTE_PURE


	)

518 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 95)

519 
	#_GL_ATTRIBUTE_CONST
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

521 
	#_GL_ATTRIBUTE_CONST


	)

	@crc.h

18 #i‚de‡
_CRC_H_


19 
	#_CRC_H_


	)

21 
¸c16
(c⁄° *
buf„r
, 
Àn
);

	@crc16.c

1 
	g¸c16_èbÀ
[256] = {

36 
	$¸c16
(c⁄° *
buf„r
, 
Àn
)

38 
¸c
;

40 
¸c
 = 0;

41 
Àn
-- > 0)

42 
¸c
 = 
¸c16_èbÀ
[((¸¯>> 8Ë^ (*
buf„r
++)) & 0xFF] ^ (crc << 8);

44  
¸c
;

45 
	}
}

	@driver-btm-soc.c

1 
	~"c⁄fig.h
"

2 
	~<as£π.h
>

4 
	~<limôs.h
>

5 
	~<±hªad.h
>

6 
	~<°dio.h
>

7 
	~<sys/time.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/fûe.h
>

10 
	~<dúít.h
>

11 
	~<uni°d.h
>

12 
	~<sys/mm™.h
>

13 
	~<f˙é.h
>

14 
	~<sys/io˘l.h
>

15 
	~<löux/i2c-dev.h
>

16 
	~<as£π.h
>

17 
	~<uni°d.h
>

18 
	~<m©h.h
>

20 #i‚de‡
WIN32


21 
	~<sys/£À˘.h
>

23 
	~<sys/°©.h
>

24 
	~<f˙é.h
>

25 
	~<sys/sockë.h
>

26 
	~<√töë/ö.h
>

27 
	~<√t/if.h
>

28 
	~<√tdb.h
>

29 
	~<¨∑/öë.h
>

30 
	~<î∫o.h
>

31 
	~<sys/°©.h
>

33 #i‚de‡
O_CLOEXEC


34 
	#O_CLOEXEC
 0

	)

37 
	~"com∑t.h
"

38 
	~<wödows.h
>

39 
	~<io.h
>

42 
	~"ñi°.h
"

44 
	~"drivî-btm-soc.h
"

45 
	~"utû.h
"

49 
	gBM1680_ack_ªc‹d
[
BITMAIN_MAX_CHAIN_NUM
][2][
BM1680_MAX_CMD_NUM
] = {0};

51 c⁄° 
	gªd_Àd
 = 941;

52 c⁄° 
	ggªí_Àd
 = 942;

54 
	gbt8d
 = 0x1a;

55 
	gi2c_¶ave_addr
 = 0;

57 
±hªad_muãx_t
 
	gªöô_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

58 
±hªad_muãx_t
 
	gi2c_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

59 
±hªad_muãx_t
 
	giic_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

60 
±hªad_muãx_t
 
	gªg_ªad_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

61 
±hªad_muãx_t
 
	gw‹k_queue_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

63 
	ggChùOff£t
 = 0;

64 
	ggC‹eOff£t
 = 0;

66 
	g›t_bômaö_Án_pwm
 = 50;

67 
boﬁ
 
	g›t_bômaö_Án_˘æ
 = 
Ál£
;

68 
	g›t_bômaö_B3_‰eq
 = 200;

70 
	gœ°_ãm≥øtuª
 = 0, 
	gãmp_highe°
 = 0;

72 
Æl_∑ømëîs
 
	gdev
;

73 
thr_öfo
 *
	gpic_hóπ_bót
;

74 
thr_öfo
 *
	gsˇn_ªg_id
;

75 
thr_öfo
 *
	gªad_ãmp_id
;

76 
thr_öfo
 *
	gcheck_°©us_id
;

77 
thr_öfo
 *
	gcheck_möî_°©us_id
;

78 
thr_öfo
 *
	gªad_hash_øã
;

79 
thr_öfo
 *
	gª°‹e_vﬁège
;

80 
thr_öfo
 *
	gcheck_Án_id
;

81 
dev_öfo
 
	gdev_öfo
[
BITMAIN_MAX_CHAIN_NUM
];

82 
boﬁ
 
	gis_π
 = 
åue
;

83 
	eI2C_TYPE
 { 
	mLOCAL
, 
	mREMOTE
, 
	mOFFSET
, 
	mID
};

84 
öt32_t
 
	gglobÆ_w‹kid
 = 0;

87 
	gg_CHIP_ADDR_ªg_vÆue_num
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

88 
	gg_CHIP_ADDR_ªg_vÆue
[
BITMAIN_MAX_CHAIN_NUM
][128] = {{0}};

89 
	gg_HASH_RATE_ªg_vÆue_num
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

90 
	gg_HASH_RATE_ªg_vÆue
[
BITMAIN_MAX_CHAIN_NUM
][128] = {{0}};

91 
boﬁ
 
	gg_HASH_RATE_ªg_vÆue_‰om_which_asic
[
BITMAIN_MAX_CHAIN_NUM
][128] = {{0}};

92 
	gg_CHIP_STATUS_ªg_vÆue_num
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

93 
	gg_CHIP_STATUS_ªg_vÆue
[
BITMAIN_MAX_CHAIN_NUM
][128] = {{0}};

96 
uöt64_t
 
	gøã
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

97 
	gøã_îr‹
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

98 
	gdi•œyed_øã
[
BITMAIN_MAX_CHAIN_NUM
][16];

99 
	gpic_vîsi⁄
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

100 
boﬁ
 
	ggLo°_öã∫ë_10_mö
 = 
Ál£
;

101 
boﬁ
 
	ggGŸ_Tem≥øtuª_vÆue
 = 
Ál£
;

102 
boﬁ
 
	ggMöîSètus_Low_Hashøã
 = 
Ál£
;

103 
boﬁ
 
	ggMöîSètus_High_Temp
 = 
Ál£
;

104 
boﬁ
 
	ggMöîSètus_NŸ_ªad_Æl_£ns‹
 = 
Ál£
;

105 
boﬁ
 
	ggMöîSètus_Lo°_c⁄√˘i⁄_to_poﬁ
 = 
Ál£
;

106 
boﬁ
 
	ggF™_Eº‹
 = 
Ál£
;

108 
boﬁ
 
	g⁄˚_îr‹
 = 
Ál£
;

109 
boﬁ
 
	g°©us_îr‹
 = 
Ál£
;

110 
boﬁ
 
	g°›
 = 
Ál£
;

112 
	ggMöîSètus_High_Temp_Cou¡î
 = 0;

116 
thr_öfo
 *
	gªad_n⁄˚_ªg_id
;

117 
uöt64_t
 
	gh
 = 0;

118 
uöt64_t
 
	gh_óch_chaö
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

119 
	góch_chaö_h_avg
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

120 
	ggóch_chaö_h_Æl
 = 0;

121 
	ghash_bﬂrd_id
[
BITMAIN_MAX_CHAIN_NUM
][12];

122 
	gvﬁège
[
BITMAIN_MAX_CHAIN_NUM
] = {0,0,0,0};

123 
±hªad_muãx_t
 
	gªg_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

124 
±hªad_muãx_t
 
	gn⁄˚_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

125 
±hªad_muãx_t
 
	gây_wrôe_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

126 
±hªad_muãx_t
 
	gãmp_buf_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

127 
boﬁ
 
	g°¨t_£nd
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

128 
boﬁ
 
	gªöôög
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

129 
boﬁ
 
	g°¨t_ªcv
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

130 
boﬁ
 
	g√ed_ªöô
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

131 
boﬁ
 
	gupd©e_asic_num
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

132 
boﬁ
 
	g√ed_ªcheck
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

134 
boﬁ
 
	gcheck_øã
 = 
Ál£
;

135 
boﬁ
 
	ggBegö_gë_n⁄˚
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

136 
boﬁ
 
	g£nd_hóπ
 = 
åue
;

137 
boﬁ
 
	g√w_block
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

138 
boﬁ
 
	gupd©e_£ed
[
BITMAIN_MAX_CHAIN_NUM
] = {
Ál£
};

140 
uöt64_t
 
	ghashbﬂrd_avîage_hash_øã
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

141 
uöt64_t
 
	ghashbﬂrd_ªÆ_time_hash_øã
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

142 
n⁄˚_buf
 
	gn⁄˚_fifo
;

143 
ªg_buf
 
	gªg_fifo
;

144 
timevÆ
 
	gtv_£nd_job
 = {0, 0};

146 
uöt8_t
 
	gchaö_vﬁège
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

149 
	gÂga_fd
;

150 
	gfd_Âga_mem
;

151 *
	gÂga_mem_addr
 = 
NULL
;

152 *
	gaxi_Âga_addr
 = 
NULL
;

154 
±hªad_muãx_t
 
	gu¨t_£nd_muãx
[
BITMAIN_MAX_CHAIN_NUM
] = {
PTHREAD_MUTEX_INITIALIZER
};

155 
±hªad_muãx_t
 
	gu¨t_ª˚ive_muãx
[
BITMAIN_MAX_CHAIN_NUM
] = {
PTHREAD_MUTEX_INITIALIZER
};

158 
	$bômaö_axi_öô
()

160 
d©a
;

161 
ªt
=0;

163 
Âga_fd
 = 
	`›í
("/dev/axi_Âga_dev", 
O_RDWR
);

164 if(
Âga_fd
 < 0)

166 
	`¥ötf
("/dev/axi_Âga_dev o≥¿Áûed. fd = %d\n", 
Âga_fd
);

170 
axi_Âga_addr
 = 
	`mm≠
(
NULL
, 
TOTAL_LEN
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
Âga_fd
, 0);

171 if(!
axi_Âga_addr
)

173 
	`¥ötf
("mm≠áxi_Âga_add∏Áûed.áxi_Âga_add∏0x%x\n", 
axi_Âga_addr
);

176 
	`¥ötf
("mm≠áxi_Âga_add∏0x%x\n", 
axi_Âga_addr
);

179 
d©a
 = (*
axi_Âga_addr
 & 0x0000ffff);

180 
	`¥ötf
("axi_Âga_add∏d©®0x%x\n", 
d©a
);

182 
fd_Âga_mem
 = 
	`›í
("/dev/Âga_mem", 
O_RDWR
);

183 if(
fd_Âga_mem
 < 0)

185 
	`¥ötf
("/dev/Âga_mem o≥¿Áûed. fd_Âga_mem = %d\n", 
fd_Âga_mem
);

189 
Âga_mem_addr
 = 
	`mm≠
(
NULL
, 
FPGA_MEM_TOTAL_LEN
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
fd_Âga_mem
, 0);

190 if(!
Âga_mem_addr
)

192 
	`¥ötf
("mm≠ fpga_mem_add∏Áûed. fpga_mem_add∏0x%x\n", 
Âga_mem_addr
);

195 
	`¥ötf
("mm≠ fpga_mem_add∏0x%x\n", 
Âga_mem_addr
);

197  
ªt
;

198 
	}
}

200 
	$bômaö_axi_˛o£
()

202 
ªt
 = 0;

204 
	`¥ötf
("\n\n--- %s\n", 
__FUNCTION__
);

206 
ªt
 = 
	`munm≠
((*)
axi_Âga_addr
, 
TOTAL_LEN
);

207 if(
ªt
<0)

209 
	`¥ötf
("munmap failed!\n");

212 
ªt
 = 
	`munm≠
((*)
Âga_mem_addr
, 
FPGA_MEM_TOTAL_LEN
);

213 if(
ªt
<0)

215 
	`¥ötf
("munmap failed!\n");

218 
	`˛o£
(
Âga_fd
);

219 
	`˛o£
(
fd_Âga_mem
);

220 
	}
}

222 
	$¥öt_bö
(
uöt8_t
 * 
cmd
, 
size_t
 
Àn
)

224 *
hex_buff
 = 
NULL
;

225 
hex_buff
 = 
	`bö2hex
(
cmd
, 
Àn
);

226 
	`≠∂og
(
LOG_NOTICE
,"%s",
hex_buff
);

227 
	`‰ì
(
hex_buff
);

228 
hex_buff
 = 
NULL
;

229 
	}
}

230 
	$ªad_axi_Âga
(
addªss
)

232 vﬁ©ûê
d©a
 = 0xffffffff;

233 
d©a
 = *((*)(
axi_Âga_addr
 + 
addªss
));

235  
d©a
;

236 
	}
}

238 
	$wrôe_axi_Âga
(
addªss
, 
d©a
)

240 *((*)(
axi_Âga_addr
 + 
addªss
)Ë
d©a
;

241 
	}
}

243 
	$öô_Âga
()

245 
d©a
 = 
RESET_FPGA
 | 
RST
;

247 
	`¥ötf
("\n--- %s\n", 
__FUNCTION__
);

249 
	`wrôe_axi_Âga
(
QN_WRITE_DATA_COMMAND
, 
d©a
);

251 
	`ªad_axi_Âga
(
QN_WRITE_DATA_COMMAND
Ë& 
RST
)

253 
	`cg¶ìp_us
(10000);

256 
	`cg¶ìp_us
(100*1000);

257 
	}
}

259 
	$asic_baud_to_Âga_baud
(
asic_baud
)

261 
asic_baud
)

279 
	`¥ötf
("%s: D⁄'àsuµ‹àASIC baud = %d,Éº‹!!!\n", 
__FUNCTION__
, 
asic_baud
);

282 
	}
}

284 
	$£t_Âga_baud
(
asic_baud
)

286 
Âga_baud
;

287 
ªt
;

288 
vÆue
 = 0;

292 
	`wrôe_axi_Âga
(
BT8D
, 
asic_baud
);

293 
	}
}

296 
	$check_how_m™y_u¨t_d©a_ö_Âga
(
which_u¨t
)

299 
which_u¨t
)

302  ((
	`ªad_axi_Âga
(
RECEIVE_FIFO1_2_STATUS
) >> 16) & 0x000003ff);

305  (
	`ªad_axi_Âga
(
RECEIVE_FIFO1_2_STATUS
) & 0x000003ff);

308  ((
	`ªad_axi_Âga
(
RECEIVE_FIFO3_8_STATUS
) >> 16) & 0x000003ff);

311  (
	`ªad_axi_Âga
(
RECEIVE_FIFO3_8_STATUS
) & 0x000003ff);

314  ((
	`ªad_axi_Âga
(
RECEIVE_FIFO9_10_STATUS
) >> 16) & 0x000003ff);

317  (
	`ªad_axi_Âga
(
RECEIVE_FIFO9_10_STATUS
) & 0x000003ff);

320  ((
	`ªad_axi_Âga
(
RECEIVE_FIFO11_12_STATUS
) >> 16) & 0x000003ff);

323  (
	`ªad_axi_Âga
(
RECEIVE_FIFO11_12_STATUS
) & 0x000003ff);

326  ((
	`ªad_axi_Âga
(
RECEIVE_FIFO13_14_STATUS
) >> 16) & 0x000003ff);

329  (
	`ªad_axi_Âga
(
RECEIVE_FIFO13_14_STATUS
) & 0x000003ff);

332 
	`¥ötf
("%s: Thêu¨t%d i†nŸ suµ‹ãd!!!\n", 
__FUNCTION__
, 
which_u¨t
);

335 
	}
}

338 
	$ªad_u¨t_d©a_ö_Âga
(
which_u¨t
, *
buf
, 
Àngth
)

340 
chaö_ªad_íabÀ_addr
 = 0, 
chaö_ªad_d©a_addr
 = 0;

341 
d©a
 = 0, 
ªad_lo›
 = 0, 
i
 = 0, 
ªt_d©a
 = 0, 
ªt_Àngth
 = 0;

343 
which_u¨t
)

346 
chaö_ªad_íabÀ_addr
 = 
CHAIN1_READ_ENABLE
;

347 
chaö_ªad_d©a_addr
 = 
CHAIN1_READ_DATA
;

351 
chaö_ªad_íabÀ_addr
 = 
CHAIN2_READ_ENABLE
;

352 
chaö_ªad_d©a_addr
 = 
CHAIN2_READ_DATA
;

356 
chaö_ªad_íabÀ_addr
 = 
CHAIN3_READ_ENABLE
;

357 
chaö_ªad_d©a_addr
 = 
CHAIN3_READ_DATA
;

361 
chaö_ªad_íabÀ_addr
 = 
CHAIN8_READ_ENABLE
;

362 
chaö_ªad_d©a_addr
 = 
CHAIN8_READ_DATA
;

366 
chaö_ªad_íabÀ_addr
 = 
CHAIN9_READ_ENABLE
;

367 
chaö_ªad_d©a_addr
 = 
CHAIN9_READ_DATA
;

371 
chaö_ªad_íabÀ_addr
 = 
CHAIN10_READ_ENABLE
;

372 
chaö_ªad_d©a_addr
 = 
CHAIN10_READ_DATA
;

376 
chaö_ªad_íabÀ_addr
 = 
CHAIN11_READ_ENABLE
;

377 
chaö_ªad_d©a_addr
 = 
CHAIN11_READ_DATA
;

381 
chaö_ªad_íabÀ_addr
 = 
CHAIN12_READ_ENABLE
;

382 
chaö_ªad_d©a_addr
 = 
CHAIN12_READ_DATA
;

386 
chaö_ªad_íabÀ_addr
 = 
CHAIN13_READ_ENABLE
;

387 
chaö_ªad_d©a_addr
 = 
CHAIN13_READ_DATA
;

391 
chaö_ªad_íabÀ_addr
 = 
CHAIN14_READ_ENABLE
;

392 
chaö_ªad_d©a_addr
 = 
CHAIN14_READ_DATA
;

396 
	`≠∂og
(
LOG_ERR
,"%s: Thêu¨t%d i†nŸ suµ‹ãd!!!\n", 
__FUNCTION__
);

401 
d©a
 = 0x80000000 | (
Àngth
 & 0x000003ff);

402 
	`wrôe_axi_Âga
(
chaö_ªad_íabÀ_addr
, 
d©a
);

405 
ªad_lo›
 = 
Àngth
 / 4;

406 
i
=0; i<
ªad_lo›
; i++)

408 
ªt_d©a
 = 
	`ªad_axi_Âga
(
chaö_ªad_d©a_addr
);

409 *(
buf
 + 4*
i
 + 0Ë()((
ªt_d©a
 >> 24) & 0x000000ff);

410 *(
buf
 + 4*
i
 + 1Ë()((
ªt_d©a
 >> 16) & 0x000000ff);

411 *(
buf
 + 4*
i
 + 2Ë()((
ªt_d©a
 >> 8) & 0x000000ff);

412 *(
buf
 + 4*
i
 + 3Ë()(
ªt_d©a
 & 0x000000ff);

414 
ªt_Àngth
 = 
ªad_lo›
 * 4;

416 
ªad_lo›
 = 
Àngth
 % 4;

417 if(
ªad_lo›
)

419 
ªt_d©a
 = 
	`ªad_axi_Âga
(
chaö_ªad_d©a_addr
);

420 
ªad_lo›
)

423 *(
buf
 + 4*
i
 + 0Ë()((
ªt_d©a
 >> 24) & 0x000000ff);

424 
ªt_Àngth
 += 1;

428 *(
buf
 + 4*
i
 + 0Ë()((
ªt_d©a
 >> 24) & 0x000000ff);

429 *(
buf
 + 4*
i
 + 1Ë()((
ªt_d©a
 >> 16) & 0x000000ff);

430 
ªt_Àngth
 += 2;

434 *(
buf
 + 4*
i
 + 0Ë()((
ªt_d©a
 >> 24) & 0x000000ff);

435 *(
buf
 + 4*
i
 + 1Ë()((
ªt_d©a
 >> 16) & 0x000000ff);

436 *(
buf
 + 4*
i
 + 2Ë()((
ªt_d©a
 >> 8) & 0x000000ff);

437 
ªt_Àngth
 += 3;

441 
	`≠∂og
(
LOG_ERR
,"%s:Åhêu¨t%dÜe· d©®i†4*NÜígth,Éº‹!!!\n", 
__FUNCTION__
, 
which_u¨t
);

446  
ªt_Àngth
;

447 
	}
}

449 
	$u¨t_£nd
(
which_u¨t
, *
buf
, 
Àngth
)

451 
ªt
=0, 
£nd_cou¡î
=0, 
£nd_lo›
 = 0, 
i
 = 0, 
j
 = 0;

452 
£nd_buf
[160] = {0};

453 
£nd_d©a_Àn
 = 
Àngth
, 
£nd_d©a
 = 0;

454 
chaö_£nd_fifo_°©us_addr
 = 0, 
chaö_£nd_ªady_addr
 = 0, 
chaö_£nd_buf„r_addr
 = 0;

455 
max_Âga_ˇn_£nd_u¨t_d©a_Àn
 = 0, 
bô_shi·_num
 = 0;

457 
	`±hªad_muãx_lock
(&
u¨t_£nd_muãx
[
which_u¨t
]);

459 
which_u¨t
)

462 
bô_shi·_num
 = 24;

463 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN1_3_8_SEND_FIFO_STATUS
;

464 
chaö_£nd_ªady_addr
 = 
CHAIN1_SEND_READY
;

465 
chaö_£nd_buf„r_addr
 = 
CHAIN1_SEND_BUFFER
;

469 
bô_shi·_num
 = 16;

470 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN1_3_8_SEND_FIFO_STATUS
;

471 
chaö_£nd_ªady_addr
 = 
CHAIN2_SEND_READY
;

472 
chaö_£nd_buf„r_addr
 = 
CHAIN2_SEND_BUFFER
;

476 
bô_shi·_num
 = 8;

477 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN1_3_8_SEND_FIFO_STATUS
;

478 
chaö_£nd_ªady_addr
 = 
CHAIN3_SEND_READY
;

479 
chaö_£nd_buf„r_addr
 = 
CHAIN3_SEND_BUFFER
;

483 
bô_shi·_num
 = 0;

484 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN1_3_8_SEND_FIFO_STATUS
;

485 
chaö_£nd_ªady_addr
 = 
CHAIN8_SEND_READY
;

486 
chaö_£nd_buf„r_addr
 = 
CHAIN8_SEND_BUFFER
;

490 
bô_shi·_num
 = 24;

491 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN9_12_SEND_FIFO_STATUS
;

492 
chaö_£nd_ªady_addr
 = 
CHAIN9_SEND_READY
;

493 
chaö_£nd_buf„r_addr
 = 
CHAIN9_SEND_BUFFER
;

497 
bô_shi·_num
 = 16;

498 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN9_12_SEND_FIFO_STATUS
;

499 
chaö_£nd_ªady_addr
 = 
CHAIN10_SEND_READY
;

500 
chaö_£nd_buf„r_addr
 = 
CHAIN10_SEND_BUFFER
;

504 
bô_shi·_num
 = 8;

505 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN9_12_SEND_FIFO_STATUS
;

506 
chaö_£nd_ªady_addr
 = 
CHAIN11_SEND_READY
;

507 
chaö_£nd_buf„r_addr
 = 
CHAIN11_SEND_BUFFER
;

511 
bô_shi·_num
 = 0;

512 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN9_12_SEND_FIFO_STATUS
;

513 
chaö_£nd_ªady_addr
 = 
CHAIN12_SEND_READY
;

514 
chaö_£nd_buf„r_addr
 = 
CHAIN12_SEND_BUFFER
;

518 
bô_shi·_num
 = 24;

519 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN13_14_SEND_FIFO_STATUS
;

520 
chaö_£nd_ªady_addr
 = 
CHAIN13_SEND_READY
;

521 
chaö_£nd_buf„r_addr
 = 
CHAIN13_SEND_BUFFER
;

525 
bô_shi·_num
 = 16;

526 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN13_14_SEND_FIFO_STATUS
;

527 
chaö_£nd_ªady_addr
 = 
CHAIN14_SEND_READY
;

528 
chaö_£nd_buf„r_addr
 = 
CHAIN14_SEND_BUFFER
;

532 
	`≠∂og
(
LOG_ERR
,"%s: Thêu¨t%d i†nŸ suµ‹ãd!!!\n", 
__FUNCTION__
);

536 
£nd_cou¡î
 = 0;

539 
max_Âga_ˇn_£nd_u¨t_d©a_Àn
 = (
	`ªad_axi_Âga
(
chaö_£nd_fifo_°©us_addr
Ë>> 
bô_shi·_num
) & 0x000000ff;

541 if(
max_Âga_ˇn_£nd_u¨t_d©a_Àn
 >
Àngth
)

547 
	`u¶ìp
(3*1000);

548 
£nd_cou¡î
++;

549 if(
£nd_cou¡î
 > 20)

551 
	`±hªad_muãx_u∆ock
(&
u¨t_£nd_muãx
[
which_u¨t
]);

552 
	`≠∂og
(
LOG_ERR
,"%s: u¨t%dálway†do£ÇŸ ha†íough síd fifÿ•a˚, bªak\n", 
__FUNCTION__
, 
which_u¨t
);

559 
£nd_cou¡î
 = 0;

560 
	`ªad_axi_Âga
(
chaö_£nd_ªady_addr
) & 0x80000000)

562 if(
£nd_cou¡î
 > 20)

564 
	`±hªad_muãx_u∆ock
(&
u¨t_£nd_muãx
[
which_u¨t
]);

565 
	`≠∂og
(
LOG_ERR
,"%s: u¨t%dálway†busy, bªak\n", 
__FUNCTION__
, 
which_u¨t
);

568 
£nd_cou¡î
++;

569 
	`u¶ìp
(3*1000);

573 
	`mem˝y
(
£nd_buf
, 
buf
, 
Àngth
);

575 
£nd_lo›
 = 
£nd_d©a_Àn
 / 4;

576 
i
=0; i<
£nd_lo›
; i++)

578 
£nd_d©a
 = (
£nd_buf
[4*
i
 + 0] << 24) | (send_buf[4*i + 1] << 16) | (send_buf[4*i + 2] << 8) | send_buf[4*i + 3];

579 
	`wrôe_axi_Âga
(
chaö_£nd_buf„r_addr
, 
£nd_d©a
);

582 
£nd_lo›
 = 
£nd_d©a_Àn
 % 4;

583 if(
£nd_lo›
)

585 
£nd_lo›
)

588 
£nd_d©a
 = 
£nd_buf
[4*
i
 + 0] << 24;

592 
£nd_d©a
 = (
£nd_buf
[4*
i
 + 0] << 24) | (send_buf[4*i + 1] << 16);

596 
£nd_d©a
 = (
£nd_buf
[4*
i
 + 0] << 24) | (send_buf[4*i + 1] << 16) | (send_buf[4*i + 2] << 8);

600 
	`≠∂og
(
LOG_ERR
,"%s:Åhêu¨t%d sídÜe· d©®i†4*NÜígth,Éº‹!!!\n", 
__FUNCTION__
, 
which_u¨t
);

603 
	`wrôe_axi_Âga
(
chaö_£nd_buf„r_addr
, 
£nd_d©a
);

607 
	`wrôe_axi_Âga
(
chaö_£nd_ªady_addr
, 0x80000000 | 
£nd_d©a_Àn
);

609 
	`±hªad_muãx_u∆ock
(&
u¨t_£nd_muãx
[
which_u¨t
]);

610 
	`cg¶ìp_ms
(5);

611  
£nd_d©a_Àn
;

612 
	}
}

614 
	$u¨t_ª˚ive
(
which_u¨t
, *
buf
, 
buf_Àngth
)

616 
Àn
=0, 
nbyãs
=0, 
nbyãs2
=0, 
nbyãs3
=0, 
asic_ªtu∫_d©a_Àn
 = 0 ;

618 
	`±hªad_muãx_lock
(&
u¨t_ª˚ive_muãx
[
which_u¨t
]);

619 
nbyãs
 = 
	`check_how_m™y_u¨t_d©a_ö_Âga
(
which_u¨t
);

620 
	`cg¶ìp_ms
(10);

621 
nbyãs2
 = 
	`check_how_m™y_u¨t_d©a_ö_Âga
(
which_u¨t
);

622 
	`cg¶ìp_ms
(10);

623 
nbyãs3
 = 
	`check_how_m™y_u¨t_d©a_ö_Âga
(
which_u¨t
);

624 
	`cg¶ìp_ms
(10);

626 if(
nbyãs
 =
nbyãs2
 &&Çbyãs2 =
nbyãs3
)

628 if(
nbyãs
 > 
buf_Àngth
)

630 
nbyãs
 = 
buf_Àngth
;

634 
Àn
 = 
	`ªad_u¨t_d©a_ö_Âga
(
which_u¨t
, 
buf
, 
nbyãs
);

635 if(
Àn
 !
nbyãs
)

639 
	`±hªad_muãx_u∆ock
(&
u¨t_ª˚ive_muãx
[
which_u¨t
]);

640  
Àn
;

645 
	`±hªad_muãx_u∆ock
(&
u¨t_ª˚ive_muãx
[
which_u¨t
]);

648 
	}
}

651 
	$˛ór_u¨t_£nd_fifo
(
which_chaö
)

653 
chaö_£nd_fifo_°©us_addr
 = 0, 
chaö_£nd_ªady_addr
 = 0, 
chaö_£nd_buf„r_addr
 = 0;

654 
max_Âga_ˇn_£nd_u¨t_d©a_Àn
 = 0, 
bô_shi·_num
 = 0, 
£nd_cou¡î
 = 0;

656 
	`±hªad_muãx_lock
(&
u¨t_£nd_muãx
[
which_chaö
]);

658 
which_chaö
)

661 
bô_shi·_num
 = 24;

662 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN1_3_8_SEND_FIFO_STATUS
;

663 
chaö_£nd_ªady_addr
 = 
CHAIN1_SEND_READY
;

664 
chaö_£nd_buf„r_addr
 = 
CHAIN1_SEND_BUFFER
;

668 
bô_shi·_num
 = 16;

669 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN1_3_8_SEND_FIFO_STATUS
;

670 
chaö_£nd_ªady_addr
 = 
CHAIN2_SEND_READY
;

671 
chaö_£nd_buf„r_addr
 = 
CHAIN2_SEND_BUFFER
;

675 
bô_shi·_num
 = 8;

676 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN1_3_8_SEND_FIFO_STATUS
;

677 
chaö_£nd_ªady_addr
 = 
CHAIN3_SEND_READY
;

678 
chaö_£nd_buf„r_addr
 = 
CHAIN3_SEND_BUFFER
;

682 
bô_shi·_num
 = 0;

683 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN1_3_8_SEND_FIFO_STATUS
;

684 
chaö_£nd_ªady_addr
 = 
CHAIN8_SEND_READY
;

685 
chaö_£nd_buf„r_addr
 = 
CHAIN8_SEND_BUFFER
;

689 
bô_shi·_num
 = 24;

690 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN9_12_SEND_FIFO_STATUS
;

691 
chaö_£nd_ªady_addr
 = 
CHAIN9_SEND_READY
;

692 
chaö_£nd_buf„r_addr
 = 
CHAIN9_SEND_BUFFER
;

696 
bô_shi·_num
 = 16;

697 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN9_12_SEND_FIFO_STATUS
;

698 
chaö_£nd_ªady_addr
 = 
CHAIN10_SEND_READY
;

699 
chaö_£nd_buf„r_addr
 = 
CHAIN10_SEND_BUFFER
;

703 
bô_shi·_num
 = 8;

704 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN9_12_SEND_FIFO_STATUS
;

705 
chaö_£nd_ªady_addr
 = 
CHAIN11_SEND_READY
;

706 
chaö_£nd_buf„r_addr
 = 
CHAIN11_SEND_BUFFER
;

710 
bô_shi·_num
 = 0;

711 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN9_12_SEND_FIFO_STATUS
;

712 
chaö_£nd_ªady_addr
 = 
CHAIN12_SEND_READY
;

713 
chaö_£nd_buf„r_addr
 = 
CHAIN12_SEND_BUFFER
;

717 
bô_shi·_num
 = 24;

718 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN13_14_SEND_FIFO_STATUS
;

719 
chaö_£nd_ªady_addr
 = 
CHAIN13_SEND_READY
;

720 
chaö_£nd_buf„r_addr
 = 
CHAIN13_SEND_BUFFER
;

724 
bô_shi·_num
 = 16;

725 
chaö_£nd_fifo_°©us_addr
 = 
CHAIN13_14_SEND_FIFO_STATUS
;

726 
chaö_£nd_ªady_addr
 = 
CHAIN14_SEND_READY
;

727 
chaö_£nd_buf„r_addr
 = 
CHAIN14_SEND_BUFFER
;

731 
	`¥ötf
("%s: Thêu¨t%d i†nŸ suµ‹ãd!!!\n", 
__FUNCTION__
, 
which_chaö
);

732 
	`±hªad_muãx_u∆ock
(&
u¨t_£nd_muãx
[
which_chaö
]);

736 
£nd_cou¡î
 = 0;

739 
max_Âga_ˇn_£nd_u¨t_d©a_Àn
 = (
	`ªad_axi_Âga
(
chaö_£nd_fifo_°©us_addr
Ë>> 
bô_shi·_num
) & 0x000000ff;

740 if(
max_Âga_ˇn_£nd_u¨t_d©a_Àn
 == 0x000000ff)

742 
	`±hªad_muãx_u∆ock
(&
u¨t_£nd_muãx
[
which_chaö
]);

747 
	`¥ötf
("%s: waôög fpg®u¨t%d cÀ¨ síd fifÿ•a˚ ...\n", 
__FUNCTION__
, 
which_chaö
);

748 
	`u¶ìp
(3*1000);

749 
£nd_cou¡î
++;

750 if(
£nd_cou¡î
 > 20)

752 
	`¥ötf
("%s: u¨t%dálway†do£ÇŸ ha†íough síd fifÿ•a˚, bªak\n", 
__FUNCTION__
, 
which_chaö
);

753 
	`±hªad_muãx_u∆ock
(&
u¨t_£nd_muãx
[
which_chaö
]);

754  
max_Âga_ˇn_£nd_u¨t_d©a_Àn
;

758 
	}
}

760 
	$˛ór_u¨t_rx_fifo
(
which_chaö
)

762 
Àn
=0, 
nbyãs
=0;

763 *
buf
 = 
NULL
;

767 
	`±hªad_muãx_lock
(&
u¨t_ª˚ive_muãx
[
which_chaö
]);

769 
nbyãs
 = 
	`check_how_m™y_u¨t_d©a_ö_Âga
(
which_chaö
);

770 if(
nbyãs
 == 0)

772 
	`±hªad_muãx_u∆ock
(&
u¨t_ª˚ive_muãx
[
which_chaö
]);

776 
buf
 = 
	`mÆloc
(
nbyãs
);

777 if(!
buf
)

779 
	`¥ötf
("%s: u¨t%d mÆlo¯buf„∏îr‹\n", 
__FUNCTION__
, 
which_chaö
);

780 
buf
 = 
NULL
;

781 
	`u¶ìp
(500*1000);

782 
	`±hªad_muãx_u∆ock
(&
u¨t_ª˚ive_muãx
[
which_chaö
]);

787 
Àn
 = 
	`ªad_u¨t_d©a_ö_Âga
(
which_chaö
, 
buf
, 
nbyãs
);

788 if(
Àn
 !
nbyãs
)

790 
	`¥ötf
("%s: u¨t%d cÀ¨Ñx fifÿîr‹.Çbyã†%d,Üí = %d\n", 
__FUNCTION__
, 
which_chaö
, 
nbyãs
, 
Àn
);

791 
	`‰ì
(
buf
);

792 
buf
 = 
NULL
;

793 
	`u¶ìp
(10*1000);

794 
	`±hªad_muãx_u∆ock
(&
u¨t_ª˚ive_muãx
[
which_chaö
]);

798 
	`‰ì
(
buf
);

799 
buf
 = 
NULL
;

800 
	`u¶ìp
(10*1000);

801 
	`±hªad_muãx_u∆ock
(&
u¨t_ª˚ive_muãx
[
which_chaö
]);

804 
	}
}

807 
	$hexdump
(c⁄° 
uöt8_t
 *
p
, 
Àn
)

809 
i
, 
addr
;

810 
w‹dÀn
 = ();

811 
v
, 
löe
[
BYTES_PER_LINE
 * 5];

813 
addr
 = 0;ádd∏< 
Àn
;ádd∏+
BYTES_PER_LINE
)

816 
i
 = 0; i < (
löe
); i++)

818 i‡(
i
 =
w‹dÀn
 * 2 + 52 ||

819 
i
 =
w‹dÀn
 * 2 + 69)

821 
löe
[
i
] = '|';

825 i‡(
i
 =
w‹dÀn
 * 2 + 70)

827 
löe
[
i
] = '\0';

831 
löe
[
i
] = ' ';

835 
i
 = 0; i < 
w‹dÀn
 * 2; i++)

837 
v
 = 
addr
 >> ((
w‹dÀn
 * 2 - 
i
 - 1) * 4);

838 
löe
[
i
] = 
nibbÀ
[
v
 & 0xf];

842 
i
 = 0; i < 
BYTES_PER_LINE
; i++)

844 
pos
 = (
w‹dÀn
 * 2Ë+ 3 + (
i
 / 8);

846 i‡(
addr
 + 
i
 >
Àn
)

849 
v
 = 
p
[
addr
 + 
i
];

850 
löe
[
pos
 + (
i
 * 3Ë+ 0] = 
nibbÀ
[
v
 >> 4];

851 
löe
[
pos
 + (
i
 * 3Ë+ 1] = 
nibbÀ
[
v
 & 0xf];

854 
löe
[(
w‹dÀn
 * 2Ë+ 53 + 
i
] =

855 (
v
 >= ' ' && v <= '~') ? v : '.';

858 
	`hex_¥öt
(
löe
);

860 
	}
}

861 
	$CRC5
(*
±r
, 
Àn
)

863 
i
, 
j
, 
k
;

864 
¸c
 = 0x1f;

866 
¸cö
[5] = {1, 1, 1, 1, 1};

867 
¸cout
[5] = {1, 1, 1, 1, 1};

868 
dö
 = 0;

870 
j
 = 0x80;

871 
k
 = 0;

872 
i
 = 0; i < 
Àn
; i++)

874 i‡(*
±r
 & 
j
)

876 
dö
 = 1;

880 
dö
 = 0;

882 
¸cout
[0] = 
¸cö
[4] ^ 
dö
;

883 
¸cout
[1] = 
¸cö
[0];

884 
¸cout
[2] = 
¸cö
[1] ^ crcö[4] ^ 
dö
;

885 
¸cout
[3] = 
¸cö
[2];

886 
¸cout
[4] = 
¸cö
[3];

888 
j
 = j >> 1;

889 
k
++;

890 i‡(
k
 == 8)

892 
j
 = 0x80;

893 
k
 = 0;

894 
±r
++;

896 
	`mem˝y
(
¸cö
, 
¸cout
, 5);

898 
¸c
 = 0;

899 if(
¸cö
[4])

901 
¸c
 |= 0x10;

903 if(
¸cö
[3])

905 
¸c
 |= 0x08;

907 if(
¸cö
[2])

909 
¸c
 |= 0x04;

911 if(
¸cö
[1])

913 
¸c
 |= 0x02;

915 if(
¸cö
[0])

917 
¸c
 |= 0x01;

919  
¸c
;

920 
	}
}

923 c⁄° 
uöt16_t
 
	g¸c_ôu_t_èbÀ
[256] =

960 
ölöe
 
uöt16_t
 
	$¸c_ôu_t_byã
(
uöt16_t
 
¸c
, c⁄° 
uöt8_t
 
d©a
)

962  (
¸c
 << 8Ë^ 
¸c_ôu_t_èbÀ
[((¸¯>> 8Ë^ 
d©a
) & 0xff];

963 
	}
}

966 
	$CRC16
(
¸c
, *
buf„r
, 
Àn
)

968 
Àn
--)

969 
¸c
 = 
	`¸c_ôu_t_byã
(¸c, *
buf„r
++);

970  
¸c
;

971 
	}
}

974 
uöt16_t
 
	$¸c_ôu_t
(
uöt16_t
 
¸c
, c⁄° 
uöt8_t
 *
buf„r
, 
Àn
)

976 
Àn
--)

977 
¸c
 = 
	`¸c_ôu_t_byã
(¸c, *
buf„r
++);

978  
¸c
;

979 
	}
}

984 
	$öô_asic_di•œy_°©us
()

986 
which_chaö
, 
which_asic
, 
off£t
;

988 
which_chaö
=0; which_chaö < 
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

990 if(
dev
.
chaö_exi°
[
which_chaö
])

992 
off£t
 = 0;

993 
which_asic
 = 0; which_asi¯< 
dev
.
chaö_asic_num
[
which_chaö
]; which_asic++)

995 if(
which_asic
 % 8 == 0)

997 i‡––
which_asic
 + 
off£t
 ) > ( 
ASIC_NUM_EACH_CHAIN
 + 16 ))

999 
	`≠∂og
(
LOG_ERR
, "off£t[%d] ERR", (
which_asic
 + 
off£t
));

1001 
dev
.
chaö_asic_°©us_°rög
[
which_chaö
][
which_asic
 + 
off£t
] = ' ';

1002 
off£t
++;

1005 i‡––
which_asic
 + 
off£t
 ) > ( 
ASIC_NUM_EACH_CHAIN
 + 16 ))

1007 
	`≠∂og
(
LOG_ERR
, "off£t[%d] ERR", (
which_asic
 + 
off£t
));

1009 
dev
.
chaö_asic_°©us_°rög
[
which_chaö
][
which_asic
 + 
off£t
] = 'o';

1010 
dev
.
chaö_asic_n⁄˚
[
which_chaö
][
which_asic
] = 0;

1013 i‡––
which_asic
 + 
off£t
 ) > ( 
ASIC_NUM_EACH_CHAIN
 + 16 ))

1015 
	`≠∂og
(
LOG_ERR
, "off£t[%d] ERR", (
which_asic
 + 
off£t
));

1017 
dev
.
chaö_asic_°©us_°rög
[
which_chaö
][
which_asic
 + 
off£t
] = '\0';

1020 
	}
}

1023 
	$ây_öô_chaö
(
uöt8_t
 
which_chaö
, 
bômaö_B3_öfo
 *
öfo
)

1025 if(
dev
.
chaö_exi°
[
which_chaö
])

1027 
ªt
;

1028 
	`≠∂og
(
LOG_NOTICE
, "%s",
__FUNCTION__
);

1030 
dev_öfo
[
which_chaö
].
chaöid
 = which_chain;

1031 
	`≠∂og
(
LOG_NOTICE
, "%†chaöid = %d",
__FUNCTION__
,
dev_öfo
[
which_chaö
].
chaöid
);

1033 
°¨t_ªcv
[
which_chaö
] = 
åue
;

1034 
ªt
 = 
	`thr_öfo_¸óã
(&
öfo
->
u¨t_rx_t
[
which_chaö
], 
NULL
, 
gë_asic_ª•⁄£
, (*)&
dev_öfo
[which_chain]);

1035 if(
	`u∆ikñy
(
ªt
 != 0))

1037 
	`≠∂og
(
LOG_ERR
,"¸óãÑxÑódÅhªad f‹ chaö %d faûed", 
which_chaö
);

1041 
	`≠∂og
(
LOG_ERR
,"¸óãÑxÑódÅhªad f‹ chaö %d ok", 
which_chaö
);

1044 
	`cg¶ìp_ms
(50);

1045 
bômün_B3_öfo_wôh_ödex
 
öfo_wôh_ödex
;

1046 
öfo_wôh_ödex
.
öfo
 = info;

1047 
öfo_wôh_ödex
.
chaö_ödex
 = 
which_chaö
;

1048 
ªt
 = 
	`thr_öfo_¸óã
(&
öfo
->
u¨t_tx_t
[
which_chaö
], 
NULL
, 
B3_fûl_w‹k
, (*)(&
öfo_wôh_ödex
));

1049 
	`cg¶ìp_ms
(200);

1050 if(
	`u∆ikñy
(
ªt
 != 0))

1052 
	`≠∂og
(
LOG_ERR
,"¸óãÅxÑódÅhªad f‹ chaö %d faûed",
which_chaö
);

1056 
	`≠∂og
(
LOG_ERR
,"¸óãÅxÑódÅhªad f‹ chaö %d ok",
which_chaö
);

1059 
	`≠∂og
(
LOG_NOTICE
,"open device over");

1062 
	`cg¶ìp_ms
(10);

1064 
	}
}

1067 
	$ây_öô
(
bômaö_B3_öfo
 *
öfo
)

1069 
uöt8_t
 
which_chaö
 = 0,
ªt
;

1071 
	`≠∂og
(
LOG_NOTICE
, "%s",
__FUNCTION__
);

1073 
which_chaö
 = 0; which_chaö < 
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

1075 
	`ây_öô_chaö
(
which_chaö
, 
öfo
);

1077 
	`cg¶ìp_ms
(10);

1078 
	}
}

1082 
	$B3_wrôe
(
fd
, 
uöt8_t
 *
buf
, 
size_t
 
bufLí
)

1084 
	`u¨t_£nd
(
fd
,
buf
,
bufLí
);

1085 
	}
}

1088 
	$B3_ªad
(
u¨t_fd
, *
buf
, 
size_t
 
MAX_READ_BYTES
)

1090  
	`u¨t_ª˚ive
(
u¨t_fd
,
buf
,
MAX_READ_BYTES
);

1091 
	}
}

1093 
	$check_chaö
()

1095 
which_chaö
=0xff;

1096 
ªt
 = 0;

1097 
Ÿhî_chaö
 = 0;

1099 
	`≠∂og
(
LOG_NOTICE
,"%s", 
__FUNCTION__
);

1101 
dev
.
chaö_num
 = 0;

1103 
ªt
 = 
	`ªad_axi_Âga
(
HASH_ON_PLUG
);

1105 
which_chaö
=0; which_chain < 4; which_chain++)

1107 
which_chaö
)

1110 
Ÿhî_chaö
 = 8;

1113 
Ÿhî_chaö
 = 10;

1116 
Ÿhî_chaö
 = 12;

1119 if((
ªt
 >> 
which_chaö
) & 0x1)

1121 
dev
.
chaö_exi°
[
which_chaö
] = 1;

1122 
dev
.
chaö_exi°
[
Ÿhî_chaö
] = 1;

1123 
dev
.
chaö_asic_num
[
which_chaö
] = 2;

1124 
dev
.
chaö_asic_num
[
Ÿhî_chaö
] = 2;

1125 
dev
.
chaö_num
 += 2;

1126 
	`≠∂og
(
LOG_NOTICE
, "Chaö %dÉxi°ed!", 
which_chaö
, 
Ÿhî_chaö
);

1130 
dev
.
chaö_exi°
[
which_chaö
] = 0;

1131 
dev
.
chaö_exi°
[
Ÿhî_chaö
] = 0;

1134 
	}
}

1137 
	$ª£t_hash_bﬂrd_low
(
which_chaö
)

1139 
	`≠∂og
(
LOG_NOTICE
, "%†%d", 
__FUNCTION__
, 
which_chaö
);

1140 
	`wrôe_axi_Âga
(
RESET_HASH_BOARD
, 0x0 | (1 << 
which_chaö
));

1142 
	}
}

1144 
	$ª£t_hash_bﬂrd_high
(
which_chaö
)

1146 
	`≠∂og
(
LOG_NOTICE
, "%†%d", 
__FUNCTION__
, 
which_chaö
);

1147 
	`wrôe_axi_Âga
(
RESET_HASH_BOARD
, 0x0);

1148 
	}
}

1150 
	$ª£t_Æl_hash_bﬂrd_low
()

1152 
	`≠∂og
(
LOG_NOTICE
, "%†%d", 
__FUNCTION__
);

1153 
	`wrôe_axi_Âga
(
RESET_HASH_BOARD
, 0xffff);

1154 
	}
}

1156 
	$ª£t_Æl_hash_bﬂrd_high
()

1158 
	`≠∂og
(
LOG_NOTICE
, "%†%d", 
__FUNCTION__
);

1159 
	`wrôe_axi_Âga
(
RESET_HASH_BOARD
, 0x0);

1160 
	}
}

1162 
	#RED_LED_DEV_XILINX
 "/sys/˛ass/gpio/gpio37/vÆue"

	)

1163 
	#GREEN_LED_DEV_XILINX
 "/sys/˛ass/gpio/gpio38/vÆue"

	)

1165 
	$£t_Àd
(
boﬁ
 
°›
)

1167 
boﬁ
 
blök
 = 
åue
;

1168 
cmd
[100];

1169 
blök
 = !blink;

1171 if(
°›
)

1173 
	`•rötf
(
cmd
,"echÿ%d > %s", 0,
GREEN_LED_DEV_XILINX
);

1174 
	`sy°em
(
cmd
);

1175 
	`•rötf
(
cmd
,"echÿ%d > %s", (
blök
)?1:0,
RED_LED_DEV_XILINX
);

1176 
	`sy°em
(
cmd
);

1180 
	`•rötf
(
cmd
,"echÿ%d > %s", 0,
RED_LED_DEV_XILINX
);

1181 
	`sy°em
(
cmd
);

1182 
	`•rötf
(
cmd
,"echÿ%d > %s", (
blök
)?1:0,
GREEN_LED_DEV_XILINX
);

1183 
	`sy°em
(
cmd
);

1185 
	}
}

1187 
	$gëNum
(c⁄° * 
buf„r
)

1189 * 
pos
 = 
	`°r°r
(
buf„r
, ":");

1191 *(++
pos
) == ' ');

1192 * 
°¨tPos
 = 
pos
;

1194 *(++
pos
) != ' ');

1195 *
pos
 = '\0';

1197  (
	`©oi
(
°¨tPos
));

1198 
	}
}

1200 
	$gë_Án_•ìd
(*
Án_id
, *
Án_•ìd
)

1202 
ªt
 = -1;

1203 
ªt
 = 
	`ªad_axi_Âga
(
FAN_SPEED
);

1204 *
Án_•ìd
 = 0x000000f‡& 
ªt
;

1205 *
Án_id
 = ()(0x00000007 & (
ªt
 >> 8));

1207  
ªt
;

1208 
	}
}

1210 
	$check_Án_•ìd
()

1212 
i
=0, 
j
=0;

1213 
Án_id
 = 0;

1214 
Án_•ìd
;

1216 
dev
.
Án_•ìd_t›1
 = 0;

1217 
dev
.
Án_•ìd_low1
 = 0;

1218 
j
=0; j < 2; j++)

1220 
i
=0; i < 
BITMAIN_MAX_FAN_NUM
; i++)

1222 
Án_•ìd
 = 0;

1223 
Án_id
 = 0;

1224 if(
	`gë_Án_•ìd
(&
Án_id
, &
Án_•ìd
) != -1)

1226 
dev
.
Án_•ìd_vÆue
[
Án_id
] = 
Án_•ìd
 * 60 * 2;

1227 if((
Án_•ìd
 > 0Ë&& (
dev
.
Án_exi°
[
Án_id
] == 0))

1229 
dev
.
Án_exi°
[
Án_id
] = 1;

1230 
dev
.
Án_num
++;

1231 
dev
.
Án_exi°_m≠
 |(0x1 << 
Án_id
);

1233 if((
Án_•ìd
 =0Ë&& (
dev
.
Án_exi°
[
Án_id
] == 1))

1235 
dev
.
Án_exi°
[
Án_id
] = 0;

1236 
dev
.
Án_num
--;

1237 
dev
.
Án_exi°_m≠
 &!(0x1 << 
Án_id
);

1240 if(
dev
.
Án_•ìd_t›1
 < dev.
Án_•ìd_vÆue
[
Án_id
])

1241 
dev
.
Án_•ìd_t›1
 = dev.
Án_•ìd_vÆue
[
Án_id
];

1242 if((
dev
.
Án_•ìd_low1
 > dev.
Án_•ìd_vÆue
[
Án_id
] && dev.fan_speed_value[fan_id] != 0) || dev.fan_speed_low1 == 0)

1243 
dev
.
Án_•ìd_low1
 = dev.
Án_•ìd_vÆue
[
Án_id
];

1245 
	`cg¶ìp_ms
(50);

1248 
	}
}

1250 
	$£t_PWM
(
pwm_≥r˚¡
)

1252 
ãmp_pwm_≥r˚¡
 = 0;

1253 
ãmp_pwm_≥r˚¡
 = 
pwm_≥r˚¡
;

1254 if(
ãmp_pwm_≥r˚¡
 < 
MIN_PWM_PERCENT
)

1256 
ãmp_pwm_≥r˚¡
 = 
MIN_PWM_PERCENT
;

1259 if(
ãmp_pwm_≥r˚¡
 > 
MAX_PWM_PERCENT
 || 
gMöîSètus_NŸ_ªad_Æl_£ns‹
)

1261 
ãmp_pwm_≥r˚¡
 = 
MAX_PWM_PERCENT
;

1263 
dev
.
pwm_≥r˚¡
 = 
ãmp_pwm_≥r˚¡
;

1266 
uöt32_t
 
•ìd_t
 = (
ãmp_pwm_≥r˚¡
 << 16) | (100 -Åemp_pwm_percent);

1267 
	`wrôe_axi_Âga
(
FAN_CONTROL
, 
•ìd_t
);

1268 
	}
}

1270 
	$£t_PWM_acc‹dög_to_ãm≥øtuª
()

1272 
pwm_≥r˚¡
 = 0, 
ãmp_ch™ge
 = 0;

1274 
ãmp_highe°
 = 
dev
.
ãmp_t›1
;

1275 if(
ãmp_highe°
 >
MAX_FAN_TEMP
)

1280 if(
dev
.
Án_e·
)

1282 if((
dev
.
Án_pwm
 >= 0) && (dev.fan_pwm <= 100))

1284 
	`£t_PWM
(
dev
.
Án_pwm
);

1289 
ãmp_ch™ge
 = 
ãmp_highe°
 - 
œ°_ãm≥øtuª
;

1291 if(
ãmp_highe°
 >
MAX_FAN_TEMP
 ||Åemp_highest == 0)

1293 
	`£t_PWM
(
MAX_PWM_PERCENT
);

1294 
dev
.
Án_pwm
 = 
MAX_PWM_PERCENT
;

1299 if(
ãmp_highe°
 <
MIN_FAN_TEMP
)

1301 
	`£t_PWM
(
MIN_PWM_PERCENT
);

1302 
dev
.
Án_pwm
 = 
MIN_PWM_PERCENT
;

1307 if(
ãmp_ch™ge
 >
TEMP_INTERVAL
 ||Åemp_change <= -TEMP_INTERVAL)

1309 
pwm_≥r˚¡
 = 
MIN_PWM_PERCENT
 + (
ãmp_highe°
 -
MIN_FAN_TEMP
Ë* 
PWM_ADJUST_FACTOR
;

1310 if(
pwm_≥r˚¡
 < 0)

1312 
pwm_≥r˚¡
 = 0;

1314 
dev
.
Án_pwm
 = 
pwm_≥r˚¡
;

1315 
	`≠∂og
(
LOG_NOTICE
,"%s: Së PWMÖî˚¡ : %dÅem∞%d", 
__FUNCTION__
, 
pwm_≥r˚¡
,
ãmp_highe°
);

1316 
	`£t_PWM
(
pwm_≥r˚¡
);

1317 
œ°_ãm≥øtuª
 = 
ãmp_highe°
;

1319 
	}
}

1321 
	$ª£t_chaö
(
bômaö_B3_öfo
 *
öfo
, 
uöt8_t
 
chaö
)

1325 
	}
}

1326 
	$ªcheck_asic_num
(
bômaö_B3_öfo
 *
öfo
, 
uöt8_t
 
chaö
)

1328 
	`±hªad_muãx_lock
(&
ªöô_muãx
);

1329 
	`ª£t_chaö
(
öfo
, 
chaö
);

1330 
	`±hªad_muãx_u∆ock
(&
ªöô_muãx
);

1332 
	`˛ór_ªgi°î_vÆue_buf
();

1333 
	`cg¶ìp_ms
(100);

1335 
	`cg¶ìp_ms
(200);

1336 
	`≠∂og
(
LOG_NOTICE
,"%†DONE!", 
__FUNCTION__
);

1337 
	}
}

1338 
	$bômaö_B3_öô
(
bômaö_B3_öfo
 *
öfo
)

1340 
uöt16_t
 
¸c
 = 0, 
‰eq
 = 0;

1341 
which_chaö
 = 0;

1342 
i
 = 0,
check_asic_times
 = 0, 
ªt
 = 0;

1343 
boﬁ
 
check_asic_Áû
 = 
Ál£
;

1345 
	`bômaö_axi_öô
();

1346 
	`öô_Âga
();

1347 
	`wrôe_axi_Âga
(
HARDWARE_VERSION
, 
	`ªad_axi_Âga
(HARDWARE_VERSIONË| 
DHASH_ENGINE_BYPASS
 | 
HW_TYPE_T9_PLUS
);

1348 
	`£t_Âga_baud
(1);

1350 
	`≠∂og
(
LOG_WARNING
, "%s", 
__FUNCTION__
);

1353 
	`•rötf
(
g_möî_vîsi⁄
, "A.0.0.1");

1354 
dev
.
addrI¡îvÆ
 = 1;

1357 
i
=0; i < 
BITMAIN_MAX_QUEUE_NUM
; i++)

1359 
öfo
->
w‹k_queue
[
i
] = 
NULL
;

1363 
	`check_chaö
();

1365 
	`wrôe_axi_Âga
(
SOCKET_ID
, 0);

1366 
	`ª£t_Æl_hash_bﬂrd_low
();

1367 
	`cg¶ìp_ms
(500);

1368 
	`wrôe_axi_Âga
(
SOCKET_ID
, 7);

1369 
	`cg¶ìp_ms
(500);

1370 
	`ª£t_Æl_hash_bﬂrd_high
();

1371 
	`cg¶ìp_ms
(100);

1373 
	`ây_öô
(
öfo
);

1375 
	`cg¶ìp_ms
(100);

1376 
	`˛ór_ªgi°î_vÆue_buf
();

1377 
	`cg¶ìp_ms
(100);

1378 
	`¶ìp
(10);

1380 
which_chaö
=0; which_chaö<
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

1382 if(
dev
.
chaö_exi°
[
which_chaö
] && 
£nd_hóπ
)

1384 
	`BM1680_£nd_öô
(
which_chaö
,0);

1385 
	`BM1680_£nd_öô
(
which_chaö
,1);

1388 
	`¶ìp
(10);

1390 #ifde‡
UPGRADE


1391 
	`≠∂og
(
LOG_WARNING
, "%†%d: bu∫ög fœsh", 
__FUNCTION__
, 
__LINE__
);

1392 
which_chaö
=0; which_chaö<
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

1394 if(
dev
.
chaö_exi°
[
which_chaö
] && 
£nd_hóπ
)

1396 
	`BM1680_upgøde
(
which_chaö
,0);

1397 
	`cg¶ìp_ms
(10);

1398 
	`BM1680_upgøde
(
which_chaö
,1);

1399 
	`cg¶ìp_ms
(10);

1402 
	`cg¶ìp_ms
(500);

1403 
	`wrôe_axi_Âga
(
SOCKET_ID
, 0);

1404 
	`ª£t_Æl_hash_bﬂrd_low
();

1405 
	`cg¶ìp_ms
(500);

1406 
	`wrôe_axi_Âga
(
SOCKET_ID
, 7);

1407 
	`cg¶ìp_ms
(500);

1408 
	`ª£t_Æl_hash_bﬂrd_high
();

1409 
	`cg¶ìp_ms
(100);

1411 
	`cg¶ìp_ms
(100);

1412 
	`˛ór_ªgi°î_vÆue_buf
();

1413 
	`cg¶ìp_ms
(100);

1416 
which_chaö
=0; which_chaö<
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

1418 if(
dev
.
chaö_exi°
[
which_chaö
] && 
£nd_hóπ
)

1420 
	`BM1680_£nd_öô
(
which_chaö
,0);

1421 
	`BM1680_£nd_öô
(
which_chaö
,1);

1424 
	`¶ìp
(10);

1428 
which_chaö
=0; which_chaö<
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

1430 if(
dev
.
chaö_exi°
[
which_chaö
] && 
£nd_hóπ
)

1432 
	`BM1680_£t_n⁄˚_diff
(
which_chaö
, 0, 
TM
);

1433 
	`BM1680_£t_n⁄˚_diff
(
which_chaö
, 1, 
TM
);

1437 
which_chaö
=0; which_chaö<
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

1439 if(
dev
.
chaö_exi°
[
which_chaö
] && 
£nd_hóπ
)

1441 
	`BM1680_£t_n⁄˚_öãrvÆ
(
which_chaö
, 0, 0, 0xffffffff);

1442 
	`BM1680_£t_n⁄˚_öãrvÆ
(
which_chaö
, 1, 0, 0xffffffff);

1446 
dev
.
Án_e·
 = 
›t_bômaö_Án_˘æ
;

1447 
dev
.
Án_pwm
 = 
›t_bômaö_Án_pwm
;

1448 
	`≠∂og
(
LOG_NOTICE
,"%s: f™_e· : %d f™_pwm : %d", 
__FUNCTION__
, 
dev
.
Án_e·
, dev.
Án_pwm
);

1449 if(
dev
.
Án_e·
)

1451 if((
dev
.
Án_pwm
 >= 0) && (dev.fan_pwm <= 100))

1453 
	`£t_PWM
(
dev
.
Án_pwm
);

1457 
	`£t_PWM_acc‹dög_to_ãm≥øtuª
();

1462 
	`£t_PWM_acc‹dög_to_ãm≥øtuª
();

1466 
ªt
 = 
	`¸óã_bômaö_check_möî_°©us_±hªad
(
öfo
);

1467 if(
ªt
 == -5)

1469  
ªt
;

1472 
ªt
 = 
	`¸óã_bômaö_gë_hash_øã_±hªad
();

1473 if(
ªt
 == -6)

1475  
ªt
;

1478 
ªt
 = 
	`¸óã_bômaö_ªad_ãmp_±hªad
();

1479 if(
ªt
 == -7)

1481  
ªt
;

1484 
ªt
 = 
	`¸óã_bômaö_check_Án_±hªad
();

1485 if(
ªt
 == -8)

1487  
ªt
;

1490 
ªt
 = 
	`¸óã_bômaö_check_°©us_±hªad
();

1491 if(
ªt
 == -9)

1493  
ªt
;

1495 
	`cg¶ìp_ms
(
FANINT
 * 1000);

1496 
	`≠∂og
(
LOG_NOTICE
,"INIT DONE!");

1498 
	`öô_asic_di•œy_°©us
();

1500 
i
=0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

1501 
°¨t_£nd
[
i
] = 
åue
;

1503 
	}
}

1505 * 
	$bômaö_B3_ªöô_chaö
(* 
u§d©a
)

1507 
	`±hªad_dëach
(
	`±hªad_£lf
());

1508 
	`±hªad_muãx_lock
(&
ªöô_muãx
);

1509 
bômün_B3_öfo_wôh_ödex
 *
öfo_wôh_chaö
 = (bômün_B3_öfo_wôh_ödex *)
u§d©a
;

1510 
bômaö_B3_öfo
 *
öfo
 = 
öfo_wôh_chaö
->info;

1511 
uöt8_t
 
chaö
 = 
öfo_wôh_chaö
->
chaö_ödex
;

1513 
°¨t_£nd
[
chaö
] = 
Ál£
;

1514 
°¨t_ªcv
[
chaö
] = 
Ál£
;

1515 
ªöôög
[
chaö
] = 
åue
;

1517 
	`thr_öfo_joö
(&
öfo
->
u¨t_tx_t
[
chaö
]);

1518 
	`thr_öfo_joö
(&
öfo
->
u¨t_rx_t
[
chaö
]);

1519 
	`ª£t_hash_bﬂrd_low
(
chaö
);

1520 
	`cg¶ìp_ms
(100);

1521 
	`ª£t_hash_bﬂrd_high
(
chaö
);

1522 
	`ây_öô_chaö
(
chaö
, 
öfo
);

1524 
	`BM1680_£nd_öô
(
chaö
,0);

1525 
	`BM1680_£nd_öô
(
chaö
,1);

1527 
	`¶ìp
(10);

1529 
	`BM1680_£t_n⁄˚_diff
(
chaö
, 0, 
TM
);

1530 
	`BM1680_£t_n⁄˚_diff
(
chaö
, 1, 
TM
);

1532 
	`BM1680_£t_n⁄˚_öãrvÆ
(
chaö
, 0, 0, 0xffffffff);

1533 
	`BM1680_£t_n⁄˚_öãrvÆ
(
chaö
, 1, 0, 0xffffffff);

1536 
ªöôög
[
chaö
] = 
åue
;

1537 
°¨t_£nd
[
chaö
] = 
åue
;

1538 
	`±hªad_muãx_u∆ock
(&
ªöô_muãx
);

1540 
	}
}

1544 
	#TEMPERATURE_SENSOR


	)

1548 
	#ABOUT_OTHER_FUNCTIONS


	)

1551 
	$suffix_°rög_B3
(
uöt64_t
 
vÆ
, *
buf
, 
size_t
 
bufsiz
, 
sigdigôs
,
boﬁ
 
di•œy
)

1553 c⁄° 
dkûo
 = 1000.0;

1554 c⁄° 
uöt64_t
 
kûo
 = 1000ull;

1555 c⁄° 
uöt64_t
 
mega
 = 1000000ull;

1556 c⁄° 
uöt64_t
 
giga
 = 1000000000ull;

1557 
suffix
[2] = "";

1558 
boﬁ
 
decimÆ
 = 
åue
;

1559 
dvÆ
;

1599 
dvÆ
 = 
vÆ
;

1600 
decimÆ
 = 
Ál£
;

1603 i‡(!
sigdigôs
)

1605 i‡(
decimÆ
)

1606 
	`¢¥ötf
(
buf
, 
bufsiz
, "%.3g%s", 
dvÆ
, 
suffix
);

1608 
	`¢¥ötf
(
buf
, 
bufsiz
, "%d%s", ()
dvÆ
, 
suffix
);

1614 
ndigôs
 = 
sigdigôs
 - 1 - (
dvÆ
 > 0.0 ? 
	`Êo‹
(
	`log10
(dval)) : 0);

1615 if(
di•œy
)

1616 
	`¢¥ötf
(
buf
, 
bufsiz
, "%*.*f%s", 
sigdigôs
 + 1, 
ndigôs
, 
dvÆ
, 
suffix
);

1618 
	`¢¥ötf
(
buf
, 
bufsiz
, "%*.*f", 
sigdigôs
 + 1, 
ndigôs
, 
dvÆ
);

1621 
	}
}

1623 
	$˛ór_ªgi°î_vÆue_buf
()

1625 
	`±hªad_muãx_lock
(&
ªg_muãx
);

1626 
ªg_fifo
.
p_wr
 = 0;

1627 
ªg_fifo
.
p_rd
 = 0;

1628 
ªg_fifo
.
ªg_vÆue_num
 = 0;

1629 
	`±hªad_muãx_u∆ock
(&
ªg_muãx
);

1630 
	}
}

1632 
	$˛ór_n⁄˚_fifo
()

1634 
i
 = 0;

1635 
	`±hªad_muãx_lock
(&
n⁄˚_muãx
);

1636 
n⁄˚_fifo
.
p_wr
 = 0;

1637 
n⁄˚_fifo
.
p_rd
 = 0;

1638 
n⁄˚_fifo
.
n⁄˚_num
 = 0;

1639 
i
=0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

1640 
	`˛ór_u¨t_rx_fifo
(
i
);

1641 
	`±hªad_muãx_u∆ock
(&
n⁄˚_muãx
);

1642 
	}
}

1644 
ölöe
 
	$my_be32íc
(*
µ
, 
uöt32_t
 
x
)

1646 
uöt8_t
 *
p
 = (uöt8_à*)
µ
;

1647 
p
[3] = 
x
 & 0xff;

1648 
p
[2] = (
x
 >> 8) & 0xff;

1649 
p
[1] = (
x
 >> 16) & 0xff;

1650 
p
[0] = (
x
 >> 24) & 0xff;

1651 
	}
}

1655 
	$BM1680_£nd_öô
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
)

1657 
uöt8_t
 
£nd_buf
[
BM1680_INIT_CMD_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_INIT_CMD
, 0x0};

1658 
uöt32_t
 
¸c
 = 0, 
i
 = 0;

1660 
£nd_buf
[
BM1680_CHIP_ADDRESS_ADDR
] = 
which_BM1680
;

1662 
i
=0; i<
BM1680_INIT_CMD_CMD_LEN
 - 1; i++)

1664 
¸c
 +
£nd_buf
[
i
];

1666 
£nd_buf
[
BM1680_INIT_CMD_CMD_LEN
 - 1] = (
uöt8_t
)
¸c
;

1668 * 
£ed_hex
 = 
NULL
;

1669 
£ed_hex
 = 
	`bö2hex
(
£nd_buf
,(send_buf));

1670 
	`≠∂og
(
LOG_NOTICE
,"Síd inôÅÿchaö %dási¯%d %s",
which_u¨t
,
which_BM1680
,
£ed_hex
);

1671 
	`‰ì
(
£ed_hex
);

1673 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_INIT_CMD_CMD_LEN
);

1674 
	}
}

1676 
	$BM1680_£t_n⁄˚_diff
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
, uöt8_à
n⁄˚_diff
)

1678 
uöt8_t
 
£nd_buf
[
BM1680_SET_NONCE_DIFF_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_SET_NONCE_DIFF
, 0x0, 0x0};

1679 
uöt32_t
 
¸c
 = 0, 
i
 = 0;

1681 
£nd_buf
[
BM1680_CHIP_ADDRESS_ADDR
] = 
which_BM1680
;

1682 
£nd_buf
[4] = 
n⁄˚_diff
;

1684 
i
=0; i<
BM1680_SET_NONCE_DIFF_CMD_LEN
 - 1; i++)

1686 
¸c
 +
£nd_buf
[
i
];

1688 
£nd_buf
[
BM1680_SET_NONCE_DIFF_CMD_LEN
 - 1] = (
uöt8_t
)
¸c
;

1690 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_SET_NONCE_DIFF_CMD_LEN
);

1691 
	}
}

1693 
	$BM1680_£t_£ed
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
, uöt8_à*
£ed
)

1696 * 
£ed_hex
 = 
NULL
;

1697 
£ed_hex
 = 
	`bö2hex
(
£ed
,32);

1698 
	`≠∂og
(
LOG_NOTICE
,"Síd sìdÅÿchaö %dási¯%d %s",
which_u¨t
,
which_BM1680
,
£ed_hex
);

1699 
	`‰ì
(
£ed_hex
);

1701 
uöt8_t
 
£nd_buf
[
BM1680_SET_SEED_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_SET_SEED
};

1702 
uöt32_t
 
¸c
 = 0, 
i
 = 0;

1704 
£nd_buf
[2] = 
which_BM1680
;

1705 
£nd_buf
[
BM1680_SET_SEED_CMD_LEN
 - 1] = 0;

1707 
	`mem˝y
(
£nd_buf
 + 4, 
£ed
, 
BM1680_SET_SEED_DATA_LEN
);

1709 
i
=0; i<
BM1680_SET_SEED_CMD_LEN
 - 1; i++)

1711 
¸c
 +
£nd_buf
[
i
];

1713 
£nd_buf
[
BM1680_SET_SEED_CMD_LEN
 - 1] = (
uöt8_t
)
¸c
;

1715 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_SET_SEED_CMD_LEN
);

1716 
	}
}

1718 
	$upd©e_£ed_™d_waô_ok
(
uöt8_t
 
which_u¨t
, uöt8_à*
£ed
)

1720 
	`BM1680_£t_£ed
(
which_u¨t
, 0, 
£ed
);

1721 
	`BM1680_£t_£ed
(
which_u¨t
, 1, 
£ed
);

1722 
	`¶ìp
(15);

1723 
	}
}

1725 
	$BM1680_£t_mesßge
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
, uöt8_à*
mesßge
)

1728 * 
mesßge_hex
 = 
NULL
;

1729 
mesßge_hex
 = 
	`bö2hex
(
mesßge
,137);

1730 
	`≠∂og
(
LOG_NOTICE
,"Síd mesßgêtÿchaö %dási¯%d %s",
which_u¨t
,
which_BM1680
,
mesßge_hex
);

1731 
	`‰ì
(
mesßge_hex
);

1734 
uöt8_t
 
£nd_buf
[
BM1680_SET_MESSAGE_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_SET_MESSAGE
};

1735 
uöt32_t
 
¸c
 = 0, 
i
 = 0;

1737 
£nd_buf
[2] = 
which_BM1680
;

1738 
£nd_buf
[
BM1680_SET_MESSAGE_CMD_LEN
 - 1] = 0;

1740 
	`mem˝y
(
£nd_buf
 + 4, 
mesßge
, 
BM1680_SET_MESSAGE_DATA_LEN
);

1742 
i
=0; i<
BM1680_SET_MESSAGE_CMD_LEN
 - 1; i++)

1744 
¸c
 +
£nd_buf
[
i
];

1746 
£nd_buf
[
BM1680_SET_MESSAGE_CMD_LEN
 - 1] = (
uöt8_t
)
¸c
;

1748 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_SET_MESSAGE_CMD_LEN
);

1749 
	}
}

1751 
	$BM1680_check_°©us
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
)

1753 
uöt8_t
 
£nd_buf
[
BM1680_CHECK_STATUS_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_CHECK_STATUS
, 0x0};

1754 
uöt32_t
 
¸c
 = 0, 
i
 = 0;

1756 
£nd_buf
[2] = 
which_BM1680
;

1757 
i
=0; i<
BM1680_CHECK_STATUS_CMD_LEN
 - 1; i++)

1759 
¸c
 +
£nd_buf
[
i
];

1761 
£nd_buf
[
BM1680_CHECK_STATUS_CMD_LEN
 - 1] = (
uöt8_t
)
¸c
;

1763 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_CHECK_STATUS_CMD_LEN
);

1766 * 
°©us_hex
 = 
NULL
;

1767 
°©us_hex
 = 
	`bö2hex
(
£nd_buf
, 
BM1680_CHECK_STATUS_CMD_LEN
);

1768 
	`≠∂og
(
LOG_NOTICE
, "Síd sètu†tÿchaö %dási¯%d %s",
which_u¨t
, 
which_BM1680
, 
°©us_hex
);

1769 
	`‰ì
(
°©us_hex
);

1771 
	}
}

1773 
	$BM1680_£t_n⁄˚_öãrvÆ
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
, 
uöt64_t
 
°¨t_n⁄˚
, uöt64_à
íd_n⁄˚
)

1775 
uöt8_t
 
£nd_buf
[
BM1680_SET_NONCE_INTERVAL_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_SET_NONCE_INTERVAL
};

1776 
uöt32_t
 
¸c
 = 0, 
i
 = 0;

1778 
£nd_buf
[2] = 
which_BM1680
;

1779 
£nd_buf
[
BM1680_SET_NONCE_INTERVAL_CMD_LEN
 - 1] = 0;

1781 
	`mem˝y
(
£nd_buf
 + 4, &
°¨t_n⁄˚
, (
uöt64_t
));

1782 
	`mem˝y
(
£nd_buf
 + 4 + (
uöt64_t
), &
íd_n⁄˚
, (uint64_t));

1784 
i
=0; i<
BM1680_SET_NONCE_INTERVAL_CMD_LEN
 - 1; i++)

1786 
¸c
 +
£nd_buf
[
i
];

1788 
£nd_buf
[
BM1680_SET_NONCE_INTERVAL_CMD_LEN
 - 1] = (
uöt8_t
)
¸c
;

1790 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_SET_NONCE_INTERVAL_CMD_LEN
);

1791 
	}
}

1793 
	$BM1680_gë_bﬂrd_ãm≥øtuª
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
)

1795 
uöt8_t
 
£nd_buf
[
BM1680_GET_BOARD_TEMPERATURE_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_GET_BOARD_TEMPERATURE
, 0x0};

1796 
uöt32_t
 
¸c
 = 0, 
i
 = 0;

1798 
£nd_buf
[2] = 
which_BM1680
;

1800 
i
=0; i<
BM1680_GET_BOARD_TEMPERATURE_CMD_LEN
 - 1; i++)

1802 
¸c
 +
£nd_buf
[
i
];

1804 
£nd_buf
[
BM1680_GET_BOARD_TEMPERATURE_CMD_LEN
 - 1] = (
uöt8_t
)
¸c
;

1807 * 
mesßge_hex
 = 
NULL
;

1808 
mesßge_hex
 = 
	`bö2hex
(
£nd_buf
,(send_buf));

1809 
	`≠∂og
(
LOG_NOTICE
,"Gë PCBÅem∞‰om chaö %dási¯%d %s",
which_u¨t
,
which_BM1680
,
mesßge_hex
);

1810 
	`‰ì
(
mesßge_hex
);

1813 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_GET_BOARD_TEMPERATURE_CMD_LEN
);

1814 
	}
}

1816 
	$BM1680_gë_asic_ãm≥øtuª
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
)

1818 
uöt8_t
 
£nd_buf
[
BM1680_GET_ASIC_TEMPERATURE_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_GET_ASIC_TEMPERATURE
, 0x0};

1819 
uöt32_t
 
¸c
 = 0, 
i
 = 0;

1821 
£nd_buf
[2] = 
which_BM1680
;

1823 
i
=0; i<
BM1680_GET_ASIC_TEMPERATURE_CMD_LEN
 - 1; i++)

1825 
¸c
 +
£nd_buf
[
i
];

1827 
£nd_buf
[
BM1680_GET_ASIC_TEMPERATURE_CMD_LEN
 - 1] = (
uöt8_t
)
¸c
;

1829 * 
mesßge_hex
 = 
NULL
;

1830 
mesßge_hex
 = 
	`bö2hex
(
£nd_buf
,(send_buf));

1831 
	`≠∂og
(
LOG_NOTICE
,"Gë CHIPÅem∞‰om chaö %dási¯%d %s",
which_u¨t
,
which_BM1680
,
mesßge_hex
);

1832 
	`‰ì
(
mesßge_hex
);

1836 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_GET_ASIC_TEMPERATURE_CMD_LEN
);

1837 
	}
}

1839 
	$BM1680_upgøde_bö_fûe_wôhout_ídög
(
which_u¨t
, 
which_BM1680
, *
d©a
)

1841 
£nd_buf
[
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING
};

1842 *
ª˚ive_buf
 = 
NULL
;

1843 
¸c
 = 0, 
ª˚ive_d©a_Àn
 = 0, 
i
 = 0;

1844 
ª˚ive_d©a_hódî_poöãr
 = 0, 
ªt
 = 0;

1846 
£nd_buf
[2] = 
which_BM1680
;

1847 
£nd_buf
[
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN
 - 1] = 0;

1849 
i
=0; i<
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_DATA_LEN
; i++)

1851 
£nd_buf
[4 + 
i
] = 
d©a
[i];

1854 
i
=0; i<
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN
 - 1; i++)

1856 
¸c
 +
£nd_buf
[
i
];

1858 
£nd_buf
[
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN
 - 1] = ()
¸c
;

1860 
	`cg¶ìp_ms
(5);

1861 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN
/2);

1862 
	`cg¶ìp_ms
(5);

1863 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
 + 
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN
/2, BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN - BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN/2);

1864 
	}
}

1866 
	$BM1680_upgøde_bö_fûe_wôh_ídög
(
which_u¨t
, 
which_BM1680
, *
d©a
, 
d©a_Àn
)

1868 
£nd_buf
[
BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN
] = {
BM1680_SEND_CMD_HEADER1
, 
BM1680_SEND_CMD_HEADER2
, 0, 
BM1680_UPGRADE_BIN_FILE_WITH_ENDING
};

1869 *
ª˚ive_buf
 = 
NULL
;

1870 
¸c
 = 0, 
ª˚ive_d©a_Àn
 = 0, 
i
 = 0;

1871 
ª˚ive_d©a_hódî_poöãr
 = 0, 
ªt
 = 0;

1874 
	`mem£t
(
£nd_buf
, 0, 
BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN
);

1875 
£nd_buf
[0] = 
BM1680_SEND_CMD_HEADER1
;

1876 
£nd_buf
[1] = 
BM1680_SEND_CMD_HEADER2
;

1877 
£nd_buf
[2] = 
which_BM1680
;

1878 
£nd_buf
[3] = 
BM1680_UPGRADE_BIN_FILE_WITH_ENDING
;

1879 
£nd_buf
[
BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN
 - 1] = 0;

1881 
i
=0; i<
d©a_Àn
; i++)

1883 
£nd_buf
[4 + 
i
] = 
d©a
[i];

1886 
i
=0; i<
BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN
 - 1; i++)

1888 
¸c
 +
£nd_buf
[
i
];

1890 
£nd_buf
[
BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN
 - 1] = ()
¸c
;

1892 
	`cg¶ìp_ms
(5);

1893 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
, 
BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN
/2);

1894 
	`cg¶ìp_ms
(5);

1895 
	`u¨t_£nd
(
which_u¨t
, 
£nd_buf
 + 
BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN
/2, BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN - BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN/2);

1897 
	}
}

1900 
	$BM1680_upgøde
(
which_u¨t
, 
which_BM1680
)

1902 
i
=0, 
îr‹_cou¡î
 = 0;

1903 
upgøde_fûe_size
 = 0;

1904 
ªt
 = 0;

1905 *
upgøde_fûe_buf
 = 
NULL
;

1906 
FILE
 *
upgøde_fûe
;

1907 
°©
 
°©buf
;

1908 
	`≠∂og
(
LOG_NOTICE
,"Upd©êChaö %d Asic%d", 
which_u¨t
, 
which_BM1680
);

1909 
	`°©
(
BM1680_UPGRADE_FILE
, &
°©buf
);

1910 
upgøde_fûe_size
 = 
°©buf
.
°_size
;

1912 
upgøde_fûe_buf
 = 
	`mÆloc
(
upgøde_fûe_size
+1);

1913 if(!
upgøde_fûe_buf
)

1915 
	`¥ötf
("\n!!! %s: mÆlo¯upgøde_fûe_bu‡Áûed!\n\n", 
__FUNCTION__
);

1919 
upgøde_fûe
 = 
	`f›í
(
BM1680_UPGRADE_FILE
, "r");

1920 if(!
upgøde_fûe
)

1922 
	`¥ötf
("\n!!! %s: o≥¿BM1680_UPGRADE_FILE faûed\n\n", 
__FUNCTION__
);

1923 
	`f˛o£
(
upgøde_fûe
);

1924 
	`‰ì
(
upgøde_fûe_buf
);

1928 
	`f£ek
(
upgøde_fûe
, 0, 
SEEK_SET
);

1929 
	`‰ód
(
upgøde_fûe_buf
, 1, 
upgøde_fûe_size
+1, 
upgøde_fûe
);

1931 
i
=0; i<
upgøde_fûe_size
/
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_DATA_LEN
; i++)

1933 
	`BM1680_upgøde_bö_fûe_wôhout_ídög
(
which_u¨t
, 
which_BM1680
, 
upgøde_fûe_buf
 + 
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_DATA_LEN
*
i
);

1936 if(
upgøde_fûe_size
 % 
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_DATA_LEN
)

1938 
	`BM1680_upgøde_bö_fûe_wôh_ídög
(
which_u¨t
, 
which_BM1680
, 
upgøde_fûe_buf
 + 
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_DATA_LEN
*
i
, 
upgøde_fûe_size
 % BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_DATA_LEN);

1940 
	`≠∂og
(
LOG_NOTICE
,"Upd©êChaö %d Asic%dÉnd", 
which_u¨t
, 
which_BM1680
);

1941 
	`‰ì
(
upgøde_fûe_buf
);

1942 
	}
}

1951 
__ölöe
 
	$Êù_swab
(*
de°_p
, c⁄° *
§c_p
, 
Àngth
)

1953 
uöt32_t
 *
de°
 = 
de°_p
;

1954 c⁄° 
uöt32_t
 *
§c
 = 
§c_p
;

1955 
i
;

1957 
i
 = 0; i < 
Àngth
/4; i++)

1958 
de°
[
i
] = 
	`swab32
(
§c
[i]);

1959 
	}
}

1961 
	#ABOUT_CGMINER_PTHREAD


	)

1965 *
	$bômaö_sˇnhash
(*
¨g
)

1967 
thr_öfo
 *
thr
 = (thr_öfo*)
¨g
;

1968 
cgpu_öfo
 *
bômaö_B3
 = 
thr
->
cgpu
;

1969 
bômaö_B3_öfo
 *
öfo
 = 
bômaö_B3
->
devi˚_d©a
;

1970 
timevÆ
 
cuºít
;

1971 
uöt8_t
 
n⁄˚_bö
[4],
¸c_check
,
which_asic_n⁄˚
,
which_c‹e_n⁄˚
;

1972 
uöt32_t
 
i
,
k
, *
w‹k_n⁄˚
=
NULL
;

1973 
uöt64_t
 
n⁄˚
;

1974 
submôfuŒ
 = 0;

1975 
boﬁ
 
submôn⁄˚ok
 = 
åue
;

1976 
w‹k_id
 = 0, 
chaö_id
 = 0, 
n⁄˚_diff
 = 0, 
n⁄˚_¸c5
 = 0,
tm
 = 0;

1977 
pw‹kd©a
[128]{0}, 
hash1
[32]= {0};

1978 
ídünd©a
[32]= {0};

1979 *
ob_hex
=
NULL
;

1980 
uöt64_t
 
ªt
 = 0;

1982 
w‹k
 *w‹k = 
NULL
;

1983 
	`cgtime
(&
cuºít
);

1984 
h
 = 0;

1985 
	`±hªad_muãx_lock
(&
n⁄˚_muãx
);

1986 
	`cg_æock
(&
öfo
->
upd©e_lock
);

1988 
n⁄˚_fifo
.
n⁄˚_num
)

1990 
n⁄˚_fifo
.
n⁄˚_num
--;

1992 
n⁄˚
 = (
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_rd
].nonce);

1993 
w‹k_id
 = 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_rd
].
wc
;

1994 
chaö_id
 = 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_rd
].
chaöid
;

1995 
tm
 = 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_rd
].tm;

1996 
	`±hªad_muãx_lock
(&
w‹k_queue_muãx
);

1997 if(
öfo
->
w‹k_queue
[
w‹k_id
] !
NULL
)

1998 
w‹k
 = 
	`c›y_w‹k
(
öfo
->
w‹k_queue
[
w‹k_id
]);

1999 
	`±hªad_muãx_u∆ock
(&
w‹k_queue_muãx
);

2000 if(
w‹k
)

2002 if(
tm
 >
w‹k
->
btm_dff
)

2004 
	`≠∂og
(
LOG_NOTICE
,"diff:%d %d",
w‹k
->
btm_dff
,
tm
);

2005 
	`submô_n⁄˚_dúe˘
(
thr
, 
w‹k
, 
n⁄˚
);

2007 
h
++;

2008 
h_óch_chaö
[
chaö_id
] +(1<<
TM
);

2009 
which_asic_n⁄˚
 = 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_rd
].
which_asic
;

2011 
	`≠∂og
(
LOG_DEBUG
,"%s: chaö %d which_asic_n⁄˚ %d ", 
__FUNCTION__
, 
chaö_id
, 
which_asic_n⁄˚
);

2013 i‡(–
chaö_id
 > 
BITMAIN_MAX_CHAIN_NUM
 ) || (!
dev
.
chaö_exi°
[chain_id]))

2015 
	`≠∂og
(
LOG_ERR
, "ChaöID Cau£ Eº‹! ChaöID:[%d]", 
chaö_id
);

2016 
¸c_îr‹
;

2019 i‡–
which_asic_n⁄˚
 >= 2)

2021 
	`≠∂og
(
LOG_DEBUG
, "Which N⁄˚ Cau£ Eº![%d] %08x", 
which_asic_n⁄˚
,
n⁄˚
);

2022 
¸c_îr‹
;

2025 
dev
.
chaö_asic_n⁄˚
[
chaö_id
][
which_asic_n⁄˚
]++;

2027 
	`cg_logw‹k
(
w‹k
, 
n⁄˚_bö
, 
submôn⁄˚ok
);

2028 
	`‰ì_w‹k
(
w‹k
);

2033 
	`≠∂og
(
LOG_ERR
, "%†%d: w‹k %02xÇŸ födÉº‹", 
bômaö_B3
->
drv
->
«me
, bômaö_B3->
devi˚_id
, 
w‹k_id
);

2035 
¸c_îr‹
:

2036 if(
n⁄˚_fifo
.
p_rd
 < 
MAX_NONCE_NUMBER_IN_FIFO
)

2038 
n⁄˚_fifo
.
p_rd
++;

2042 
n⁄˚_fifo
.
p_rd
 = 0;

2046 
	`cg_ru∆ock
(&
öfo
->
upd©e_lock
);

2047 
	`±hªad_muãx_u∆ock
(&
n⁄˚_muãx
);

2048 
	`cg¶ìp_ms
(1);

2050 
h
 = h * (1<<
TM
);

2051  
h
;

2052 
	}
}

2054 * 
	$check_Án_thr
(*
¨g
)

2057 
i
=0, 
j
=0;

2058 
Án_id
 = 0;

2059 
Án_•ìd
;

2063 
dev
.
Án_•ìd_t›1
 = 0;

2064 
dev
.
Án_•ìd_low1
 = 0;

2065 
j
=0; j < 2; j++)

2067 
i
=0; i < 
BITMAIN_MAX_FAN_NUM
; i++)

2069 
Án_•ìd
 = 0;

2070 
Án_id
 = 0;

2071 if(
	`gë_Án_•ìd
(&
Án_id
, &
Án_•ìd
) != -1)

2073 
dev
.
Án_•ìd_vÆue
[
Án_id
] = 
Án_•ìd
 * 60 * 2;

2074 if((
Án_•ìd
 > 0Ë&& (
dev
.
Án_exi°
[
Án_id
] == 0))

2076 
dev
.
Án_exi°
[
Án_id
] = 1;

2077 
dev
.
Án_num
++;

2078 
dev
.
Án_exi°_m≠
 |(0x1 << 
Án_id
);

2080 if((
Án_•ìd
 =0Ë&& (
dev
.
Án_exi°
[
Án_id
] == 1))

2082 
dev
.
Án_exi°
[
Án_id
] = 0;

2083 
dev
.
Án_num
--;

2084 
dev
.
Án_exi°_m≠
 &!(0x1 << 
Án_id
);

2086 if(
dev
.
Án_•ìd_t›1
 < dev.
Án_•ìd_vÆue
[
Án_id
])

2087 
dev
.
Án_•ìd_t›1
 = dev.
Án_•ìd_vÆue
[
Án_id
];

2088 if((
dev
.
Án_•ìd_low1
 > dev.
Án_•ìd_vÆue
[
Án_id
] && dev.fan_speed_value[fan_id] != 0) || dev.fan_speed_low1 == 0)

2089 
dev
.
Án_•ìd_low1
 = dev.
Án_•ìd_vÆue
[
Án_id
];

2091 
	`cg¶ìp_ms
(50);

2096 
	`¶ìp
(
FANINT
);

2098 
	}
}

2100 
	$¸óã_bômaö_check_Án_±hªad
()

2102 
check_Án_id
 = 
	`ˇŒoc
(1,(
thr_öfo
));

2103 if(
	`thr_öfo_¸óã
(
check_Án_id
, 
NULL
, 
check_Án_thr
, NULL))

2105 
	`≠∂og
(
LOG_DEBUG
,"%s: cª©êthªad f‹ check möî_°©us", 
__FUNCTION__
);

2108 
	`±hªad_dëach
(
check_Án_id
->
±h
);

2109 
	`cg¶ìp_ms
(500);

2110 
	}
}

2112 
	gÁn_îr‹_num
 = 0;

2113 
ölöe
 
	$check_Án_ok
()

2115 
ªt
 = 0;

2116 if(
dev
.
Án_num
 < 
MIN_FAN_NUM
)

2118 
ªt
 = 1;

2119 
îr
;

2121 if(
dev
.
Án_•ìd_vÆue
[0] < (
FAN1_MAX_SPEED
 * dev.
Án_pwm
 / 130))

2123 
ªt
 = 2;

2124 
îr
;

2126 if(
dev
.
Án_•ìd_vÆue
[1] < (
FAN2_MAX_SPEED
 * dev.
Án_pwm
 / 130))

2128 
ªt
 = 3;

2129 
îr
;

2131 if((
dev
.
pwm_≥r˚¡
 =100Ë&& (dev.
Án_•ìd_vÆue
[0] < (
FAN1_MAX_SPEED
 * 90 / 100Ë|| dev.Án_•ìd_vÆue[1] < (
FAN2_MAX_SPEED
 * 90 / 100)))

2133 
ªt
 = 4;

2134 
îr
;

2136 
îr
:

2137 if(
ªt
 != 0)

2139 
Án_îr‹_num
++;

2140 
	`≠∂og
(
LOG_DEBUG
, "Án_îr‹_num:%d f™_num %d f™_pwm %d f™_•ìd_vÆue[0] %d f™_•ìd_vÆue[1] %d", 
Án_îr‹_num
,
dev
.
Án_num
,dev.
Án_pwm
,dev.
Án_•ìd_vÆue
[0],dev.fan_speed_value[1]);

2141 if(
Án_îr‹_num
 > (
FANINT
 * 10))

2142  
ªt
;

2150 
Án_îr‹_num
 = 0;

2153 
	}
}

2155 *
	$check_möî_°©us
(*
¨g
)

2157 
bômaö_B3_öfo
 *
öfo
 = (bômaö_B3_öfo*)
¨g
;

2158 
timevÆ
 
tv_°¨t
 = {0, 0}, 
diff
 = {0, 0}, 
tv_íd
,
tv_£nd
;

2159 
ghs
 = 0;

2160 
i
 = 0, 
j
 = 0;

2161 
	`cgtime
(&
tv_íd
);

2162 
	`cgtime
(&
tv_£nd
);

2163 
	`c›y_time
(&
tv_°¨t
, &
tv_íd
);

2164 
	`c›y_time
(&
tv_£nd_job
,&
tv_£nd
);

2166 
asic_num
 = 0, 
îr‹_asic
 = 0, 
avg_num
 = 0;

2167 
which_chaö
, 
which_asic
, 
which_£ns‹
;

2168 
off£t
 = 0;

2169 
Án_ªt
 = 0;

2170 
low_hash_times
 = 0;

2171 
bômün_B3_öfo_wôh_ödex
 
öfo_wôh_ödex
[
BITMAIN_MAX_CHAIN_NUM
];

2172 
±hªad_t
 
ªöô_id
[
BITMAIN_MAX_CHAIN_NUM
];

2176 
diff
.
tv_£c
 = 0;

2177 
diff
.
tv_u£c
 = 0;

2178 
	`cgtime
(&
tv_íd
);

2179 
	`timîsub
(&
tv_íd
, &
tv_°¨t
, &
diff
);

2182 i‡(
diff
.
tv_£c
 > 120)

2184 
asic_num
 = 0, 
îr‹_asic
 = 0, 
avg_num
 = 0;

2186 
which_chaö
=0; which_chaö<
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

2188 if(
dev
.
chaö_exi°
[
which_chaö
])

2190 
asic_num
 +
dev
.
chaö_asic_num
[
which_chaö
];

2191 
which_asic
=0; which_asic<
dev
.
chaö_asic_num
[
which_chaö
]; which_asic++)

2193 
avg_num
 +
dev
.
chaö_asic_n⁄˚
[
which_chaö
][
which_asic
];

2194 
	`≠∂og
(
LOG_DEBUG
,"%s: chaö %dási¯%dásic_n⁄˚_num %d", 
__FUNCTION__
, 
which_chaö
,
which_asic
,
dev
.
chaö_asic_n⁄˚
[which_chain][which_asic]);

2198 i‡(
asic_num
 != 0)

2200 
	`≠∂og
(
LOG_DEBUG
,"%s:ávg_num %dásic_num %d", 
__FUNCTION__
, 
avg_num
,
asic_num
);

2201 
avg_num
 =ávg_num / 
asic_num
 / 8;

2205 
avg_num
 = 1;

2208 
which_chaö
=0; which_chaö<
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

2210 if(
dev
.
chaö_exi°
[
which_chaö
])

2212 
off£t
 = 0;

2214 
which_asic
=0; which_asic<
dev
.
chaö_asic_num
[
which_chaö
]; which_asic++)

2216 if(
which_asic
 % 8 == 0)

2218 i‡––
which_asic
 + 
off£t
 ) > (
ASIC_NUM_EACH_CHAIN
 + 16) )

2219 
	`≠∂og
(
LOG_ERR
, "asi¯numÉº![%d]", (
which_asic
 + 
off£t
));

2220 
dev
.
chaö_asic_°©us_°rög
[
which_chaö
][
which_asic
+
off£t
] = ' ';

2221 
off£t
++;

2224 if(
dev
.
chaö_asic_n⁄˚
[
which_chaö
][
which_asic
]>
avg_num
)

2226 i‡––
which_asic
 +
off£t
 ) > (
ASIC_NUM_EACH_CHAIN
 + 16) )

2227 
	`≠∂og
(
LOG_ERR
, "asi¯numÉº![%d]", (
which_asic
 + 
off£t
));

2228 
dev
.
chaö_asic_°©us_°rög
[
which_chaö
][
which_asic
+
off£t
] = 'o';

2232 i‡––
which_asic
 + 
off£t
 ) > (
ASIC_NUM_EACH_CHAIN
 + 16) )

2233 
	`≠∂og
(
LOG_ERR
, "asi¯numÉº![%d]", (
which_asic
 + 
off£t
));

2234 
dev
.
chaö_asic_°©us_°rög
[
which_chaö
][
which_asic
+
off£t
] = 'x';

2235 
îr‹_asic
++;

2238 i‡––
which_asic
 ) > (
ASIC_NUM_EACH_CHAIN
 + 16) )

2239 
	`≠∂og
(
LOG_ERR
, "asi¯numÉº![%d]", (
which_asic
));

2240 
dev
.
chaö_asic_n⁄˚
[
which_chaö
][
which_asic
] = 0;

2243 i‡––
which_asic
 + 
off£t
 ) > (
ASIC_NUM_EACH_CHAIN
 + 16) )

2244 
	`≠∂og
(
LOG_ERR
, "asi¯numÉº![%d]", (
which_asic
 + 
off£t
));

2245 
dev
.
chaö_asic_°©us_°rög
[
which_chaö
][
which_asic
+
off£t
] = '\0';

2246 if(
√ed_ªöô
[
which_chaö
])

2248 
öfo_wôh_ödex
[
which_chaö
].
öfo
 = info;

2249 
öfo_wôh_ödex
[
which_chaö
].
chaö_ödex
 = which_chain;

2250 
	`±hªad_¸óã
(&
ªöô_id
[
which_chaö
], 
NULL
, 
bômaö_B3_ªöô_chaö
, (*)(&
öfo_wôh_ödex
[which_chain]));

2251 
gMöîSètus_Low_Hashøã
 = 
åue
;

2255 
gMöîSètus_Low_Hashøã
 = 
Ál£
;

2260 
	`c›y_time
(&
tv_°¨t
, &
tv_íd
);

2264 if(
dev
.
ãmp_t›1
 > 
MAX_TEMP
)

2266 
gMöîSètus_High_Temp_Cou¡î
++;

2267 if(
gMöîSètus_High_Temp_Cou¡î
 > 2)

2269 
gMöîSètus_High_Temp
 = 
åue
;

2270 
	`≠∂og
(
LOG_ERR
,"%s:Åhêãm≥øtuª %d i†toÿhigh, clo£ PICándÇìdÑeboŸ!!!", 
__FUNCTION__
, 
dev
.
ãmp_t›1
);

2274 
	`≠∂og
(
LOG_ERR
, "Tem≥øtuª %d i†highîÅh™ 85'C f‹ %dÅime, PWM i†%d", 
dev
.
ãmp_t›1
, 
gMöîSètus_High_Temp_Cou¡î
, dev.
pwm_≥r˚¡
);

2279 
gMöîSètus_High_Temp_Cou¡î
 = 0;

2280 
gMöîSètus_High_Temp
 = 
Ál£
;

2284 
Án_ªt
 = 0;

2285 if(
Án_ªt
 != 0)

2287 
gF™_Eº‹
 = 
åue
;

2288 
Án_ªt
)

2291 
	`≠∂og
(
LOG_ERR
, "F™ Eº! DißbÀ PIC! F™Çum i†%d",
dev
.
Án_num
);

2294 
	`≠∂og
(
LOG_ERR
, "F™ Eº! DißbÀ PIC! F™1 s≥ed i†toÿlow %dÖwm %d ",
dev
.
Án_•ìd_vÆue
[0],dev.
pwm_≥r˚¡
);

2297 
	`≠∂og
(
LOG_ERR
, "F™ Eº! DißbÀ PIC! F™2 s≥ed i†toÿlow %dÖwm %d ",
dev
.
Án_•ìd_vÆue
[1],dev.
pwm_≥r˚¡
);

2300 
	`≠∂og
(
LOG_ERR
, "F™ Eº! DißbÀ PIC! F™1:%d F™2:%dÖwm %d",
dev
.
Án_•ìd_vÆue
[0],dev.Án_•ìd_vÆue[1],dev.
pwm_≥r˚¡
);

2306 
gF™_Eº‹
 = 
Ál£
;

2309 if(
gMöîSètus_Low_Hashøã
 || 
gMöîSètus_High_Temp
 || 
gF™_Eº‹
 || 
gMöîSètus_NŸ_ªad_Æl_£ns‹
)

2312 if((!
⁄˚_îr‹
Ë&& (
gMöîSètus_High_Temp
 || 
gF™_Eº‹
 ))

2314 
°©us_îr‹
 = 
åue
;

2315 
⁄˚_îr‹
 = 
åue
;

2316 
	`wrôe_axi_Âga
(
SOCKET_ID
, 7);

2321 
°›
 = 
Ál£
;

2322 
°©us_îr‹
 = 
Ál£
;

2323 i‡(
⁄˚_îr‹
)

2325 
°›
 = 
åue
;

2326 
°©us_îr‹
 = 
åue
;

2329 
	`£t_Àd
(
°›
);

2330 
	`cg¶ìp_ms
(1000);

2332 
	}
}

2335 
	$¸óã_bômaö_check_möî_°©us_±hªad
(
bômaö_B3_öfo
 *
öfo
)

2337 
check_möî_°©us_id
 = 
	`ˇŒoc
(1,(
thr_öfo
));

2338 if(
	`thr_öfo_¸óã
(
check_möî_°©us_id
, 
NULL
, 
check_möî_°©us
, 
öfo
))

2340 
	`≠∂og
(
LOG_DEBUG
,"%s: cª©êthªad f‹ check möî_°©us", 
__FUNCTION__
);

2343 
	`±hªad_dëach
(
check_möî_°©us_id
->
±h
);

2344 
	`cg¶ìp_ms
(500);

2345 
	}
}

2347 *
	$gë_hash_øã
()

2349 
uöt32_t
 
which_chaö
 = 0, 
i
 = 0;

2350 
timevÆ
 
ﬁd_h
, 
√w_h
, 
diff
;

2351 
óch_chaö_h
[
BITMAIN_MAX_CHAIN_NUM
][10] = {{0}};

2352 
óch_chaö_h_Æl
 = 0;

2353 
ödex
[
BITMAIN_MAX_CHAIN_NUM
] = {0};

2354 
	`cgtime
(&
ﬁd_h
);

2355 
	`cgtime
(&
√w_h
);

2359 
	`cgtime
(&
√w_h
);

2360 
	`timîsub
(&
√w_h
, &
ﬁd_h
, &
diff
);

2361 
óch_chaö_h_Æl
 = 0;

2362 
which_chaö
 = 0; which_chaö < 
BITMAIN_MAX_CHAIN_NUM
; which_chain++)

2364 if(
dev
.
chaö_exi°
[
which_chaö
])

2366 
óch_chaö_h
[
which_chaö
][
ödex
[which_chaö]] = ()(
h_óch_chaö
[which_chain] );

2368 
h_óch_chaö
[
which_chaö
] = 0;

2369 
óch_chaö_h
[
which_chaö
][
ödex
[which_chaö]] =Éach_chaö_h[which_chaö][ödex[which_chaö]] / (
diff
.
tv_£c
 + (()(diff.
tv_u£c
 + 1) / 1000000));

2370 
óch_chaö_h_avg
[
which_chaö
] = 0;

2371  
i
 = 0; i < 10; i++)

2373 
óch_chaö_h_avg
[
which_chaö
]+
óch_chaö_h
[which_chaö][
i
];

2376 
	`•rötf
(
di•œyed_øã
[
which_chaö
],"%.2f",
óch_chaö_h_avg
[which_chain]/10);

2377 
óch_chaö_h_Æl
 +
óch_chaö_h_avg
[
which_chaö
]/10;

2379 
ödex
[
which_chaö
]++;

2380 i‡(
ödex
[
which_chaö
] >= 10)

2382 
ödex
[
which_chaö
] = 0;

2386 
	`•rötf
(
di•œyed_hash_øã
,"%.2f",
óch_chaö_h_Æl
);

2387 
góch_chaö_h_Æl
 = 
óch_chaö_h_Æl
;

2388 
	`c›y_time
(&
ﬁd_h
,&
√w_h
);

2390 
	`¶ìp
(
READ_HASH_RATE_TIME_GAP
);

2392 
	}
}

2395 
	$¸óã_bômaö_gë_hash_øã_±hªad
()

2397 
ªad_hash_øã
 = 
	`ˇŒoc
(1,(
thr_öfo
));

2398 if(
	`thr_öfo_¸óã
(
ªad_hash_øã
, 
NULL
, 
gë_hash_øã
,Ñead_hash_rate))

2400 
	`≠∂og
(
LOG_DEBUG
,"%s: cª©êthªad f‹ gë hashøã fromási¯Áûed", 
__FUNCTION__
);

2403 
	`±hªad_dëach
(
ªad_hash_øã
->
±h
);

2404 
	`cg¶ìp_ms
(500);

2405 
	}
}

2408 *
	$check_°©us_func
()

2410 
which_chaö
;

2412 
	`≠∂og
(
LOG_DEBUG
, "%s", 
__FUNCTION__
);

2416  
which_chaö
 = 0; which_chaö < 
BITMAIN_MAX_CHAIN_NUM
; which_chain++ )

2418 i‡–
dev
.
chaö_exi°
[
which_chaö
] =1 && 
gBegö_gë_n⁄˚
[which_chain])

2420 
	`BM1680_check_°©us
(
which_chaö
,0);

2421 
	`BM1680_check_°©us
(
which_chaö
,1);

2424 
	`¶ìp
(5);

2426 
	}
}

2429 *
	$ªad_ãmp_func
()

2431 
which_chaö
;

2432 
öt16_t
 
tmpTemp
 = 0;

2433 
uöt8_t
 
ãmp
 = 0;

2435 
	`≠∂og
(
LOG_DEBUG
, "%s", 
__FUNCTION__
);

2438 
tmpTemp
 = 0;

2439  
which_chaö
 = 0; which_chaö < 
BITMAIN_MAX_CHAIN_NUM
; which_chain++ )

2441 i‡–
dev
.
chaö_exi°
[
which_chaö
] =1 && 
°¨t_£nd
[which_chain])

2443 
	`BM1680_gë_bﬂrd_ãm≥øtuª
(
which_chaö
, 0);

2444 
	`BM1680_gë_asic_ãm≥øtuª
(
which_chaö
, 0);

2445 
	`BM1680_gë_bﬂrd_ãm≥øtuª
(
which_chaö
, 1);

2446 
	`BM1680_gë_asic_ãm≥øtuª
(
which_chaö
, 1);

2450 
	`¶ìp
(
READ_TEMPERATURE_TIME_GAP
);

2451  
which_chaö
 = 0; which_chaö < 
BITMAIN_MAX_CHAIN_NUM
; which_chain++ )

2453 i‡–
dev
.
chaö_asic_ãmp
[
which_chaö
][0][1] > 
tmpTemp
)

2455 
tmpTemp
 = 
dev
.
chaö_asic_ãmp
[
which_chaö
][0][1];

2458 
dev
.
ãmp_t›1
 = 
tmpTemp
;

2459 if(
°›
)

2461 
	`£t_PWM
(
MAX_PWM_PERCENT
);

2465 
	`£t_PWM_acc‹dög_to_ãm≥øtuª
();

2468 
	}
}

2470 
	$¸óã_bômaö_check_°©us_±hªad
()

2472 
check_°©us_id
 = 
	`ˇŒoc
(1,(
thr_öfo
));

2473 if(
	`thr_öfo_¸óã
(
check_°©us_id
, 
NULL
, 
check_°©us_func
, check_status_id))

2475 
	`≠∂og
(
LOG_DEBUG
,"%s: cª©êthªad f‹ÑódÅemp", 
__FUNCTION__
);

2478 
	`±hªad_dëach
(
check_°©us_id
->
±h
);

2479 
	`cg¶ìp_ms
(500);

2480 
	}
}

2483 
	$¸óã_bômaö_ªad_ãmp_±hªad
()

2485 
ªad_ãmp_id
 = 
	`ˇŒoc
(1,(
thr_öfo
));

2486 if(
	`thr_öfo_¸óã
(
ªad_ãmp_id
, 
NULL
, 
ªad_ãmp_func
,Ñead_temp_id))

2488 
	`≠∂og
(
LOG_DEBUG
,"%s: cª©êthªad f‹ÑódÅemp", 
__FUNCTION__
);

2491 
	`±hªad_dëach
(
ªad_ãmp_id
->
±h
);

2492 
	`cg¶ìp_ms
(500);

2493 
	}
}

2495 *
	$B3_fûl_w‹k
(*
u§d©a
)

2497 
	`±hªad_dëach
(
	`±hªad_£lf
());

2498 
	`≠∂og
(
LOG_DEBUG
, "Start To Fill Work!");

2499 
bômün_B3_öfo_wôh_ödex
 *
öfo_wôh_chaö
 = (bômün_B3_öfo_wôh_ödex *)
u§d©a
;

2500 
bômaö_B3_öfo
 *
öfo
 = 
öfo_wôh_chaö
->info;

2501 
uöt8_t
 
chaöid
 = 
öfo_wôh_chaö
->
chaö_ödex
;

2502 
thr_öfo
 * 
thr
 = 
öfo
->thr;

2503 
timevÆ
 
£nd_°¨t
, 
œ°_£nd
, 
£nd_ñ≠£d
;

2504 
w‹k
 *w‹k = 
NULL
;

2505 
poﬁ
 *poﬁ = 
NULL
;

2506 * 
cuºít_job_id
 = 
NULL
;

2507 
öt8_t
 
£ed
[32], 
w‹kd©a0
[137],
w‹kd©a1
[137];

2508 
öt8_t
 
w‹kid
 = 0;

2509 
i
 = 0;

2510 
boﬁ
 
£nd_tm
 = 
åue
;

2512 
	`≠∂og
(
LOG_DEBUG
, "Sèπ TÿFû»W‹k!ChaöIndex:[%d]", 
chaöid
);

2514 1 && !
ªöôög
[
chaöid
])

2517 if(!
°¨t_£nd
[
chaöid
])

2519 
	`cg¶ìp_ms
(10);

2523 
poﬁ
 = 
	`cuºít_poﬁ
();

2524 if(
poﬁ
 =
NULL
)

2526 
	`cg¶ìp_ms
(10);

2530 
	`cg_æock
(&
poﬁ
->
d©a_lock
);

2531 if(
cuºít_job_id
 =
NULL
)

2533 if(
poﬁ
->
sw‹k
.
job_id
 !
NULL
)

2535 
cuºít_job_id
 = 
	`°rdup
(
poﬁ
->
sw‹k
.
job_id
);

2536 
√w_block
[
chaöid
] = 
åue
;

2540 
	`cg¶ìp_ms
(10);

2541 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

2545 if(
poﬁ
->
sw‹k
.
job_id
 !
NULL
)

2547 if(
	`°rcmp
(
cuºít_job_id
,
poﬁ
->
sw‹k
.
job_id
) != 0)

2549 
	`‰ì
(
cuºít_job_id
);

2550 
cuºít_job_id
 = 
	`°rdup
(
poﬁ
->
sw‹k
.
job_id
);

2551 
√w_block
[
chaöid
] = 
åue
;

2555 
	`cg¶ìp_ms
(10);

2556 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

2560 if(
poﬁ
->
upd©e_£ed
)

2562 
i
 = 0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

2563 
upd©e_£ed
[
i
] = 
åue
;

2564 
poﬁ
->
upd©e_£ed
 = 
Ál£
;

2566 
	`cg_ru∆ock
(&
poﬁ
->
d©a_lock
);

2568 if(
upd©e_£ed
[
chaöid
] =
åue
)

2570 
	`upd©e_£ed_™d_waô_ok
(
chaöid
,
poﬁ
->
btm_£ed
);

2571 
upd©e_£ed
[
chaöid
] = 
Ál£
;

2574 if(
√w_block
[
chaöid
])

2576 
	`cgtime
(&
œ°_£nd
);

2577 
w‹k
 = 
	`make_w‹k
();

2578 
	`gí_°øtum_w‹k
(
poﬁ
,
w‹k
);

2580 
w‹kid
 = (
globÆ_w‹kid
++) & 0x7f;

2581 
√w_block
[
chaöid
] = 
Ál£
;

2582 
	`mem£t
(
w‹kd©a0
, 0, (workdata0));

2583 
w‹kd©a0
[0] = 
w‹kid
;

2584 
	`mem˝y
(
w‹kd©a0
+1, 
w‹k
->
d©a
, 136);

2585 
w‹kd©a0
[129] = 
chaöid
;

2586 
w‹kd©a0
[132] = 
chaöid
;

2587 
	`±hªad_muãx_lock
(&
w‹k_queue_muãx
);

2588 if(
öfo
->
w‹k_queue
[
w‹kid
])

2590 
	`‰ì_w‹k
(
öfo
->
w‹k_queue
[
w‹kid
]);

2591 
öfo
->
w‹k_queue
[
w‹kid
] = 
NULL
;

2593 
öfo
->
w‹k_queue
[
w‹kid
] = 
	`c›y_w‹k
(
w‹k
);

2594 
	`±hªad_muãx_u∆ock
(&
w‹k_queue_muãx
);

2595 
	`≠∂og
(
LOG_DEBUG
, "ChaöID[%d] Wúã W‹k. w‹kid=%d", 
chaöid
, 
w‹kid
);

2596 
	`BM1680_£t_mesßge
(
chaöid
,0,
w‹kd©a0
);

2599 
w‹kid
 = (
globÆ_w‹kid
++) & 0x7f;

2600 
	`mem£t
(
w‹kd©a1
, 0, (workdata1));

2601 
w‹kd©a1
[0] = 
w‹kid
;

2602 
	`mem˝y
(
w‹kd©a1
+1, 
w‹k
->
d©a
, 136);

2603 
w‹kd©a1
[129] = 
chaöid
 << 4;

2604 
w‹kd©a1
[132] = 
chaöid
 << 4;

2605 
	`±hªad_muãx_lock
(&
w‹k_queue_muãx
);

2606 if(
öfo
->
w‹k_queue
[
w‹kid
])

2608 
	`‰ì_w‹k
(
öfo
->
w‹k_queue
[
w‹kid
]);

2609 
öfo
->
w‹k_queue
[
w‹kid
] = 
NULL
;

2611 
öfo
->
w‹k_queue
[
w‹kid
] = 
	`c›y_w‹k
(
w‹k
);

2612 
	`±hªad_muãx_u∆ock
(&
w‹k_queue_muãx
);

2613 
	`≠∂og
(
LOG_DEBUG
, "ChaöID[%d] Wúã W‹k. w‹kid=%d", 
chaöid
, 
w‹kid
);

2614 
	`BM1680_£t_mesßge
(
chaöid
,1,
w‹kd©a1
);

2615 
gBegö_gë_n⁄˚
[
chaöid
] = 
åue
;

2618 
	`cg¶ìp_us
(500);

2619 if(
w‹k
 !
NULL
)

2621 
	`‰ì_w‹k
(
w‹k
);

2624 if(
cuºít_job_id
 !
NULL
)

2625 
	`‰ì
(
cuºít_job_id
);

2626 
	}
}

2628 
	$add_poöt
(* 
poöt
,
MAX_SIZE
)

2630 (*
poöt
)++;

2631 if((*
poöt
Ë>
MAX_SIZE
)

2632 (*
poöt
) = 0;

2633 
	}
}

2635 
ölöe
 
	$u£_poöt_sub_1
(
poöt
,
MAX_SIZE
)

2637  (
poöt
 =0Ë? 
MAX_SIZE
 -1 :Öoint -1;

2638 
	}
}

2640 
	$u£_poöt_add_1
(
poöt
,
MAX_SIZE
)

2642  (
poöt
 >
MAX_SIZE
 -1) ? 0 : (point + 1) ;

2643 
	}
}

2645 
	$gë_d©a_Àn
(
uöt8_t
 
cmd
, uöt8_à
ack
)

2647 
d©a_Àn
 = 0;

2648 
cmd
)

2651 
d©a_Àn
 = 1;

2656 
d©a_Àn
 = 0;

2659 
d©a_Àn
 = (
ack
 & 0x7fË* 
BM1680_NONCE_DATA_LEN
 + 1;

2664 
d©a_Àn
 = 0;

2667 
d©a_Àn
 = 9;

2671 
d©a_Àn
 = 4;

2674  
d©a_Àn
;

2675 
	}
}

2677 
boﬁ
 
	$is_n⁄˚_‹_ªg_vÆue
(
uöt8_t
 
ack
)

2679  ((
ack
 >> 7Ë> 0Ë? 
åue
 : 
Ál£
;

2680 
	}
}

2682 
	$¥o˚ss_ack
(
uöt8_t
 * 
d©a
, 
Àn
, 
chaö_id
)

2684 
öt8_t
 
asic
 = 
d©a
[
BM1680_CHIP_ADDRESS_ADDR
];

2685 
öt8_t
 
ack
 = 
d©a
[
BM1680_ACK_ADDR
];

2686 
öt8_t
 
cmd
 = 
d©a
[
BM1680_CMD_ADDR
];

2687 
öt8_t
 
ªt
 = 0;

2688 if((
ack
 & 0x80) == 0x0)

2690 
ack
)

2692 
BM1680_EXECUTE_OK
:

2693 
ªt
 = 
BM1680_EXECUTE_OK
;

2696 
BM1680_RECEIVED_DATA_CRC_ERROR
:

2697 
ªt
 = 
BM1680_RECEIVED_DATA_CRC_ERROR
;

2700 
BM1680_NOT_ENOUGH_MEMORY
:

2701 
ªt
 = 
BM1680_NOT_ENOUGH_MEMORY
;

2704 
BM1680_LOCAL_MEMORY_NOT_ENOUGH
:

2705 
ªt
 = 
BM1680_LOCAL_MEMORY_NOT_ENOUGH
;

2708 
BM1680_CMD_PARAMETER_ERROR
:

2709 
ªt
 = 
BM1680_CMD_PARAMETER_ERROR
;

2712 
BM1680_CMD_INDEX_ERROR
:

2713 
ªt
 = 
BM1680_CMD_INDEX_ERROR
;

2716 
BM1680_CHECK_STATUS_ERROR
:

2717 
ªt
 = 
BM1680_CHECK_STATUS_ERROR
;

2720 
ªt
 = 
BM1680_NOT_SUPPORT_THIS_CMD
;

2724 
BM1680_ack_ªc‹d
[
chaö_id
][
asic
][
cmd
] = 
ªt
;

2725 if(
ªt
 =
BM1680_EXECUTE_OK
)

2727 
cmd
)

2729 
BM1680_INIT_CMD
:

2730 
	`≠∂og
(
LOG_NOTICE
,"Chaö %d Asi¯%d vîsi⁄ i†%d",
chaö_id
, 
asic
, 
d©a
[
BM1680_ACK_DATA_BEGIN_ADDR
]);

2732 
BM1680_SET_MESSAGE
:

2733 
	`≠∂og
(
LOG_NOTICE
,"Chaö %d Asi¯%d së mesßgêok",
chaö_id
, 
asic
);

2735 
BM1680_GET_BOARD_TEMPERATURE
:

2736 
dev
.
ãmp
[
chaö_id
][
asic
][0] = 
d©a
[
BM1680_ACK_DATA_BEGIN_ADDR
];

2737 
	`≠∂og
(
LOG_NOTICE
,"Chaö %d Asi¯%dÜoˇ»ãm∞%d",
chaö_id
, 
asic
,
dev
.
ãmp
[chain_id][asic][0]);

2739 
BM1680_GET_ASIC_TEMPERATURE
:

2740 
dev
.
ãmp
[
chaö_id
][
asic
][1] = 
d©a
[
BM1680_ACK_DATA_BEGIN_ADDR
];

2741 
	`≠∂og
(
LOG_NOTICE
,"Chaö %d Asi¯%dÑemŸêãm∞%d",
chaö_id
, 
asic
,
dev
.
ãmp
[chain_id][asic][1]);

2744 
dev
.
chaö_asic_ãmp
[
chaö_id
][0][0] = dev.
ãmp
[chaö_id][
asic
][0];

2745 
dev
.
chaö_asic_ãmp
[
chaö_id
][0][1] = dev.
ãmp
[chaö_id][
asic
][1];

2749 
	`≠∂og
(
LOG_NOTICE
,"Chaö %d Asi¯%d cmd %xÑë i†%d",
chaö_id
, 
asic
, 
cmd
, 
ªt
);

2750 if(
cmd
 =
BM1680_CHECK_STATUS
 || 
ªt
 =
BM1680_CHECK_STATUS_ERROR
Ë
√ed_ªöô
[
chaö_id
] = 
åue
;

2752 
	}
}

2753 *
	$gë_asic_ª•⁄£
(* 
¨g
)

2755 
	`±hªad_dëach
(
	`±hªad_£lf
());

2757 
uöt32_t
 
n⁄˚_numbî
, 
ªad_lo›
;

2758 
n⁄˚_bö
[7],
chaöid
;

2760 
dev_öfo
 *
dev_i
 = (dev_öfo*)
¨g
;

2761 
chaöid
 = 
dev_i
->chainid;

2763 
ª˚ive_buf
[10 * 100] = {0};

2764 
tmp
[10 * 
MAX_NONCE_NUMBER
 + 
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
] = {0};

2765 
d©a_buf
[10 * 512] = {0};

2766 
d©a_buf_Ω
 = 0, 
d©a_buf_wp
 = 0;

2767 
ssize_t
 
Àn
 = 0;

2768 
ssize_t
 
d©a_Àn
 = 0;

2769 
i
 = 0;

2770 
max
 = 10 * 512;

2771 * 
hex_buff
 = 
NULL
;

2773 
	`≠∂og
(
LOG_NOTICE
, "Sèπ A New Asi¯Re•⁄£.Chaö Id:[%d]", 
chaöid
);

2774 
	`≠∂og
(
LOG_DEBUG
, "%†%d",
__FUNCTION__
,
chaöid
);

2776 
	`˛ór_u¨t_rx_fifo
(
chaöid
);

2777 
	`˛ór_u¨t_rx_fifo
(
chaöid
);

2778 
	`˛ór_u¨t_rx_fifo
(
chaöid
);

2780 
°¨t_ªcv
[
chaöid
])

2782 
	`cg¶ìp_ms
(100);

2783 
Àn
 = 
	`B3_ªad
(
chaöid
, 
ª˚ive_buf
, (receive_buf));

2785 if(
Àn
 != 0)

2787 *
ª˚ive_hex
 = 
NULL
;

2788 
ª˚ive_hex
 = 
	`bö2hex
(
ª˚ive_buf
,
Àn
);

2789 
	`≠∂og
(
LOG_NOTICE
,"chaö %dÑód ouà: %d %s", 
chaöid
, 
Àn
, 
ª˚ive_hex
);

2790 
	`‰ì
(
ª˚ive_hex
);

2793 
i
 = 0; i < 
Àn
; i++)

2795 
d©a_buf
[
d©a_buf_wp
] = 
ª˚ive_buf
[
i
];

2796 
	`add_poöt
(&
d©a_buf_wp
,
max
);

2799 if(
d©a_buf_Ω
 !
d©a_buf_wp
)

2801 
Àn
 = (
d©a_buf_wp
 > 
d©a_buf_Ω
Ë? (d©a_buf_w∞- d©a_buf_Ω):–(
d©a_buf
) - data_buf_rp + data_buf_wp);

2807 
Àn
 >
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
)

2809 if(
d©a_buf
[
d©a_buf_Ω
] =
BM1680_RECV_CMD_HEADER1
 && d©a_buf[
	`u£_poöt_add_1
(d©a_buf_Ω,
max
)] =
BM1680_RECV_CMD_HEADER2
)

2815 
	`add_poöt
(&
d©a_buf_Ω
,
max
);

2816 
Àn
--;

2820 if(
Àn
 >
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
)

2821 
d©a_Àn
 = 
	`gë_d©a_Àn
(
d©a_buf
[
d©a_buf_Ω
 + 3], data_buf[data_buf_rp + 4]);

2823 
Àn
 >(
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
d©a_Àn
))

2825 
i
 = 0; i < 
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
d©a_Àn
; i++)

2827 
tmp
[
i
] = 
d©a_buf
[
d©a_buf_Ω
];

2828 
	`add_poöt
(&
d©a_buf_Ω
,
max
);

2831 
Àn
 =Üí - (
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
d©a_Àn
);

2833 * 
ªtu∫_d©a
 = 
NULL
;

2834 
ªtu∫_d©a
 = 
	`bö2hex
(
tmp
,
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
d©a_Àn
);

2835 
	`≠∂og
(
LOG_NOTICE
,"ªtu∫_d©®: %s",
ªtu∫_d©a
);

2836 
	`‰ì
(
ªtu∫_d©a
);

2838 if(
	`is_n⁄˚_‹_ªg_vÆue
(
tmp
[
BM1680_ACK_ADDR
]))

2840 
	`≠∂og
(
LOG_NOTICE
,"Chaö %d Asi¯%d gëÇ⁄˚ cou¡ %d", 
chaöid
, 
tmp
[2],Åmp[4] & 0x7f);

2841 if(
gBegö_gë_n⁄˚
[
chaöid
])

2843 
	`±hªad_muãx_lock
(&
n⁄˚_muãx
);

2844 
i
 = 0; i < (
d©a_Àn
 -1Ë/ 
BM1680_NONCE_DATA_LEN
; i++)

2846 
	`mem˝y
((*)(&
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_wr
].
n⁄˚
), &
tmp
[7 + 
i
*
BM1680_NONCE_DATA_LEN
], 8);

2847 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_wr
].
wc
 = 
tmp
[5] & 0x7f;

2848 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_wr
].
chaöid
 = chainid;

2849 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_wr
].
tm
 = 
tmp
[6 + 
i
*
BM1680_NONCE_DATA_LEN
];

2850 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_wr
].
which_asic
 = 
tmp
[
BM1680_CHIP_ADDRESS_ADDR
];

2852 
	`≠∂og
(
LOG_NOTICE
,"%Œx, %x, %x, %x, %x",
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_wr
].
n⁄˚
,n⁄˚_fifo.n⁄˚_buf„r[n⁄˚_fifo.p_wr].
wc
,

2853 
n⁄˚_fifo
.
n⁄˚_buf„r
[n⁄˚_fifo.
p_wr
].
chaöid
,n⁄˚_fifo.n⁄˚_buf„r[n⁄˚_fifo.p_wr].
tm
,n⁄˚_fifo.n⁄˚_buf„r[n⁄˚_fifo.p_wr].
which_asic
);

2855 if(
n⁄˚_fifo
.
p_wr
 < 
MAX_NONCE_NUMBER_IN_FIFO
)

2857 
n⁄˚_fifo
.
p_wr
++;

2861 
n⁄˚_fifo
.
p_wr
 = 0;

2864 if(
n⁄˚_fifo
.
n⁄˚_num
 < 
MAX_NONCE_NUMBER_IN_FIFO
)

2866 
n⁄˚_fifo
.
n⁄˚_num
++;

2870 
n⁄˚_fifo
.
n⁄˚_num
 = 
MAX_NONCE_NUMBER_IN_FIFO
;

2871 
	`≠∂og
(
LOG_WARNING
, "%s:Ç⁄˚ fifÿfuŒ!!!", 
__FUNCTION__
);

2874 
	`±hªad_muãx_u∆ock
(&
n⁄˚_muãx
);

2879 
	`¥o˚ss_ack
(
tmp
,
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
d©a_Àn
,
chaöid
);

2882 
Àn
 >
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
)

2884 if(
d©a_buf
[
d©a_buf_Ω
] =
BM1680_RECV_CMD_HEADER1
 && d©a_buf[
	`u£_poöt_add_1
(d©a_buf_Ω,
max
)] =
BM1680_RECV_CMD_HEADER2
)

2890 
	`add_poöt
(&
d©a_buf_Ω
,
max
);

2891 
Àn
--;

2894 
d©a_Àn
 = 
	`gë_d©a_Àn
(
d©a_buf
[
d©a_buf_Ω
 + 3], data_buf[data_buf_rp + 4]);

2897 
	}
}

2903 
	#ABOUT_CGMINER_DRIVER


	)

2906 
	$bômaö_B3_dëe˘
(
__maybe_unu£d
 
boﬁ
 
hŸ∂ug
)

2908 
cgpu_öfo
 *
cgpu
 = 
	`ˇŒoc
(1, (*cgpu));

2909 
devi˚_drv
 *
drv
 = &
bômaö_B3_drv
;

2910 
	`as£π
(
cgpu
);

2911 
cgpu
->
drv
 = drv;

2912 
cgpu
->
deví
 = 
DEV_ENABLED
;

2913 
cgpu
->
thªads
 = 1;

2914 
cgpu
->
devi˚_d©a
 = 
	`ˇŒoc
((
bômaö_B3_öfo
), 1);

2915 i‡(
	`u∆ikñy
(!(
cgpu
->
devi˚_d©a
)))

2916 
	`quô
(1, "FailedÅo calloc cgpu_info data");

2918 
	`as£π
(
	`add_cgpu
(
cgpu
));

2919 
	`≠∂og
(
LOG_DEBUG
,"%†dëe˘Çew devi˚",
__FUNCTION__
);

2920 
	}
}

2922 
boﬁ
 
	$bômaö_B3_¥ï¨e
(
thr_öfo
 *
thr
)

2924 
cgpu_öfo
 *
bômaö_B3
 = 
thr
->
cgpu
;

2925 
bômaö_B3_öfo
 *
öfo
 = 
bômaö_B3
->
devi˚_d©a
;

2927 
öfo
->
thr
 =Åhr;

2928 
	`muãx_öô
(&
öfo
->
lock
);

2929 
	`cglock_öô
(&
öfo
->
upd©e_lock
);

2931 
	`bômaö_B3_öô
(
öfo
);

2933  
åue
;

2934 
	}
}

2936 
öt64_t
 
	$bômaö_B3_sˇnhash
(
thr_öfo
 *
thr
)

2938 
h
 = 0;

2939 
±hªad_t
 
£nd_id
;

2940 
	`±hªad_¸óã
(&
£nd_id
, 
NULL
, 
bômaö_sˇnhash
, (*)
thr
);

2941 
	`±hªad_joö
(
£nd_id
, 
NULL
);

2943  
h
;

2944 
	}
}

2946 
	$bômaö_B3_upd©e
(
cgpu_öfo
 *
bômaö
)

2948 
i
 = 0;

2949 
	`≠∂og
(
LOG_DEBUG
, "Updated Work!");

2950  ; 
i
 < 
BITMAIN_MAX_CHAIN_NUM
; ++i )

2952 
√w_block
[
i
] = 
åue
;

2954 
	}
}

2956 
	ghwp
 = 0;

2958 
≠i_d©a
 *
	$bômaö_≠i_°©s
(
cgpu_öfo
 *
cgpu
)

2960 
≠i_d©a
 *
roŸ
 = 
NULL
;

2961 
i
 = 0;

2962 
uöt64_t
 
hash_øã_Æl
 = 0;

2963 
boﬁ
 
c›y_d©a
 = 
Ál£
;

2965 
roŸ
 = 
	`≠i_add_uöt8
‘oŸ, "möî_cou¡", &(
dev
.
chaö_num
), 
c›y_d©a
);

2966 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, "‰equícy", "750", 
c›y_d©a
);

2967 
roŸ
 = 
	`≠i_add_uöt8
‘oŸ, "Án_num", &(
dev
.
Án_num
), 
c›y_d©a
);

2971 
i
 = 0; i < 
BITMAIN_MAX_FAN_NUM
; i++)

2973 
Án_«me
[12];

2974 
	`•rötf
(
Án_«me
,"Án%d",
i
+1);

2975 
roŸ
 = 
	`≠i_add_uöt32
‘oŸ, 
Án_«me
, &(
dev
.
Án_•ìd_vÆue
[
i
]), 
c›y_d©a
);

2978 
roŸ
 = 
	`≠i_add_uöt8
‘oŸ, "ãmp_num", &(
dev
.
chaö_num
), 
c›y_d©a
);

2980 
i
 = 0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

2982 
ãmp_«me
[12];

2983 
	`•rötf
(
ãmp_«me
,"ãmp%d",
i
+1);

2984 
roŸ
 = 
	`≠i_add_öt16
‘oŸ, 
ãmp_«me
, &(
dev
.
chaö_asic_ãmp
[
i
][0][0]), 
c›y_d©a
);

2988 
i
 = 0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

2990 
ãmp2_«me
[12];

2991 
	`•rötf
(
ãmp2_«me
,"ãmp2_%d",
i
+1);

2992 
roŸ
 = 
	`≠i_add_öt16
‘oŸ, 
ãmp2_«me
, &(
dev
.
chaö_asic_ãmp
[
i
][0][1]), 
c›y_d©a
);

2995 
roŸ
 = 
	`≠i_add_uöt32
‘oŸ, "ãmp_max", &(
dev
.
ãmp_t›1
), 
c›y_d©a
);

2997 
tŸÆ_diff1
 = 
tŸÆ_diff_ac˚±ed
 + 
tŸÆ_diff_ªje˘ed
 + 
tŸÆ_diff_°Æe
;

2998 
hwp
 = (
hw_îr‹s
 + 
tŸÆ_diff1
) ?

2999 ()(
hw_îr‹s
Ë/ (
	`pow
(2, 8)Ë/ ()(hw_îr‹†+ 
tŸÆ_diff1
) : 0;

3001 
roŸ
 = 
	`≠i_add_≥r˚¡
‘oŸ, "Devi˚ H¨dw¨e%", &
hwp
, 
åue
);

3002 
roŸ
 = 
	`≠i_add_öt
‘oŸ, "no_m©chög_w‹k", &
hw_îr‹s
, 
åue
);

3004 
i
 = 0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

3006 
chaö_«me
[12];

3007 
	`•rötf
(
chaö_«me
,"chaö_a˙%d",
i
+1);

3008 
roŸ
 = 
	`≠i_add_uöt8
‘oŸ, 
chaö_«me
, &(
dev
.
chaö_asic_num
[
i
]), 
c›y_d©a
);

3012 
i
 = 0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

3014 
chaö_asic_«me
[12];

3015 
	`•rötf
(
chaö_asic_«me
,"chaö_acs%d",
i
+1);

3016 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, 
chaö_asic_«me
, 
dev
.
chaö_asic_°©us_°rög
[
i
], 
c›y_d©a
);

3019 
i
 = 0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

3021 
chaö_hw
[16];

3022 
	`•rötf
(
chaö_hw
,"chaö_hw%d",
i
+1);

3023 
roŸ
 = 
	`≠i_add_uöt32
‘oŸ, 
chaö_hw
, &(
dev
.chaö_hw[
i
]), 
c›y_d©a
);

3026 
i
 = 0; i < 
BITMAIN_MAX_CHAIN_NUM
; i++)

3028 
chaö_øã
[16];

3029 
	`•rötf
(
chaö_øã
,"chaö_øã%d",
i
+1);

3030 
roŸ
 = 
	`≠i_add_°rög
‘oŸ, 
chaö_øã
, 
di•œyed_øã
[
i
], 
c›y_d©a
);

3033  
roŸ
;

3034 
	}
}

3036 
	$bômaö_B3_ªöô_devi˚
(
cgpu_öfo
 *
bômaö
)

3038 if(!
°©us_îr‹
)

3039 
	`sy°em
("/etc/init.d/cgminer.shÑestart > /dev/null 2>&1 &");

3040 
	}
}

3042 
	$gë_bômaö_°©löe_bef‹e
(*
buf
, 
size_t
 
bufsiz
, 
cgpu_öfo
 *
bômaö_B3
)

3044 
bômaö_B3_öfo
 *
öfo
 = 
bômaö_B3
->
devi˚_d©a
;

3045 
	}
}

3047 
	$bômaö_B3_shutdown
(
thr_öfo
 *
thr
)

3049 
	`thr_öfo_ˇn˚l
(
check_möî_°©us_id
);

3050 
	`thr_öfo_ˇn˚l
(
check_Án_id
);

3051 
	`thr_öfo_ˇn˚l
(
ªad_hash_øã
);

3052 
	`thr_öfo_ˇn˚l
(
ªad_ãmp_id
);

3053 
	}
}

3055 
devi˚_drv
 
	gbômaö_B3_drv
 =

3057 .
drv_id
 = 
DRIVER_bômaö_B3
,

3058 .
	gd«me
 = "Bitmain_B3",

3059 .
	g«me
 = "B3",

3060 .
	gdrv_dëe˘
 = 
bômaö_B3_dëe˘
,

3061 .
	gthªad_¥ï¨e
 = 
bômaö_B3_¥ï¨e
,

3062 .
	ghash_w‹k
 = &
hash_drivî_w‹k
,

3063 .
	gsˇnw‹k
 = 
bômaö_B3_sˇnhash
,

3064 .
	gupd©e_w‹k
 = 
bômaö_B3_upd©e
,

3065 .
	ggë_≠i_°©s
 = 
bômaö_≠i_°©s
,

3066 .
	gªöô_devi˚
 = 
bômaö_B3_ªöô_devi˚
,

3067 .
	ggë_°©löe_bef‹e
 = 
gë_bômaö_°©löe_bef‹e
,

3068 .
	gthªad_shutdown
 = 
bômaö_B3_shutdown
,

	@driver-btm-soc.h

1 #i‚de‡
__DRIVER_BTM_B3_H__


3 
	#__DRIVER_BTM_B3_H__


	)

5 
	~<pﬁl.h
>

6 
	~<ãrmios.h
>

7 
	~"möî.h
"

9 
	#HIGH_VOLTAGE_OPEN_CORE


	)

14 
	#FIRST_BM1680
 0

	)

15 
	#SECOND_BM1680
 1

	)

17 
	#BOARD_TEMP
 0

	)

18 
	#ASIC_TEMP
 1

	)

21 
	#BM1680_SEND_CMD_HEADER1
 0xAA

	)

22 
	#BM1680_SEND_CMD_HEADER2
 0x55

	)

23 
	#BM1680_RECV_CMD_HEADER1
 0x55

	)

24 
	#BM1680_RECV_CMD_HEADER2
 0xAA

	)

27 
	#BM1680_MAX_CMD_NUM
 16

	)

28 
	#BM1680_INIT_CMD
 0x00

	)

29 
	#BM1680_SET_NONCE_DIFF
 0x01

	)

30 
	#BM1680_SET_SEED
 0x02

	)

31 
	#BM1680_SET_MESSAGE
 0x03

	)

32 
	#BM1680_CHECK_STATUS
 0x04

	)

33 
	#BM1680_SET_NONCE_INTERVAL
 0x05

	)

34 
	#BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING
 0x06

	)

35 
	#BM1680_UPGRADE_BIN_FILE_WITH_ENDING
 0x07

	)

36 
	#BM1680_TEST_CMD
 0x08

	)

37 
	#BM1680_GET_BOARD_TEMPERATURE
 0x09

	)

38 
	#BM1680_GET_ASIC_TEMPERATURE
 0x0A

	)

41 
	#BM1680_SEND_CMD_LEN_EXCLUDE_DATA
 5

	)

42 
	#BM1680_SET_NONCE_DIFF_DATA_LEN
 4

	)

43 
	#BM1680_SET_SEED_DATA_LEN
 32

	)

44 
	#BM1680_SET_MESSAGE_DATA_LEN
 137

	)

45 
	#BM1680_SET_NONCE_INTERVAL_DATA_LEN
 16

	)

46 
	#BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_DATA_LEN
 256

	)

47 
	#BM1680_UPGRADE_BIN_FILE_WITH_ENDING_DATA_LEN
 256

	)

48 
	#BM1680_TEST_CMD_DATA_LEN
 9

	)

50 
	#BM1680_INIT_CMD_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
)

	)

51 
	#BM1680_SET_NONCE_DIFF_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_SET_NONCE_DIFF_DATA_LEN
)

	)

52 
	#BM1680_SET_SEED_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_SET_SEED_DATA_LEN
)

	)

53 
	#BM1680_SET_MESSAGE_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_SET_MESSAGE_DATA_LEN
)

	)

54 
	#BM1680_CHECK_STATUS_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
)

	)

55 
	#BM1680_SET_NONCE_INTERVAL_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_SET_NONCE_INTERVAL_DATA_LEN
)

	)

56 
	#BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_UPGRADE_BIN_FILE_WITHOUT_ENDING_DATA_LEN
)

	)

57 
	#BM1680_UPGRADE_BIN_FILE_WITH_ENDING_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_UPGRADE_BIN_FILE_WITH_ENDING_DATA_LEN
)

	)

58 
	#BM1680_TEST_CMD_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_TEST_CMD_DATA_LEN
)

	)

59 
	#BM1680_GET_BOARD_TEMPERATURE_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
)

	)

60 
	#BM1680_GET_ASIC_TEMPERATURE_CMD_LEN
 (
BM1680_SEND_CMD_LEN_EXCLUDE_DATA
)

	)

65 
	#BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 6

	)

67 
	#BM1680_MESSAGE_ID_LEN
 1

	)

68 
	#BM1680_VERSION_LEN
 1

	)

69 
	#BM1680_NONCE_TM_LEN
 1

	)

70 
	#BM1680_NONCE_LEN
 8

	)

71 
	#BM1680_NONCE_DATA_LEN
 (
BM1680_NONCE_TM_LEN
 + 
BM1680_NONCE_LEN
)

	)

72 
	#BM1680_TEST_CMD_RETURN_DATA_LEN
 9

	)

73 
	#BM1680_GET_BOARD_TEMPERATURE_CMD_RETURN_DATA_LEN
 4

	)

74 
	#BM1680_GET_ASIC_TEMPERATURE_CMD_RETURN_DATA_LEN
 4

	)

76 
	#BM1680_COMMON_RETURN_LEN
 (
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
)

	)

77 
	#BM1680_INIT_RETURN_LEN
 (
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_VERSION_LEN
)

	)

78 
	#BM1680_TEST_CMD_RETURN_LEN
 (
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_TEST_CMD_RETURN_DATA_LEN
)

	)

79 
	#BM1680_GET_BOARD_TEMPERATURE_CMD_RETURN_LEN
 (
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_GET_BOARD_TEMPERATURE_CMD_RETURN_DATA_LEN
)

	)

80 
	#BM1680_GET_ASIC_TEMPERATURE_CMD_RETURN_LEN
 (
BM1680_RECEIVE_CMD_LEN_EXCLUDE_DATA
 + 
BM1680_GET_ASIC_TEMPERATURE_CMD_RETURN_DATA_LEN
)

	)

84 
	#BM1680_CHIP_ADDRESS_ADDR
 2

	)

85 
	#BM1680_CMD_ADDR
 3

	)

86 
	#BM1680_ACK_ADDR
 4

	)

87 
	#BM1680_ACK_DATA_BEGIN_ADDR
 5

	)

90 
	#BM1680_EXECUTE_OK
 0

	)

91 
	#BM1680_RECEIVED_DATA_CRC_ERROR
 16

	)

92 
	#BM1680_NOT_ENOUGH_MEMORY
 17

	)

93 
	#BM1680_LOCAL_MEMORY_NOT_ENOUGH
 18

	)

94 
	#BM1680_CMD_PARAMETER_ERROR
 19

	)

95 
	#BM1680_CMD_INDEX_ERROR
 20

	)

96 
	#BM1680_CHECK_STATUS_ERROR
 21

	)

97 
	#BM1680_NOT_SUPPORT_THIS_CMD
 99

	)

101 
	#BM1680_UPGRADE_FILE
 "/u§/bö/bm1680_v3.bö"

	)

103 
	#MAX_NONCE_NUMBER
 100

104 

	)

106 
BM1680_£nd_öô
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
);

107 
BM1680_£t_n⁄˚_diff
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
, uöt8_à
n⁄˚_diff
);

108 
BM1680_£t_£ed
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
, uöt8_à*
£ed
);

109 
BM1680_£t_mesßge
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
, uöt8_à*
mesßge
);

110 
BM1680_check_°©us
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
);

111 
BM1680_£t_n⁄˚_öãrvÆ
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
, 
uöt64_t
 
°¨t_n⁄˚
, uöt64_à
íd_n⁄˚
);

112 
BM1680_gë_bﬂrd_ãm≥øtuª
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
);

113 
BM1680_gë_asic_ãm≥øtuª
(
uöt8_t
 
which_u¨t
, uöt8_à
which_BM1680
);

114 
BM1680_upgøde_bö_fûe_wôh_ídög
(
which_u¨t
, 
which_BM1680
, *
d©a
, 
d©a_Àn
);

115 
BM1680_upgøde_bö_fûe_wôhout_ídög
(
which_u¨t
, 
which_BM1680
, *
d©a
);

116 
BM1680_upgøde
(
which_u¨t
, 
which_BM1680
);

122 
	#TOTAL_LEN
 0x300

	)

123 
	#FPGA_MEM_TOTAL_LEN
 (16*1024*1024)

124 

	)

127 
	#HARDWARE_VERSION
 (0x00000000/())

	)

128 
	#FAN_SPEED
 (0x00000004/())

	)

129 
	#HASH_ON_PLUG
 (0x00000008/())

	)

130 
	#BUFFER_SPACE
 (0x0000000c/())

	)

131 
	#RETURN_NONCE
 (0x00000010/())

	)

132 
	#NONCE_NUMBER_IN_FIFO
 (0x00000018/())

	)

133 
	#NONCE_FIFO_INTERRUPT
 (0x0000001c/())

	)

134 
	#TEMPERATURE_0_3
 (0x00000020/())

	)

135 
	#TEMPERATURE_4_7
 (0x00000024/())

	)

136 
	#TEMPERATURE_8_11
 (0x00000028/())

	)

137 
	#TEMPERATURE_12_15
 (0x0000002c/())

	)

138 
	#IIC_COMMAND
 (0x00000030/())

	)

139 
	#RESET_HASH_BOARD
 (0x00000034/())

	)

140 
	#BT8D
 (0x0000003C/())

	)

141 
	#TW_WRITE_COMMAND
 (0x00000040/())

	)

142 
	#QN_WRITE_DATA_COMMAND
 (0x00000080/())

	)

143 
	#FAN_CONTROL
 (0x00000084/())

	)

144 
	#TIME_OUT_CONTROL
 (0x00000088/())

	)

145 
	#TICKET_MASK_FPGA
 (0x0000008c/())

	)

146 
	#HASH_COUNTING_NUMBER_FPGA
 (0x00000090/())

	)

147 
	#SNO
 (0x00000094/())

	)

148 
	#SOCKET_ID
 (0x00000098/())

	)

149 
	#BC_WRITE_COMMAND
 (0x000000c0/())

	)

150 
	#BC_COMMAND_BUFFER
 (0x000000c4/())

	)

151 
	#FPGA_CHIP_ID_ADDR
 (0x000000f0/())

	)

152 
	#CRC_ERROR_CNT
 (0x000000f8/())

	)

153 
	#DHASH_ACC_CONTROL
 (0x00000100/())

	)

154 
	#COINBASE_AND_NONCE2_LENGTH
 (0x00000104/())

	)

155 
	#WORK_NONCE_2
 (0x00000108/())

	)

156 
	#NONCE2_AND_JOBID_STORE_ADDRESS
 (0x00000110/())

	)

157 
	#MERKLE_BIN_NUMBER
 (0x00000114/())

	)

158 
	#JOB_START_ADDRESS
 (0x00000118/())

	)

159 
	#JOB_LENGTH
 (0x0000011c/())

	)

160 
	#JOB_DATA_READY
 (0x00000120/())

	)

161 
	#JOB_ID
 (0x00000124/())

	)

162 
	#BLOCK_HEADER_VERSION
 (0x00000130/())

	)

163 
	#TIME_STAMP
 (0x00000134/())

	)

164 
	#TARGET_BITS
 (0x00000138/())

	)

165 
	#PRE_HEADER_HASH
 (0x00000140/())

	)

166 
	#SHIFT_READY
 (0x000001C0/())

	)

167 
	#SHIFT_BUFFER
 (0x000001C4/())

	)

168 
	#CHAIN1_3_8_SEND_FIFO_STATUS
 (0x00000180/())

	)

169 
	#CHAIN9_12_SEND_FIFO_STATUS
 (0x00000184/())

	)

170 
	#CHAIN13_14_SEND_FIFO_STATUS
 (0x00000188/())

	)

171 
	#CHAIN1_SEND_READY
 (0x00000190/())

	)

172 
	#CHAIN1_SEND_BUFFER
 (0x00000194/())

	)

173 
	#CHAIN2_SEND_READY
 (0x00000198/())

	)

174 
	#CHAIN2_SEND_BUFFER
 (0x0000019C/())

	)

175 
	#CHAIN3_SEND_READY
 (0x000001A0/())

	)

176 
	#CHAIN3_SEND_BUFFER
 (0x000001A4/())

	)

177 
	#CHAIN8_SEND_READY
 (0x000001A8/())

	)

178 
	#CHAIN8_SEND_BUFFER
 (0x000001AC/())

	)

179 
	#CHAIN9_SEND_READY
 (0x000001B0/())

	)

180 
	#CHAIN9_SEND_BUFFER
 (0x000001B4/())

	)

181 
	#CHAIN10_SEND_READY
 (0x000001B8/())

	)

182 
	#CHAIN10_SEND_BUFFER
 (0x000001BC/())

	)

183 
	#CHAIN11_SEND_READY
 (0x000001C0/())

	)

184 
	#CHAIN11_SEND_BUFFER
 (0x000001C4/())

	)

185 
	#CHAIN12_SEND_READY
 (0x000001C8/())

	)

186 
	#CHAIN12_SEND_BUFFER
 (0x000001CC/())

	)

187 
	#CHAIN13_SEND_READY
 (0x000001D0/())

	)

188 
	#CHAIN13_SEND_BUFFER
 (0x000001D4/())

	)

189 
	#CHAIN14_SEND_READY
 (0x000001D8/())

	)

190 
	#CHAIN14_SEND_BUFFER
 (0x000001DC/())

	)

191 
	#RECEIVE_FIFO1_2_STATUS
 (0x000001F0/())

	)

192 
	#RECEIVE_FIFO3_8_STATUS
 (0x000001F4/())

	)

193 
	#RECEIVE_FIFO9_10_STATUS
 (0x000001F8/())

	)

194 
	#RECEIVE_FIFO11_12_STATUS
 (0x000001FC/())

	)

195 
	#RECEIVE_FIFO13_14_STATUS
 (0x00000200/())

	)

196 
	#CHAIN1_READ_ENABLE
 (0x00000210/())

	)

197 
	#CHAIN1_READ_DATA
 (0x00000214/())

	)

198 
	#CHAIN2_READ_ENABLE
 (0x00000218/())

	)

199 
	#CHAIN2_READ_DATA
 (0x0000021C/())

	)

200 
	#CHAIN3_READ_ENABLE
 (0x00000220/())

	)

201 
	#CHAIN3_READ_DATA
 (0x00000224/())

	)

202 
	#CHAIN8_READ_ENABLE
 (0x00000228/())

	)

203 
	#CHAIN8_READ_DATA
 (0x0000022C/())

	)

204 
	#CHAIN9_READ_ENABLE
 (0x00000230/())

	)

205 
	#CHAIN9_READ_DATA
 (0x00000234/())

	)

206 
	#CHAIN10_READ_ENABLE
 (0x00000238/())

	)

207 
	#CHAIN10_READ_DATA
 (0x0000023C/())

	)

208 
	#CHAIN11_READ_ENABLE
 (0x00000240/())

	)

209 
	#CHAIN11_READ_DATA
 (0x00000244/())

	)

210 
	#CHAIN12_READ_ENABLE
 (0x00000248/())

	)

211 
	#CHAIN12_READ_DATA
 (0x0000024C/())

	)

212 
	#CHAIN13_READ_ENABLE
 (0x00000250/())

	)

213 
	#CHAIN13_READ_DATA
 (0x00000254/())

	)

214 
	#CHAIN14_READ_ENABLE
 (0x00000258/())

	)

215 
	#CHAIN14_READ_DATA
 (0x0000025C/())

	)

219 
	#HW_TYPE_T9_PLUS
 (1 << 31)

	)

220 
	#DHASH_ENGINE_BYPASS
 (1 << 29)

	)

223 
	#RST
 (1 << 31)

	)

224 
	#RESET_ALL
 (1 << 23)

	)

225 
	#CHAIN_ID
(
id
Ë(id << 16)

	)

226 
	#RESET_FPGA
 (1 << 15)

	)

227 
	#RESET_TIME
(
time
Ë—imê<< 0)

	)

228 
	#TIME_OUT_VALID
 (1 << 31)

	)

230 
	#WORK_ID_OR_CRC
 (1 << 31)

	)

231 
	#WORK_ID_OR_CRC_VALUE
(
vÆue
Ë((vÆuê>> 16Ë& 0x7fff)

	)

232 
	#NONCE_INDICATOR
 (1 << 7)

	)

233 
	#CHAIN_NUMBER
(
vÆue
Ë(vÆuê& 0xf)

	)

234 
	#REGISTER_DATA_CRC
(
vÆue
Ë((vÆuê>> 24Ë& 0x7f)

	)

236 
	#BC_COMMAND_BUFFER_READY
 (1 << 31)

	)

237 
	#BC_COMMAND_EN_CHAIN_ID
 (1 << 23)

	)

238 
	#BC_COMMAND_EN_NULL_WORK
 (1 << 22)

	)

240 
	#VIL_MODE
 (1 << 15)

	)

241 
	#VIL_MIDSTATE_NUMBER
(
vÆue
Ë((vÆuê&0x0fË<< 8)

	)

242 
	#NEW_BLOCK
 (1 << 7)

	)

243 
	#RUN_BIT
 (1 << 6)

	)

244 
	#OPERATION_MODE
 (1 << 5)

	)

246 
	#FLUSH_NONCE3_FIFO
 (1 << 16)

	)

248 
	#IIC_SELECT
(
which_i2c
Ë(which_i2¯<< 26)

	)

249 
	#IIC_READ_WRITE
 (1 << 25)

250 
	#IIC_REG_ADDR_VALID
 (1 << 24)

	)

251 
	#HIGH_4_BITS
(
bôs
Ë(bô†<< 20)

	)

252 
	#IIC_COMMAND_CHAIN_NUMBER
(
which_chaö
Ë(which_chaö << 16)

	)

253 
	#IIC_SLAVE_REG_ADDR
(
addr
Ë◊dd∏<< 8)

	)

259 
	#BITMAIN_MAX_CHAIN_NUM
 16

	)

261 
	#TM
 0x8

	)

263 
	#BITMAIN_MAX_FAN_NUM
 6

	)

264 
	#PWM_PERIOD_NS
 100000

	)

265 
	#MIN_FAN_NUM
 1

	)

266 
	#FAN_WANN_SPEED
 6600

	)

267 
	#FAN1_MAX_SPEED
 6000

	)

268 
	#FAN2_MAX_SPEED
 4300

	)

269 
	#FAN_SPEED_OK_PERCENT
 (0.85)

	)

270 
	#MIN_PWM_PERCENT
 40

	)

271 
	#MAX_PWM_PERCENT
 100

	)

272 
	#TEMP_INTERVAL
 2

	)

273 
	#MAX_TEMP
 80

	)

274 
	#MAX_FAN_TEMP
 50

	)

275 
	#MIN_FAN_TEMP
 20

	)

276 
	#PWM_ADJUST_FACTOR
 ((100 - 
MIN_PWM_PERCENT
)/(
MAX_FAN_TEMP
 - 
MIN_FAN_TEMP
))

	)

277 
	#FANINT
 1

	)

278 
	#PROCFILENAME
 "/¥oc/öãºu±s"

	)

282 
	#ASIC_NUM_EACH_CHAIN
 60

	)

288 
	#MAX_RETURNED_NONCE_NUM
 100

	)

291 
	#BITMAIN_MAX_QUEUE_NUM
 128

	)

294 
	#Sw≠32
(
l
Ë((÷Ë>> 24Ë| ((÷Ë& 0x00ff0000Ë>> 8Ë| ((÷Ë& 0x0000ff00Ë<< 8Ë| (÷Ë<< 24))

	)

295 
	#Sw≠16
(
l
Ë÷ >> 8Ë| (÷ & 0xffË<< 8)

	)

296 
	#hex_¥öt
(
p
Ë
	`≠∂og
(
LOG_DEBUG
, "%s",Ö)

	)

297 
	#BYTES_PER_LINE
 0x10

	)

298 
	#INIT_CONFIG_TYPE
 0x51

	)

299 
	#WAIT_REG_VALUE_COUNTER
 4

300 
	#READ_LOOP
 3

301 
	#READ_TEMPERATURE_TIME_GAP
 5

302 
	#READ_HASH_RATE_TIME_GAP
 5

303 

	)

309 
	söô_c⁄fig


311 
uöt8_t
 
	mtokí_ty≥
;

312 
uöt8_t
 
	mvîsi⁄
;

313 
uöt16_t
 
	mÀngth
;

314 
uöt32_t
 
	mbaud
;

315 
uöt8_t
 
	mª£t
 :1;

316 
uöt8_t
 
	mÁn_e·
 :1;

317 
uöt8_t
 
	mtimeout_e·
 :1;

318 
uöt8_t
 
	m‰equícy_e·
 :1;

319 
uöt8_t
 
	mvﬁège_e·
 :1;

320 
uöt8_t
 
	mchaö_check_time_e·
 :1;

321 
uöt8_t
 
	mchù_c⁄fig_e·
 :1;

322 
uöt8_t
 
	mhw_îr‹_e·
 :1;

323 
uöt8_t
 
	mbì≥r_˘æ
 :1;

324 
uöt8_t
 
	mãmp_˘æ
 :1;

325 
uöt8_t
 
	mchaö_‰eq_e·
 :1;

326 
uöt8_t
 
	mauto_ªad_ãmp
 :1;

327 
uöt8_t
 
	mª£rved1
 :4;

328 
uöt8_t
 
	mª£rved2
[2];

329 
uöt8_t
 
	mchaö_num
;

330 
uöt8_t
 
	masic_num
;

331 
uöt8_t
 
	mÁn_pwm_≥r˚¡
;

332 
uöt8_t
 
	mãm≥øtuª
;

333 
uöt16_t
 
	m‰equícy
;

334 
uöt8_t
 
	mvﬁège
[2];

335 
uöt8_t
 
	mchaö_check_time_öãgî
;

336 
uöt8_t
 
	mchaö_check_time_‰a˘i⁄s
;

337 
uöt8_t
 
	mtimeout_d©a_öãgî
;

338 
uöt8_t
 
	mtimeout_d©a_‰a˘i⁄s
;

339 
uöt32_t
 
	mªg_d©a
;

340 
uöt8_t
 
	mchù_addªss
;

341 
uöt8_t
 
	mªg_addªss
;

342 
uöt16_t
 
	m¸c
;

343 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

345 
	sbômün_B3_öfo_wôh_ödex


347 
bômaö_B3_öfo
 *
	möfo
;

348 
uöt8_t
 
	mchaö_ödex
;

349 }
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

351 
	sbômaö_B3_öfo


353 
cglock_t
 
	mupd©e_lock
;

354 
uöt8_t
 
	md©a_ty≥
;

355 
uöt8_t
 
	mvîsi⁄
;

356 
uöt16_t
 
	mÀngth
;

357 
uöt8_t
 
	mchù_vÆue_e·
 :1;

358 
uöt8_t
 
	mª£rved1
 :7;

359 
uöt8_t
 
	mchaö_num
;

360 
uöt16_t
 
	mª£rved2
;

361 
uöt8_t
 
	mÁn_num
;

362 
uöt8_t
 
	mãmp_num
;

363 
uöt8_t
 
	mª£rved3
[2];

364 
uöt32_t
 
	mÁn_exi°
;

365 
uöt32_t
 
	mãmp_exi°
;

366 
uöt16_t
 
	mdiff
;

367 
uöt16_t
 
	mª£rved4
;

368 
uöt32_t
 
	mªg_vÆue
;

369 
uöt32_t
 
	mchaö_asic_exi°
[
BITMAIN_MAX_CHAIN_NUM
][
ASIC_NUM_EACH_CHAIN
/32];

370 
uöt32_t
 
	mchaö_asic_°©us
[
BITMAIN_MAX_CHAIN_NUM
][
ASIC_NUM_EACH_CHAIN
/32];

371 
uöt8_t
 
	mchaö_asic_num
[
BITMAIN_MAX_CHAIN_NUM
];

372 
uöt8_t
 
	mãmp
[
BITMAIN_MAX_CHAIN_NUM
];

373 
uöt8_t
 
	mchaö_°©us
[
BITMAIN_MAX_CHAIN_NUM
];

374 
uöt8_t
 
	mÁn_•ìd_vÆue
[
BITMAIN_MAX_FAN_NUM
];

375 
uöt16_t
 
	m‰eq
[
BITMAIN_MAX_CHAIN_NUM
];

376 
uöt32_t
 
	mi2c_fd
;

377 
w‹k
 *
	mw‹k_queue
[
BITMAIN_MAX_QUEUE_NUM
];

378 
thr_öfo
 *
	mthr
;

379 
thr_öfo
 
	mu¨t_tx_t
[
BITMAIN_MAX_CHAIN_NUM
];

380 
thr_öfo
 
	mu¨t_rx_t
[
BITMAIN_MAX_CHAIN_NUM
];

381 
±hªad_muãx_t
 
	mlock
;

382 
uöt16_t
 
	m¸c
;

383 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

385 
	sÆl_∑ømëîs


388 
uöt32_t
 
	mpwm_vÆue
;

389 
uöt32_t
 
	mduty_ns
;

390 
uöt8_t
 
	mchaö_exi°
[
BITMAIN_MAX_CHAIN_NUM
];

391 
uöt8_t
 
	mchaö_asic_ö_fuŒ
[
BITMAIN_MAX_CHAIN_NUM
];

392 
uöt32_t
 
	mtimeout
;

393 
uöt32_t
 
	mÁn_exi°_m≠
;

394 
uöt32_t
 
	mãmp_£ns‹_m≠
;

395 
uöt32_t
 
	mn⁄˚_îr‹
;

396 
uöt32_t
 
	mchaö_asic_exi°
[
BITMAIN_MAX_CHAIN_NUM
][8];

397 
uöt32_t
 
	mchaö_asic_°©us
[
BITMAIN_MAX_CHAIN_NUM
][8];

398 
öt16_t
 
	mchaö_asic_ãmp
[
BITMAIN_MAX_CHAIN_NUM
][4][2];

399 
öt8_t
 
	mchaö_asic_iic
[
ASIC_NUM_EACH_CHAIN
];

400 
uöt32_t
 
	mchaö_hw
[
BITMAIN_MAX_CHAIN_NUM
];

401 
uöt32_t
 
	mchaö_asic_n⁄˚
[
BITMAIN_MAX_CHAIN_NUM
][
ASIC_NUM_EACH_CHAIN
];

402 
	mchaö_asic_°©us_°rög
[
BITMAIN_MAX_CHAIN_NUM
][
ASIC_NUM_EACH_CHAIN
 + 16];

404 
uöt32_t
 
	mtŸÆ_n⁄˚_num
;

406 
uöt32_t
 
	mÁn_fd
[
BITMAIN_MAX_FAN_NUM
];

407 
uöt8_t
 
	mÁn_exi°
[
BITMAIN_MAX_FAN_NUM
];

408 
uöt32_t
 
	mÁn_evít_cou¡
[
BITMAIN_MAX_FAN_NUM
];

409 
uöt32_t
 
	mÁn_•ìd_vÆue
[
BITMAIN_MAX_FAN_NUM
];

410 
uöt32_t
 
	mãmp
[
BITMAIN_MAX_CHAIN_NUM
][2][2];

411 
uöt8_t
 
	mchaö_asic_num
[
BITMAIN_MAX_CHAIN_NUM
];

412 
uöt8_t
 
	mcheck_bô
;

413 
uöt8_t
 
	mpwm_≥r˚¡
;

414 
uöt8_t
 
	mchaö_num
;

415 
uöt8_t
 
	mÁn_num
;

416 
uöt8_t
 
	mãmp_num
;

417 
uöt32_t
 
	mÁn_•ìd_t›1
;

418 
uöt32_t
 
	mÁn_•ìd_low1
;

419 
uöt32_t
 
	mãmp_t›1
;

420 
uöt32_t
 
	mãmp_t›_i
[
BITMAIN_MAX_CHAIN_NUM
];

421 
uöt32_t
 
	mãmp_t›1_œ°
;

422 
uöt8_t
 
	mc‹íum
;

423 
uöt8_t
 
	maddrI¡îvÆ
;

424 
uöt8_t
 
	mmax_asic_num_ö_⁄e_chaö
;

425 
uöt8_t
 
	mbaud
;

426 
uöt8_t
 
	mdiff
;

427 
uöt8_t
 
	mÁn_e·
;

428 
uöt8_t
 
	mÁn_pwm
;

430 
uöt16_t
 
	m‰equícy
;

431 
	m‰equícy_t
[10];

432 
uöt16_t
 
	m‰eq
[
BITMAIN_MAX_CHAIN_NUM
];

433 
uöt32_t
 
	mi2c_fd
;

434 
pﬁlfd
 
	mpfd
[
BITMAIN_MAX_FAN_NUM
];

436 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

440 
	mBUF_START
,

441 
	mBUF_READY
,

442 
	mBUF_READING
,

443 
	mBUF_WRITING
,

444 
	mBUF_IDLE


445 } 
	tBUF_STATE_E
;

450 
BUF_STATE_E
 
	m°©e
;

451 
	md©a
;

452 } 
	tASIC_TEMP_T
;

455 
	sdev_öfo


457 
uöt32_t
 
	mchaöid
;

460 
	#MAX_NONCE_NUMBER_IN_FIFO
 512

	)

462 
	sn⁄˚_˘x


464 
uöt64_t
 
	mn⁄˚
;

465 
uöt8_t
 
	mwc
;

466 
uöt8_t
 
	mtm
;

467 
uöt8_t
 
	mwhich_asic
;

468 
uöt8_t
 
	mchaöid
;

469 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

472 
	sn⁄˚_buf


474 
uöt32_t
 
	mp_wr
;

475 
uöt32_t
 
	mp_rd
;

476 
uöt32_t
 
	mn⁄˚_num
;

477 
n⁄˚_˘x
 
	mn⁄˚_buf„r
[
MAX_NONCE_NUMBER_IN_FIFO
];

478 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

481 
	sªg_˘x


483 
uöt32_t
 
	mªg_vÆue
;

484 
uöt8_t
 
	m¸c5
;

485 
uöt8_t
 
	mchaöid
;

486 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

489 
	sªg_buf


491 
uöt32_t
 
	mp_wr
;

492 
uöt32_t
 
	mp_rd
;

493 
uöt32_t
 
	mªg_vÆue_num
;

494 
ªg_˘x
 
	mªg_buf„r
[
MAX_NONCE_NUMBER_IN_FIFO
];

495 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

500 
	gnibbÀ
[] =

512 
ªv
(*
s
, 
size_t
 
l
);

513 
cg_logw‹k
(
w‹k
 *w‹k, *
n⁄˚_bö
, 
boﬁ
 
ok
);

517 
check_asic_ªg
(
which_chaö
, 
chù_addr
, 
ªg
, 
boﬁ
 
mode
);

518 *
gë_asic_ª•⁄£
(* 
¨g
);

519 *
B3_fûl_w‹k
(*
u§d©a
);

520 
suffix_°rög_B3
(
uöt64_t
 
vÆ
, *
buf
, 
size_t
 
bufsiz
, 
sigdigôs
,
boﬁ
 
di•œy
);

521 
˛ór_ªgi°î_vÆue_buf
();

522 
check_£ns‹_ID
();

523 
£t_PWM
(
pwm_≥r˚¡
);

525 
›t_bômaö_Án_pwm
;

526 
boﬁ
 
›t_bômaö_Án_˘æ
;

527 
›t_bômaö_B3_‰eq
;

	@elist.h

1 #i‚de‡
_LINUX_LIST_H


2 
	#_LINUX_LIST_H


	)

14 
	sli°_hód
 {

15 
li°_hód
 *
	m√xt
, *
	m¥ev
;

18 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

20 
	#LIST_HEAD
(
«me
) \

21 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

23 
	#INIT_LIST_HEAD
(
±r
) do { \

24 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

25 } 0)

	)

33 
ölöe
 
	$__li°_add
(
li°_hód
 *
√w
,

34 
li°_hód
 *
¥ev
,

35 
li°_hód
 *
√xt
)

37 
√xt
->
¥ev
 = 
√w
;

38 
√w
->
√xt
 =Çext;

39 
√w
->
¥ev
 =Örev;

40 
¥ev
->
√xt
 = 
√w
;

41 
	}
}

51 
ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

53 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

54 
	}
}

64 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

66 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

67 
	}
}

76 
ölöe
 
	$__li°_dñ
(
li°_hód
 *
¥ev
, li°_hód *
√xt
)

78 
√xt
->
¥ev
 =Örev;

79 
¥ev
->
√xt
 =Çext;

80 
	}
}

87 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

89 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

90 
íåy
->
√xt
 = (*) 0;

91 
íåy
->
¥ev
 = (*) 0;

92 
	}
}

98 
ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

100 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

101 
	`INIT_LIST_HEAD
(
íåy
);

102 
	}
}

109 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

111 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

112 
	`li°_add
(
li°
, 
hód
);

113 
	}
}

120 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

121 
li°_hód
 *
hód
)

123 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

124 
	`li°_add_èû
(
li°
, 
hód
);

125 
	}
}

131 
ölöe
 
	$li°_em±y
(
li°_hód
 *
hód
)

133  
hód
->
√xt
 == head;

134 
	}
}

136 
ölöe
 
	$__li°_•li˚
(
li°_hód
 *
li°
,

137 
li°_hód
 *
hód
)

139 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

140 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

141 
li°_hód
 *
©
 = 
hód
->
√xt
;

143 
fú°
->
¥ev
 = 
hód
;

144 
hód
->
√xt
 = 
fú°
;

146 
œ°
->
√xt
 = 
©
;

147 
©
->
¥ev
 = 
œ°
;

148 
	}
}

155 
ölöe
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

157 i‡(!
	`li°_em±y
(
li°
))

158 
	`__li°_•li˚
(
li°
, 
hód
);

159 
	}
}

168 
ölöe
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

169 
li°_hód
 *
hód
)

171 i‡(!
	`li°_em±y
(
li°
)) {

172 
	`__li°_•li˚
(
li°
, 
hód
);

173 
	`INIT_LIST_HEAD
(
li°
);

175 
	}
}

184 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
Ë(—y≥ *)((*)’å)-()(&(—y≥ *)0)->membî)))

	)

192 
	#li°_f‹_óch
(
pos
, 
hód
) \

193 
pos
 = (
hód
)->
√xt
;Öos != (head); \

194 
pos
 =Öos->
√xt
)

	)

200 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

201 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

202 
pos
 =Öos->
¥ev
)

	)

210 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

211 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

212 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

220 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

221 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

222 &
pos
->
membî
 !(
hód
); \

223 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

232 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

233 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

234 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

235 &
pos
->
membî
 !(
hód
); \

236 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

245 
	#li°_f‹_óch_íåy_c⁄töue
(
pos
, 
hód
, 
membî
) \

246 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member), \

247 
	`¥e„tch
(
pos
->
membî
.
√xt
); \

248 &
pos
->
membî
 !(
hód
); \

249 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member), \

250 
	`¥e„tch
(
pos
->
membî
.
√xt
))

	)

	@fpgautils.h

10 #i‚de‡
FPGAUTILS_H


11 
	#FPGAUTILS_H


	)

13 
	~<°dboﬁ.h
>

14 
	~<°dio.h
>

16 
	$boﬁ
(*
	tdëe˘⁄e_func_t
)(const *);

17 (*
	tautosˇn_func_t
)();

19 
	`_£rül_dëe˘
(
devi˚_drv
 *
drv
, 
dëe˘⁄e_func_t
, 
autosˇn_func_t
, 
boﬁ
 
f‹˚_autosˇn
);

20 
	#£rül_dëe˘_Áuto
(
drv
, 
dëe˘⁄e
, 
autosˇn
) \

21 
	`_£rül_dëe˘
(
drv
, 
dëe˘⁄e
, 
autosˇn
, 
åue
)

	)

22 
	#£rül_dëe˘_auto
(
drv
, 
dëe˘⁄e
, 
autosˇn
) \

23 
	`_£rül_dëe˘
(
drv
, 
dëe˘⁄e
, 
autosˇn
, 
Ál£
)

	)

24 
	#£rül_dëe˘
(
drv
, 
dëe˘⁄e
) \

25 
	`_£rül_dëe˘
(
drv
, 
dëe˘⁄e
, 
NULL
, 
Ál£
)

	)

26 
	`£rül_autodëe˘_dev£rül
(
dëe˘⁄e_func_t
, c⁄° *
¥od«me
);

27 
	`£rül_autodëe˘_udev
(
dëe˘⁄e_func_t
, c⁄° *
¥od«me
);

29 
	`£rül_›í
(c⁄° *
dev∑th
, 
baud
, sig√d 
timeout
, 
boﬁ
 
purge
);

30 
ssize_t
 
	`_£rül_ªad
(
fd
, *
buf
, 
size_t
 
buÊí
, *
eﬁ
);

31 
	#£rül_ªad
(
fd
, 
buf
, 
cou¡
) \

32 
	`_£rül_ªad
(
fd
, (*)(
buf
), 
cou¡
, 
NULL
)

	)

33 
	#£rül_ªad_löe
(
fd
, 
buf
, 
bufsiz
, 
eﬁ
) \

34 
	`_£rül_ªad
(
fd
, 
buf
, 
bufsiz
, &
eﬁ
)

	)

35 
	#£rül_˛o£
(
fd
Ë
	`˛o£
(fd)

	)

37 
FILE
 *
	`›í_bô°ªam
(c⁄° *
d«me
, c⁄° *
fûíame
);

39 
	`gë_£rül_˘s
(
fd
);

41 #i‚de‡
WIN32


42 c⁄° 
timevÆ
 
tv_timeout_deÁu…
;

43 c⁄° 
timevÆ
 
tv_öãr_ch¨_deÁu…
;

45 
size_t
 
	`_£À˘_ªad
(
fd
, *
buf
, size_à
bufsiz
, 
timevÆ
 *
timeout
, timevÆ *
ch¨_timeout
, 
föished
);

46 
size_t
 
	`_£À˘_wrôe
(
fd
, *
buf
, size_à
siz
, 
timevÆ
 *
timeout
);

48 
	#£À˘_›í
(
dev∑th
) \

49 
	`£rül_›í
(
dev∑th
, 0, 0, 
Ál£
)

	)

51 
	#£À˘_›í_purge
(
dev∑th
, 
purge
)\

52 
	`£rül_›í
(
dev∑th
, 0, 0, 
purge
)

	)

54 
	#£À˘_wrôe
(
fd
, 
buf
, 
siz
) \

55 
	`_£À˘_wrôe
(
fd
, 
buf
, 
siz
, (
timevÆ
 *)(&
tv_timeout_deÁu…
))

	)

57 
	#£À˘_wrôe_fuŒ
 
_£À˘_wrôe


	)

59 
	#£À˘_ªad
(
fd
, 
buf
, 
bufsiz
) \

60 
	`_£À˘_ªad
(
fd
, 
buf
, 
bufsiz
, (
timevÆ
 *)(&
tv_timeout_deÁu…
), \

61 (
timevÆ
 *)(&
tv_öãr_ch¨_deÁu…
), -1)

	)

63 
	#£À˘_ªad_tû
(
fd
, 
buf
, 
bufsiz
, 
eﬁ
) \

64 
	`_£À˘_ªad
(
fd
, 
buf
, 
bufsiz
, (
timevÆ
 *)(&
tv_timeout_deÁu…
), \

65 (
timevÆ
 *)(&
tv_öãr_ch¨_deÁu…
), 
eﬁ
)

	)

67 
	#£À˘_ªad_waô
(
fd
, 
buf
, 
bufsiz
, 
timeout
) \

68 
	`_£À˘_ªad
(
fd
, 
buf
, 
bufsiz
, 
timeout
, \

69 (
timevÆ
 *)(&
tv_öãr_ch¨_deÁu…
), -1)

	)

71 
	#£À˘_ªad_waô_tû
(
fd
, 
buf
, 
bufsiz
, 
timeout
, 
eﬁ
) \

72 
	`_£À˘_ªad
(
fd
, 
buf
, 
bufsiz
, 
timeout
, \

73 (
timevÆ
 *)(&
tv_öãr_ch¨_deÁu…
), 
eﬁ
)

	)

75 
	#£À˘_ªad_waô_bŸh
(
fd
, 
buf
, 
bufsiz
, 
timeout
, 
ch¨_timeout
) \

76 
	`_£À˘_ªad
(
fd
, 
buf
, 
bufsiz
, 
timeout
, 
ch¨_timeout
, -1)

	)

78 
	#£À˘_ªad_fuŒ
 
_£À˘_ªad


	)

80 
	#£À˘_˛o£
(
fd
Ë
	`˛o£
(fd)

	)

	@hf_protocol.h

14 #i‚de‡
_HF_PROTOCOL_H_


15 
	#_HF_PROTOCOL_H_


	)

17 
	#HF_PROTOCOL_VERSION
 ((0<<8)|1)

	)

19 
	#HF_PREAMBLE
 (
uöt8_t
Ë0xØ

	)

20 
	#HF_BROADCAST_ADDRESS
 (
uöt8_t
Ë0xff

	)

21 
	#HF_GWQ_ADDRESS
 (
uöt8_t
Ë254

	)

24 
	#OP_NULL
 0

	)

25 
	#OP_ROOT
 1

	)

26 
	#OP_RESET
 2

	)

27 
	#OP_PLL_CONFIG
 3

	)

28 
	#OP_ADDRESS
 4

	)

29 
	#OP_READDRESS
 5

	)

30 
	#OP_HIGHEST
 6

	)

31 
	#OP_BAUD
 7

	)

32 
	#OP_UNROOT
 8

	)

34 
	#OP_HASH
 9

	)

35 
	#OP_NONCE
 10

	)

36 
	#OP_ABORT
 11

	)

37 
	#OP_STATUS
 12

	)

38 
	#OP_GPIO
 13

	)

39 
	#OP_CONFIG
 14

	)

40 
	#OP_STATISTICS
 15

	)

41 
	#OP_GROUP
 16

	)

42 
	#OP_CLOCKGATE
 17

	)

45 
	#GN_CORE_VOLTAGE
(
a
Ë(()◊)/256*1.2)

	)

46 
	#GN_DIE_TEMPERATURE
(
a
Ë(((()◊)*240)/4096.0)-61.5)

	)

49 
	#GN_THERMAL_CUTOFF
(
ãmp
Ë((
uöt16_t
)((—emp)+61.5)*4096/240))

	)

52 
	#HF_SEQUENCE_DISTANCE
(
tx
,
rx
Ë(—x)>=‘x)?(—x)-‘x)):(
öfo
->
num_£quí˚
+—x)-‘x)))

	)

55 
	#PROTOCOL_USB_MAPPED_SERIAL
 0

	)

56 
	#PROTOCOL_GLOBAL_WORK_QUEUE
 1

	)

59 
	#M_VOLTAGE
(
a
Ë(()◊)*19.0734e-6)

	)

60 
	#M_PHASE_CURRENT
(
a
Ë(()◊)*0.794728597e-3)

	)

63 
	#HFD_G1
 1

64 
	#HFD_VC709
 128

	)

65 
	#HFD_Ex¥essAGX
 129

	)

68 
	#OP_USB_INIT
 128

69 
	#OP_GET_TRACE
 129

70 
	#OP_LOOPBACK_USB
 130

	)

71 
	#OP_LOOPBACK_UART
 131

	)

72 
	#OP_DFU
 132

73 
	#OP_USB_SHUTDOWN
 133

74 
	#OP_DIE_STATUS
 134

75 
	#OP_GWQ_STATUS
 135

76 
	#OP_WORK_RESTART
 136

77 
	#OP_USB_STATS1
 137

78 
	#OP_USB_GWQSTATS
 138

79 
	#OP_USB_NOTICE
 139

80 
	#OP_PING
 140

81 
	#OP_CORE_MAP
 141

82 
	#OP_VERSION
 142

83 
	#OP_FAN
 143

84 
	#OP_NAME
 144

85 
	#OP_USB_DEBUG
 255

	)

88 
	#HF_USB_VENDOR_ID
 0x297c

	)

89 
	#HF_USB_PRODUCT_ID_G1
 0x0001

	)

92 
	#HF_NTIME_MASK
 0xfff

93 
	#HF_NONCE_SEARCH
 0x1000

94 

	)

98 
	#E_RESET_TIMEOUT
 1

	)

99 
	#E_ADDRESS_TIMEOUT
 2

	)

100 
	#E_CLOCKGATE_TIMEOUT
 3

	)

101 
	#E_CONFIG_TIMEOUT
 4

	)

102 
	#E_EXCESS_CORE_FAILURES
 5

	)

103 
	#E_TOTAL_CORE_FAILURES
 6

	)

104 
	#E_TOO_MANY_GROUPS
 7

	)

105 
	#E_NO_SLAVES
 8

	)

106 
	#E_SLAVE_COMM
 9

	)

107 
	#E_MAIN_POWER_BAD
 10

	)

108 
	#E_SECONDARY_POWER_BAD
 11

	)

109 
	#E_BOARD_1
 12

	)

110 
	#E_BOARD_2
 13

	)

111 
	#E_BOARD_3
 14

	)

112 
	#E_BOARD_4
 15

	)

113 
	#E_BOARD_5
 16

	)

114 
	#E_CORE_POWER_FAULT
 17

	)

115 
	#E_BAUD_TIMEOUT
 18

	)

116 
	#E_ADDRESS_FAILURE
 19

	)

117 
	#E_IR_PROG_FAILURE
 20

	)

118 
	#E_MIXED_MISMATCH
 21

	)

119 
	#E_MIXED_TIMEOUT
 22

	)

121 
	#U32SIZE
(
x
Ë((x)/(
uöt32_t
))

	)

124 
	#BAUD_RATE_PWRUP_0
 115200

	)

125 
	#BAUD_RATE_PWRUP_1
 9600

	)

126 
	#BAUD_RATE_PWRUP_2
 38400

	)

127 
	#BAUD_RATE_PWRUP_3
 57600

	)

128 
	#BAUD_RATE_PWRUP_4
 230400

	)

129 
	#BAUD_RATE_PWRUP_5
 576000

	)

130 
	#BAUD_RATE_PWRUP_6
 921600

	)

131 
	#BAUD_RATE_PWRUP_7
 1152000

	)

147 
	#WR_NO_CHANGE
 0

	)

148 
	#WR_CLOCK_VALUE
 1

	)

149 
	#WR_MHZ_INCREASE
 2

	)

150 
	#WR_MHZ_DECREASE
 3

	)

151 
	#WR_PERCENT_INCREASE
 4

	)

152 
	#WR_PERCENT_DECREASE
 5

	)

153 
	#WR_REVERT
 6

	)

155 
	#WR_COMMAND_SHIFT
 12

	)

159 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN
 && !
deföed
(
WIN32
)

160 
	~"hf_¥Ÿocﬁ_be.h
"

163 
	shf_hódî


165 
uöt8_t
 
	m¥ómbÀ
;

166 
uöt8_t
 
	m›î©i⁄_code
;

167 
uöt8_t
 
	mchù_addªss
;

168 
uöt8_t
 
	mc‹e_addªss
;

169 
uöt16_t
 
	mhd©a
;

170 
uöt8_t
 
	md©a_Àngth
;

171 
uöt8_t
 
	m¸c8
;

172 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

175 
	shf_∂l_c⁄fig


177 
uöt8_t
 
	m¥ómbÀ
;

178 
uöt8_t
 
	m›î©i⁄_code
;

179 
uöt8_t
 
	mchù_addªss
;

181 
uöt8_t
 
	m∂l_divr
:6;

182 
uöt8_t
 
	m∂l_by∑ss
:1;

183 
uöt8_t
 
	m∂l_ª£t
:1;

185 
uöt8_t
 
	m∂l_divf
;

187 
uöt8_t
 
	m•¨e1
:1;

188 
uöt8_t
 
	m∂l_divq
:3;

189 
uöt8_t
 
	m∂l_ønge
:3;

190 
uöt8_t
 
	m∂l_f£
:1;

192 
uöt8_t
 
	md©a_Àngth
;

193 
uöt8_t
 
	m¸c8
;

194 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

197 
	shf_hash_£rül


199 
uöt8_t
 
	mmid°©e
[32];

200 
uöt8_t
 
	mmîkÀ_ªsiduÆ
[4];

201 
uöt32_t
 
	mtime°amp
;

202 
uöt32_t
 
	mbôs
;

203 
uöt32_t
 
	m°¨tög_n⁄˚
;

204 
uöt32_t
 
	mn⁄˚_lo›s
;

205 
uöt16_t
 
	m¡ime_lo›s
;

206 
uöt8_t
 
	m£¨ch_difficu…y
;

207 
uöt8_t
 
	m›ti⁄
;

208 
uöt8_t
 
	mgroup
;

209 
uöt8_t
 
	m•¨e3
[3];

210 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

213 
	shf_hash_usb


215 
uöt8_t
 
	mmid°©e
[32];

216 
uöt8_t
 
	mmîkÀ_ªsiduÆ
[4];

217 
uöt32_t
 
	mtime°amp
;

218 
uöt32_t
 
	mbôs
;

219 
uöt32_t
 
	m°¨tög_n⁄˚
;

220 
uöt32_t
 
	mn⁄˚_lo›s
;

221 
uöt16_t
 
	m¡ime_lo›s
;

222 
uöt8_t
 
	m£¨ch_difficu…y
;

223 
uöt8_t
 
	mgroup
;

224 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

227 
	shf_ˇndid©e_n⁄˚


229 
uöt32_t
 
	mn⁄˚
;

230 
uöt16_t
 
	m£quí˚
;

231 
uöt16_t
 
	m¡ime
;

233 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

236 
	shf_c⁄fig_d©a


238 
uöt16_t
 
	m°©us_≥riod
:11;

239 
uöt16_t
 
	míabÀ_≥riodic_°©us
:1;

240 
uöt16_t
 
	m£nd_°©us_⁄_c‹e_idÀ
:1;

241 
uöt16_t
 
	m£nd_°©us_⁄_≥ndög_em±y
:1;

242 
uöt16_t
 
	mpwm_a˘ive_Àvñ
:1;

243 
uöt16_t
 
	mf‹w¨d_Æl_¥ivûeged_∑ckës
:1;

244 
uöt8_t
 
	m°©us_b©ch_dñay
;

245 
uöt8_t
 
	mw©chdog
:7;

246 
uöt8_t
 
	mdißbÀ_£ns‹s
:1;

248 
uöt8_t
 
	mrx_hódî_timeout
:7;

249 
uöt8_t
 
	mrx_ign‹e_hódî_¸c
:1;

250 
uöt8_t
 
	mrx_d©a_timeout
:7;

251 
uöt8_t
 
	mrx_ign‹e_d©a_¸c
:1;

252 
uöt8_t
 
	m°©s_öãrvÆ
:7;

253 
uöt8_t
 
	m°©_dügno°ic
:1;

254 
uöt8_t
 
	mmósuª_öãrvÆ
;

256 
uöt32_t
 
	m⁄e_u£c
:12;

257 
uöt32_t
 
	mmax_n⁄˚s_≥r_‰ame
:4;

258 
uöt32_t
 
	mvﬁège_ßm∂e_poöts
:8;

259 
uöt32_t
 
	mpwm_pha£s
:2;

260 
uöt32_t
 
	måim
:4;

261 
uöt32_t
 
	m˛ock_dügno°ic
:1;

262 
uöt32_t
 
	mf‹w¨d_Æl_∑ckës
:1;

264 
uöt16_t
 
	mpwm_≥riod
;

265 
uöt16_t
 
	mpwm_pul£_≥riod
;

266 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

269 
	shf_group_d©a


271 
uöt16_t
 
	mn⁄˚_msoff£t
;

272 
uöt16_t
 
	m¡ime_off£t
;

273 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

276 
	shf_g1_m⁄ô‹


278 
uöt16_t
 
	mdõ_ãm≥øtuª
;

279 
uöt8_t
 
	mc‹e_vﬁège
[6];

282 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

285 
	shf_°©i°ics


287 
uöt8_t
 
	mrx_hódî_¸c
;

288 
uöt8_t
 
	mrx_body_¸c
;

289 
uöt8_t
 
	mrx_hódî_timeouts
;

290 
uöt8_t
 
	mrx_body_timeouts
;

291 
uöt8_t
 
	mc‹e_n⁄˚_fifo_fuŒ
;

292 
uöt8_t
 
	m¨øy_n⁄˚_fifo_fuŒ
;

293 
uöt8_t
 
	m°©s_ovîrun
;

294 
uöt8_t
 
	m•¨e
;

295 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

303 
	shf_usb_öô_hódî


305 
uöt8_t
 
	m¥ómbÀ
;

306 
uöt8_t
 
	m›î©i⁄_code
;

307 
uöt8_t
 
	m•¨e1
;

309 
uöt8_t
 
	m¥Ÿocﬁ
:3;

310 
uöt8_t
 
	mu£r_c⁄figuøti⁄
:1;

311 
uöt8_t
 
	m∂l_by∑ss
:1;

312 
uöt8_t
 
	mno_asic_öôüliz©i⁄
:1;

313 
uöt8_t
 
	mdo_©•ìd_c‹e_ã°s
:1;

314 
uöt8_t
 
	mshed_suµ‹ãd
:1;

316 
uöt16_t
 
	mhash_˛ock
;

318 
uöt8_t
 
	md©a_Àngth
;

319 
uöt8_t
 
	m¸c8
;

320 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

326 
	shf_usb_öô_›ti⁄s


328 
uöt16_t
 
	mgroup_¡ime_rﬁl
;

329 
uöt16_t
 
	mc‹e_¡ime_rﬁl
;

330 
uöt8_t
 
	mlow_›î©ög_ãmp_limô
;

331 
uöt8_t
 
	mhigh_›î©ög_ãmp_limô
;

332 
uöt16_t
 
	m•¨e
;

333 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

336 
	shf_usb_öô_ba£


338 
uöt16_t
 
	mfúmw¨e_ªv
;

339 
uöt16_t
 
	mh¨dw¨e_ªv
;

340 
uöt32_t
 
	m£rül_numbî
;

341 
uöt8_t
 
	m›î©i⁄_°©us
;

342 
uöt8_t
 
	mexåa_°©us_1
;

343 
uöt16_t
 
	m£quí˚_modulus
;

344 
uöt16_t
 
	mhash_˛ockøã
;

345 
uöt16_t
 
	möÊight_èrgë
;

346 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

356 
	shf_g1_dõ_d©a


358 
hf_g1_m⁄ô‹
 
	mdõ
;

359 
uöt16_t
 
	mpha£_cuºíts
[4];

360 
uöt16_t
 
	mvﬁège
;

361 
uöt16_t
 
	mãm≥øtuª
;

362 
uöt16_t
 
	mècho
;

363 
uöt16_t
 
	m•¨e
;

364 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

369 
	shf_gwq_d©a


371 
uöt64_t
 
	mhash_cou¡
;

372 
uöt16_t
 
	m£quí˚_hód
;

373 
uöt16_t
 
	m£quí˚_èû
;

374 
uöt16_t
 
	mshed_cou¡
;

375 
uöt16_t
 
	m•¨e
;

376 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

380 
	shf_usb_°©s1


383 
uöt16_t
 
	musb_rx_¥ómbÀs
;

384 
uöt16_t
 
	musb_rx_ª˚ive_byã_îr‹s
;

385 
uöt16_t
 
	musb_rx_bad_h¸c
;

388 
uöt16_t
 
	musb_tx_©ãm±s
;

389 
uöt16_t
 
	musb_tx_∑ckës
;

390 
uöt16_t
 
	musb_tx_timeouts
;

391 
uöt16_t
 
	musb_tx_öcom∂ëes
;

392 
uöt16_t
 
	musb_tx_ídpoöt°ÆÀd
;

393 
uöt16_t
 
	musb_tx_disc⁄√˘ed
;

394 
uöt16_t
 
	musb_tx_su•íded
;

397 
uöt16_t
 
	mu¨t_tx_queue_dma
;

398 
uöt16_t
 
	mu¨t_tx_öãºu±s
;

401 
uöt16_t
 
	mu¨t_rx_¥ómbÀ_öts
;

402 
uöt16_t
 
	mu¨t_rx_mis£d_¥ómbÀ_öts
;

403 
uöt16_t
 
	mu¨t_rx_hódî_d⁄e
;

404 
uöt16_t
 
	mu¨t_rx_d©a_d⁄e
;

405 
uöt16_t
 
	mu¨t_rx_bad_h¸c
;

407 
uöt16_t
 
	mu¨t_rx_bad_dma
;

408 
uöt16_t
 
	mu¨t_rx_sh‹t_dma
;

409 
uöt16_t
 
	mu¨t_rx_buf„rs_fuŒ
;

411 
uöt8_t
 
	mmax_tx_buf„rs
;

412 
uöt8_t
 
	mmax_rx_buf„rs
;

413 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

416 
	shf_usb_nŸi˚_d©a


418 
uöt32_t
 
	mexåa_d©a
;

419 
	mmesßge
[];

	@hf_protocol_be.h

14 #i‚de‡
_HF_PROTOCOL_BE_H_


15 
	#_HF_PROTOCOL_BE_H_


	)

18 
	shf_hódî


20 
uöt8_t
 
	m¥ómbÀ
;

21 
uöt8_t
 
	m›î©i⁄_code
;

22 
uöt8_t
 
	mchù_addªss
;

23 
uöt8_t
 
	mc‹e_addªss
;

24 
uöt16_t
 
	mhd©a
;

25 
uöt8_t
 
	md©a_Àngth
;

26 
uöt8_t
 
	m¸c8
;

27 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

30 
	shf_∂l_c⁄fig


32 
uöt8_t
 
	m¥ómbÀ
;

33 
uöt8_t
 
	m›î©i⁄_code
;

34 
uöt8_t
 
	mchù_addªss
;

36 
uöt8_t
 
	m∂l_ª£t
:1;

37 
uöt8_t
 
	m∂l_by∑ss
:1;

38 
uöt8_t
 
	m∂l_divr
:6;

40 
uöt8_t
 
	m∂l_divf
;

42 
uöt8_t
 
	m∂l_f£
:1;

43 
uöt8_t
 
	m∂l_ønge
:3;

44 
uöt8_t
 
	m∂l_divq
:3;

45 
uöt8_t
 
	m•¨e1
:1;

47 
uöt8_t
 
	md©a_Àngth
;

48 
uöt8_t
 
	m¸c8
;

49 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

52 
	shf_hash_£rül


54 
uöt8_t
 
	mmid°©e
[32];

55 
uöt8_t
 
	mmîkÀ_ªsiduÆ
[4];

56 
uöt32_t
 
	mtime°amp
;

57 
uöt32_t
 
	mbôs
;

58 
uöt32_t
 
	m°¨tög_n⁄˚
;

59 
uöt32_t
 
	mn⁄˚_lo›s
;

60 
uöt16_t
 
	m¡ime_lo›s
;

61 
uöt8_t
 
	m£¨ch_difficu…y
;

62 
uöt8_t
 
	m›ti⁄
;

63 
uöt8_t
 
	mgroup
;

64 
uöt8_t
 
	m•¨e3
[3];

65 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

68 
	shf_hash_usb


70 
uöt8_t
 
	mmid°©e
[32];

71 
uöt8_t
 
	mmîkÀ_ªsiduÆ
[4];

72 
uöt32_t
 
	mtime°amp
;

73 
uöt32_t
 
	mbôs
;

74 
uöt32_t
 
	m°¨tög_n⁄˚
;

75 
uöt32_t
 
	mn⁄˚_lo›s
;

76 
uöt16_t
 
	m¡ime_lo›s
;

77 
uöt8_t
 
	m£¨ch_difficu…y
;

78 
uöt8_t
 
	mgroup
;

79 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

82 
	shf_ˇndid©e_n⁄˚


84 
uöt32_t
 
	mn⁄˚
;

85 
uöt16_t
 
	m£quí˚
;

86 
uöt16_t
 
	m¡ime
;

88 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

96 
	shf_c⁄fig_d©a


98 
uöt16_t
 
	mf‹w¨d_Æl_¥ivûeged_∑ckës
:1;

99 
uöt16_t
 
	mpwm_a˘ive_Àvñ
:1;

100 
uöt16_t
 
	m£nd_°©us_⁄_≥ndög_em±y
:1;

101 
uöt16_t
 
	m£nd_°©us_⁄_c‹e_idÀ
:1;

102 
uöt16_t
 
	míabÀ_≥riodic_°©us
:1;

103 
uöt16_t
 
	m°©us_≥riod
:11;

105 
uöt8_t
 
	m°©us_b©ch_dñay
;

106 
uöt8_t
 
	mdißbÀ_£ns‹s
:1;

107 
uöt8_t
 
	mw©chdog
:7;

109 
uöt8_t
 
	mrx_ign‹e_hódî_¸c
:1;

110 
uöt8_t
 
	mrx_hódî_timeout
:7;

111 
uöt8_t
 
	mrx_ign‹e_d©a_¸c
:1;

112 
uöt8_t
 
	mrx_d©a_timeout
:7;

113 
uöt8_t
 
	m°©_dügno°ic
:1;

114 
uöt8_t
 
	m°©s_öãrvÆ
:7;

115 
uöt8_t
 
	mmósuª_öãrvÆ
;

117 
uöt32_t
 
	mf‹w¨d_Æl_∑ckës
:1;

118 
uöt32_t
 
	m˛ock_dügno°ic
:1;

119 
uöt32_t
 
	måim
:4;

120 
uöt32_t
 
	mpwm_pha£s
:2;

121 
uöt32_t
 
	mvﬁège_ßm∂e_poöts
:8;

122 
uöt32_t
 
	mmax_n⁄˚s_≥r_‰ame
:4;

123 
uöt32_t
 
	m⁄e_u£c
:12;

125 
uöt16_t
 
	mpwm_≥riod
;

126 
uöt16_t
 
	mpwm_pul£_≥riod
;

127 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

130 
	shf_group_d©a


132 
uöt16_t
 
	mn⁄˚_msoff£t
;

133 
uöt16_t
 
	m¡ime_off£t
;

134 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

137 
	shf_g1_m⁄ô‹


139 
uöt16_t
 
	mdõ_ãm≥øtuª
;

140 
uöt8_t
 
	mc‹e_vﬁège
[6];

143 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

146 
	shf_°©i°ics


148 
uöt8_t
 
	mrx_hódî_¸c
;

149 
uöt8_t
 
	mrx_body_¸c
;

150 
uöt8_t
 
	mrx_hódî_timeouts
;

151 
uöt8_t
 
	mrx_body_timeouts
;

152 
uöt8_t
 
	mc‹e_n⁄˚_fifo_fuŒ
;

153 
uöt8_t
 
	m¨øy_n⁄˚_fifo_fuŒ
;

154 
uöt8_t
 
	m°©s_ovîrun
;

155 
uöt8_t
 
	m•¨e
;

156 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

164 
	shf_usb_öô_hódî


166 
uöt8_t
 
	m¥ómbÀ
;

167 
uöt8_t
 
	m›î©i⁄_code
;

168 
uöt8_t
 
	m•¨e1
;

170 
uöt8_t
 
	mshed_suµ‹ãd
:1;

171 
uöt8_t
 
	mdo_©•ìd_c‹e_ã°s
:1;

172 
uöt8_t
 
	mno_asic_öôüliz©i⁄
:1;

173 
uöt8_t
 
	m∂l_by∑ss
:1;

174 
uöt8_t
 
	mu£r_c⁄figuøti⁄
:1;

175 
uöt8_t
 
	m¥Ÿocﬁ
:3;

177 
uöt16_t
 
	mhash_˛ock
;

179 
uöt8_t
 
	md©a_Àngth
;

180 
uöt8_t
 
	m¸c8
;

181 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

187 
	shf_usb_öô_›ti⁄s


189 
uöt16_t
 
	mgroup_¡ime_rﬁl
;

190 
uöt16_t
 
	mc‹e_¡ime_rﬁl
;

191 
uöt8_t
 
	mlow_›î©ög_ãmp_limô
;

192 
uöt8_t
 
	mhigh_›î©ög_ãmp_limô
;

193 
uöt16_t
 
	m•¨e
;

194 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

197 
	shf_usb_öô_ba£


199 
uöt16_t
 
	mfúmw¨e_ªv
;

200 
uöt16_t
 
	mh¨dw¨e_ªv
;

201 
uöt32_t
 
	m£rül_numbî
;

202 
uöt8_t
 
	m›î©i⁄_°©us
;

203 
uöt8_t
 
	mexåa_°©us_1
;

204 
uöt16_t
 
	m£quí˚_modulus
;

205 
uöt16_t
 
	mhash_˛ockøã
;

206 
uöt16_t
 
	möÊight_èrgë
;

207 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

217 
	shf_g1_dõ_d©a


219 
hf_g1_m⁄ô‹
 
	mdõ
;

220 
uöt16_t
 
	mpha£_cuºíts
[4];

221 
uöt16_t
 
	mvﬁège
;

222 
uöt16_t
 
	mãm≥øtuª
;

223 
uöt16_t
 
	mècho
;

224 
uöt16_t
 
	m•¨e
;

225 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

229 
	shf_gwq_d©a


231 
uöt64_t
 
	mhash_cou¡
;

232 
uöt16_t
 
	m£quí˚_hód
;

233 
uöt16_t
 
	m£quí˚_èû
;

234 
uöt16_t
 
	mshed_cou¡
;

235 
uöt16_t
 
	m•¨e
;

236 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

240 
	shf_usb_°©s1


243 
uöt16_t
 
	musb_rx_¥ómbÀs
;

244 
uöt16_t
 
	musb_rx_ª˚ive_byã_îr‹s
;

245 
uöt16_t
 
	musb_rx_bad_h¸c
;

248 
uöt16_t
 
	musb_tx_©ãm±s
;

249 
uöt16_t
 
	musb_tx_∑ckës
;

250 
uöt16_t
 
	musb_tx_timeouts
;

251 
uöt16_t
 
	musb_tx_öcom∂ëes
;

252 
uöt16_t
 
	musb_tx_ídpoöt°ÆÀd
;

253 
uöt16_t
 
	musb_tx_disc⁄√˘ed
;

254 
uöt16_t
 
	musb_tx_su•íded
;

257 
uöt16_t
 
	mu¨t_tx_queue_dma
;

258 
uöt16_t
 
	mu¨t_tx_öãºu±s
;

261 
uöt16_t
 
	mu¨t_rx_¥ómbÀ_öts
;

262 
uöt16_t
 
	mu¨t_rx_mis£d_¥ómbÀ_öts
;

263 
uöt16_t
 
	mu¨t_rx_hódî_d⁄e
;

264 
uöt16_t
 
	mu¨t_rx_d©a_d⁄e
;

265 
uöt16_t
 
	mu¨t_rx_bad_h¸c
;

267 
uöt16_t
 
	mu¨t_rx_bad_dma
;

268 
uöt16_t
 
	mu¨t_rx_sh‹t_dma
;

269 
uöt16_t
 
	mu¨t_rx_buf„rs_fuŒ
;

271 
uöt8_t
 
	mmax_tx_buf„rs
;

272 
uöt8_t
 
	mmax_rx_buf„rs
;

273 } 
__©åibuã__
((
∑cked
,
Æig√d
(4)));

276 
	shf_usb_nŸi˚_d©a


278 
uöt32_t
 
	mexåa_d©a
;

279 
	mmesßge
[];

	@i2c-context.h

1 #i‚de‡
I2C_CONTEXT_H


2 
	#I2C_CONTEXT_H


	)

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

8 
	si2c_˘x
 {

10 (*
	mexô
)(
i2c_˘x
 *
	m˘x
);

12 
boﬁ
 (*
wrôe
)(
i2c_˘x
 *
	m˘x
, 
uöt8_t
 
	mªg
, uöt8_à
	mvÆ
);

14 
boﬁ
 (*
ªad
)(
i2c_˘x
 *
	m˘x
, 
uöt8_t
 
	mªg
, uöt8_à*
	mvÆ
);

17 
uöt8_t
 
	maddr
;

18 
	mfûe
;

22 
	#I2C_BUS
 "/dev/i2c-1"

	)

24 
i2c_˘x
 *
i2c_¶ave_›í
(*
i2c_bus
, 
uöt8_t
 
¶ave_addr
);

	@klist.c

10 
	~<kli°.h
>

12 
	$k_Æloc_ôems
(
K_LIST
 *
li°
, 
KLIST_FFL_ARGS
)

14 
K_ITEM
 *
ôem
;

15 
Æloˇã
, 
i
;

17 i‡(
li°
->
is_°‹e
) {

18 
	`quôhîe
(1, "Li° %†°‹êˇn'à%s()" 
KLIST_FFL
,

19 
li°
->
«me
, 
__func__
, 
KLIST_FFL_PASS
);

22 i‡(
li°
->
limô
 > 0 &&Üi°->
tŸÆ
 >=Üist->limit)

25 
Æloˇã
 = 
li°
->allocate;

26 i‡(
li°
->
limô
 > 0 && (li°->
tŸÆ
 + 
Æloˇã
) >Üist->limit)

27 
Æloˇã
 = 
li°
->
limô
 -Üi°->
tŸÆ
;

29 
li°
->
ôem_mem_cou¡
++;

30 i‡(!(
li°
->
ôem_mem‹y
 = 
	`ªÆloc
(list->item_memory,

31 
li°
->
ôem_mem_cou¡
 * (*÷i°->
ôem_mem‹y
))))) {

32 
	`quôhîe
(1, "List %s item_memory failedÅoÑealloc count=%d",

33 
li°
->
«me
,Üi°->
ôem_mem_cou¡
);

35 
ôem
 = 
	`ˇŒoc
(
Æloˇã
, (*item));

36 i‡(!
ôem
) {

37 
	`quôhîe
(1, "List %s failedÅo calloc %dÇew items -Åotal was %d,Üimit was %d",

38 
li°
->
«me
, 
Æloˇã
,Üi°->
tŸÆ
,Üi°->
limô
);

40 
li°
->
ôem_mem‹y
[li°->
ôem_mem_cou¡
 - 1] = (*)
ôem
;

42 
li°
->
tŸÆ
 +
Æloˇã
;

43 
li°
->
cou¡
 = 
Æloˇã
;

44 
li°
->
cou¡_up
 = 
Æloˇã
;

46 
ôem
[0].
«me
 = 
li°
->name;

47 
ôem
[0].
¥ev
 = 
NULL
;

48 
ôem
[0].
√xt
 = &(item[1]);

49 
i
 = 1; i < 
Æloˇã
-1; i++) {

50 
ôem
[
i
].
«me
 = 
li°
->name;

51 
ôem
[
i
].
¥ev
 = &item[i-1];

52 
ôem
[
i
].
√xt
 = &item[i+1];

54 
ôem
[
Æloˇã
-1].
«me
 = 
li°
->name;

55 
ôem
[
Æloˇã
-1].
¥ev
 = &(item[allocate-2]);

56 
ôem
[
Æloˇã
-1].
√xt
 = 
NULL
;

58 
li°
->
hód
 = 
ôem
;

59 i‡(
li°
->
do_èû
)

60 
li°
->
èû
 = &(
ôem
[
Æloˇã
-1]);

62 
ôem
 = 
li°
->
hód
;

63 
ôem
) {

64 
li°
->
d©a_mem_cou¡
++;

65 i‡(!(
li°
->
d©a_mem‹y
 = 
	`ªÆloc
(list->data_memory,

66 
li°
->
d©a_mem_cou¡
 *

67 (*(
li°
->
d©a_mem‹y
))))) {

68 
	`quôhîe
(1, "List %s data_memory failedÅoÑealloc count=%d",

69 
li°
->
«me
,Üi°->
d©a_mem_cou¡
);

71 
ôem
->
d©a
 = 
	`ˇŒoc
(1, 
li°
->
siz
);

72 i‡(!(
ôem
->
d©a
))

73 
	`quôhîe
(1, "Li° %†ÁûedÅÿˇŒo¯ôem d©a", 
li°
->
«me
);

74 
li°
->
d©a_mem‹y
[li°->
d©a_mem_cou¡
 - 1] = (*)(
ôem
->
d©a
);

75 
ôem
 = iãm->
√xt
;

77 
	}
}

79 
K_STORE
 *
	$k_√w_°‹e
(
K_LIST
 *
li°
)

81 
K_STORE
 *
°‹e
;

83 
°‹e
 = 
	`ˇŒoc
(1, (*store));

84 i‡(!
°‹e
)

85 
	`quôhîe
(1, "FaûedÅÿˇŒo¯°‹êf‹ %s", 
li°
->
«me
);

87 
°‹e
->
is_°‹e
 = 
åue
;

88 
°‹e
->
lock
 = 
li°
->lock;

89 
°‹e
->
«me
 = 
li°
->name;

90 
°‹e
->
do_èû
 = 
li°
->do_tail;

92  
°‹e
;

93 
	}
}

95 
K_LIST
 *
	$_k_√w_li°
(c⁄° *
«me
, 
size_t
 
siz
, 
Æloˇã
, 
limô
, 
boﬁ
 
do_èû
, 
KLIST_FFL_ARGS
)

97 
K_LIST
 *
li°
;

99 i‡(
Æloˇã
 < 1)

100 
	`quôhîe
(1, "InvÆidÇewÜi° %†wôháŒoˇã %d mu° bê> 0", 
«me
, 
Æloˇã
);

102 i‡(
limô
 < 0)

103 
	`quôhîe
(1, "InvÆidÇewÜi° %†wôhÜimô %d mu° bê>0", 
«me
, 
limô
);

105 
li°
 = 
	`ˇŒoc
(1, (*list));

106 i‡(!
li°
)

107 
	`quôhîe
(1, "FaûedÅÿˇŒo¯li° %s", 
«me
);

109 
li°
->
is_°‹e
 = 
Ál£
;

111 
li°
->
lock
 = 
	`ˇŒoc
(1, (*(list->lock)));

112 i‡(!(
li°
->
lock
))

113 
	`quôhîe
(1, "FaûedÅÿˇŒo¯lock f‹Üi° %s", 
«me
);

115 
	`cglock_öô
(
li°
->
lock
);

117 
li°
->
«me
 =Çame;

118 
li°
->
siz
 = siz;

119 
li°
->
Æloˇã
 =állocate;

120 
li°
->
limô
 =Üimit;

121 
li°
->
do_èû
 = do_tail;

123 
	`k_Æloc_ôems
(
li°
, 
KLIST_FFL_PASS
);

125  
li°
;

126 
	}
}

135 
K_ITEM
 *
	$_k_u∆ök_hód
(
K_LIST
 *
li°
, 
KLIST_FFL_ARGS
)

137 
K_ITEM
 *
ôem
;

139 i‡(!(
li°
->
hód
Ë&& !÷i°->
is_°‹e
))

140 
	`k_Æloc_ôems
(
li°
, 
KLIST_FFL_PASS
);

142 i‡(!(
li°
->
hód
))

143  
NULL
;

145 
ôem
 = 
li°
->
hód
;

146 
li°
->
hód
 = 
ôem
->
√xt
;

147 i‡(
li°
->
hód
)

148 
li°
->
hód
->
¥ev
 = 
NULL
;

150 i‡(
li°
->
do_èû
)

151 
li°
->
èû
 = 
NULL
;

154 
ôem
->
¥ev
 = iãm->
√xt
 = 
NULL
;

156 
li°
->
cou¡
--;

158  
ôem
;

159 
	}
}

162 
K_ITEM
 *
	$_k_u∆ök_hód_zîo
(
K_LIST
 *
li°
, 
KLIST_FFL_ARGS
)

164 
K_ITEM
 *
ôem
;

166 
ôem
 = 
	`_k_u∆ök_hód
(
li°
, 
KLIST_FFL_PASS
);

168 i‡(
ôem
)

169 
	`mem£t
(
ôem
->
d©a
, 0, 
li°
->
siz
);

171  
ôem
;

172 
	}
}

175 
K_ITEM
 *
	$_k_u∆ök_èû
(
K_LIST
 *
li°
, 
KLIST_FFL_ARGS
)

177 
K_ITEM
 *
ôem
;

179 i‡(!(
li°
->
do_èû
)) {

180 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë- do_èû i†Ál£" 
KLIST_FFL
,

181 
li°
->
«me
, 
__func__
, 
KLIST_FFL_PASS
);

184 i‡(!(
li°
->
èû
))

185  
NULL
;

187 
ôem
 = 
li°
->
èû
;

188 
li°
->
èû
 = 
ôem
->
¥ev
;

189 i‡(
li°
->
èû
)

190 
li°
->
èû
->
√xt
 = 
NULL
;

192 
li°
->
hód
 = 
NULL
;

194 
ôem
->
¥ev
 = iãm->
√xt
 = 
NULL
;

196 
li°
->
cou¡
--;

198  
ôem
;

199 
	}
}

201 
	$_k_add_hód
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, 
KLIST_FFL_ARGS
)

203 i‡(
ôem
->
«me
 !
li°
->name) {

204 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë®%†ôem" 
KLIST_FFL
,

205 
li°
->
«me
, 
__func__
, 
ôem
->«me, 
KLIST_FFL_PASS
);

208 
ôem
->
¥ev
 = 
NULL
;

209 
ôem
->
√xt
 = 
li°
->
hód
;

210 i‡(
li°
->
hód
)

211 
li°
->
hód
->
¥ev
 = 
ôem
;

213 
li°
->
hód
 = 
ôem
;

215 i‡(
li°
->
do_èû
) {

216 i‡(!(
li°
->
èû
))

217 
li°
->
èû
 = 
ôem
;

220 
li°
->
cou¡
++;

221 
li°
->
cou¡_up
++;

222 
	}
}

232 
	$_k_add_èû
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, 
KLIST_FFL_ARGS
)

234 i‡(
ôem
->
«me
 !
li°
->name) {

235 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë®%†ôem" 
KLIST_FFL
,

236 
li°
->
«me
, 
__func__
, 
ôem
->«me, 
KLIST_FFL_PASS
);

239 i‡(!(
li°
->
do_èû
)) {

240 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë- do_èû i†Ál£" 
KLIST_FFL
,

241 
li°
->
«me
, 
__func__
, 
KLIST_FFL_PASS
);

244 
ôem
->
¥ev
 = 
li°
->
èû
;

245 
ôem
->
√xt
 = 
NULL
;

246 i‡(
li°
->
èû
)

247 
li°
->
èû
->
√xt
 = 
ôem
;

249 
li°
->
èû
 = 
ôem
;

251 i‡(!(
li°
->
hód
))

252 
li°
->
hód
 = 
ôem
;

254 
li°
->
cou¡
++;

255 
li°
->
cou¡_up
++;

256 
	}
}

258 
	$_k_ö£π_bef‹e
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, K_ITEM *
bef‹e
, 
KLIST_FFL_ARGS
)

260 i‡(
ôem
->
«me
 !
li°
->name) {

261 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë®%†ôem" 
KLIST_FFL
,

262 
li°
->
«me
, 
__func__
, 
ôem
->«me, 
KLIST_FFL_PASS
);

265 i‡(!
bef‹e
) {

266 
	`quôhîe
(1, "%s(Ë(%sËˇn'àbef‹ê®nuŒ iãm" 
KLIST_FFL
,

267 
__func__
, 
li°
->
«me
, 
KLIST_FFL_PASS
);

270 
ôem
->
√xt
 = 
bef‹e
;

271 
ôem
->
¥ev
 = 
bef‹e
->prev;

272 i‡(
bef‹e
->
¥ev
)

273 
bef‹e
->
¥ev
->
√xt
 = 
ôem
;

275 
li°
->
hód
 = 
ôem
;

276 
bef‹e
->
¥ev
 = 
ôem
;

278 
li°
->
cou¡
++;

279 
li°
->
cou¡_up
++;

280 
	}
}

282 
	$_k_ö£π_a·î
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, K_ITEM *
a·î
, 
KLIST_FFL_ARGS
)

284 i‡(
ôem
->
«me
 !
li°
->name) {

285 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë®%†ôem" 
KLIST_FFL
,

286 
li°
->
«me
, 
__func__
, 
ôem
->«me, 
KLIST_FFL_PASS
);

289 i‡(!
a·î
) {

290 
	`quôhîe
(1, "%s(Ë(%sËˇn'àa·îáÇuŒ iãm" 
KLIST_FFL
,

291 
__func__
, 
li°
->
«me
, 
KLIST_FFL_PASS
);

294 
ôem
->
¥ev
 = 
a·î
;

295 
ôem
->
√xt
 = 
a·î
->next;

296 i‡(
a·î
->
√xt
)

297 
a·î
->
√xt
->
¥ev
 = 
ôem
;

299 i‡(
li°
->
do_èû
)

300 
li°
->
èû
 = 
ôem
;

302 
a·î
->
√xt
 = 
ôem
;

304 
li°
->
cou¡
++;

305 
li°
->
cou¡_up
++;

306 
	}
}

308 
	$_k_u∆ök_ôem
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, 
KLIST_FFL_ARGS
)

310 i‡(
ôem
->
«me
 !
li°
->name) {

311 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë®%†ôem" 
KLIST_FFL
,

312 
li°
->
«me
, 
__func__
, 
ôem
->«me, 
KLIST_FFL_PASS
);

315 i‡(
ôem
->
¥ev
)

316 
ôem
->
¥ev
->
√xt
 = item->next;

318 i‡(
ôem
->
√xt
)

319 
ôem
->
√xt
->
¥ev
 = item->prev;

321 i‡(
li°
->
hód
 =
ôem
)

322 
li°
->
hód
 = 
ôem
->
√xt
;

324 i‡(
li°
->
do_èû
) {

325 i‡(
li°
->
èû
 =
ôem
)

326 
li°
->
èû
 = 
ôem
->
¥ev
;

329 
ôem
->
¥ev
 = iãm->
√xt
 = 
NULL
;

331 
li°
->
cou¡
--;

332 
	}
}

334 
	$_k_li°_å™s„r_to_hód
(
K_LIST
 *
‰om
, K_LIST *
to
, 
KLIST_FFL_ARGS
)

336 i‡(
‰om
->
«me
 !
to
->name) {

337 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ëtÿ®%†li°" 
KLIST_FFL
,

338 
‰om
->
«me
, 
__func__
, 
to
->«me, 
KLIST_FFL_PASS
);

341 i‡(!(
‰om
->
do_èû
)) {

342 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë- do_èû i†Ál£" 
KLIST_FFL
,

343 
‰om
->
«me
, 
__func__
, 
KLIST_FFL_PASS
);

346 i‡(!(
‰om
->
hód
))

349 i‡(
to
->
hód
)

350 
to
->
hód
->
¥ev
 = 
‰om
->
èû
;

352 
to
->
èû
 = 
‰om
->tail;

354 
‰om
->
èû
->
√xt
 = 
to
->
hód
;

355 
to
->
hód
 = 
‰om
->head;

357 
‰om
->
hód
 = from->
èû
 = 
NULL
;

358 
to
->
cou¡
 +
‰om
->count;

359 
‰om
->
cou¡
 = 0;

360 
to
->
cou¡_up
 +
‰om
->count_up;

361 
‰om
->
cou¡_up
 = 0;

362 
	}
}

364 
	$_k_li°_å™s„r_to_èû
(
K_LIST
 *
‰om
, K_LIST *
to
, 
KLIST_FFL_ARGS
)

366 i‡(
‰om
->
«me
 !
to
->name) {

367 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ëtÿ®%†li°" 
KLIST_FFL
,

368 
‰om
->
«me
, 
__func__
, 
to
->«me, 
KLIST_FFL_PASS
);

371 i‡(!(
‰om
->
do_èû
)) {

372 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë- do_èû i†Ál£" 
KLIST_FFL
,

373 
‰om
->
«me
, 
__func__
, 
KLIST_FFL_PASS
);

376 i‡(!(
‰om
->
hód
))

379 i‡(
to
->
èû
)

380 
to
->
èû
->
√xt
 = 
‰om
->
hód
;

382 
to
->
hód
 = 
‰om
->head;

384 
‰om
->
hód
->
¥ev
 = 
to
->
èû
;

385 
to
->
èû
 = 
‰om
->tail;

387 
‰om
->
hód
 = from->
èû
 = 
NULL
;

388 
to
->
cou¡
 +
‰om
->count;

389 
‰om
->
cou¡
 = 0;

390 
to
->
cou¡_up
 +
‰om
->count_up;

391 
‰om
->
cou¡_up
 = 0;

392 
	}
}

394 
K_LIST
 *
	$_k_‰ì_li°
(
K_LIST
 *
li°
, 
KLIST_FFL_ARGS
)

396 
i
;

398 i‡(
li°
->
is_°‹e
) {

399 
	`quôhîe
(1, "Li° %†ˇn'à%s(Ë®°‹e" 
KLIST_FFL
,

400 
li°
->
«me
, 
__func__
, 
KLIST_FFL_PASS
);

403 
i
 = 0; i < 
li°
->
ôem_mem_cou¡
; i++)

404 
	`‰ì
(
li°
->
ôem_mem‹y
[
i
]);

405 
	`‰ì
(
li°
->
ôem_mem‹y
);

407 
i
 = 0; i < 
li°
->
d©a_mem_cou¡
; i++)

408 
	`‰ì
(
li°
->
d©a_mem‹y
[
i
]);

409 
	`‰ì
(
li°
->
d©a_mem‹y
);

411 
	`cglock_de°roy
(
li°
->
lock
);

413 
	`‰ì
(
li°
->
lock
);

415 
	`‰ì
(
li°
);

417  
NULL
;

418 
	}
}

420 
K_STORE
 *
	$_k_‰ì_°‹e
(
K_STORE
 *
°‹e
, 
KLIST_FFL_ARGS
)

422 i‡(!(
°‹e
->
is_°‹e
)) {

423 
	`quôhîe
(1, "St‹ê%†ˇn'à%s(Ëthêli°" 
KLIST_FFL
,

424 
°‹e
->
«me
, 
__func__
, 
KLIST_FFL_PASS
);

427 
	`‰ì
(
°‹e
);

429  
NULL
;

430 
	}
}

	@klist.h

10 #i‚de‡
KLIST_H


11 
	#KLIST_H


	)

13 
	~<möî.h
>

15 
	#KLIST_FFL
 " - from %†%s(Ëlöê%d"

	)

16 
	#KLIST_FFL_HERE
 
__FILE__
, 
__func__
, 
__LINE__


	)

17 
	#KLIST_FFL_PASS
 
fûe
, 
func
, 
löe


	)

18 
	#KLIST_FFL_ARGS
 
__maybe_unu£d
 c⁄° *
fûe
, \

19 
__maybe_unu£d
 c⁄° *
func
, \

20 
__maybe_unu£d
 c⁄° 
löe


	)

22 
	sk_ôem
 {

23 c⁄° *
	m«me
;

24 
k_ôem
 *
	m¥ev
;

25 
k_ôem
 *
	m√xt
;

26 *
	md©a
;

27 } 
	tK_ITEM
;

29 
	sk_li°
 {

30 c⁄° *
	m«me
;

31 
boﬁ
 
	mis_°‹e
;

32 
cglock_t
 *
	mlock
;

33 
k_ôem
 *
	mhód
;

34 
k_ôem
 *
	mèû
;

35 
size_t
 
	msiz
;

36 
	mtŸÆ
;

37 
	mcou¡
;

38 
	mcou¡_up
;

39 
	mÆloˇã
;

40 
	mlimô
;

41 
boﬁ
 
	mdo_èû
;

42 
	môem_mem_cou¡
;

43 **
	môem_mem‹y
;

44 
	md©a_mem_cou¡
;

45 **
	md©a_mem‹y
;

46 } 
	tK_LIST
;

54 
	#K_STORE
 
K_LIST


	)

59 
	#K_WLOCK
(
_li°
Ë
	`cg_wlock
(_li°->
lock
)

	)

60 
	#K_WUNLOCK
(
_li°
Ë
	`cg_wu∆ock
(_li°->
lock
)

	)

61 
	#K_RLOCK
(
_li°
Ë
	`cg_æock
(_li°->
lock
)

	)

62 
	#K_RUNLOCK
(
_li°
Ë
	`cg_ru∆ock
(_li°->
lock
)

	)

64 
K_STORE
 *
k_√w_°‹e
(
K_LIST
 *
li°
);

65 
K_LIST
 *
_k_√w_li°
(c⁄° *
«me
, 
size_t
 
siz
, 
Æloˇã
, 
limô
, 
boﬁ
 
do_èû
, 
KLIST_FFL_ARGS
);

66 
	#k_√w_li°
(
_«me
, 
_siz
, 
_Æloˇã
, 
_limô
, 
_do_èû
Ë
	`_k_√w_li°
(_«me, _siz, _Æloˇã, _limô, _do_èû, 
KLIST_FFL_HERE
)

	)

67 
K_ITEM
 *
_k_u∆ök_hód
(
K_LIST
 *
li°
, 
KLIST_FFL_ARGS
);

68 
	#k_u∆ök_hód
(
_li°
Ë
	`_k_u∆ök_hód
(_li°, 
KLIST_FFL_HERE
)

	)

69 
K_ITEM
 *
_k_u∆ök_hód_zîo
(
K_LIST
 *
li°
, 
KLIST_FFL_ARGS
);

70 
	#k_u∆ök_hód_zîo
(
_li°
Ë
	`_k_u∆ök_hód_zîo
(_li°, 
KLIST_FFL_HERE
)

	)

71 
K_ITEM
 *
_k_u∆ök_èû
(
K_LIST
 *
li°
, 
KLIST_FFL_ARGS
);

72 
	#k_u∆ök_èû
(
_li°
Ë
	`_k_u∆ök_èû
(_li°, 
KLIST_FFL_HERE
)

	)

73 
_k_add_hód
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, 
KLIST_FFL_ARGS
);

74 
	#k_add_hód
(
_li°
, 
_ôem
Ë
	`_k_add_hód
(_li°, _ôem, 
KLIST_FFL_HERE
)

	)

76 
	#k_‰ì_hód
(
__li°
, 
__ôem
Ë
	`_k_add_hód
(__li°, __ôem, 
KLIST_FFL_HERE
)

	)

77 
_k_add_èû
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, 
KLIST_FFL_ARGS
);

78 
	#k_add_èû
(
_li°
, 
_ôem
Ë
	`_k_add_èû
(_li°, _ôem, 
KLIST_FFL_HERE
)

	)

79 
_k_ö£π_bef‹e
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, K_ITEM *
bef‹e
, 
KLIST_FFL_ARGS
);

80 
	#k_ö£π_bef‹e
(
_li°
, 
_ôem
, 
_bef‹e
Ë
	`_k_ö£π_bef‹e
(_li°, _ôem, _bef‹e, 
KLIST_FFL_HERE
)

	)

81 
_k_ö£π_a·î
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, K_ITEM *
a·î
, 
KLIST_FFL_ARGS
);

82 
	#k_ö£π_a·î
(
_li°
, 
_ôem
, 
_a·î
Ë
	`_k_ö£π_a·î
(_li°, _ôem, _a·î, 
KLIST_FFL_HERE
)

	)

83 
_k_u∆ök_ôem
(
K_LIST
 *
li°
, 
K_ITEM
 *
ôem
, 
KLIST_FFL_ARGS
);

84 
	#k_u∆ök_ôem
(
_li°
, 
_ôem
Ë
	`_k_u∆ök_ôem
(_li°, _ôem, 
KLIST_FFL_HERE
)

	)

85 
_k_li°_å™s„r_to_hód
(
K_LIST
 *
‰om
, K_LIST *
to
, 
KLIST_FFL_ARGS
);

86 
	#k_li°_å™s„r_to_hód
(
_‰om
, 
_to
Ë
	`_k_li°_å™s„r_to_hód
(_‰om, _to, 
KLIST_FFL_HERE
)

	)

87 
_k_li°_å™s„r_to_èû
(
K_LIST
 *
‰om
, K_LIST *
to
, 
KLIST_FFL_ARGS
);

88 
	#k_li°_å™s„r_to_èû
(
_‰om
, 
_to
Ë
	`_k_li°_å™s„r_to_èû
(_‰om, _to, 
KLIST_FFL_HERE
)

	)

89 
K_LIST
 *
_k_‰ì_li°
(K_LIST *
li°
, 
KLIST_FFL_ARGS
);

90 
	#k_‰ì_li°
(
_li°
Ë
	`_k_‰ì_li°
(_li°, 
KLIST_FFL_HERE
)

	)

91 
K_STORE
 *
_k_‰ì_°‹e
(K_STORE *
°‹e
, 
KLIST_FFL_ARGS
);

92 
	#k_‰ì_°‹e
(
_°‹e
Ë
	`_k_‰ì_°‹e
(_°‹e, 
KLIST_FFL_HERE
)

	)

	@logging.c

14 
	~"c⁄fig.h
"

15 
	~<uni°d.h
>

17 
	~"loggög.h
"

18 
	~"möî.h
"

20 
boﬁ
 
	g›t_debug
 = 
Ál£
;

21 
boﬁ
 
	g›t_log_ouçut
 = 
Ál£
;

23 
	g›t_log_Àvñ
 = 
LOG_NOTICE
;

24 
FILE
 * 
	gg_log_fûe
 = 
NULL
;

25 
boﬁ
 
	gg_logfûe_íabÀ
 = 
Ál£
;

26 
	gg_logfûe_∑th
[256] = {0};

27 
	gg_logfûe_›íÊag
[32] = {0};

29 
	$my_log_cur£s
(
¥io
, c⁄° *
d©ëime
, c⁄° *
°r
, 
boﬁ
 
f‹˚
)

31 i‡(
›t_quõt
 && 
¥io
 !
LOG_ERR
)

38 i‡(
f‹˚
)

40 
	`muãx_åylock
(&
c⁄sﬁe_lock
);

41 
	`muãx_u∆ock
(&
c⁄sﬁe_lock
);

44 #ifde‡
HAVE_CURSES


45 
boﬁ
 
u£_cur£s
;

47 i‡(
u£_cur£s
 && 
	`log_cur£s_⁄ly
(
¥io
, 
d©ëime
, 
°r
))

52 
	`muãx_lock
(&
c⁄sﬁe_lock
);

53 
	`¥ötf
("%s%s%s", 
d©ëime
, 
°r
, " \n");

54 
	`muãx_u∆ock
(&
c⁄sﬁe_lock
);

56 
	}
}

63 
	$_≠∂og
(
¥io
, c⁄° *
°r
, 
boﬁ
 
f‹˚
)

65 #ifde‡
HAVE_SYSLOG_H


66 i‡(
u£_sy¶og
)

68 
	`sy¶og
(
LOG_LOCAL0
 | 
¥io
, "%s", 
°r
);

75 
d©ëime
[64];

76 
timevÆ
 
tv
 = {0, 0};

77 
tm
 *tm;

79 
	`cgtime
(&
tv
);

81 c⁄° 
time_t
 
tmp_time
 = 
tv
.
tv_£c
;

82 
ms
 = ()(
tv
.
tv_u£c
 / 1000);

83 
tm
 = 
	`loˇ…ime
(&
tmp_time
);

85 
	`¢¥ötf
(
d©ëime
, (datetime), " [%d-%02d-%02d %02d:%02d:%02d.%03d] ",

86 
tm
->
tm_yór
 + 1900,

87 
tm
->
tm_m⁄
 + 1,

88 
tm
->
tm_mday
,

89 
tm
->
tm_hour
,

90 
tm
->
tm_mö
,

91 
tm
->
tm_£c
, 
ms
);

94 i‡(!
	`ißây
(
	`fûío
((
FILE
 *)
°dîr
)))

96 
	`Ârötf
(
°dîr
, "%s%s\n", 
d©ëime
, 
°r
);

97 
	`fÊush
(
°dîr
);

99 if(
g_logfûe_íabÀ
)

102 if(!
g_log_fûe
)

104 
g_log_fûe
 = 
	`f›í
(
g_logfûe_∑th
, 
g_logfûe_›íÊag
);

107 if(
g_log_fûe
)

109 
	`fwrôe
(
d©ëime
, 
	`°æí
(d©ëime), 1, 
g_log_fûe
);

110 
	`fwrôe
(
°r
, 
	`°æí
(°r), 1, 
g_log_fûe
);

111 
	`fwrôe
("\n", 1, 1, 
g_log_fûe
);

112 
	`fÊush
(
g_log_fûe
);

116 
	`my_log_cur£s
(
¥io
, 
d©ëime
, 
°r
, 
f‹˚
);

118 
	}
}

120 
	$_sim∂ñog
(
¥io
, c⁄° *
°r
, 
boﬁ
 
f‹˚
)

122 #ifde‡
HAVE_SYSLOG_H


123 i‡(
u£_sy¶og
)

125 
	`sy¶og
(
LOG_LOCAL0
 | 
¥io
, "%s", 
°r
);

134 i‡(!
	`ißây
(
	`fûío
((
FILE
 *)
°dîr
)))

136 
	`Ârötf
(
°dîr
, "%s\n", 
°r
);

137 
	`fÊush
(
°dîr
);

140 
	`my_log_cur£s
(
¥io
, "", 
°r
, 
f‹˚
);

142 
	}
}

	@logging.h

1 #i‚de‡
__LOGGING_H__


2 
	#__LOGGING_H__


	)

4 
	~"c⁄fig.h
"

5 
	~<°dboﬁ.h
>

6 
	~<°d¨g.h
>

8 #ifde‡
HAVE_SYSLOG_H


9 
	~<sy¶og.h
>

13 
	mLOG_ERR
,

14 
	mLOG_WARNING
,

15 
	mLOG_NOTICE
,

16 
	mLOG_INFO
,

17 
	mLOG_DEBUG
,

22 
boﬁ
 
›t_debug
;

23 
boﬁ
 
›t_log_ouçut
;

24 
boﬁ
 
›t_ªÆquõt
;

25 
boﬁ
 
w™t_≥r_devi˚_°©s
;

28 
›t_log_Àvñ
;

30 
	#LOGBUFSIZ
 2048

	)

32 
_≠∂og
(
¥io
, c⁄° *
°r
, 
boﬁ
 
f‹˚
);

33 
_sim∂ñog
(
¥io
, c⁄° *
°r
, 
boﬁ
 
f‹˚
);

35 
	#IN_FMT_FFL
 " i¿%†%s():%d"

	)

37 
	#≠∂og
(
¥io
, 
fmt
, ...) do { \

38 i‡(
›t_debug
 || 
¥io
 !
LOG_DEBUG
) { \

39 i‡(
u£_sy¶og
 || 
›t_log_ouçut
 || 
¥io
 <
›t_log_Àvñ
) { \

40 
tmp42
[
LOGBUFSIZ
]; \

41 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

42 
	`_≠∂og
(
¥io
, 
tmp42
, 
Ál£
); \

45 } 0)

	)

47 
	#sim∂ñog
(
¥io
, 
fmt
, ...) do { \

48 i‡(
›t_debug
 || 
¥io
 !
LOG_DEBUG
) { \

49 i‡(
u£_sy¶og
 || 
›t_log_ouçut
 || 
¥io
 <
›t_log_Àvñ
) { \

50 
tmp42
[
LOGBUFSIZ
]; \

51 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

52 
	`_sim∂ñog
(
¥io
, 
tmp42
, 
Ál£
); \

55 } 0)

	)

58 
	#≠∂ogsiz
(
¥io
, 
_SIZ
, 
fmt
, ...) do { \

59 i‡(
›t_debug
 || 
¥io
 !
LOG_DEBUG
) { \

60 i‡(
u£_sy¶og
 || 
›t_log_ouçut
 || 
¥io
 <
›t_log_Àvñ
) { \

61 
tmp42
[
_SIZ
]; \

62 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

63 
	`_≠∂og
(
¥io
, 
tmp42
, 
Ál£
); \

66 } 0)

	)

68 
	#f‹˚log
(
¥io
, 
fmt
, ...) do { \

69 i‡(
›t_debug
 || 
¥io
 !
LOG_DEBUG
) { \

70 i‡(
u£_sy¶og
 || 
›t_log_ouçut
 || 
¥io
 <
›t_log_Àvñ
) { \

71 
tmp42
[
LOGBUFSIZ
]; \

72 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

73 
	`_≠∂og
(
¥io
, 
tmp42
, 
åue
); \

76 } 0)

	)

78 
	#quô
(
°©us
, 
fmt
, ...) do { \

79 i‡(
fmt
) { \

80 
tmp42
[
LOGBUFSIZ
]; \

81 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

82 
	`_≠∂og
(
LOG_ERR
, 
tmp42
, 
åue
); \

84 
	`_quô
(
°©us
); \

85 } 0)

	)

87 
	#óæy_quô
(
°©us
, 
fmt
, ...) do { \

88 i‡(
fmt
) { \

89 
tmp42
[
LOGBUFSIZ
]; \

90 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

91 
	`_≠∂og
(
LOG_ERR
, 
tmp42
, 
åue
); \

93 
	`__quô
(
°©us
, 
Ál£
); \

94 } 0)

	)

96 
	#quôhîe
(
°©us
, 
fmt
, ...) do { \

97 i‡(
fmt
) { \

98 
tmp42
[
LOGBUFSIZ
]; \

99 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
 
IN_FMT_FFL
, \

100 ##
__VA_ARGS__
, 
__FILE__
, 
__func__
, 
__LINE__
); \

101 
	`_≠∂og
(
LOG_ERR
, 
tmp42
, 
åue
); \

103 
	`_quô
(
°©us
); \

104 } 0)

	)

106 
	#quô‰om
(
°©us
, 
_fûe
, 
_func
, 
_löe
, 
fmt
, ...) do { \

107 i‡(
fmt
) { \

108 
tmp42
[
LOGBUFSIZ
]; \

109 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
 
IN_FMT_FFL
, \

110 ##
__VA_ARGS__
, 
_fûe
, 
_func
, 
_löe
); \

111 
	`_≠∂og
(
LOG_ERR
, 
tmp42
, 
åue
); \

113 
	`_quô
(
°©us
); \

114 } 0)

	)

116 #ifde‡
HAVE_CURSES


118 
	#wlog
(
fmt
, ...) do { \

119 
tmp42
[
LOGBUFSIZ
]; \

120 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

121 
	`_wlog
(
tmp42
); \

122 } 0)

	)

124 
	#wlog¥öt
(
fmt
, ...) do { \

125 
tmp42
[
LOGBUFSIZ
]; \

126 
	`¢¥ötf
(
tmp42
, —mp42), 
fmt
, ##
__VA_ARGS__
); \

127 
	`_wlog¥öt
(
tmp42
); \

128 } 0)

	)

	@miner.h

16 #i‚de‡
__MINER_H__


17 
	#__MINER_H__


	)

19 
	~"c⁄fig.h
"

20 
	~<öây≥s.h
>

21 
	~<°dboﬁ.h
>

22 
	~<°döt.h
>

23 
	~<sys/time.h
>

24 
	~<±hªad.h
>

25 
	~<j™ss⁄.h
>

26 #ifde‡
HAVE_LIBCURL


27 
	~<cuæ/cuæ.h
>

29 
	tCURL
;

30 *
cuæy
;

31 
	#cuæ_ósy_öô
(
cuæ
Ë(
cuæy
)

	)

32 
	#cuæ_ósy_˛ónup
(
cuæ
Ë{}

	)

33 
	#cuæ_globÆ_˛ónup
(Ë{}

	)

34 
	#CURL_GLOBAL_ALL
 0

	)

35 
	#cuæ_globÆ_öô
(
X
Ë(0)

	)

37 
	~<sched.h
>

39 
	~"ñi°.h
"

40 
	~"uthash.h
"

41 
	~"loggög.h
"

42 
	~"utû.h
"

43 
	~<sys/ty≥s.h
>

44 #i‚de‡
WIN32


45 
	~<sys/sockë.h
>

46 
	~<√tdb.h
>

49 #ifde‡
USE_USBUTILS


50 
	~<£m≠h‹e.h
>

53 #ifde‡
STDC_HEADERS


54 
	~<°dlib.h
>

55 
	~<°ddef.h
>

57 #ifde‡
HAVE_STDLIB_H


58 
	~<°dlib.h
>

61 #ifde‡
HAVE_ALLOCA_H


62 
	~<Æloˇ.h
>

63 #ñi‡
deföed
 
__GNUC__


64 #i‚de‡
WIN32


65 
	#Æloˇ
 
__buûtö_Æloˇ


	)

67 
	~<mÆloc.h
>

69 #ñi‡
deföed
 
_AIX


70 
	#Æloˇ
 
__Æloˇ


	)

71 #ñi‡
deföed
 
_MSC_VER


72 
	~<mÆloc.h
>

73 
	#Æloˇ
 
_Æloˇ


	)

75 #i‚de‡
HAVE_ALLOCA


76 #ifde‡ 
__˝lu•lus


79 *
Æloˇ
 (
size_t
 
size
);

83 #ifde‡
__MINGW32__


84 
	~<wödows.h
>

85 
	~<io.h
>

86 
ölöe
 
	$fsync
 (
fd
)

88  (
	`FlushFûeBuf„rs
 ((
HANDLE
Ë
	`_gë_osfh™dÀ
 (
fd
))) ? 0 : -1;

89 
	}
}

91 #i‚de‡
EWOULDBLOCK


92 
	#EWOULDBLOCK
 
EAGAIN


	)

95 #i‚de‡
MSG_DONTWAIT


96 
	#MSG_DONTWAIT
 0x1000000

	)

100 #i‡
deföed
 (
__löux
)

101 #i‚de‡
LINUX


102 
	#LINUX


	)

106 #ifde‡
WIN32


107 #i‚de‡
timîsub


108 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

110 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

111 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

112 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

113 --(
ªsu…
)->
tv_£c
; \

114 (
ªsu…
)->
tv_u£c
 += 1000000; \

116 } 0)

	)

118 #i‚de‡
timîadd


119 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

121 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

122 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

123 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

125 ++(
ªsu…
)->
tv_£c
; \

126 (
ªsu…
)->
tv_u£c
 -= 1000000; \

128 } 0)

	)

132 
	#__STDC_FORMAT_MACROS


	)

134 #ifde‡
USE_USBUTILS


135 
	~<libusb.h
>

138 #ifde‡
USE_USBUTILS


139 
	~"usbutûs.h
"

142 #i‡(!
deföed
(
WIN32
Ë&& ((
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 3))) \

143 || (
deföed
(
WIN32
Ë&& ((
	g__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 7)))

144 #i‚de‡
bsw≠_16


145 
	#bsw≠_16
 
__buûtö_bsw≠16


	)

146 
	#bsw≠_32
 
__buûtö_bsw≠32


	)

147 
	#bsw≠_64
 
__buûtö_bsw≠64


	)

150 #i‡
HAVE_BYTESWAP_H


151 
	~<byãsw≠.h
>

152 #ñi‡
deföed
(
USE_SYS_ENDIAN_H
)

153 
	~<sys/ídün.h
>

154 #ñi‡
deföed
(
__APPLE__
)

155 
	~<libkîn/OSByãOrdî.h
>

156 
	#bsw≠_16
 
OSSw≠I¡16


	)

157 
	#bsw≠_32
 
OSSw≠I¡32


	)

158 
	#bsw≠_64
 
OSSw≠I¡64


	)

160 
	#bsw≠_16
(
vÆue
) \

161 ((((
vÆue
Ë& 0xffË<< 8Ë| ((vÆueË>> 8))

	)

163 
	#bsw≠_32
(
vÆue
) \

164 (((
uöt32_t
)
	`bsw≠_16
((
uöt16_t
)((
vÆue
) & 0xffff)) << 16) | \

165 (
uöt32_t
)
	`bsw≠_16
((
uöt16_t
)((
vÆue
Ë>> 16)))

	)

167 
	#bsw≠_64
(
vÆue
) \

168 (((
uöt64_t
)
	`bsw≠_32
((
uöt32_t
)((
vÆue
) & 0xffffffff)) \

170 (
uöt64_t
)
	`bsw≠_32
((
uöt32_t
)((
vÆue
Ë>> 32)))

	)

174 #i‚de‡
bsw≠_8


175 
bô_sw≠_èbÀ
[256];

176 
	#bsw≠_8
(
x
Ë(
bô_sw≠_èbÀ
[x])

	)

181 #i‚de‡
htobe32


182 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


183 
	#htﬁe8
(
x
Ë(x)

	)

184 
	#htﬁe16
(
x
Ë(x)

	)

185 
	#À16toh
(
x
Ë(x)

	)

186 
	#htﬁe32
(
x
Ë(x)

	)

187 
	#htﬁe64
(
x
Ë(x)

	)

188 
	#À32toh
(
x
Ë(x)

	)

189 
	#À64toh
(
x
Ë(x)

	)

190 
	#be32toh
(
x
Ë
	`bsw≠_32
(x)

	)

191 
	#be64toh
(
x
Ë
	`bsw≠_64
(x)

	)

192 
	#htobe16
(
x
Ë
	`bsw≠_16
(x)

	)

193 
	#htobe32
(
x
Ë
	`bsw≠_32
(x)

	)

194 
	#htobe64
(
x
Ë
	`bsw≠_64
(x)

	)

195 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


196 
	#htﬁe8
(
x
Ë
	`bsw≠_8
(x)

	)

197 
	#htﬁe16
(
x
Ë
	`bsw≠_16
(x)

	)

198 
	#À16toh
(
x
Ë
	`bsw≠_16
(x)

	)

199 
	#htﬁe32
(
x
Ë
	`bsw≠_32
(x)

	)

200 
	#À32toh
(
x
Ë
	`bsw≠_32
(x)

	)

201 
	#À64toh
(
x
Ë
	`bsw≠_64
(x)

	)

202 
	#htﬁe64
(
x
Ë
	`bsw≠_64
(x)

	)

203 
	#be32toh
(
x
Ë(x)

	)

204 
	#be64toh
(
x
Ë(x)

	)

205 
	#htobe16
(
x
Ë(x)

	)

206 
	#htobe32
(
x
Ë(x)

	)

207 
	#htobe64
(
x
Ë(x)

	)

209 #îr‹ 
UNKNOWN
 
BYTE
 
ORDER


214 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


215 
	#htﬁe8
(
x
Ë(x)

	)

216 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


217 
	#htﬁe8
(
x
Ë
	`bsw≠_8
(x)

	)

219 #îr‹ 
UNKNOWN
 
BYTE
 
ORDER


224 #unde‡
u∆ikñy


225 #unde‡
likñy


226 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ > 2Ë&& deföed(
__OPTIMIZE__
)

227 
	#u∆ikñy
(
ex¥
Ë(
	`__buûtö_ex≥˘
(!!”x¥), 0))

	)

228 
	#likñy
(
ex¥
Ë(
	`__buûtö_ex≥˘
(!!”x¥), 1))

	)

230 
	#u∆ikñy
(
ex¥
Ë”x¥)

	)

231 
	#likñy
(
ex¥
Ë”x¥)

	)

233 
	#__maybe_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

235 
	#unöôüli£d_v¨
(
x
Ëx = 
	)
x

237 #i‡
deföed
(
__i386__
)

238 
	#WANT_CRYPTOPP_ASM32


	)

241 #i‚de‡
ARRAY_SIZE


242 
	#ARRAY_SIZE
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

246 #ifde‡
__APPLE__


247 
	#£mtimed›
(
SEM
, 
SOPS
, 
VAL
, 
TIMEOUT
Ë
	`£m›
(SEM, SOPS, VAL)

	)

250 #i‚de‡
MIN


251 
	#MIN
(
x
, 
y
Ë((xË> (yË? (yË: (x))

	)

253 #i‚de‡
MAX


254 
	#MAX
(
x
, 
y
Ë((xË> (yË? (xË: (y))

	)

261 
	#FPGA_PARSE_COMMANDS
(
DRIVER_ADD_COMMAND
) \

262 
	`DRIVER_ADD_COMMAND
(
bôf‹˚
) \

263 
	`DRIVER_ADD_COMMAND
(
modmöî
)

	)

265 
	#ASIC_PARSE_COMMANDS
(
DRIVER_ADD_COMMAND
) \

266 
	`DRIVER_ADD_COMMAND
(
bômaö
) \

267 
	`DRIVER_ADD_COMMAND
(
bômaö_B3
)

	)

269 
	#DRIVER_PARSE_COMMANDS
(
DRIVER_ADD_COMMAND
) \

270 
	`FPGA_PARSE_COMMANDS
(
DRIVER_ADD_COMMAND
) \

271 
	`ASIC_PARSE_COMMANDS
(
DRIVER_ADD_COMMAND
)

	)

273 
	#DRIVER_ENUM
(
X
Ë
DRIVER_
##X,

	)

274 
	#DRIVER_PROTOTYPE
(
X
Ë
devi˚_drv
 X##
_drv
;

	)

277 
	edrv_drivî


279 
DRIVER_PARSE_COMMANDS
(
DRIVER_ENUM
)

280 
	mDRIVER_MAX


284 
	$DRIVER_PARSE_COMMANDS
(
DRIVER_PROTOTYPE
)

286 
	eÆive


288 
LIFE_WELL
,

289 
LIFE_SICK
,

290 
LIFE_DEAD
,

291 
LIFE_NOSTART
,

292 
LIFE_INIT
,

296 
	epoﬁ_°øãgy


298 
POOL_FAILOVER
,

299 
POOL_ROUNDROBIN
,

300 
POOL_ROTATE
,

301 
POOL_LOADBALANCE
,

302 
POOL_BALANCE
,

305 
	#TOP_STRATEGY
 (
POOL_BALANCE
)

	)

307 
	s°øãgõs


309 c⁄° *
s
;

312 
cgpu_öfo
;

314 
	`bœnk_gë_°©löe_bef‹e
(*
buf
, 
size_t
 
bufsiz
, 
cgpu_öfo
 
__maybe_unu£d
 *
cgpu
);

316 
≠i_d©a
;

317 
thr_öfo
;

318 
w‹k
;

320 
	sdevi˚_drv


322 
drv_drivî
 
drv_id
;

324 *
d«me
;

325 *
«me
;

328 (*
drv_dëe˘
)(
boﬁ
);

331 (*
ªöô_devi˚
)(
cgpu_öfo
 *);

332 (*
gë_°©löe_bef‹e
)(*, 
size_t
, 
cgpu_öfo
 *);

333 (*
gë_°©löe
)(*, 
size_t
, 
cgpu_öfo
 *);

334 
≠i_d©a
 *(*
gë_≠i_°©s
)(
cgpu_öfo
 *);

335 
	`boﬁ
 (*
gë_°©s
)(
cgpu_öfo
 *);

336 (*
idítify_devi˚
)(
cgpu_öfo
 *);

337 *(*
£t_devi˚
)(
cgpu_öfo
 *, *
›ti⁄
, *
£âög
, *
ª∂ybuf
);

340 
	`boﬁ
 (*
thªad_¥ï¨e
)(
thr_öfo
 *);

341 
	`uöt32_t
 (*
ˇn_limô_w‹k
)(
thr_öfo
 *);

342 
	`boﬁ
 (*
thªad_öô
)(
thr_öfo
 *);

343 
	`boﬁ
 (*
¥ï¨e_w‹k
)(
thr_öfo
 *, 
w‹k
 *);

346 (*
hash_w‹k
)(
thr_öfo
 *);

350 
	`öt64_t
 (*
sˇnhash
)(
thr_öfo
 *, 
w‹k
 *, 
öt64_t
);

351 
	`öt64_t
 (*
sˇnw‹k
)(
thr_öfo
 *);

356 
	`boﬁ
 (*
queue_fuŒ
)(
cgpu_öfo
 *);

358 (*
Êush_w‹k
)(
cgpu_öfo
 *);

360 (*
upd©e_w‹k
)(
cgpu_öfo
 *);

362 (*
hw_îr‹
)(
thr_öfo
 *);

363 (*
thªad_shutdown
)(
thr_öfo
 *);

364 (*
thªad_íabÀ
)(
thr_öfo
 *);

367 (*
zîo_°©s
)(
cgpu_öfo
 *);

370 
boﬁ
 
c›y
;

373 
max_diff
;

376 
mö_diff
;

379 
devi˚_drv
 *
	`c›y_drv
(device_drv*);

381 
	edev_íabÀ


383 
DEV_ENABLED
,

384 
DEV_DISABLED
,

385 
DEV_RECOVER
,

388 
	edev_ªas⁄


390 
REASON_THREAD_FAIL_INIT
,

391 
REASON_THREAD_ZERO_HASH
,

392 
REASON_THREAD_FAIL_QUEUE
,

393 
REASON_DEV_SICK_IDLE_60
,

394 
REASON_DEV_DEAD_IDLE_600
,

395 
REASON_DEV_NOSTART
,

396 
REASON_DEV_OVER_HEAT
,

397 
REASON_DEV_THERMAL_CUTOFF
,

398 
REASON_DEV_COMMS_ERROR
,

399 
REASON_DEV_THROTTLE
,

402 
	#REASON_NONE
 "N⁄e"

	)

403 
	#REASON_THREAD_FAIL_INIT_STR
 "Thªad faûedÅÿöô"

	)

404 
	#REASON_THREAD_ZERO_HASH_STR
 "Thªad gŸ zîÿhashes"

	)

405 
	#REASON_THREAD_FAIL_QUEUE_STR
 "Thªad faûedÅÿqueuêw‹k"

	)

406 
	#REASON_DEV_SICK_IDLE_60_STR
 "Devi˚ idÀ f‹ 60s"

	)

407 
	#REASON_DEV_DEAD_IDLE_600_STR
 "Devi˚ dód - idÀ f‹ 600s"

	)

408 
	#REASON_DEV_NOSTART_STR
 "Devi˚ faûedÅÿ°¨t"

	)

409 
	#REASON_DEV_OVER_HEAT_STR
 "Devi˚ ovî hóãd"

	)

410 
	#REASON_DEV_THERMAL_CUTOFF_STR
 "Devi˚ÑóchedÅhîmÆ cutoff"

	)

411 
	#REASON_DEV_COMMS_ERROR_STR
 "Devi˚ comm†îr‹"

	)

412 
	#REASON_DEV_THROTTLE_STR
 "Devi˚ÅhrŸée"

	)

413 
	#REASON_UNKNOWN_STR
 "Unknow¿ªas⁄ - codêbug"

	)

415 
	#MIN_SEC_UNSET
 99999999

	)

417 
	scgmöî_°©s


419 
uöt32_t
 
gëw‹k_ˇŒs
;

420 
timevÆ
 
gëw‹k_waô
;

421 
timevÆ
 
gëw‹k_waô_max
;

422 
timevÆ
 
gëw‹k_waô_mö
;

426 
	scgmöî_poﬁ_°©s


428 
uöt32_t
 
gëw‹k_ˇŒs
;

429 
uöt32_t
 
gëw‹k_©ãm±s
;

430 
timevÆ
 
gëw‹k_waô
;

431 
timevÆ
 
gëw‹k_waô_max
;

432 
timevÆ
 
gëw‹k_waô_mö
;

433 
gëw‹k_waô_rﬁlög
;

434 
boﬁ
 
hadrﬁ…ime
;

435 
boﬁ
 
ˇƒﬁl
;

436 
boﬁ
 
hadexpúe
;

437 
uöt32_t
 
rﬁ…ime
;

438 
mö_diff
;

439 
max_diff
;

440 
œ°_diff
;

441 
uöt32_t
 
mö_diff_cou¡
;

442 
uöt32_t
 
max_diff_cou¡
;

443 
uöt64_t
 
times_£¡
;

444 
uöt64_t
 
byãs_£¡
;

445 
uöt64_t
 
√t_byãs_£¡
;

446 
uöt64_t
 
times_ª˚ived
;

447 
uöt64_t
 
byãs_ª˚ived
;

448 
uöt64_t
 
√t_byãs_ª˚ived
;

451 
	scgpu_öfo


453 
cgmöî_id
;

454 
devi˚_drv
 *
drv
;

455 
devi˚_id
;

456 *
«me
;

457 *
devi˚_∑th
;

458 *
devi˚_d©a
;

459 *
dup_d©a
;

460 *
unique_id
;

461 #ifde‡
USE_USBUTILS


462 
cg_usb_devi˚
 *
usbdev
;

463 
cg_usb_öfo
 
usböfo
;

464 
boﬁ
 
bœckli°ed
;

465 
boﬁ
 
nozÕ
;

468 #ifde‡
USE_BITMAIN


469 
devi˚_fd
;

470 
w‹k
 **
w‹ks
;

471 
w‹k_¨øy
;

472 
queued
;

473 
ªsu…s
;

477 
dev_íabÀ
 
deví
;

478 
ac˚±ed
;

479 
ªje˘ed
;

480 
hw_îr‹s
;

481 
rﬁlög
;

482 
rﬁlög1
;

483 
rﬁlög5
;

484 
rﬁlög15
;

485 
tŸÆ_mhashes
;

486 
utûôy
;

487 
Æive
 
°©us
;

488 
öô
[40];

489 
timevÆ
 
œ°_mesßge_tv
;

491 
thªads
;

492 
thr_öfo
 **
thr
;

494 
öt64_t
 
max_hashes
;

496 c⁄° *
k«me
;

498 
boﬁ
 
√w_w‹k
;

500 
ãmp
;

501 
cutof·emp
;

503 
öt64_t
 
diff1
;

504 
diff_ac˚±ed
;

505 
diff_ªje˘ed
;

506 
œ°_sh¨e_poﬁ
;

507 
time_t
 
œ°_sh¨e_poﬁ_time
;

508 
œ°_sh¨e_diff
;

509 
time_t
 
œ°_devi˚_vÆid_w‹k
;

510 
uöt32_t
 
œ°_n⁄˚
;

512 
time_t
 
devi˚_œ°_wñl
;

513 
time_t
 
devi˚_œ°_nŸ_wñl
;

514 
dev_ªas⁄
 
devi˚_nŸ_wñl_ªas⁄
;

515 
thªad_Áû_öô_cou¡
;

516 
thªad_zîo_hash_cou¡
;

517 
thªad_Áû_queue_cou¡
;

518 
dev_sick_idÀ_60_cou¡
;

519 
dev_dód_idÀ_600_cou¡
;

520 
dev_no°¨t_cou¡
;

521 
dev_ovî_hót_cou¡
;

522 
dev_thîmÆ_cutoff_cou¡
;

523 
dev_comms_îr‹_cou¡
;

524 
dev_thrŸée_cou¡
;

526 
cgmöî_°©s
 cgminer_stats;

528 
±hªad_rwlock_t
 
qlock
;

529 
w‹k
 *
queued_w‹k
;

530 
w‹k
 *
unqueued_w‹k
;

531 
queued_cou¡
;

533 
boﬁ
 
shutdown
;

535 
timevÆ
 
dev_°¨t_tv
;

538 
hidiff
;

539 
lodiff
;

540 
dúe˘i⁄
;

543 
boﬁ
 
	`add_cgpu
(
cgpu_öfo
*);

545 
	sthªad_q


547 
li°_hód
 
q
;

549 
boﬁ
 
‰ozí
;

551 
±hªad_muãx_t
 
muãx
;

552 
±hªad_c⁄d_t
 
c⁄d
;

555 
	sthr_öfo


557 
id
;

558 
devi˚_thªad
;

559 
boﬁ
 
¥im¨y_thªad
;

561 
±hªad_t
 
±h
;

562 
cg£m_t
 
£m
;

563 
thªad_q
 *
q
;

564 
cgpu_öfo
 *
cgpu
;

565 *
cgpu_d©a
;

566 
timevÆ
 
œ°
;

567 
timevÆ
 
sick
;

569 
boﬁ
 
∑u£
;

570 
boﬁ
 
gëw‹k
;

572 
boﬁ
 
w‹k_ª°¨t
;

573 
boﬁ
 
w‹k_upd©e
;

578 
ölöe
 
uöt32_t
 
	$swab32
(
uöt32_t
 
v
)

580  
	`bsw≠_32
(
v
);

581 
	}
}

583 
ölöe
 
	$sw≠256
(*
de°_p
, c⁄° *
§c_p
)

585 
uöt32_t
 *
de°
 = (uöt32_à*Ë
de°_p
;

586 c⁄° 
uöt32_t
 *
§c
 = (c⁄° uöt32_à*Ë
§c_p
;

588 
de°
[0] = 
§c
[7];

589 
de°
[1] = 
§c
[6];

590 
de°
[2] = 
§c
[5];

591 
de°
[3] = 
§c
[4];

592 
de°
[4] = 
§c
[3];

593 
de°
[5] = 
§c
[2];

594 
de°
[6] = 
§c
[1];

595 
de°
[7] = 
§c
[0];

596 
	}
}

598 
ölöe
 
	$swab256
(*
de°_p
, c⁄° *
§c_p
)

600 
uöt32_t
 *
de°
 = (uöt32_à*Ë
de°_p
;

601 c⁄° 
uöt32_t
 *
§c
 = (c⁄° uöt32_à*Ë
§c_p
;

603 
de°
[0] = 
	`swab32
(
§c
[7]);

604 
de°
[1] = 
	`swab32
(
§c
[6]);

605 
de°
[2] = 
	`swab32
(
§c
[5]);

606 
de°
[3] = 
	`swab32
(
§c
[4]);

607 
de°
[4] = 
	`swab32
(
§c
[3]);

608 
de°
[5] = 
	`swab32
(
§c
[2]);

609 
de°
[6] = 
	`swab32
(
§c
[1]);

610 
de°
[7] = 
	`swab32
(
§c
[0]);

611 
	}
}

613 
ölöe
 
	$Êù12
(*
de°_p
, c⁄° *
§c_p
)

615 
uöt32_t
 *
de°
 = (uöt32_à*Ë
de°_p
;

616 c⁄° 
uöt32_t
 *
§c
 = (c⁄° uöt32_à*Ë
§c_p
;

617 
i
;

619 
i
 = 0; i < 3; i++)

620 
de°
[
i
] = 
	`swab32
(
§c
[i]);

621 
	}
}

623 
ölöe
 
	$Êù32
(*
de°_p
, c⁄° *
§c_p
)

625 
uöt32_t
 *
de°
 = (uöt32_à*Ë
de°_p
;

626 c⁄° 
uöt32_t
 *
§c
 = (c⁄° uöt32_à*Ë
§c_p
;

627 
i
;

629 
i
 = 0; i < 8; i++)

630 
de°
[
i
] = 
	`swab32
(
§c
[i]);

631 
	}
}

633 
ölöe
 
	$Êù64
(*
de°_p
, c⁄° *
§c_p
)

635 
uöt32_t
 *
de°
 = (uöt32_à*Ë
de°_p
;

636 c⁄° 
uöt32_t
 *
§c
 = (c⁄° uöt32_à*Ë
§c_p
;

637 
i
;

639 
i
 = 0; i < 16; i++)

640 
de°
[
i
] = 
	`swab32
(
§c
[i]);

641 
	}
}

643 
ölöe
 
	$Êù80
(*
de°_p
, c⁄° *
§c_p
)

645 
uöt32_t
 *
de°
 = (uöt32_à*Ë
de°_p
;

646 c⁄° 
uöt32_t
 *
§c
 = (c⁄° uöt32_à*Ë
§c_p
;

647 
i
;

649 
i
 = 0; i < 20; i++)

650 
de°
[
i
] = 
	`swab32
(
§c
[i]);

651 
	}
}

653 
ölöe
 
	$Êù128
(*
de°_p
, c⁄° *
§c_p
)

655 
uöt32_t
 *
de°
 = (uöt32_à*Ë
de°_p
;

656 c⁄° 
uöt32_t
 *
§c
 = (c⁄° uöt32_à*Ë
§c_p
;

657 
i
;

659 
i
 = 0; i < 32; i++)

660 
de°
[
i
] = 
	`swab32
(
§c
[i]);

661 
	}
}

664 #i‡
deföed
(
__BIG_ENDIAN__
Ë|| deföed(
MIPSEB
)

665 
ölöe
 
	$ídün_Êù32
(*
de°_p
, c⁄° *
§c_p
)

667 
	`Êù32
(
de°_p
, 
§c_p
);

668 
	}
}

670 
ölöe
 
	$ídün_Êù128
(*
de°_p
, c⁄° *
§c_p
)

672 
	`Êù128
(
de°_p
, 
§c_p
);

673 
	}
}

675 
ölöe
 

676 
	$ídün_Êù32
(
__maybe_unu£d
 *
de°_p
, c⁄° __maybe_unu£d *
§c_p
)

678 
	}
}

680 
ölöe
 

681 
	$ídün_Êù128
(
__maybe_unu£d
 *
de°_p
, c⁄° __maybe_unu£d *
§c_p
)

683 
	}
}

686 
cgpu_ru¡ime
(
cgpu_öfo
 *
cgpu
);

687 
tsö˚_ª°¨t
();

688 
tsö˚_upd©e
();

689 
__quô
(
°©us
, 
boﬁ
 
˛ón
);

690 
_quô
(
°©us
);

702 
	#LOCK_TRACKING
 0

	)

704 #i‡
LOCK_TRACKING


705 
	ecglock_typ


707 
	mCGLOCK_MUTEX
,

708 
	mCGLOCK_RW
,

709 
	mCGLOCK_UNKNOWN


712 
uöt64_t
 
≠i_gëlock
(*
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

713 
≠i_gŸlock
(
uöt64_t
 
id
, *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

714 
uöt64_t
 
≠i_åylock
(*
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

715 
≠i_didlock
(
uöt64_t
 
id
, 
ªt
, *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

716 
≠i_gu∆ock
(*
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

717 
≠i_öôlock
(*
lock
, 
cglock_typ
 
typ
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

719 
	#GETLOCK
(
_lock
, 
_fûe
, 
_func
, 
_löe
Ë
uöt64_t
 
_id1
 = 
	`≠i_gëlock
((*)(_lock), _fûe, _func, _löe)

	)

720 
	#GOTLOCK
(
_lock
, 
_fûe
, 
_func
, 
_löe
Ë
	`≠i_gŸlock
(
_id1
, (*)(_lock), _fûe, _func, _löe)

	)

721 
	#TRYLOCK
(
_lock
, 
_fûe
, 
_func
, 
_löe
Ë
uöt64_t
 
_id2
 = 
	`≠i_åylock
((*)(_lock), _fûe, _func, _löe)

	)

722 
	#DIDLOCK
(
_ªt
, 
_lock
, 
_fûe
, 
_func
, 
_löe
Ë
	`≠i_didlock
(
_id2
, _ªt, (*)(_lock), _fûe, _func, _löe)

	)

723 
	#GUNLOCK
(
_lock
, 
_fûe
, 
_func
, 
_löe
Ë
	`≠i_gu∆ock
((*)(_lock), _fûe, _func, _löe)

	)

724 
	#INITLOCK
(
_lock
, 
_typ
, 
_fûe
, 
_func
, 
_löe
Ë
	`≠i_öôlock
((*)(_lock), _typ, _fûe, _func, _löe)

	)

726 
	#GETLOCK
(
_lock
, 
_fûe
, 
_func
, 
_löe
)

	)

727 
	#GOTLOCK
(
_lock
, 
_fûe
, 
_func
, 
_löe
)

	)

728 
	#TRYLOCK
(
_lock
, 
_fûe
, 
_func
, 
_löe
)

	)

729 
	#DIDLOCK
(
_ªt
, 
_lock
, 
_fûe
, 
_func
, 
_löe
)

	)

730 
	#GUNLOCK
(
_lock
, 
_fûe
, 
_func
, 
_löe
)

	)

731 
	#INITLOCK
(
_typ
, 
_lock
, 
_fûe
, 
_func
, 
_löe
)

	)

734 
	#muãx_lock
(
_lock
Ë
	`_muãx_lock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

735 
	#muãx_u∆ock_noyõld
(
_lock
Ë
	`_muãx_u∆ock_noyõld
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

736 
	#muãx_u∆ock
(
_lock
Ë
	`_muãx_u∆ock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

737 
	#muãx_åylock
(
_lock
Ë
	`_muãx_åylock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

738 
	#wr_lock
(
_lock
Ë
	`_wr_lock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

739 
	#wr_åylock
(
_lock
Ë
	`_wr_åylock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

740 
	#rd_lock
(
_lock
Ë
	`_rd_lock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

741 
	#rw_u∆ock
(
_lock
Ë
	`_rw_u∆ock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

742 
	#rd_u∆ock_noyõld
(
_lock
Ë
	`_rd_u∆ock_noyõld
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

743 
	#wr_u∆ock_noyõld
(
_lock
Ë
	`_wr_u∆ock_noyõld
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

744 
	#rd_u∆ock
(
_lock
Ë
	`_rd_u∆ock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

745 
	#wr_u∆ock
(
_lock
Ë
	`_wr_u∆ock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

746 
	#muãx_öô
(
_lock
Ë
	`_muãx_öô
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

747 
	#rwlock_öô
(
_lock
Ë
	`_rwlock_öô
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

748 
	#cglock_öô
(
_lock
Ë
	`_cglock_öô
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

749 
	#cg_æock
(
_lock
Ë
	`_cg_æock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

750 
	#cg_ûock
(
_lock
Ë
	`_cg_ûock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

751 
	#cg_uûock
(
_lock
Ë
	`_cg_uûock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

752 
	#cg_ulock
(
_lock
Ë
	`_cg_ulock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

753 
	#cg_wlock
(
_lock
Ë
	`_cg_wlock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

754 
	#cg_dwlock
(
_lock
Ë
	`_cg_dwlock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

755 
	#cg_dwûock
(
_lock
Ë
	`_cg_dwûock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

756 
	#cg_dlock
(
_lock
Ë
	`_cg_dlock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

757 
	#cg_ru∆ock
(
_lock
Ë
	`_cg_ru∆ock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

758 
	#cg_ruwlock
(
_lock
Ë
	`_cg_ruwlock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

759 
	#cg_wu∆ock
(
_lock
Ë
	`_cg_wu∆ock
(_lock, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

761 
ölöe
 
	$_muãx_lock
(
±hªad_muãx_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

763 
	`GETLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

764 i‡(
	`u∆ikñy
(
	`±hªad_muãx_lock
(
lock
)))

765 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "WTF MUTEX ERROR ON LOCK!Éºno=%d", 
î∫o
);

766 
	`GOTLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

767 
	}
}

769 
ölöe
 
	$_muãx_u∆ock_noyõld
(
±hªad_muãx_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

771 i‡(
	`u∆ikñy
(
	`±hªad_muãx_u∆ock
(
lock
)))

772 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "WTF MUTEX ERROR ON UNLOCK!Éºno=%d", 
î∫o
);

773 
	`GUNLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

774 
	}
}

776 
ölöe
 
	$_muãx_u∆ock
(
±hªad_muãx_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

778 
	`_muãx_u∆ock_noyõld
(
lock
, 
fûe
, 
func
, 
löe
);

779 
	`£À˘ive_yõld
();

780 
	}
}

782 
ölöe
 
	$_muãx_åylock
(
±hªad_muãx_t
 *
lock
, 
__maybe_unu£d
 c⁄° *
fûe
, __maybe_unu£d c⁄° *
func
, __maybe_unu£d c⁄° 
löe
)

784 
	`TRYLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

785 
ªt
 = 
	`±hªad_muãx_åylock
(
lock
);

786 
	`DIDLOCK
(
ªt
, 
lock
, 
fûe
, 
func
, 
löe
);

787  
ªt
;

788 
	}
}

790 
ölöe
 
	$_wr_lock
(
±hªad_rwlock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

792 
	`GETLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

793 i‡(
	`u∆ikñy
(
	`±hªad_rwlock_wæock
(
lock
)))

794 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "WTF WRLOCK ERROR ON LOCK!Éºno=%d", 
î∫o
);

795 
	`GOTLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

796 
	}
}

798 
ölöe
 
	$_wr_åylock
(
±hªad_rwlock_t
 *
lock
, 
__maybe_unu£d
 c⁄° *
fûe
, __maybe_unu£d c⁄° *
func
, __maybe_unu£d c⁄° 
löe
)

800 
	`TRYLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

801 
ªt
 = 
	`±hªad_rwlock_åywæock
(
lock
);

802 
	`DIDLOCK
(
ªt
, 
lock
, 
fûe
, 
func
, 
löe
);

803  
ªt
;

804 
	}
}

806 
ölöe
 
	$_rd_lock
(
±hªad_rwlock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

808 
	`GETLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

809 i‡(
	`u∆ikñy
(
	`±hªad_rwlock_rdlock
(
lock
)))

810 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "WTF RDLOCK ERROR ON LOCK!Éºno=%d", 
î∫o
);

811 
	`GOTLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

812 
	}
}

814 
ölöe
 
	$_rw_u∆ock
(
±hªad_rwlock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

816 i‡(
	`u∆ikñy
(
	`±hªad_rwlock_u∆ock
(
lock
)))

817 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "WTF RWLOCK ERROR ON UNLOCK!Éºno=%d", 
î∫o
);

818 
	`GUNLOCK
(
lock
, 
fûe
, 
func
, 
löe
);

819 
	}
}

821 
ölöe
 
	$_rd_u∆ock_noyõld
(
±hªad_rwlock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

823 
	`_rw_u∆ock
(
lock
, 
fûe
, 
func
, 
löe
);

824 
	}
}

826 
ölöe
 
	$_wr_u∆ock_noyõld
(
±hªad_rwlock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

828 
	`_rw_u∆ock
(
lock
, 
fûe
, 
func
, 
löe
);

829 
	}
}

831 
ölöe
 
	$_rd_u∆ock
(
±hªad_rwlock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

833 
	`_rw_u∆ock
(
lock
, 
fûe
, 
func
, 
löe
);

834 
	`£À˘ive_yõld
();

835 
	}
}

837 
ölöe
 
	$_wr_u∆ock
(
±hªad_rwlock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

839 
	`_rw_u∆ock
(
lock
, 
fûe
, 
func
, 
löe
);

840 
	`£À˘ive_yõld
();

841 
	}
}

843 
ölöe
 
	$_muãx_öô
(
±hªad_muãx_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

845 i‡(
	`u∆ikñy
(
	`±hªad_muãx_öô
(
lock
, 
NULL
)))

846 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÅÿ±hªad_muãx_öôÉºno=%d", 
î∫o
);

847 
	`INITLOCK
(
lock
, 
CGLOCK_MUTEX
, 
fûe
, 
func
, 
löe
);

848 
	}
}

850 
ölöe
 
	$muãx_de°roy
(
±hªad_muãx_t
 *
lock
)

854 
	`±hªad_muãx_de°roy
(
lock
);

855 
	}
}

857 
ölöe
 
	$_rwlock_öô
(
±hªad_rwlock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

859 i‡(
	`u∆ikñy
(
	`±hªad_rwlock_öô
(
lock
, 
NULL
)))

860 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÅÿ±hªad_rwlock_öôÉºno=%d", 
î∫o
);

861 
	`INITLOCK
(
lock
, 
CGLOCK_RW
, 
fûe
, 
func
, 
löe
);

862 
	}
}

864 
ölöe
 
	$rwlock_de°roy
(
±hªad_rwlock_t
 *
lock
)

866 
	`±hªad_rwlock_de°roy
(
lock
);

867 
	}
}

869 
ölöe
 
	$_cglock_öô
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

871 
	`_muãx_öô
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

872 
	`_rwlock_öô
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

873 
	}
}

875 
ölöe
 
	$cglock_de°roy
(
cglock_t
 *
lock
)

877 
	`rwlock_de°roy
(&
lock
->
rwlock
);

878 
	`muãx_de°roy
(&
lock
->
muãx
);

879 
	}
}

882 
ölöe
 
	$_cg_æock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

884 
	`_muãx_lock
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

885 
	`_rd_lock
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

886 
	`_muãx_u∆ock_noyõld
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

887 
	}
}

891 
ölöe
 
	$_cg_ûock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

893 
	`_muãx_lock
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

894 
	}
}

897 
ölöe
 
	$_cg_uûock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

899 
	`_muãx_u∆ock
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

900 
	}
}

903 
ölöe
 
	$_cg_ulock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

905 
	`_wr_lock
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

906 
	}
}

909 
ölöe
 
	$_cg_wlock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

911 
	`_muãx_lock
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

912 
	`_wr_lock
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

913 
	}
}

916 
ölöe
 
	$_cg_dwlock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

918 
	`_wr_u∆ock_noyõld
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

919 
	`_rd_lock
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

920 
	`_muãx_u∆ock_noyõld
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

921 
	}
}

924 
ölöe
 
	$_cg_dwûock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

926 
	`_wr_u∆ock
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

927 
	}
}

930 
ölöe
 
	$_cg_dlock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

932 
	`_rd_lock
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

933 
	`_muãx_u∆ock_noyõld
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

934 
	}
}

936 
ölöe
 
	$_cg_ru∆ock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

938 
	`_rd_u∆ock
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

939 
	}
}

943 
ölöe
 
	$_cg_ruwlock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

945 
	`_rd_u∆ock_noyõld
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

946 
	`_cg_wlock
(
lock
, 
fûe
, 
func
, 
löe
);

947 
	}
}

949 
ölöe
 
	$_cg_wu∆ock
(
cglock_t
 *
lock
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

951 
	`_wr_u∆ock_noyõld
(&
lock
->
rwlock
, 
fûe
, 
func
, 
löe
);

952 
	`_muãx_u∆ock
(&
lock
->
muãx
, 
fûe
, 
func
, 
löe
);

953 
	}
}

955 
	gpoﬁ
;

957 
	#API_LISTEN_ADDR
 "0.0.0.0"

	)

958 
	#API_MCAST_CODE
 "FTW"

	)

959 
	#API_MCAST_ADDR
 "224.0.0.75"

	)

961 
boﬁ
 
g_logfûe_íabÀ
;

962 
g_logfûe_∑th
[256];

963 
g_logfûe_›íÊag
[32];

964 
FILE
 * 
g_logw‹k_fûe
;

965 
FILE
 * 
g_logw‹k_fûes
[65];

966 
FILE
 * 
g_logw‹k_diffs
[65];

967 
g_logw‹k_asi˙um
;

969 
boﬁ
 
›t_w‹k_upd©e
;

970 
boﬁ
 
›t_¥Ÿocﬁ
;

971 
boﬁ
 
have_l⁄gpﬁl
;

972 *
›t_kî√l_∑th
;

973 *
›t_socks_¥oxy
;

974 
›t_sugge°_diff
;

975 
›t_mu…i_vîsi⁄
;

976 *
cgmöî_∑th
;

977 
boﬁ
 
›t_Áû_⁄ly
;

978 
boﬁ
 
›t_lowmem
;

979 
boﬁ
 
›t_autoÁn
;

980 
boﬁ
 
›t_aut€ngöe
;

981 
boﬁ
 
u£_cur£s
;

982 *
›t_logw‹k_∑th
;

983 *
›t_logw‹k_asi˙um
;

984 
boﬁ
 
›t_logw‹k_diff
;

985 *
›t_≠i_Ælow
;

986 
boﬁ
 
›t_≠i_mˇ°
;

987 *
›t_≠i_mˇ°_addr
;

988 *
›t_≠i_mˇ°_code
;

989 *
›t_≠i_mˇ°_des
;

990 
›t_≠i_mˇ°_p‹t
;

991 *
›t_≠i_groups
;

992 *
›t_≠i_des¸ùti⁄
;

993 
›t_≠i_p‹t
;

994 *
›t_≠i_ho°
;

995 
boﬁ
 
›t_≠i_li°í
;

996 
boﬁ
 
›t_≠i_√tw‹k
;

997 
boﬁ
 
›t_dñay√t
;

998 
time_t
 
œ°_gëw‹k
;

999 
boﬁ
 
›t_ª°¨t
;

1001 
boﬁ
 
›t_w‹ktime
;

1003 #ifde‡
USE_BITMAIN


1004 *
›t_bômaö_›ti⁄s
;

1005 
boﬁ
 
›t_bômaö_hwîr‹
;

1006 
boﬁ
 
›t_bômaö_checkÆl
;

1007 *
›t_bômaö_‰eq
;

1008 *
›t_bômaö_vﬁège
;

1009 
boﬁ
 
›t_bômaö_checkn2diff
;

1010 
boﬁ
 
›t_bômaö_nobì≥r
;

1011 
boﬁ
 
›t_bômaö_nŸempovî˘æ
;

1012 
boﬁ
 
›t_bômaö_homemode
;

1013 
boﬁ
 
›t_bômaö_√w_cmd_ty≥_vû
;

1014 
boﬁ
 
›t_bômaö_Án_˘æ
;

1015 
›t_bômaö_Án_pwm
;

1016 
boﬁ
 
Án_cu°om
;

1017 
boﬁ
 
Án_˘æ_ty≥
;

1018 *
Án_pwm_d©a
;

1020 
›t_w©chdog
;

1021 
›t_mötMem‹y
;

1024 #ifde‡
USE_USBUTILS


1025 *
›t_usb_£À˘
;

1026 
›t_usbdump
;

1027 
boﬁ
 
›t_usb_li°_Æl
;

1028 
cg£m_t
 
usb_ªsour˚_£m
;

1030 
sw‹k_id
;

1032 #i‡
LOCK_TRACKING


1033 
±hªad_muãx_t
 
lock°©_lock
;

1036 
±hªad_rwlock_t
 
√ècc_lock
;

1038 c⁄° 
uöt32_t
 
sha256_öô_°©e
[];

1039 #ifde‡
HAVE_LIBCURL


1040 
js⁄_t
 *
js⁄_web_c⁄fig
(c⁄° *
uæ
);

1041 
js⁄_t
 *
js⁄_Ωc_ˇŒ
(
CURL
 *
cuæ
, c⁄° *
uæ
, c⁄° *
u£Ωass
,

1042 c⁄° *
Ωc_ªq
, 
boﬁ
, bool, *,

1043 
poﬁ
 *poﬁ, 
boﬁ
);

1045 c⁄° *
¥oxyty≥
(
¥oxyty≥s_t
Öroxytype);

1046 *
gë_¥oxy
(*
uæ
, 
poﬁ
 *pool);

1047 
__bö2hex
(*
s
, c⁄° *
p
, 
size_t
 
Àn
);

1048 *
bö2hex
(c⁄° *
p
, 
size_t
 
Àn
);

1049 
boﬁ
 
hex2bö
(*
p
, c⁄° *
hex°r
, 
size_t
 
Àn
);

1052 
	$boﬁ
 (*
	tsha256_func
)(
	tthr_öfo
*, c⁄° *
	tpmid°©e
,

1053 *
	tpd©a
,

1054 *
	tphash1
, *
	tphash
,

1055 c⁄° *
	t±¨gë
,

1056 
	tuöt32_t
 
	tmax_n⁄˚
,

1057 
	tuöt32_t
 *
	tœ°_n⁄˚
,

1058 
	tuöt32_t
 
	tn⁄˚
);

1060 
boﬁ
 
	`fuŒã°
(c⁄° *
hash
, c⁄° *
èrgë
);

1062 
›t_queue
;

1063 
›t_sˇ¡ime
;

1064 
›t_expúy
;

1065 c⁄° 
max_sˇ¡ime
;

1067 
cglock_t
 
c⁄åﬁ_lock
;

1068 
±hªad_muãx_t
 
hash_lock
;

1069 
±hªad_muãx_t
 
c⁄sﬁe_lock
;

1070 
cglock_t
 
ch_lock
;

1071 
±hªad_rwlock_t
 
möög_thr_lock
;

1072 
±hªad_rwlock_t
 
devi˚s_lock
;

1074 
±hªad_muãx_t
 
ª°¨t_lock
;

1075 
±hªad_c⁄d_t
 
ª°¨t_c⁄d
;

1077 
	`˛ór_°øtum_sh¨es
(
poﬁ
 *pool);

1078 
	`˛ór_poﬁ_w‹k
(
poﬁ
 *pool);

1079 
	`£t_èrgë
(*
de°_èrgë
, 
diff
);

1080 
	`ª°¨t_waô
(
thr_öfo
 *
thr
, 
m°ime
);

1082 
	`kûl_w‹k
();

1084 
	`ªöô_devi˚
(
cgpu_öfo
 *
cgpu
);

1086 
	`≠i
(
thr_id
);

1088 
poﬁ
 *
	`cuºít_poﬁ
();

1089 
íabÀd_poﬁs
;

1090 
	`gë_öå™ge
(*
¨g
, *
vÆ1
, *
vÆ2
);

1091 
boﬁ
 
	`dëe˘_°øtum
(
poﬁ
 *poﬁ, *
uæ
);

1092 
	`¥öt_summ¨y
();

1093 
	`adju°_quŸa_gcd
();

1094 
poﬁ
 *
	`add_poﬁ
();

1095 
boﬁ
 
	`add_poﬁ_dëaûs
(
poﬁ
 *poﬁ, boﬁ 
live
, *
uæ
, *
u£r
, *
∑ss
);

1097 
	#MAX_DEVICES
 4096

	)

1099 
g_möî_vîsi⁄
[256];

1100 
g_möî_compûëime
[256];

1101 
g_möî_ty≥
[256];

1102 
boﬁ
 
hŸ∂ug_mode
;

1103 
hŸ∂ug_time
;

1104 
li°_hód
 
sˇn_devi˚s
;

1105 
nDevs
;

1106 
num_¥o˚ss‹s
;

1107 
hw_îr‹s
;

1108 
boﬁ
 
u£_sy¶og
;

1109 
boﬁ
 
›t_quõt
;

1110 
thr_öfo
 *
c⁄åﬁ_thr
;

1111 
thr_öfo
 **
möög_thr
;

1112 
tŸÆ_£cs
;

1113 
möög_thªads
;

1114 
tŸÆ_devi˚s
;

1115 
zombõ_devs
;

1116 
cgpu_öfo
 **
devi˚s
;

1117 
tŸÆ_poﬁs
;

1118 
poﬁ
 **
poﬁs
;

1119 
°øãgõs
 strategies[];

1120 
poﬁ_°øãgy
Öool_strategy;

1121 
›t_rŸ©e_≥riod
;

1122 
rﬁlög1
, 
rﬁlög5
, 
rﬁlög15
;

1123 
tŸÆ_rﬁlög
;

1124 
tŸÆ_mhashes_d⁄e
;

1125 
g_di•œyed_rﬁlög
;

1126 
di•œyed_hash_øã
[16];

1127 
√w_blocks
;

1128 
found_blocks
;

1129 
g_max_Án
, 
g_max_ãmp
;

1130 
öt64_t
 
tŸÆ_ac˚±ed
, 
tŸÆ_ªje˘ed
, 
tŸÆ_diff1
;

1131 
öt64_t
 
tŸÆ_gëw‹ks
, 
tŸÆ_°Æe
, 
tŸÆ_disˇrded
;

1132 
tŸÆ_diff_ac˚±ed
, 
tŸÆ_diff_ªje˘ed
, 
tŸÆ_diff_°Æe
;

1133 
loˇl_w‹k
;

1134 
tŸÆ_go
, 
tŸÆ_ro
;

1135 c⁄° 
›t_cutof·emp
;

1136 
›t_log_öãrvÆ
;

1137 
globÆ_hashøã
;

1138 
cuºít_hash
[68];

1139 
cuºít_diff
;

1140 
uöt64_t
 
be°_diff
;

1141 
timevÆ
 
block_timevÆ
;

1142 *
w‹k∑ddög
;

1143 *
	`£t_bômaö_dev
(*
¨g
);

1144 
boﬁ
 
›t_bômaö_auto
;

1145 
›t_bômaö_ovîhót
;

1146 *
	`£t_bômaö_Án
(*
¨g
);

1147 
›t_bômaö_ãmp
;

1149 
	#NONCE_BUFF
 4096

	)

1150 
n⁄˚_num10_°rög
[
NONCE_BUFF
];

1151 
n⁄˚_num30_°rög
[
NONCE_BUFF
];

1152 
n⁄˚_num60_°rög
[
NONCE_BUFF
];

1154 
√w_tŸÆ_mhashes_d⁄e
;

1155 
√w_tŸÆ_£cs
;

1156 
time_t
 
tŸÆ_tv_°¨t_sys
;

1157 
time_t
 
tŸÆ_tv_íd_sys
;

1158 
	`wrôeInôLogFûe
(*
log°r
);

1160 
	scuæ_ít


1162 
CURL
 *
cuæ
;

1163 
li°_hód
 
node
;

1164 
timevÆ
 
tv
;

1169 
	epoﬁ_íabÀ


1171 
POOL_DISABLED
,

1172 
POOL_ENABLED
,

1173 
POOL_REJECTING
,

1176 
	s°øtum_w‹k


1178 *
job_id
;

1179 **
mîkÀ_bö
;

1180 
boﬁ
 
˛ón
;

1182 
diff
;

1185 
	#RBUFSIZE
 8192

	)

1186 
	#RECVSIZE
 (
RBUFSIZE
 - 4)

	)

1188 
	spoﬁ


1190 
poﬁ_no
;

1191 
¥io
;

1192 
öt64_t
 
ac˚±ed
, 
ªje˘ed
;

1193 
£q_ªje˘s
;

1194 
£q_gëÁûs
;

1195 
sﬁved
;

1196 
öt64_t
 
diff1
;

1197 
diff
[8];

1198 
quŸa
;

1199 
quŸa_gcd
;

1200 
quŸa_u£d
;

1201 
w‹ks
;

1203 
diff_ac˚±ed
;

1204 
diff_ªje˘ed
;

1205 
diff_°Æe
;

1206 
boﬁ
 
check_asicboo°_ovî
;

1207 
boﬁ
 
suµ‹t_asicboo°
;

1208 
boﬁ
 
submô_Áû
;

1209 
boﬁ
 
idÀ
;

1210 
boﬁ
 
œggög
;

1211 
boﬁ
 
¥obed
;

1212 
poﬁ_íabÀ
 
íabÀd
;

1213 
boﬁ
 
submô_ﬁd
;

1214 
boﬁ
 
ªmoved
;

1215 
boﬁ
 
Õ_°¨ãd
;

1216 
boﬁ
 
blockög
;

1218 *
hdr_∑th
;

1219 *
Õ_uæ
;

1221 
gëw‹k_ªque°ed
;

1222 
°Æe_sh¨es
;

1223 
disˇrded_w‹k
;

1224 
gëÁû_ocˇsi⁄s
;

1225 
ªmŸeÁû_ocˇsi⁄s
;

1226 
timevÆ
 
tv_idÀ
;

1228 
utûôy
;

1229 
œ°_sh¨es
, 
sh¨es
;

1231 *
Ωc_ªq
;

1232 *
Ωc_uæ
;

1233 *
Ωc_u£Ωass
;

1234 *
Ωc_u£r
, *
Ωc_∑ss
;

1235 
¥oxyty≥s_t
 
Ωc_¥oxyty≥
;

1236 *
Ωc_¥oxy
;

1238 
±hªad_muãx_t
 
poﬁ_lock
;

1239 
cglock_t
 
d©a_lock
;

1241 
thªad_q
 *
submô_q
;

1242 
thªad_q
 *
gëw‹k_q
;

1244 
±hªad_t
 
l⁄gpﬁl_thªad
;

1245 
±hªad_t
 
ã°_thªad
;

1246 
boﬁ
 
ã°ög
;

1248 
cuæs
;

1249 
±hªad_c⁄d_t
 
¸_c⁄d
;

1250 
li°_hód
 
cuærög
;

1252 
time_t
 
œ°_sh¨e_time
;

1253 
œ°_sh¨e_diff
;

1254 
uöt64_t
 
be°_diff
;

1255 
uöt64_t
 
bad_w‹k
;

1257 
cgmöî_°©s
 cgminer_stats;

1258 
cgmöî_poﬁ_°©s
 cgminer_pool_stats;

1261 
¥ev_block
[32];

1264 *
°øtum_uæ
;

1265 
boﬁ
 
exå™⁄˚_subs¸ibe
;

1266 *
°øtum_p‹t
;

1267 
SOCKETTYPE
 
sock
;

1268 *
sockbuf
;

1269 
size_t
 
sockbuf_size
;

1270 *
sockaddr_uæ
;

1271 *
sockaddr_¥oxy_uæ
;

1272 *
sockaddr_¥oxy_p‹t
;

1274 *
n⁄˚1
;

1275 *
n⁄˚1bö
;

1276 
uöt64_t
 
n⁄˚2
;

1277 
n2size
;

1278 *
£ssi⁄id
;

1279 
boﬁ
 
has_°øtum
;

1280 
boﬁ
 
°øtum_a˘ive
;

1281 
boﬁ
 
°øtum_öô
;

1282 
boﬁ
 
°øtum_nŸify
;

1283 #ifde‡
USE_BITMAIN_C5


1284 
boﬁ
 
suµ‹t_vû
;

1285 
vîsi⁄_num
;

1286 
vîsi⁄
[4];

1288 
°øtum_w‹k
 
sw‹k
;

1289 
±hªad_t
 
°øtum_°hªad
;

1290 
±hªad_t
 
°øtum_πhªad
;

1291 
±hªad_muãx_t
 
°øtum_lock
;

1292 
thªad_q
 *
°øtum_q
;

1293 
ssh¨es
;

1296 
boﬁ
 
has_gbt
;

1297 
cglock_t
 
gbt_lock
;

1298 
¥eviousblockhash
[32];

1299 
gbt_èrgë
[32];

1300 *
coöba£txn
;

1301 *
l⁄gpﬁlid
;

1302 *
gbt_w‹kid
;

1303 
gbt_expúes
;

1304 
uöt32_t
 
gbt_vîsi⁄
;

1305 
uöt32_t
 
cuπime
;

1306 
uöt32_t
 
gbt_bôs
;

1307 *
txn_hashes
;

1308 
gbt_txns
;

1309 
height
;

1311 
boﬁ
 
gbt_sﬁo
;

1312 
mîkÀbö
[16 * 32];

1313 
å™ß˘i⁄s
;

1314 *
txn_d©a
;

1315 
s¸ùtsig_ba£
[100];

1316 
s¸ùt_pubkey
[25 + 3];

1317 
nVÆue
;

1318 
CURL
 *
gbt_cuæ
;

1319 
boﬁ
 
gbt_cuæ_öu£
;

1322 
size_t
 
n1_Àn
;

1323 *
coöba£
;

1324 
coöba£_Àn
;

1325 
n⁄˚2_off£t
;

1326 
hódî_bö
[136];

1327 
btm_£ed
[32];

1328 
boﬁ
 
upd©e_£ed
;

1329 
mîkÀs
;

1330 
¥ev_hash
[68];

1331 
bbvîsi⁄
[12];

1332 
nbô
[12];

1333 
¡ime
[12];

1334 
BTMAuthID
[128];

1335 
uöt32_t
 
btm_tgt
;

1336 
√xt_diff
;

1337 
sdiff
;

1338 
uöt32_t
 
cuºít_height
;

1340 
timevÆ
 
tv_œ°w‹k
;

1343 
	#GETWORK_MODE_TESTPOOL
 'T'

	)

1344 
	#GETWORK_MODE_POOL
 'P'

	)

1345 
	#GETWORK_MODE_LP
 'L'

	)

1346 
	#GETWORK_MODE_BENCHMARK
 'B'

	)

1347 
	#GETWORK_MODE_STRATUM
 'S'

	)

1348 
	#GETWORK_MODE_GBT
 'G'

	)

1349 
	#GETWORK_MODE_SOLO
 'C'

	)

1352 
	sw‹k


1354 
d©a
[128];

1355 
mid°©e
[32];

1356 
èrgë
[32];

1357 
hash
[32];

1358 
uöt32_t
 
btm_èrgë
;

1359 
uöt32_t
 
btm_dff
;

1363 
devi˚_diff
;

1364 
uöt64_t
 
sh¨e_diff
;

1366 
rﬁls
;

1367 
drv_rﬁŒimô
;

1368 
uöt32_t
 
n⁄˚
;

1369 
uöt64_t
 
btm_n⁄˚
;

1370 
thr_öfo
 *
thr
;

1371 
thr_id
;

1372 
poﬁ
 *pool;

1373 
timevÆ
 
tv_°aged
;

1375 
boﬁ
 
möed
;

1376 
boﬁ
 
˛⁄e
;

1377 
boﬁ
 
˛⁄ed
;

1378 
rﬁ…ime
;

1379 
boﬁ
 
l⁄gpﬁl
;

1380 
boﬁ
 
°Æe
;

1381 
boﬁ
 
m™d©‹y
;

1382 
boﬁ
 
block
;

1384 
boﬁ
 
°øtum
;

1385 *
job_id
;

1386 
uöt64_t
 
n⁄˚2
;

1387 
size_t
 
n⁄˚2_Àn
;

1388 *
¡ime
;

1389 
sdiff
;

1390 *
n⁄˚1
;

1392 
boﬁ
 
gbt
;

1393 *
coöba£
;

1394 
gbt_txns
;

1396 
w‹k_block
;

1397 
uöt32_t
 
id
;

1398 
UT_hash_h™dÀ
 
hh
;

1402 
w‹k_difficu…y
;

1405 
subid
;

1408 
boﬁ
 
devÊag
;

1411 
timevÆ
 
tv_°amp
;

1413 
timevÆ
 
tv_gëw‹k
;

1414 
timevÆ
 
tv_gëw‹k_ª∂y
;

1415 
timevÆ
 
tv_˛⁄ed
;

1416 
timevÆ
 
tv_w‹k_°¨t
;

1417 
timevÆ
 
tv_w‹k_found
;

1419 
gëw‹k_mode
;

1421 #ifde‡
USE_BITMAIN_C5


1422 
vîsi⁄
;

1428 
	#TAILBUFSIZ
 64

	)

1430 
	#èû•rötf
(
buf
, 
bufsiz
, 
fmt
, ...) do { \

1431 
tmp13
[
TAILBUFSIZ
]; \

1432 
size_t
 
Àn13
, 
buÊí
 = 
	`°æí
(
buf
); \

1433 
	`¢¥ötf
(
tmp13
, —mp13), 
fmt
, ##
__VA_ARGS__
); \

1434 
Àn13
 = 
	`°æí
(
tmp13
); \

1435 i‡((
buÊí
 + 
Àn13
Ë>
bufsiz
) \

1436 
	`quô
(1, "èû•röt‡buf„∏ovîÊow i¿%†%†löê%d", 
__FILE__
, 
__func__
, 
__LINE__
); \

1437 
	`°rˇt
(
buf
, 
tmp13
); \

1438 
	}
} 0)

	)

1440 
uöt64_t
 
sh¨e_ndiff
(c⁄° 
w‹k
 *work);

1441 
gë_d©e°amp
(*, 
size_t
, 
timevÆ
 *);

1442 
öc_hw_îr‹s
(
thr_öfo
 *
thr
);

1443 
öc_dev_°©us
(
max_Án
, 
max_ãmp
);

1444 
öc_w‹k_°©s
(
thr_öfo
 *
thr
, 
poﬁ
 *poﬁ, 
diff1
);

1445 
boﬁ
 
ã°_n⁄˚
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
);

1446 
boﬁ
 
ã°_n⁄˚_diff
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
, 
diff
);

1447 
boﬁ
 
submô_ã°ed_w‹k
(
thr_öfo
 *
thr
, 
w‹k
 *work);

1448 
boﬁ
 
submô_n⁄˚
(
thr_öfo
 *
thr
, 
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
);

1449 
boﬁ
 
submô_noff£t_n⁄˚
(
thr_öfo
 *
thr
, 
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
, 
noff£t
);

1450 
sh¨e_w‹k_tdiff
(
cgpu_öfo
 *
cgpu
);

1451 
boﬁ
 
submô_n⁄˚_1
(
thr_öfo
 *
thr
, 
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
, * 
nofuŒ
);

1452 
submô_n⁄˚_2
(
w‹k
 *work);

1453 
boﬁ
 
submô_n⁄˚_dúe˘
(
thr_öfo
 *
thr
, 
w‹k
 *w‹k, 
uöt64_t
 
n⁄˚
);

1454 
boﬁ
 
submô_noff£t_n⁄˚
(
thr_öfo
 *
thr
, 
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
, 
noff£t
);

1455 
w‹k
 *
gë_w‹k
(
thr_öfo
 *
thr
, c⁄° 
thr_id
);

1456 
w‹k
 *
make_w‹k
();

1457 
gí_°øtum_w‹k
(
poﬁ
 *poﬁ, 
w‹k
 *work);

1458 
__add_queued
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work);

1459 
w‹k
 *
gë_queued
(
cgpu_öfo
 *
cgpu
);

1460 
w‹k
 *
__gë_queued
(
cgpu_öfo
 *
cgpu
);

1461 
add_queued
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work);

1462 
w‹k
 *
gë_queue_w‹k
(
thr_öfo
 *
thr
, 
cgpu_öfo
 *
cgpu
, 
thr_id
);

1463 
w‹k
 *
__föd_w‹k_bymid°©e
(w‹k *
que
, *
mid°©e
, 
size_t
 
mid°©ñí
, *
d©a
, 
off£t
, size_à
d©Æí
);

1464 
w‹k
 *
föd_queued_w‹k_bymid°©e
(
cgpu_öfo
 *
cgpu
, *
mid°©e
, 
size_t
 
mid°©ñí
, *
d©a
, 
off£t
, size_à
d©Æí
);

1465 
w‹k
 *
˛⁄e_queued_w‹k_bymid°©e
(
cgpu_öfo
 *
cgpu
, *
mid°©e
, 
size_t
 
mid°©ñí
, *
d©a
, 
off£t
, size_à
d©Æí
);

1466 
w‹k
 *
__föd_w‹k_byid
(w‹k *
que
, 
uöt32_t
 
id
);

1467 
w‹k
 *
föd_queued_w‹k_byid
(
cgpu_öfo
 *
cgpu
, 
uöt32_t
 
id
);

1468 
w‹k
 *
˛⁄e_queued_w‹k_byid
(
cgpu_öfo
 *
cgpu
, 
uöt32_t
 
id
);

1469 
__w‹k_com∂ëed
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work);

1470 
age_queued_w‹k
(
cgpu_öfo
 *
cgpu
, 
£cs
);

1471 
w‹k_com∂ëed
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *work);

1472 
w‹k
 *
èke_queued_w‹k_bymid°©e
(
cgpu_öfo
 *
cgpu
, *
mid°©e
, 
size_t
 
mid°©ñí
, *
d©a
, 
off£t
, size_à
d©Æí
);

1473 
Êush_queue
(
cgpu_öfo
 *
cgpu
);

1474 
hash_drivî_w‹k
(
thr_öfo
 *
mythr
);

1475 
hash_queued_w‹k
(
thr_öfo
 *
mythr
);

1476 
_wlog
(c⁄° *
°r
);

1477 
_wlog¥öt
(c⁄° *
°r
);

1478 
cur£s_öt
(c⁄° *
quîy
);

1479 *
cur£s_öput
(c⁄° *
quîy
);

1480 
kûl_w‹k
();

1481 
swôch_poﬁs
(
poﬁ
 *
£À˘ed
);

1482 
_disˇrd_w‹k
(
w‹k
 **
w‹k±r
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

1483 
ªmove_poﬁ
(
poﬁ
 *pool);

1484 
wrôe_c⁄fig
(
FILE
 *
fcfg
);

1485 
zîo_be°sh¨e
();

1486 
zîo_°©s
();

1487 
deÁu…_ßve_fûe
(*
fûíame
);

1488 
boﬁ
 
log_cur£s_⁄ly
(
¥io
, c⁄° *
d©ëime
, c⁄° *
°r
);

1489 
˛ór_logwö
();

1490 
logwö_upd©e
();

1491 
boﬁ
 
poﬁ_t˛ór
(
poﬁ
 *poﬁ, boﬁ *
v¨
);

1492 
°øtum_ªsumed
(
poﬁ
 *pool);

1493 
poﬁ_dõd
(
poﬁ
 *pool);

1494 
thªad_q
 *
tq_√w
();

1495 
tq_‰ì
(
thªad_q
 *
tq
);

1496 
boﬁ
 
tq_push
(
thªad_q
 *
tq
, *
d©a
);

1497 *
tq_p›
(
thªad_q
 *
tq
, c⁄° 
time•ec
 *
ab°ime
);

1498 
tq_‰ìze
(
thªad_q
 *
tq
);

1499 
tq_thaw
(
thªad_q
 *
tq
);

1500 
boﬁ
 
suc˚ssful_c⁄√˘
;

1501 
adl
();

1502 
≠p_ª°¨t
();

1503 
rﬁl_w‹k
(
w‹k
 *work);

1504 
w‹k
 *
make_˛⁄e
(work *work);

1505 
˛ón_w‹k
(
w‹k
 *work);

1506 
_‰ì_w‹k
(
w‹k
 **
w‹k±r
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

1507 
£t_w‹k_¡ime
(
w‹k
 *w‹k, 
¡ime
);

1508 
w‹k
 *
c›y_w‹k_noff£t
(w‹k *
ba£_w‹k
, 
noff£t
);

1510 
	#‰ì_w‹k
(
WORK
Ë
	`_‰ì_w‹k
(&(WORK), 
__FILE__
, 
__func__
, 
__LINE__
)

	)

1511 
	#disˇrd_w‹k
(
WORK
Ë
	`_disˇrd_w‹k
(&(WORK), 
__FILE__
, 
__func__
, 
__LINE__
)

	)

1512 
	#c›y_w‹k
(
w‹k_ö
Ë
	`c›y_w‹k_noff£t
(w‹k_ö, 0)

	)

1515 
uöt64_t
 
sh¨e_diff
(c⁄° 
w‹k
 *work);

1516 
thr_öfo
 *
gë_thªad
(
thr_id
);

1517 
cgpu_öfo
 *
gë_devi˚s
(
id
);

1520 
	e≠i_d©a_ty≥


1522 
	mAPI_ESCAPE
,

1523 
	mAPI_STRING
,

1524 
	mAPI_CONST
,

1525 
	mAPI_UINT8
,

1526 
	mAPI_INT16
,

1527 
	mAPI_UINT16
,

1528 
	mAPI_INT
,

1529 
	mAPI_UINT
,

1530 
	mAPI_UINT32
,

1531 
	mAPI_HEX32
,

1532 
	mAPI_UINT64
,

1533 
	mAPI_INT64
,

1534 
	mAPI_DOUBLE
,

1535 
	mAPI_ELAPSED
,

1536 
	mAPI_BOOL
,

1537 
	mAPI_TIMEVAL
,

1538 
	mAPI_TIME
,

1539 
	mAPI_MHS
,

1540 
	mAPI_MHTOTAL
,

1541 
	mAPI_TEMP
,

1542 
	mAPI_UTILITY
,

1543 
	mAPI_FREQ
,

1544 
	mAPI_VOLTS
,

1545 
	mAPI_HS
,

1546 
	mAPI_DIFF
,

1547 
	mAPI_PERCENT
,

1548 
	mAPI_AVG


1552 
	s≠i_d©a


1554 
≠i_d©a_ty≥
 
	mty≥
;

1555 *
	m«me
;

1556 *
	md©a
;

1557 
boﬁ
 
	md©a_was_mÆloc
;

1558 
≠i_d©a
 *
	m¥ev
;

1559 
≠i_d©a
 *
	m√xt
;

1562 
≠i_d©a
 *
≠i_add_avg
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1563 
≠i_d©a
 *
≠i_add_boﬁ
(≠i_d©®*
roŸ
, *
«me
, 
boﬁ
 *
d©a
, boﬁ 
c›y_d©a
);

1564 
≠i_d©a
 *
≠i_add_doubÀ
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1565 
≠i_d©a
 *
≠i_add_c⁄°
(≠i_d©®*
roŸ
, *
«me
, c⁄° *
d©a
, 
boﬁ
 
c›y_d©a
);

1566 
≠i_d©a
 *
≠i_add_diff
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1567 
≠i_d©a
 *
≠i_add_ñ≠£d
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1568 
≠i_d©a
 *
≠i_add_esˇ≥
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1569 
≠i_d©a
 *
≠i_add_‰eq
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1570 
≠i_d©a
 *
≠i_add_hex32
(≠i_d©®*
roŸ
, *
«me
, 
uöt32_t
 *
d©a
, 
boﬁ
 
c›y_d©a
);

1571 
≠i_d©a
 *
≠i_add_hs
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1572 
≠i_d©a
 *
≠i_add_öt
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1573 
≠i_d©a
 *
≠i_add_mhs
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1574 
≠i_d©a
 *
≠i_add_mh°ŸÆ
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1575 
≠i_d©a
 *
≠i_add_≥r˚¡
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1576 
≠i_d©a
 *
≠i_add_°rög
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1577 
≠i_d©a
 *
≠i_add_time
(≠i_d©®*
roŸ
, *
«me
, 
time_t
 *
d©a
, 
boﬁ
 
c›y_d©a
);

1578 
≠i_d©a
 *
≠i_add_timevÆ
(≠i_d©®*
roŸ
, *
«me
, 
timevÆ
 *
d©a
, 
boﬁ
 
c›y_d©a
);

1579 
≠i_d©a
 *
≠i_add_utûôy
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1580 
≠i_d©a
 *
≠i_add_uöt
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1581 
≠i_d©a
 *
≠i_add_uöt8
(≠i_d©®*
roŸ
, *
«me
, 
uöt8_t
 *
d©a
, 
boﬁ
 
c›y_d©a
);

1582 
≠i_d©a
 *
≠i_add_öt16
(≠i_d©®*
roŸ
, *
«me
, 
öt16_t
 *
d©a
, 
boﬁ
 
c›y_d©a
);

1583 
≠i_d©a
 *
≠i_add_uöt16
(≠i_d©®*
roŸ
, *
«me
, 
uöt16_t
 *
d©a
, 
boﬁ
 
c›y_d©a
);

1584 
≠i_d©a
 *
≠i_add_uöt32
(≠i_d©®*
roŸ
, *
«me
, 
uöt32_t
 *
d©a
, 
boﬁ
 
c›y_d©a
);

1585 
≠i_d©a
 *
≠i_add_uöt64
(≠i_d©®*
roŸ
, *
«me
, 
uöt64_t
 *
d©a
, 
boﬁ
 
c›y_d©a
);

1586 
≠i_d©a
 *
≠i_add_ãmp
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1587 
≠i_d©a
 *
≠i_add_vﬁts
(≠i_d©®*
roŸ
, *
«me
, *
d©a
, 
boﬁ
 
c›y_d©a
);

1592 
du∑Œoc
(
cgpu_öfo
 *
cgpu
, 
timñimô
);

1593 
dupcou¡îs
(
cgpu_öfo
 *
cgpu
, 
uöt64_t
 *
checked
, uöt64_à*
dups
);

1594 
boﬁ
 
isdu≤⁄˚
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
);

1596 
cg_logw‹k
(
w‹k
 *w‹k, *
n⁄˚_bö
, 
boﬁ
 
ok
);

1597 
cg_logw‹k_uöt32
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
, 
boﬁ
 
ok
);

1599 #i‡
deföed
(
USE_BITMAIN
)

1600 
ªv
(*
s
, 
size_t
 
l
);

1601 
check_asi˙um
(
asic_num
, 
n⁄˚
);

	@miner_type.h

1 
	#S9_63


	)

	@noncedup.c

10 
	~"möî.h
"

11 
	~"kli°.h
"

14 
	snôem
 {

15 
uöt32_t
 
	mw‹k_id
;

16 
uöt32_t
 
	mn⁄˚
;

17 
timevÆ
 
	mwhí
;

18 } 
	tNITEM
;

20 
	#DATAN
(
_ôem
Ë((
NITEM
 *)(_ôem->
d©a
))

	)

22 
	sdupd©a
 {

23 
	mtimñimô
;

24 
K_LIST
 *
	mn‰ì_li°
;

25 
K_STORE
 *
	mn⁄˚_li°
;

26 
uöt64_t
 
	mchecked
;

27 
uöt64_t
 
	mdups
;

30 
	$du∑Œoc
(
cgpu_öfo
 *
cgpu
, 
timñimô
)

32 
dupd©a
 *
dup
;

34 
dup
 = 
	`ˇŒoc
(1, (*dup));

35 i‡(
	`u∆ikñy
(!
dup
))

36 
	`quôhîe
(1, "FailedÅo calloc dupdata");

38 
dup
->
timñimô
 =Åimelimit;

39 
dup
->
n‰ì_li°
 = 
	`k_√w_li°
("N⁄˚s", (
NITEM
), 1024, 0, 
åue
);

40 
dup
->
n⁄˚_li°
 = 
	`k_√w_°‹e
(dup->
n‰ì_li°
);

42 
cgpu
->
dup_d©a
 = 
dup
;

43 
	}
}

45 
	$dupcou¡îs
(
cgpu_öfo
 *
cgpu
, 
uöt64_t
 *
checked
, uöt64_à*
dups
)

47 
dupd©a
 *
dup
 = (dupd©®*)(
cgpu
->
dup_d©a
);

49 i‡(!
dup
) {

50 *
checked
 = 0;

51 *
dups
 = 0;

53 *
checked
 = 
dup
->checked;

54 *
dups
 = 
dup
->dups;

56 
	}
}

58 
boﬁ
 
	$isdu≤⁄˚
(
cgpu_öfo
 *
cgpu
, 
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
)

60 
dupd©a
 *
dup
 = (dupd©®*)(
cgpu
->
dup_d©a
);

61 
timevÆ
 
now
;

62 
boﬁ
 
unique
 = 
åue
;

63 
K_ITEM
 *
ôem
;

65 i‡(!
dup
)

66  
Ál£
;

68 
	`cgtime
(&
now
);

69 
dup
->
checked
++;

70 
	`K_WLOCK
(
dup
->
n‰ì_li°
);

71 
ôem
 = 
dup
->
n⁄˚_li°
->
èû
;

72 
unique
 && 
ôem
) {

73 i‡(
	`DATAN
(
ôem
)->
w‹k_id
 =
w‹k
->
id
 && DATAN(ôem)->
n⁄˚
 ==Çonce) {

74 
unique
 = 
Ál£
;

75 
	`≠∂og
(
LOG_WARNING
, "%s%d: DuplicateÇonce %08x",

76 
cgpu
->
drv
->
«me
, cgpu->
devi˚_id
, 
n⁄˚
);

78 
ôem
 = iãm->
¥ev
;

80 i‡(
unique
) {

81 
ôem
 = 
	`k_u∆ök_hód
(
dup
->
n‰ì_li°
);

82 
	`DATAN
(
ôem
)->
w‹k_id
 = 
w‹k
->
id
;

83 
	`DATAN
(
ôem
)->
n⁄˚
 =Çonce;

84 
	`mem˝y
(&(
	`DATAN
(
ôem
)->
whí
), &
now
, (now));

85 
	`k_add_hód
(
dup
->
n⁄˚_li°
, 
ôem
);

87 
ôem
 = 
dup
->
n⁄˚_li°
->
èû
;

88 
ôem
 && 
	`tdiff
(&(
	`DATAN
(ôem)->
whí
), &
now
Ë> 
dup
->
timñimô
) {

89 
ôem
 = 
	`k_u∆ök_èû
(
dup
->
n⁄˚_li°
);

90 
	`k_add_hód
(
dup
->
n‰ì_li°
, 
ôem
);

91 
ôem
 = 
dup
->
n⁄˚_li°
->
èû
;

93 
	`K_WUNLOCK
(
dup
->
n‰ì_li°
);

95 i‡(!
unique
)

96 
dup
->
dups
++;

98  !
unique
;

99 
	}
}

	@sha2-soc.c

32 
	~<°rög.h
>

33 
	~"sha2-soc.h
"

35 
dump_hex
(
uöt8_t
 *
d©a
, 
uöt16_t
 
Àn
);

39 #i‚de‡
GET_ULONG_BE


40 
	#GET_ULONG_BE
(
n
,
b
,
i
Ë\

	)

42 (
	gn
Ë–(
uöt32_t
Ë(
b
)[(
i
) ] << 24 ) \

43 | ( (
uöt32_t
Ë(
b
)[(
i
) + 1] << 16 ) \

44 | ( (
uöt32_t
Ë(
b
)[(
i
) + 2] << 8 ) \

45 | ( (
uöt32_t
Ë(
b
)[(
i
) + 3] ); \

49 #i‚de‡
PUT_ULONG_BE


50 
	#PUT_ULONG_BE
(
n
,
b
,
i
Ë\

	)

52 (
	gb
)[(
i
Ë] = (Ë–(
n
) >> 24 ); \

53 (
	gb
)[(
i
Ë+ 1] = (Ë–(
n
) >> 16 ); \

54 (
	gb
)[(
i
Ë+ 2] = (Ë–(
n
) >> 8 ); \

55 (
	gb
)[(
i
Ë+ 3] = (Ë–(
n
) ); \

62 
	$sha2_°¨ts
–
sha2_c⁄ãxt
 *
˘x
 )

64 
˘x
->
tŸÆ
[0] = 0;

65 
˘x
->
tŸÆ
[1] = 0;

67 
˘x
->
°©e
[0] = 0x6A09E667;

68 
˘x
->
°©e
[1] = 0xBB67AE85;

69 
˘x
->
°©e
[2] = 0x3C6EF372;

70 
˘x
->
°©e
[3] = 0xA54FF53A;

71 
˘x
->
°©e
[4] = 0x510E527F;

72 
˘x
->
°©e
[5] = 0x9B05688C;

73 
˘x
->
°©e
[6] = 0x1F83D9AB;

74 
˘x
->
°©e
[7] = 0x5BE0CD19;

75 
	}
}

77 
	$sha2_¥o˚ss
–
sha2_c⁄ãxt
 *
˘x
, c⁄° 
d©a
[64] )

79 
uöt32_t
 
ãmp1
, 
ãmp2
, 
W
[64];

80 
uöt32_t
 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
;

82 
	`GET_ULONG_BE
–
W
[ 0], 
d©a
, 0 );

83 
	`GET_ULONG_BE
–
W
[ 1], 
d©a
, 4 );

84 
	`GET_ULONG_BE
–
W
[ 2], 
d©a
, 8 );

85 
	`GET_ULONG_BE
–
W
[ 3], 
d©a
, 12 );

86 
	`GET_ULONG_BE
–
W
[ 4], 
d©a
, 16 );

87 
	`GET_ULONG_BE
–
W
[ 5], 
d©a
, 20 );

88 
	`GET_ULONG_BE
–
W
[ 6], 
d©a
, 24 );

89 
	`GET_ULONG_BE
–
W
[ 7], 
d©a
, 28 );

90 
	`GET_ULONG_BE
–
W
[ 8], 
d©a
, 32 );

91 
	`GET_ULONG_BE
–
W
[ 9], 
d©a
, 36 );

92 
	`GET_ULONG_BE
–
W
[10], 
d©a
, 40 );

93 
	`GET_ULONG_BE
–
W
[11], 
d©a
, 44 );

94 
	`GET_ULONG_BE
–
W
[12], 
d©a
, 48 );

95 
	`GET_ULONG_BE
–
W
[13], 
d©a
, 52 );

96 
	`GET_ULONG_BE
–
W
[14], 
d©a
, 56 );

97 
	`GET_ULONG_BE
–
W
[15], 
d©a
, 60 );

99 
	#SHR
(
x
,
n
Ë((x & 0xFFFFFFFFË>>Ç)

	)

100 
	#ROTR
(
x
,
n
Ë(
	`SHR
(x,nË| (x << (32 -Ç)))

	)

102 
	#S0
(
x
Ë(
	`ROTR
(x, 7Ë^ ROTR(x,18Ë^ 
	`SHR
(x, 3))

	)

103 
	#S1
(
x
Ë(
	`ROTR
(x,17Ë^ ROTR(x,19Ë^ 
	`SHR
(x,10))

	)

105 
	#S2
(
x
Ë(
	`ROTR
(x, 2Ë^ ROTR(x,13Ë^ ROTR(x,22))

	)

106 
	#S3
(
x
Ë(
	`ROTR
(x, 6Ë^ ROTR(x,11Ë^ ROTR(x,25))

	)

108 
	#F0
(
x
,
y
,
z
Ë((x & yË| (z & (x | y)))

	)

109 
	#F1
(
x
,
y
,
z
Ë(z ^ (x & (y ^ z)))

	)

111 
	#R
(
t
Ë\

	)

113 
W
[
t
] = 
	`S1
(W[t - 2]) + W[t - 7] + \

114 
	`S0
(
W
[
t
 - 15]) + W[t - 16] \

117 
	#P
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
x
,
K
Ë\

	)

119 
ãmp1
 = 
h
 + 
	`S3
(
e
Ë+ 
	`F1
”,
f
,
g
Ë+ 
K
 + 
x
; \

120 
ãmp2
 = 
	`S2
(
a
Ë+ 
	`F0
◊,
b
,
c
); \

121 
d
 +
ãmp1
; 
h
 =Åemp1 + 
ãmp2
; \

124 
A
 = 
˘x
->
°©e
[0];

125 
B
 = 
˘x
->
°©e
[1];

126 
C
 = 
˘x
->
°©e
[2];

127 
D
 = 
˘x
->
°©e
[3];

128 
E
 = 
˘x
->
°©e
[4];

129 
F
 = 
˘x
->
°©e
[5];

130 
G
 = 
˘x
->
°©e
[6];

131 
H
 = 
˘x
->
°©e
[7];

133 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
W
[ 0], 0x428A2F98 );

134 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
W
[ 1], 0x71374491 );

135 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
W
[ 2], 0xB5C0FBCF );

136 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
W
[ 3], 0xE9B5DBA5 );

137 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
W
[ 4], 0x3956C25B );

138 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
W
[ 5], 0x59F111F1 );

139 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
W
[ 6], 0x923F82A4 );

140 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
W
[ 7], 0xAB1C5ED5 );

141 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
W
[ 8], 0xD807AA98 );

142 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
W
[ 9], 0x12835B01 );

143 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
W
[10], 0x243185BE );

144 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
W
[11], 0x550C7DC3 );

145 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
W
[12], 0x72BE5D74 );

146 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
W
[13], 0x80DEB1FE );

147 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
W
[14], 0x9BDC06A7 );

148 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
W
[15], 0xC19BF174 );

149 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(16), 0xE49B69C1 );

150 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(17), 0xEFBE4786 );

151 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(18), 0x0FC19DC6 );

152 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(19), 0x240CA1CC );

153 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(20), 0x2DE92C6F );

154 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(21), 0x4A7484AA );

155 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(22), 0x5CB0A9DC );

156 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(23), 0x76F988DA );

157 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(24), 0x983E5152 );

158 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(25), 0xA831C66D );

159 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(26), 0xB00327C8 );

160 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(27), 0xBF597FC7 );

161 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(28), 0xC6E00BF3 );

162 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(29), 0xD5A79147 );

163 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(30), 0x06CA6351 );

164 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(31), 0x14292967 );

165 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(32), 0x27B70A85 );

166 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(33), 0x2E1B2138 );

167 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(34), 0x4D2C6DFC );

168 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(35), 0x53380D13 );

169 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(36), 0x650A7354 );

170 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(37), 0x766A0ABB );

171 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(38), 0x81C2C92E );

172 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(39), 0x92722C85 );

173 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(40), 0xA2BFE8A1 );

174 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(41), 0xA81A664B );

175 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(42), 0xC24B8B70 );

176 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(43), 0xC76C51A3 );

177 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(44), 0xD192E819 );

178 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(45), 0xD6990624 );

179 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(46), 0xF40E3585 );

180 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(47), 0x106AA070 );

181 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(48), 0x19A4C116 );

182 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(49), 0x1E376C08 );

183 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(50), 0x2748774C );

184 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(51), 0x34B0BCB5 );

185 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(52), 0x391C0CB3 );

186 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(53), 0x4ED8AA4A );

187 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(54), 0x5B9CCA4F );

188 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(55), 0x682E6FF3 );

189 
	`P
–
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
	`R
(56), 0x748F82EE );

190 
	`P
–
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
	`R
(57), 0x78A5636F );

191 
	`P
–
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
F
, 
	`R
(58), 0x84C87814 );

192 
	`P
–
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
E
, 
	`R
(59), 0x8CC70208 );

193 
	`P
–
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
D
, 
	`R
(60), 0x90BEFFFA );

194 
	`P
–
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
C
, 
	`R
(61), 0xA4506CEB );

195 
	`P
–
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
B
, 
	`R
(62), 0xBEF9A3F7 );

196 
	`P
–
B
, 
C
, 
D
, 
E
, 
F
, 
G
, 
H
, 
A
, 
	`R
(63), 0xC67178F2 );

198 
˘x
->
°©e
[0] +
A
;

199 
˘x
->
°©e
[1] +
B
;

200 
˘x
->
°©e
[2] +
C
;

201 
˘x
->
°©e
[3] +
D
;

202 
˘x
->
°©e
[4] +
E
;

203 
˘x
->
°©e
[5] +
F
;

204 
˘x
->
°©e
[6] +
G
;

205 
˘x
->
°©e
[7] +
H
;

206 
	}
}

211 
	$sha2_upd©e
–
sha2_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
ûí
 )

213 
fûl
;

214 
uöt32_t
 
À·
;

216 if–
ûí
 <= 0 )

219 
À·
 = 
˘x
->
tŸÆ
[0] & 0x3F;

220 
fûl
 = 64 - 
À·
;

222 
˘x
->
tŸÆ
[0] +
ûí
;

223 
˘x
->
tŸÆ
[0] &= 0xFFFFFFFF;

225 if–
˘x
->
tŸÆ
[0] < (
uöt32_t
Ë
ûí
 )

226 
˘x
->
tŸÆ
[1]++;

228 if–
À·
 && 
ûí
 >
fûl
 )

230 
	`mem˝y
–(*Ë(
˘x
->
buf„r
 + 
À·
),

231 (*Ë
öput
, 
fûl
 );

232 
	`sha2_¥o˚ss
–
˘x
, ctx->
buf„r
 );

233 
öput
 +
fûl
;

234 
ûí
 -
fûl
;

235 
À·
 = 0;

238  
ûí
 >= 64 )

240 
	`sha2_¥o˚ss
–
˘x
, 
öput
 );

241 
öput
 += 64;

242 
ûí
 -= 64;

245 if–
ûí
 > 0 )

247 
	`mem˝y
((*Ë(
˘x
->
buf„r
 + 
À·
),

248 (*Ë
öput
, 
ûí
 );

254 
	}
}

256 c⁄° 
	gsha2_∑ddög
[64] =

267 
	$sha2_föish
–
sha2_c⁄ãxt
 *
˘x
, 
ouçut
[32] )

269 
uöt32_t
 
œ°
, 
∑dn
;

270 
uöt32_t
 
high
, 
low
;

271 
msgÀn
[8];

273 
high
 = ( 
˘x
->
tŸÆ
[0] >> 29 )

274 | ( 
˘x
->
tŸÆ
[1] << 3 );

275 
low
 = ( 
˘x
->
tŸÆ
[0] << 3 );

277 
	`PUT_ULONG_BE
–
high
, 
msgÀn
, 0 );

278 
	`PUT_ULONG_BE
–
low
, 
msgÀn
, 4 );

280 
œ°
 = 
˘x
->
tŸÆ
[0] & 0x3F;

281 
∑dn
 = ( 
œ°
 < 56 ) ? ( 56 -Üast ) : ( 120 -Üast );

283 
	`sha2_upd©e
–
˘x
, (*Ë
sha2_∑ddög
, 
∑dn
 );

284 
	`sha2_upd©e
–
˘x
, 
msgÀn
, 8 );

286 
	`PUT_ULONG_BE
–
˘x
->
°©e
[0], 
ouçut
, 0 );

287 
	`PUT_ULONG_BE
–
˘x
->
°©e
[1], 
ouçut
, 4 );

288 
	`PUT_ULONG_BE
–
˘x
->
°©e
[2], 
ouçut
, 8 );

289 
	`PUT_ULONG_BE
–
˘x
->
°©e
[3], 
ouçut
, 12 );

290 
	`PUT_ULONG_BE
–
˘x
->
°©e
[4], 
ouçut
, 16 );

291 
	`PUT_ULONG_BE
–
˘x
->
°©e
[5], 
ouçut
, 20 );

292 
	`PUT_ULONG_BE
–
˘x
->
°©e
[6], 
ouçut
, 24 );

294 
	`PUT_ULONG_BE
–
˘x
->
°©e
[7], 
ouçut
, 28 );

295 
	}
}

300 
	$sha2
–c⁄° *
öput
, 
ûí
,

301 
ouçut
[32] )

303 
sha2_c⁄ãxt
 
˘x
;

305 
	`sha2_°¨ts
–&
˘x
 );

306 
	`sha2_upd©e
–&
˘x
, 
öput
, 
ûí
 );

307 
	`sha2_föish
–&
˘x
, 
ouçut
 );

309 
	`mem£t
(&
˘x
, 0, (
sha2_c⁄ãxt
));

310 
	}
}

	@sha2-soc.h

27 
	~"c⁄fig.h
"

28 
	~"möî.h
"

30 #i‚de‡
POLARSSL_SHA2_H


31 
	#POLARSSL_SHA2_H


	)

39 
uöt32_t
 
	mtŸÆ
[2];

40 
uöt32_t
 
	m°©e
[8];

41 
	mbuf„r
[64];

43 
	mùad
[64];

44 
	m›ad
[64];

46 
	tsha2_c⁄ãxt
;

48 #ifde‡
__˝lu•lus


57 
sha2_°¨ts
–
sha2_c⁄ãxt
 *
˘x
);

66 
sha2_upd©e
–
sha2_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
ûí
 );

74 
sha2_föish
–
sha2_c⁄ãxt
 *
˘x
, 
ouçut
[32] );

83 
sha2
–c⁄° *
öput
, 
ûí
,

84 
ouçut
[32]);

87 
sha2_¥o˚ss
–
sha2_c⁄ãxt
 *
˘x
, c⁄° 
d©a
[64] );

89 #ifde‡
__˝lu•lus


	@sha2.c

36 
	~<°rög.h
>

37 
	~<°döt.h
>

39 
	~"sha2.h
"

41 
	#UNPACK32
(
x
, 
°r
) \

43 *((
°r
Ë+ 3Ë(
uöt8_t
Ë((
x
) ); \

44 *((
°r
Ë+ 2Ë(
uöt8_t
Ë((
x
) >> 8); \

45 *((
°r
Ë+ 1Ë(
uöt8_t
Ë((
x
) >> 16); \

46 *((
°r
Ë+ 0Ë(
uöt8_t
Ë((
x
) >> 24); \

47 }

	)

49 
	#PACK32
(
°r
, 
x
) \

51 *(
x
Ë((
uöt32_t
Ë*((
°r
) + 3) ) \

52 | ((
uöt32_t
Ë*((
°r
) + 2) << 8) \

53 | ((
uöt32_t
Ë*((
°r
) + 1) << 16) \

54 | ((
uöt32_t
Ë*((
°r
) + 0) << 24); \

55 }

	)

57 
	#SHA256_SCR
(
i
) \

59 
w
[
i
] = 
	`SHA256_F4
(w[i - 2]) + w[i - 7] \

60 + 
	`SHA256_F3
(
w
[
i
 - 15]) + w[i - 16]; \

61 }

	)

63 
uöt32_t
 
	gsha256_h0
[8] =

67 
uöt32_t
 
	gsha256_k
[64] =

87 #ifde‡
USE_AVX2


88 
sha256_r‹x
(c⁄° *, 
uöt32_t
[8], 
uöt64_t
);

90 
	$sha256_å™sf
(
sha256_˘x
 *
˘x
, c⁄° *
mesßge
,

91 
block_nb
)

93 
	`sha256_r‹x
(
mesßge
, 
˘x
->
h
, 
block_nb
);

94 
	}
}

95 #ñi‡
deföed
(
USE_AVX1
)

96 
sha256_avx
(c⁄° *, 
uöt32_t
[8], 
uöt64_t
);

98 
	$sha256_å™sf
(
sha256_˘x
 *
˘x
, c⁄° *
mesßge
,

99 
block_nb
)

101 
	`sha256_avx
(
mesßge
, 
˘x
->
h
, 
block_nb
);

102 
	}
}

103 #ñi‡
deföed
(
USE_SSE4
)

104 
sha256_s£4
(c⁄° *, 
uöt32_t
[8], 
uöt64_t
);

106 
	$sha256_å™sf
(
sha256_˘x
 *
˘x
, c⁄° *
mesßge
,

107 
block_nb
)

109 
	`sha256_s£4
(
mesßge
, 
˘x
->
h
, 
block_nb
);

110 
	}
}

112 
	$sha256_å™sf
(
sha256_˘x
 *
˘x
, c⁄° *
mesßge
,

113 
block_nb
)

115 
uöt32_t
 
w
[64];

116 
uöt32_t
 
wv
[8];

117 
uöt32_t
 
t1
, 
t2
;

118 c⁄° *
sub_block
;

119 
i
;

121 
j
;

123 
i
 = 0; i < (Ë
block_nb
; i++) {

124 
sub_block
 = 
mesßge
 + (
i
 << 6);

126 
j
 = 0; j < 16; j++) {

127 
	`PACK32
(&
sub_block
[
j
 << 2], &
w
[j]);

130 
j
 = 16; j < 64; j++) {

131 
	`SHA256_SCR
(
j
);

134 
j
 = 0; j < 8; j++) {

135 
wv
[
j
] = 
˘x
->
h
[j];

138 
j
 = 0; j < 64; j++) {

139 
t1
 = 
wv
[7] + 
	`SHA256_F2
(wv[4]Ë+ 
	`CH
(wv[4], wv[5], wv[6])

140 + 
sha256_k
[
j
] + 
w
[j];

141 
t2
 = 
	`SHA256_F1
(
wv
[0]Ë+ 
	`MAJ
(wv[0], wv[1], wv[2]);

142 
wv
[7] = wv[6];

143 
wv
[6] = wv[5];

144 
wv
[5] = wv[4];

145 
wv
[4] = wv[3] + 
t1
;

146 
wv
[3] = wv[2];

147 
wv
[2] = wv[1];

148 
wv
[1] = wv[0];

149 
wv
[0] = 
t1
 + 
t2
;

152 
j
 = 0; j < 8; j++) {

153 
˘x
->
h
[
j
] +
wv
[j];

156 
	}
}

158 
	$sha256
(c⁄° *
mesßge
, 
Àn
, *
dige°
)

160 
sha256_˘x
 
˘x
;

162 
	`sha256_öô
(&
˘x
);

163 
	`sha256_upd©e
(&
˘x
, 
mesßge
, 
Àn
);

164 
	`sha256_föÆ
(&
˘x
, 
dige°
);

165 
	}
}

167 
	$sha256_öô
(
sha256_˘x
 *
˘x
)

169 
i
;

170 
i
 = 0; i < 8; i++) {

171 
˘x
->
h
[
i
] = 
sha256_h0
[i];

174 
˘x
->
Àn
 = 0;

175 
˘x
->
tŸ_Àn
 = 0;

176 
	}
}

178 
	$sha256_upd©e
(
sha256_˘x
 *
˘x
, c⁄° *
mesßge
,

179 
Àn
)

181 
block_nb
;

182 
√w_Àn
, 
ªm_Àn
, 
tmp_Àn
;

183 c⁄° *
shi·ed_mesßge
;

185 
tmp_Àn
 = 
SHA256_BLOCK_SIZE
 - 
˘x
->
Àn
;

186 
ªm_Àn
 = 
Àn
 < 
tmp_Àn
 ?Üen :Åmp_len;

188 
	`mem˝y
(&
˘x
->
block
[˘x->
Àn
], 
mesßge
, 
ªm_Àn
);

190 i‡(
˘x
->
Àn
 +Üí < 
SHA256_BLOCK_SIZE
) {

191 
˘x
->
Àn
 +=Üen;

195 
√w_Àn
 = 
Àn
 - 
ªm_Àn
;

196 
block_nb
 = 
√w_Àn
 / 
SHA256_BLOCK_SIZE
;

198 
shi·ed_mesßge
 = 
mesßge
 + 
ªm_Àn
;

200 
	`sha256_å™sf
(
˘x
, ctx->
block
, 1);

201 
	`sha256_å™sf
(
˘x
, 
shi·ed_mesßge
, 
block_nb
);

203 
ªm_Àn
 = 
√w_Àn
 % 
SHA256_BLOCK_SIZE
;

205 
	`mem˝y
(
˘x
->
block
, &
shi·ed_mesßge
[
block_nb
 << 6],

206 
ªm_Àn
);

208 
˘x
->
Àn
 = 
ªm_Àn
;

209 
˘x
->
tŸ_Àn
 +(
block_nb
 + 1) << 6;

210 
	}
}

212 
	$sha256_föÆ
(
sha256_˘x
 *
˘x
, *
dige°
)

214 
block_nb
;

215 
pm_Àn
;

216 
Àn_b
;

218 
i
;

220 
block_nb
 = (Ë(1 + ((
SHA256_BLOCK_SIZE
 - 9)

221 < (
˘x
->
Àn
 % 
SHA256_BLOCK_SIZE
)));

223 
Àn_b
 = (
˘x
->
tŸ_Àn
 + ctx->
Àn
) << 3;

224 
pm_Àn
 = 
block_nb
 << 6;

226 
	`mem£t
(
˘x
->
block
 + ctx->
Àn
, 0, 
pm_Àn
 - ctx->len);

227 
˘x
->
block
[˘x->
Àn
] = 0x80;

228 
	`UNPACK32
(
Àn_b
, 
˘x
->
block
 + 
pm_Àn
 - 4);

230 
	`sha256_å™sf
(
˘x
, ctx->
block
, 
block_nb
);

232 
i
 = 0 ; i < 8; i++) {

233 
	`UNPACK32
(
˘x
->
h
[
i
], &
dige°
[i << 2]);

235 
	}
}

	@sha2.h

36 
	~"c⁄fig.h
"

37 
	~"möî.h
"

39 #i‚de‡
SHA2_H


40 
	#SHA2_H


	)

42 
	#SHA256_DIGEST_SIZE
 ( 256 / 8)

	)

43 
	#SHA256_BLOCK_SIZE
 ( 512 / 8)

	)

45 
	#SHFR
(
x
, 
n
Ë(x >>Ç)

	)

46 
	#ROTR
(
x
, 
n
Ë((x >>ÇË| (x << (((xË<< 3Ë-Ç)))

	)

47 
	#CH
(
x
, 
y
, 
z
Ë((x & yË^ (~x & z))

	)

48 
	#MAJ
(
x
, 
y
, 
z
Ë((x & yË^ (x & zË^ (y & z))

	)

50 
	#SHA256_F1
(
x
Ë(
	`ROTR
(x, 2Ë^ ROTR(x, 13Ë^ ROTR(x, 22))

	)

51 
	#SHA256_F2
(
x
Ë(
	`ROTR
(x, 6Ë^ ROTR(x, 11Ë^ ROTR(x, 25))

	)

52 
	#SHA256_F3
(
x
Ë(
	`ROTR
(x, 7Ë^ ROTR(x, 18Ë^ 
	`SHFR
(x, 3))

	)

53 
	#SHA256_F4
(
x
Ë(
	`ROTR
(x, 17Ë^ ROTR(x, 19Ë^ 
	`SHFR
(x, 10))

	)

56 
	mtŸ_Àn
;

57 
	mÀn
;

58 
	mblock
[2 * 
SHA256_BLOCK_SIZE
];

59 
uöt32_t
 
	mh
[8];

60 } 
	tsha256_˘x
;

62 
uöt32_t
 
sha256_k
[64];

64 
sha256_öô
(
sha256_˘x
 * 
˘x
);

65 
sha256_upd©e
(
sha256_˘x
 *
˘x
, c⁄° *
mesßge
,

66 
Àn
);

67 
sha256_föÆ
(
sha256_˘x
 *
˘x
, *
dige°
);

68 
sha256
(c⁄° *
mesßge
, 
Àn
,

69 *
dige°
);

	@spi-context.h

1 #i‚de‡
SPI_CONTEXT_H


2 
	#SPI_CONTEXT_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/•i/•idev.h
>

6 
	~<°dboﬁ.h
>

7 
	~<°döt.h
>

9 
	#SPI_DEVICE_TEMPLATE
 "/dev/•idev%d.%d"

	)

10 
	#DEFAULT_SPI_BUS
 0

	)

11 
	#DEFAULT_SPI_CS_LINE
 0

	)

12 
	#DEFAULT_SPI_MODE
 
SPI_MODE_0


	)

13 
	#DEFAULT_SPI_BITS_PER_WORD
 8

	)

14 
	#DEFAULT_SPI_SPEED
 1500000

	)

15 
	#DEFAULT_SPI_DELAY_USECS
 0

	)

17 
	s•i_c⁄fig
 {

18 
	mbus
;

19 
	mcs_löe
;

20 
uöt8_t
 
	mmode
;

21 
uöt32_t
 
	m•ìd
;

22 
uöt8_t
 
	mbôs
;

23 
uöt16_t
 
	mdñay
;

26 c⁄° 
•i_c⁄fig
 
	gdeÁu…_•i_c⁄fig
 = {

27 .
bus
 = 
DEFAULT_SPI_BUS
,

28 .
	gcs_löe
 = 
DEFAULT_SPI_CS_LINE
,

29 .
	gmode
 = 
DEFAULT_SPI_MODE
,

30 .
	g•ìd
 = 
DEFAULT_SPI_SPEED
,

31 .
	gbôs
 = 
DEFAULT_SPI_BITS_PER_WORD
,

32 .
	gdñay
 = 
DEFAULT_SPI_DELAY_USECS
,

35 
	s•i_˘x
 {

36 
	mfd
;

37 
•i_c⁄fig
 
	mc⁄fig
;

41 
•i_˘x
 *
•i_öô
(
•i_c⁄fig
 *
c⁄fig
);

43 
•i_exô
(
•i_˘x
 *
˘x
);

45 
boﬁ
 
•i_å™s„r
(
•i_˘x
 *
˘x
, 
uöt8_t
 *
txbuf
,

46 
uöt8_t
 *
rxbuf
, 
Àn
);

	@usbutils.h

11 #i‚de‡
USBUTILS_H


12 
	#USBUTILS_H


	)

14 
	~<com∑t/libusb-1.0/libusb/libusb.h
>

16 
	~"utû.h
"

18 
	#EPI
(
x
Ë(
LIBUSB_ENDPOINT_IN
 | ()(x))

	)

19 
	#EPO
(
x
Ë(
LIBUSB_ENDPOINT_OUT
 | ()(x))

	)

23 
	#FTDI_TYPE_OUT
 (
LIBUSB_REQUEST_TYPE_VENDOR
 | 
LIBUSB_RECIPIENT_DEVICE
 | 
LIBUSB_ENDPOINT_OUT
)

	)

24 
	#FTDI_TYPE_IN
 (
LIBUSB_REQUEST_TYPE_VENDOR
 | 
LIBUSB_RECIPIENT_DEVICE
 | 
LIBUSB_ENDPOINT_IN
)

	)

26 
	#FTDI_REQUEST_RESET
 ((
uöt8_t
)0)

	)

27 
	#FTDI_REQUEST_MODEM
 ((
uöt8_t
)1)

	)

28 
	#FTDI_REQUEST_FLOW
 ((
uöt8_t
)2)

	)

29 
	#FTDI_REQUEST_BAUD
 ((
uöt8_t
)3)

	)

30 
	#FTDI_REQUEST_DATA
 ((
uöt8_t
)4)

	)

31 
	#FTDI_REQUEST_LATENCY
 ((
uöt8_t
)9)

	)

33 
	#FTDI_VALUE_RESET
 0

	)

34 
	#FTDI_VALUE_PURGE_RX
 1

	)

35 
	#FTDI_VALUE_PURGE_TX
 2

	)

36 
	#FTDI_VALUE_LATENCY
 1

	)

39 
	#FTDI_VALUE_BAUD_BFL
 0xc068

	)

40 
	#FTDI_INDEX_BAUD_BFL
 0x0200

	)

41 
	#FTDI_VALUE_BAUD_BAS
 
FTDI_VALUE_BAUD_BFL


	)

42 
	#FTDI_INDEX_BAUD_BAS
 
FTDI_INDEX_BAUD_BFL


	)

44 
	#FTDI_VALUE_BAUD_BLT
 0x001a

	)

45 
	#FTDI_INDEX_BAUD_BLT
 0x0000

	)

48 
	#FTDI_VALUE_BAUD_BTM
 0x001A

	)

49 
	#FTDI_INDEX_BAUD_BTM
 0x0000

	)

51 
	#FTDI_VALUE_DATA_BTM
 8

	)

54 
	#FTDI_VALUE_BAUD_CMR_115
 0xc068

	)

55 
	#FTDI_INDEX_BAUD_CMR_115
 0x0200

	)

57 
	#FTDI_VALUE_BAUD_CMR_57
 0x80d0

	)

58 
	#FTDI_INDEX_BAUD_CMR_57
 0x0200

	)

61 
	#FTDI_VALUE_DATA_BFL
 0

	)

62 
	#FTDI_VALUE_DATA_BAS
 
FTDI_VALUE_DATA_BFL


	)

64 
	#FTDI_VALUE_DATA_BLT
 8

	)

66 
	#FTDI_VALUE_FLOW
 0

	)

67 
	#FTDI_VALUE_MODEM
 0x0303

	)

71 
	#CP210X_TYPE_OUT
 0x41

	)

73 
	#CP210X_REQUEST_IFC_ENABLE
 0x00

	)

74 
	#CP210X_REQUEST_DATA
 0x07

	)

75 
	#CP210X_REQUEST_BAUD
 0x1e

	)

77 
	#CP210X_VALUE_UART_ENABLE
 0x0001

	)

78 
	#CP210X_VALUE_DATA
 0x0303

	)

79 
	#CP210X_DATA_BAUD
 0x0001c200

	)

81 
	#CP210X_SET_LINE_CTL
 0x03

	)

82 
	#CP210X_BITS_DATA_MASK
 0x0f00

	)

83 
	#CP210X_BITS_DATA_8
 0x0800

	)

84 
	#CP210X_BITS_PARITY_MARK
 0x0030

	)

85 
	#CP210X_BITS_PARITY_SPACE
 0x0040

	)

89 
	#PL2303_CTRL_DTR
 0x01

	)

90 
	#PL2303_CTRL_RTS
 0x02

	)

92 
	#PL2303_CTRL_OUT
 0x21

	)

93 
	#PL2303_VENDOR_OUT
 0x40

	)

95 
	#PL2303_REQUEST_CTRL
 0x22

	)

96 
	#PL2303_REQUEST_LINE
 0x20

	)

97 
	#PL2303_REQUEST_VENDOR
 0x01

	)

99 
	#PL2303_REPLY_CTRL
 0x21

	)

101 
	#PL2303_VALUE_CTRL
 (
PL2303_CTRL_DTR
 | 
PL2303_CTRL_RTS
)

	)

102 
	#PL2303_VALUE_LINE
 0

	)

103 
	#PL2303_VALUE_LINE0
 0x0001c200

	)

104 
	#PL2303_VALUE_LINE1
 0x080000

	)

105 
	#PL2303_VALUE_LINE_SIZE
 7

	)

106 
	#PL2303_VALUE_VENDOR
 0

	)

109 
	#DEVTIMEOUT
 0

	)

112 
	#DEFAULT_INTINFO
 0

	)

116 
	#DEFAULT_EP_IN
 0

	)

117 
	#DEFAULT_EP_OUT
 1

	)

119 
	susb_ïöfo
 {

120 
uöt8_t
 
	m©t
;

121 
uöt16_t
 
	msize
;

122 
	mï
;

123 
uöt16_t
 
	mwMaxPackëSize
;

124 
boﬁ
 
	mfound
;

127 
	susb_ötöfo
 {

128 
	möãrÁ˚
;

129 
	m˘æ_å™s„r
;

130 
	mïöfo_cou¡
;

131 
usb_ïöfo
 *
	mïöfos
;

134 
	esub_idít
 {

135 
	mIDENT_UNK
 = 0,

136 
	mIDENT_BMM
,

137 
	mIDENT_BC5


140 
	susb_föd_devi˚s
 {

141 
	mdrv
;

142 c⁄° *
	m«me
;

143 
sub_idít
 
	midít
;

144 
uöt16_t
 
	midVíd‹
;

145 
uöt16_t
 
	midProdu˘
;

146 *
	miM™uÁ˘uªr
;

147 *
	miProdu˘
;

148 
	mc⁄fig
;

149 
	mtimeout
;

150 
uöt16_t
 
	mœãncy
;

151 
	mötöfo_cou¡
;

152 
usb_ötöfo
 *
	mötöfos
;

158 
	#LATENCY_UNUSED
 0

	)

159 
	#LATENCY_STD
 32

	)

161 
	eusb_ty≥s
 {

162 
	mUSB_TYPE_STD
 = 0,

163 
	mUSB_TYPE_FTDI


166 
	#USB_MAX_READ
 8192

	)

172 
	#USB_READ_BUFSIZE
 (
USB_MAX_READ
 + 4)

	)

174 
	scg_usb_devi˚
 {

175 
usb_föd_devi˚s
 *
	mfound
;

176 
libusb_devi˚_h™dÀ
 *
	mh™dÀ
;

177 
±hªad_muãx_t
 *
	mmuãx
;

178 
libusb_devi˚_des¸ùt‹
 *
	mdes¸ùt‹
;

179 
usb_ty≥s
 
	musb_ty≥
;

180 
sub_idít
 
	midít
;

181 
uöt16_t
 
	musbvî
;

182 *
	m¥od_°rög
;

183 *
	mm™uf_°rög
;

184 *
	m£rül_°rög
;

185 
	mfwVîsi⁄
;

186 
	möãrÁ˚Vîsi⁄
;

187 
	mbuf„r
[
USB_MAX_READ
];

188 
uöt32_t
 
	mbufsiz
;

189 
uöt32_t
 
	mbuÁmt
;

190 
boﬁ
 
	musb11
;

191 
boﬁ
 
	mâ
;

194 
	#USB_NOSTAT
 0

	)

195 
	#USB_TMO_0
 50

	)

196 
	#USB_TMO_1
 100

	)

197 
	#USB_TMO_2
 500

	)

198 
	#USB_TMOS
 3

	)

200 
	scg_usb_tmo
 {

201 
uöt32_t
 
	mcou¡
;

202 
uöt32_t
 
	mmö_tmo
;

203 
uöt32_t
 
	mmax_tmo
;

204 
uöt64_t
 
	mtŸÆ_ovî
;

205 
uöt64_t
 
	mtŸÆ_tmo
;

208 
	scg_usb_öfo
 {

209 
uöt8_t
 
	mbus_numbî
;

210 
uöt8_t
 
	mdevi˚_addªss
;

211 
	musb°©
;

212 
boﬁ
 
	mnodev
;

213 
boﬁ
 
	möôüli£d
;

214 
	mnodev_cou¡
;

215 
timevÆ
 
	mœ°_nodev
;

216 
uöt32_t
 
	mi€º_cou¡
;

217 
uöt32_t
 
	mc⁄töuous_i€º_cou¡
;

228 
cglock_t
 
	mdevlock
;

230 
time_t
 
	mœ°_pùe
;

231 
uöt64_t
 
	mpùe_cou¡
;

232 
uöt64_t
 
	m˛ór_îr_cou¡
;

233 
uöt64_t
 
	mªåy_îr_cou¡
;

234 
uöt64_t
 
	m˛ór_Áû_cou¡
;

236 
uöt64_t
 
	mªad_dñay_cou¡
;

237 
	mtŸÆ_ªad_dñay
;

238 
uöt64_t
 
	mwrôe_dñay_cou¡
;

239 
	mtŸÆ_wrôe_dñay
;

241 
uöt64_t
 
	mtmo_cou¡
;

242 
cg_usb_tmo
 
	musb_tmo
[
USB_TMOS
];

245 
	#ENUMERATION
(
a
,
b
Ëa,

	)

246 
	#JUMPTABLE
(
a
,
b
Ëb,

	)

248 
	#USB_PARSE_COMMANDS
(
USB_ADD_COMMAND
) \

249 
	`USB_ADD_COMMAND
(
C_REJECTED
, "RejectedNoDevice") \

250 
	`USB_ADD_COMMAND
(
C_PING
, "Ping") \

251 
	`USB_ADD_COMMAND
(
C_CLEAR
, "Clear") \

252 
	`USB_ADD_COMMAND
(
C_REQUESTVERSION
, "RequestVersion") \

253 
	`USB_ADD_COMMAND
(
C_GETVERSION
, "GetVersion") \

254 
	`USB_ADD_COMMAND
(
C_REQUESTFPGACOUNT
, "RequestFPGACount") \

255 
	`USB_ADD_COMMAND
(
C_GETFPGACOUNT
, "GetFPGACount") \

256 
	`USB_ADD_COMMAND
(
C_STARTPROGRAM
, "StartProgram") \

257 
	`USB_ADD_COMMAND
(
C_STARTPROGRAMSTATUS
, "StartProgramStatus") \

258 
	`USB_ADD_COMMAND
(
C_PROGRAM
, "Program") \

259 
	`USB_ADD_COMMAND
(
C_PROGRAMSTATUS
, "ProgramStatus") \

260 
	`USB_ADD_COMMAND
(
C_PROGRAMSTATUS2
, "ProgramStatus2") \

261 
	`USB_ADD_COMMAND
(
C_FINALPROGRAMSTATUS
, "FinalProgramStatus") \

262 
	`USB_ADD_COMMAND
(
C_SETCLOCK
, "SetClock") \

263 
	`USB_ADD_COMMAND
(
C_SETPARITY
, "SetParity") \

264 
	`USB_ADD_COMMAND
(
C_REPLYSETCLOCK
, "ReplySetClock") \

265 
	`USB_ADD_COMMAND
(
C_SETVOLT
, "SetVolt") \

266 
	`USB_ADD_COMMAND
(
C_REPLYSETVOLT
, "ReplySetVolt") \

267 
	`USB_ADD_COMMAND
(
C_REQUESTUSERCODE
, "RequestUserCode") \

268 
	`USB_ADD_COMMAND
(
C_GETUSERCODE
, "GetUserCode") \

269 
	`USB_ADD_COMMAND
(
C_REQUESTTEMPERATURE
, "RequestTemperature") \

270 
	`USB_ADD_COMMAND
(
C_GETTEMPERATURE
, "GetTemperature") \

271 
	`USB_ADD_COMMAND
(
C_SENDWORK
, "SendWork") \

272 
	`USB_ADD_COMMAND
(
C_SENDWORKSTATUS
, "SendWorkStatus") \

273 
	`USB_ADD_COMMAND
(
C_REQUESTWORKSTATUS
, "RequestWorkStatus") \

274 
	`USB_ADD_COMMAND
(
C_GETWORKSTATUS
, "GetWorkStatus") \

275 
	`USB_ADD_COMMAND
(
C_REQUESTIDENTIFY
, "RequestIdentify") \

276 
	`USB_ADD_COMMAND
(
C_GETIDENTIFY
, "GetIdentify") \

277 
	`USB_ADD_COMMAND
(
C_REQUESTFLASH
, "RequestFlash") \

278 
	`USB_ADD_COMMAND
(
C_REQUESTSENDWORK
, "RequestSendWork") \

279 
	`USB_ADD_COMMAND
(
C_REQUESTSENDWORKSTATUS
, "RequestSendWorkStatus") \

280 
	`USB_ADD_COMMAND
(
C_RESET
, "Reset") \

281 
	`USB_ADD_COMMAND
(
C_SETBAUD
, "SetBaud") \

282 
	`USB_ADD_COMMAND
(
C_SETDATA
, "SetDataCtrl") \

283 
	`USB_ADD_COMMAND
(
C_SETFLOW
, "SetFlowCtrl") \

284 
	`USB_ADD_COMMAND
(
C_SETMODEM
, "SetModemCtrl") \

285 
	`USB_ADD_COMMAND
(
C_PURGERX
, "PurgeRx") \

286 
	`USB_ADD_COMMAND
(
C_PURGETX
, "PurgeTx") \

287 
	`USB_ADD_COMMAND
(
C_FLASHREPLY
, "FlashReply") \

288 
	`USB_ADD_COMMAND
(
C_REQUESTDETAILS
, "RequestDetails") \

289 
	`USB_ADD_COMMAND
(
C_GETDETAILS
, "GetDetails") \

290 
	`USB_ADD_COMMAND
(
C_REQUESTRESULTS
, "RequestResults") \

291 
	`USB_ADD_COMMAND
(
C_GETRESULTS
, "GetResults") \

292 
	`USB_ADD_COMMAND
(
C_REQUESTQUEJOB
, "RequestQueJob") \

293 
	`USB_ADD_COMMAND
(
C_REQUESTQUEJOBSTATUS
, "RequestQueJobStatus") \

294 
	`USB_ADD_COMMAND
(
C_QUEJOB
, "QueJob") \

295 
	`USB_ADD_COMMAND
(
C_QUEJOBSTATUS
, "QueJobStatus") \

296 
	`USB_ADD_COMMAND
(
C_QUEFLUSH
, "QueFlush") \

297 
	`USB_ADD_COMMAND
(
C_QUEFLUSHREPLY
, "QueFlushReply") \

298 
	`USB_ADD_COMMAND
(
C_REQUESTVOLTS
, "RequestVolts") \

299 
	`USB_ADD_COMMAND
(
C_GETVOLTS
, "GetVolts") \

300 
	`USB_ADD_COMMAND
(
C_SENDTESTWORK
, "SendTestWork") \

301 
	`USB_ADD_COMMAND
(
C_LATENCY
, "SetLatency") \

302 
	`USB_ADD_COMMAND
(
C_SETLINE
, "SetLine") \

303 
	`USB_ADD_COMMAND
(
C_VENDOR
, "Vendor") \

304 
	`USB_ADD_COMMAND
(
C_SETFAN
, "SetFan") \

305 
	`USB_ADD_COMMAND
(
C_FANREPLY
, "GetFan") \

306 
	`USB_ADD_COMMAND
(
C_FTDI_STATUS
, "FTDIStatus") \

307 
	`USB_ADD_COMMAND
(
C_ENABLE_UART
, "EnableUART") \

308 
	`USB_ADD_COMMAND
(
C_ANU_SEND_CMD
, "ANUSendcmd") \

309 
	`USB_ADD_COMMAND
(
C_ANU_SEND_RDREG
, "ANUSendrdreg") \

310 
	`USB_ADD_COMMAND
(
C_ANU_SEND_VOLT
, "ANUSendvolt") \

311 
	`USB_ADD_COMMAND
(
C_BB_SET_VOLTAGE
, "SetCoreVoltage") \

312 
	`USB_ADD_COMMAND
(
C_BB_GET_VOLTAGE
, "GetCoreVoltage") \

313 
	`USB_ADD_COMMAND
(
C_ATMEL_RESET
, "AtmelReset") \

314 
	`USB_ADD_COMMAND
(
C_ATMEL_OPEN
, "AtmelOpen") \

315 
	`USB_ADD_COMMAND
(
C_ATMEL_INIT
, "AtmelInit") \

316 
	`USB_ADD_COMMAND
(
C_ATMEL_CLOSE
, "AtmelClose") \

317 
	`USB_ADD_COMMAND
(
C_HRO_WRITE
, "HROWrite") \

318 
	`USB_ADD_COMMAND
(
C_HRO_READ
, "HRORead") \

319 
	`USB_ADD_COMMAND
(
C_OP_NAME
, "HFName") \

320 
	`USB_ADD_COMMAND
(
C_HF_GETHEADER
, "HFGetHeader") \

321 
	`USB_ADD_COMMAND
(
C_HF_GETDATA
, "HFGetData") \

322 
	`USB_ADD_COMMAND
(
C_HF_CLEAR_READ
, "HFClearRead") \

323 
	`USB_ADD_COMMAND
(
C_CTA_READ
, "CTARead") \

324 
	`USB_ADD_COMMAND
(
C_CTA_WRITE
, "CTAWrite") \

325 
	`USB_ADD_COMMAND
(
C_MCP_GETGPIOSETTING
, "MCPGetGPIOSetting") \

326 
	`USB_ADD_COMMAND
(
C_MCP_SETGPIOSETTING
, "MCPSetGPIOSetting") \

327 
	`USB_ADD_COMMAND
(
C_MCP_GETGPIOPINVAL
, "MCPGetGPIOPinVal") \

328 
	`USB_ADD_COMMAND
(
C_MCP_SETGPIOPINVAL
, "MCPSetGPIOPinVal") \

329 
	`USB_ADD_COMMAND
(
C_MCP_GETGPIOPINDIR
, "MCPGetGPIOPinDir") \

330 
	`USB_ADD_COMMAND
(
C_MCP_SETGPIOPINDIR
, "MCPSetGPIOPinDir") \

331 
	`USB_ADD_COMMAND
(
C_MCP_SETSPISETTING
, "MCPSetSPISetting") \

332 
	`USB_ADD_COMMAND
(
C_MCP_GETSPISETTING
, "MCPGetSPISetting") \

333 
	`USB_ADD_COMMAND
(
C_MCP_SPITRANSFER
, "MCPSPITransfer") \

334 
	`USB_ADD_COMMAND
(
C_MCP_SPICANCEL
, "MCPSPICancel") \

335 
	`USB_ADD_COMMAND
(
C_BITMAIN_SEND
, "BitmainSend") \

336 
	`USB_ADD_COMMAND
(
C_BITMAIN_READ
, "BitmainRead") \

337 
	`USB_ADD_COMMAND
(
C_BITMAIN_TOKEN_TXCONFIG
, "BitmainTokenTxConfig") \

338 
	`USB_ADD_COMMAND
(
C_BITMAIN_TOKEN_TXTASK
, "BitmainTokenTxTask") \

339 
	`USB_ADD_COMMAND
(
C_BITMAIN_TOKEN_RXSTATUS
, "BitmainTokenRxStatus") \

340 
	`USB_ADD_COMMAND
(
C_BITMAIN_DATA_RXSTATUS
, "BitmainDataRxStatus") \

341 
	`USB_ADD_COMMAND
(
C_BITMAIN_DATA_RXNONCE
, "BômaöD©aRxN⁄˚")

	)

344 
	eusb_cmds
 {

345 
USB_PARSE_COMMANDS
(
ENUMERATION
)

346 
	mC_MAX


349 
	gdevi˚_drv
;

350 
	gcgpu_öfo
;

352 #ifde‡
USE_BITMAIN


353 
cgpu_öfo
 *
btm_Æloc_cgpu
(
devi˚_drv
 *
drv
, 
thªads
);

354 
cgpu_öfo
 *
btm_‰ì_cgpu
(cgpu_öfÿ*
cgpu
);

355 
btm_unöô
(
cgpu_öfo
 *
cgpu
);

356 
boﬁ
 
btm_öô
(
cgpu_öfo
 *
cgpu
, c⁄° * 
dev∑th
);

357 
btm_dëe˘
(
devi˚_drv
 *
drv
, 
	$boﬁ
 (*
devi˚_dëe˘
)(const *));

358 
	`btm_ªad
(
cgpu_öfo
 *
cgpu
, *
buf
, 
size_t
 
bufsize
);

359 
	`btm_wrôe
(
cgpu_öfo
 *
cgpu
, *
buf
, 
size_t
 
bufsize
);

362 
boﬁ
 
	`async_usb_å™s„rs
();

363 
	`ˇn˚l_usb_å™s„rs
();

364 
	`usb_Æl
(
Àvñ
);

365 
	`usb_li°
();

366 c⁄° *
	`usb_cmd«me
(
usb_cmds
 
cmd
);

367 
	`usb_≠∂og
(
cgpu_öfo
 *
cgpu
, 
usb_cmds
 
cmd
, *
msg
, 
amou¡
, 
îr
);

368 
	`bœckli°_cgpu
(
cgpu_öfo
 *
cgpu
);

369 
	`whôñi°_cgpu
(
cgpu_öfo
 *
cgpu
);

370 
	`usb_nodev
(
cgpu_öfo
 *
cgpu
);

371 
cgpu_öfo
 *
	`usb_c›y_cgpu
(cgpu_öfÿ*
‹ig
);

372 
cgpu_öfo
 *
	`usb_Æloc_cgpu
(
devi˚_drv
 *
drv
, 
thªads
);

373 
cgpu_öfo
 *
	`usb_‰ì_cgpu
(cgpu_öfÿ*
cgpu
);

374 
	`usb_unöô
(
cgpu_öfo
 *
cgpu
);

375 
boﬁ
 
	`usb_öô
(
cgpu_öfo
 *
cgpu
, 
libusb_devi˚
 *
dev
, 
usb_föd_devi˚s
 *
found
);

376 
	`__usb_dëe˘
(
devi˚_drv
 *
drv
, 
cgpu_öfo
 *(*
devi˚_dëe˘
)(
libusb_devi˚
 *, 
usb_föd_devi˚s
 *),

377 
boﬁ
 
sögÀ
);

378 
	#usb_dëe˘
(
drv
, 
cgpu
Ë
	`__usb_dëe˘
(drv, cgpu, 
Ál£
)

	)

379 
	#usb_dëe˘_⁄e
(
drv
, 
cgpu
Ë
	`__usb_dëe˘
(drv, cgpu, 
åue
)

	)

380 
≠i_d©a
 *
	`≠i_usb_°©s
(*
cou¡
);

381 
	`upd©e_usb_°©s
(
cgpu_öfo
 *
cgpu
);

382 
	`usb_ª£t
(
cgpu_öfo
 *
cgpu
);

383 
	`_usb_ªad
(
cgpu_öfo
 *
cgpu
, 
ötöfo
, 
ïöfo
, *
buf
, 
size_t
 
bufsiz
, *
¥o˚s£d
, 
timeout
, c⁄° *
íd
, 
usb_cmds
 
cmd
, 
boﬁ
 
ªad⁄˚
, boﬁ 
ˇn˚ŒabÀ
);

384 
	`_usb_wrôe
(
cgpu_öfo
 *
cgpu
, 
ötöfo
, 
ïöfo
, *
buf
, 
size_t
 
bufsiz
, *
¥o˚s£d
, 
timeout
, 
usb_cmds
);

385 
	`_usb_å™s„r
(
cgpu_öfo
 *
cgpu
, 
uöt8_t
 
ªque°_ty≥
, uöt8_à
bReque°
, 
uöt16_t
 
wVÆue
, uöt16_à
wIndex
, 
uöt32_t
 *
d©a
, 
siz
, 
timeout
, 
usb_cmds
 
cmd
);

386 
	`_usb_å™s„r_ªad
(
cgpu_öfo
 *
cgpu
, 
uöt8_t
 
ªque°_ty≥
, uöt8_à
bReque°
, 
uöt16_t
 
wVÆue
, uöt16_à
wIndex
, *
buf
, 
bufsiz
, *
amou¡
, 
timeout
, 
usb_cmds
 
cmd
);

387 
	`usb_·di_˘s
(
cgpu_öfo
 *
cgpu
);

388 
	`_usb_·di_£t_œãncy
(
cgpu_öfo
 *
cgpu
, 
ötöfo
);

389 
	#usb_·di_£t_œãncy
(
_cgpu
Ë
	`_usb_·di_£t_œãncy
(_cgpu, 
DEFAULT_INTINFO
)

	)

390 
	`usb_buf„r_˛ór
(
cgpu_öfo
 *
cgpu
);

391 
uöt32_t
 
	`usb_buf„r_size
(
cgpu_öfo
 *
cgpu
);

392 
	`_usb_öãrÁ˚
(
cgpu_öfo
 *
cgpu
, 
ötöfo
);

393 
	#usb_öãrÁ˚
(
_cgpu
Ë
	`_usb_öãrÁ˚
(_cgpu, 
DEFAULT_INTINFO
)

	)

394 
sub_idít
 
	`usb_idít
(
cgpu_öfo
 *
cgpu
);

395 
	`usb_£t_dev_°¨t
(
cgpu_öfo
 *
cgpu
);

396 
	`usb_˛ónup
();

397 
	`usb_öôüli£
();

398 *
	`usb_ªsour˚_thªad
(*
u£rd©a
);

399 
	`öôüli£_usblocks
();

401 
	#usb_ªad
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

402 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, 
NULL
, 
cmd
, 
Ál£
, fÆ£)

	)

404 
	#usb_ªad_ˇn˚ŒabÀ
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

405 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, 
NULL
, 
cmd
, 
Ál£
, 
åue
)

	)

407 
	#usb_ªad_ii
(
cgpu
, 
ötöfo
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

408 
	`_usb_ªad
(
cgpu
, 
ötöfo
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, 
NULL
, 
cmd
, 
Ál£
, fÆ£)

	)

410 
	#usb_ªad_⁄˚
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

411 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, 
NULL
, 
cmd
, 
åue
, 
Ál£
)

	)

413 
	#usb_ªad_ii_⁄˚
(
cgpu
, 
ötöfo
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

414 
	`_usb_ªad
(
cgpu
, 
ötöfo
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, 
NULL
, 
cmd
, 
åue
, 
Ál£
)

	)

416 
	#usb_ªad_⁄˚_timeout
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

417 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
NULL
, 
cmd
, 
åue
, 
Ál£
)

	)

419 
	#usb_ªad_⁄˚_timeout_ˇn˚ŒabÀ
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

420 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
NULL
, 
cmd
, 
åue
,Årue)

	)

422 
	#usb_ªad_ii_⁄˚_timeout
(
cgpu
, 
ötöfo
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

423 
	`_usb_ªad
(
cgpu
, 
ötöfo
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
NULL
, 
cmd
, 
åue
, 
Ál£
)

	)

425 
	#usb_ªad_∆
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

426 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, "\n", 
cmd
, 
Ál£
, fÆ£)

	)

428 
	#usb_ªad_∆_timeout
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

429 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, "\n", 
cmd
, 
Ál£
, fÆ£)

	)

431 
	#usb_ªad_ok
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

432 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, "OK\n", 
cmd
, 
Ál£
, fÆ£)

	)

434 
	#usb_ªad_ok_timeout
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

435 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, "OK\n", 
cmd
, 
Ál£
, fÆ£)

	)

437 
	#usb_ªad_ï
(
cgpu
, 
ï
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

438 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
ï
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, 
NULL
, 
cmd
, 
Ál£
, fÆ£)

	)

440 
	#usb_ªad_timeout
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

441 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
NULL
, 
cmd
, 
Ál£
, fÆ£)

	)

443 
	#usb_ªad_timeout_ˇn˚ŒabÀ
(
cgpu
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

444 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
NULL
, 
cmd
, 
Ál£
, 
åue
)

	)

446 
	#usb_ªad_ii_timeout
(
cgpu
, 
ötöfo
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

447 
	`_usb_ªad
(
cgpu
, 
ötöfo
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
NULL
, 
cmd
, 
Ál£
, fÆ£)

	)

449 
	#usb_ªad_ii_timeout_ˇn˚ŒabÀ
(
cgpu
, 
ötöfo
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

450 
	`_usb_ªad
(
cgpu
, 
ötöfo
, 
DEFAULT_EP_IN
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
NULL
, 
cmd
, 
Ál£
, 
åue
)

	)

452 
	#usb_ªad_ï_timeout
(
cgpu
, 
ï
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
cmd
) \

453 
	`_usb_ªad
(
cgpu
, 
DEFAULT_INTINFO
, 
ï
, 
buf
, 
bufsiz
, 
ªad
, 
timeout
, 
NULL
, 
cmd
, 
Ál£
, fÆ£)

	)

455 
	#usb_wrôe
(
cgpu
, 
buf
, 
bufsiz
, 
wrŸe
, 
cmd
) \

456 
	`_usb_wrôe
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_OUT
, 
buf
, 
bufsiz
, 
wrŸe
, 
DEVTIMEOUT
, 
cmd
)

	)

458 
	#usb_wrôe_ii
(
cgpu
, 
ötöfo
, 
buf
, 
bufsiz
, 
wrŸe
, 
cmd
) \

459 
	`_usb_wrôe
(
cgpu
, 
ötöfo
, 
DEFAULT_EP_OUT
, 
buf
, 
bufsiz
, 
wrŸe
, 
DEVTIMEOUT
, 
cmd
)

	)

461 
	#usb_wrôe_ï
(
cgpu
, 
ï
, 
buf
, 
bufsiz
, 
wrŸe
, 
cmd
) \

462 
	`_usb_wrôe
(
cgpu
, 
DEFAULT_INTINFO
, 
ï
, 
buf
, 
bufsiz
, 
wrŸe
, 
DEVTIMEOUT
, 
cmd
)

	)

464 
	#usb_wrôe_timeout
(
cgpu
, 
buf
, 
bufsiz
, 
wrŸe
, 
timeout
, 
cmd
) \

465 
	`_usb_wrôe
(
cgpu
, 
DEFAULT_INTINFO
, 
DEFAULT_EP_OUT
, 
buf
, 
bufsiz
, 
wrŸe
, 
timeout
, 
cmd
)

	)

467 
	#usb_wrôe_ï_timeout
(
cgpu
, 
ï
, 
buf
, 
bufsiz
, 
wrŸe
, 
timeout
, 
cmd
) \

468 
	`_usb_wrôe
(
cgpu
, 
DEFAULT_INTINFO
, 
ï
, 
buf
, 
bufsiz
, 
wrŸe
, 
timeout
, 
cmd
)

	)

470 
	#usb_å™s„r
(
cgpu
, 
typ
, 
ªq
, 
vÆ
, 
idx
, 
cmd
) \

471 
	`_usb_å™s„r
(
cgpu
, 
typ
, 
ªq
, 
vÆ
, 
idx
, 
NULL
, 0, 
DEVTIMEOUT
, 
cmd
)

	)

473 
	#usb_å™s„r_d©a
(
cgpu
, 
typ
, 
ªq
, 
vÆ
, 
idx
, 
d©a
, 
Àn
, 
cmd
) \

474 
	`_usb_å™s„r
(
cgpu
, 
typ
, 
ªq
, 
vÆ
, 
idx
, 
d©a
, 
Àn
, 
DEVTIMEOUT
, 
cmd
)

	)

476 
	#usb_å™s„r_ªad
(
cgpu
, 
typ
, 
ªq
, 
vÆ
, 
idx
, 
buf
, 
bufsiz
, 
ªad
, 
cmd
) \

477 
	`_usb_å™s„r_ªad
(
cgpu
, 
typ
, 
ªq
, 
vÆ
, 
idx
, 
buf
, 
bufsiz
, 
ªad
, 
DEVTIMEOUT
, 
cmd
)

	)

	@uthash.h

24 #i‚de‡
UTHASH_H


25 
	#UTHASH_H


	)

27 
	#UTHASH_VERSION
 2.0.1

	)

29 
	~<°rög.h
>

30 
	~<°ddef.h
>

31 
	~<°dlib.h
>

37 #i‡
deföed
(
_MSC_VER
)

38 #i‡
_MSC_VER
 >1600 && 
deföed
(
__˝lu•lus
)

39 
	#DECLTYPE
(
x
Ë(
	`de˛ty≥
(x))

	)

41 
	#NO_DECLTYPE


	)

42 
	#DECLTYPE
(
x
)

	)

44 #ñi‡
deföed
(
__BORLANDC__
Ë|| deföed(
__LCC__
Ë|| deföed(
__WATCOMC__
)

45 
	#NO_DECLTYPE


	)

46 
	#DECLTYPE
(
x
)

	)

48 
	#DECLTYPE
(
x
Ë(
	`__ty≥of
(x))

	)

51 #ifde‡
NO_DECLTYPE


52 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

54 **
_da_d°
 = (**)(&(
d°
)); \

55 *
_da_d°
 = (*)(
§c
); \

56 } 0)

	)

58 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

60 (
d°
Ë
	`DECLTYPE
(d°)(
§c
); \

61 } 0)

	)

66 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__VXWORKS__
)

67 
	~<°döt.h
>

70 
	tuöt32_t
;

71 
	tuöt8_t
;

75 #i‚de‡
uthash_Áèl


76 
	#uthash_Áèl
(
msg
Ë
	`exô
(-1Ë

	)

78 #i‚de‡
uthash_mÆloc


79 
	#uthash_mÆloc
(
sz
Ë
	`mÆloc
(szË

	)

81 #i‚de‡
uthash_‰ì


82 
	#uthash_‰ì
(
±r
,
sz
Ë
	`‰ì
’åË

	)

84 #i‚de‡
uthash_°æí


85 
	#uthash_°æí
(
s
Ë
	`°æí
(s)

	)

87 #i‚de‡
uthash_memcmp


88 
	#uthash_memcmp
(
a
,
b
,
n
Ë
	`memcmp
◊,b,n)

	)

91 #i‚de‡
uthash_n€x∑nd_fyi


92 
	#uthash_n€x∑nd_fyi
(
tbl
Ë

	)

94 #i‚de‡
uthash_ex∑nd_fyi


95 
	#uthash_ex∑nd_fyi
(
tbl
Ë

	)

99 
	#HASH_INITIAL_NUM_BUCKETS
 32U

	)

100 
	#HASH_INITIAL_NUM_BUCKETS_LOG2
 5U

	)

101 
	#HASH_BKT_CAPACITY_THRESH
 10U

	)

104 
	#ELMT_FROM_HH
(
tbl
,
hhp
Ë((*)(((*)(hhp)Ë- (—bl)->
hho
)))

	)

106 
	#HH_FROM_ELMT
(
tbl
,
ñp
Ë((
UT_hash_h™dÀ
 *)(((*)”Õ)Ë+ (—bl)->
hho
)))

	)

108 
	#HASH_VALUE
(
key±r
,
keyÀn
,
hashv
) \

110 
	`HASH_FCN
(
key±r
, 
keyÀn
, 
hashv
); \

111 } 0)

	)

113 
	#HASH_FIND_BYHASHVALUE
(
hh
,
hód
,
key±r
,
keyÀn
,
hashvÆ
,
out
) \

115 (
out
Ë
NULL
; \

116 i‡(
hód
) { \

117 
_hf_bkt
; \

118 
	`HASH_TO_BKT
(
hashvÆ
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hf_bkt
); \

119 i‡(
	`HASH_BLOOM_TEST
((
hód
)->
hh
.
tbl
, 
hashvÆ
) != 0) { \

120 
	`HASH_FIND_IN_BKT
((
hód
)->
hh
.
tbl
, hh, (hód)->hh.tbl->
buckës
[ 
_hf_bkt
 ], 
key±r
, 
keyÀn
, 
hashvÆ
, 
out
); \

123 } 0)

	)

125 
	#HASH_FIND
(
hh
,
hód
,
key±r
,
keyÀn
,
out
) \

127 
_hf_hashv
; \

128 
	`HASH_VALUE
(
key±r
, 
keyÀn
, 
_hf_hashv
); \

129 
	`HASH_FIND_BYHASHVALUE
(
hh
, 
hód
, 
key±r
, 
keyÀn
, 
_hf_hashv
, 
out
); \

130 } 0)

	)

132 #ifde‡
HASH_BLOOM


133 
	#HASH_BLOOM_BITLEN
 (1UL << 
HASH_BLOOM
)

	)

134 
	#HASH_BLOOM_BYTELEN
 (
HASH_BLOOM_BITLEN
/8ULË+ (((HASH_BLOOM_BITLEN%8UL)!=0ULË? 1UL : 0UL)

	)

135 
	#HASH_BLOOM_MAKE
(
tbl
) \

137 (
tbl
)->
bloom_nbôs
 = 
HASH_BLOOM
; \

138 (
tbl
)->
bloom_bv
 = (
uöt8_t
*)
	`uthash_mÆloc
(
HASH_BLOOM_BYTELEN
); \

139 i‡(!((
tbl
)->
bloom_bv
)Ë{ 
	`uthash_Áèl
( "out of memory"); } \

140 
	`mem£t
((
tbl
)->
bloom_bv
, 0, 
HASH_BLOOM_BYTELEN
); \

141 (
tbl
)->
bloom_sig
 = 
HASH_BLOOM_SIGNATURE
; \

142 } 0)

	)

144 
	#HASH_BLOOM_FREE
(
tbl
) \

146 
	`uthash_‰ì
((
tbl
)->
bloom_bv
, 
HASH_BLOOM_BYTELEN
); \

147 } 0)

	)

149 
	#HASH_BLOOM_BITSET
(
bv
,
idx
Ë(bv[(idx)/8U] |(1U << ((idx)%8U)))

	)

150 
	#HASH_BLOOM_BITTEST
(
bv
,
idx
Ë(bv[(idx)/8U] & (1U << ((idx)%8U)))

	)

152 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
) \

153 
	`HASH_BLOOM_BITSET
((
tbl
)->
bloom_bv
, (
hashv
 & (
uöt32_t
)((1ULL << (tbl)->
bloom_nbôs
Ë- 1U)))

	)

155 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
) \

156 
	`HASH_BLOOM_BITTEST
((
tbl
)->
bloom_bv
, (
hashv
 & (
uöt32_t
)((1ULL << (tbl)->
bloom_nbôs
Ë- 1U)))

	)

159 
	#HASH_BLOOM_MAKE
(
tbl
)

	)

160 
	#HASH_BLOOM_FREE
(
tbl
)

	)

161 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
)

	)

162 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
Ë(1)

	)

163 
	#HASH_BLOOM_BYTELEN
 0U

	)

166 
	#HASH_MAKE_TABLE
(
hh
,
hód
) \

168 (
hód
)->
hh
.
tbl
 = (
UT_hash_èbÀ
*)
	`uthash_mÆloc
( \

169 (
UT_hash_èbÀ
)); \

170 i‡(!((
hód
)->
hh
.
tbl
)Ë{ 
	`uthash_Áèl
( "out of memory"); } \

171 
	`mem£t
((
hód
)->
hh
.
tbl
, 0, (
UT_hash_èbÀ
)); \

172 (
hód
)->
hh
.
tbl
->
èû
 = &((head)->hh); \

173 (
hód
)->
hh
.
tbl
->
num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS
; \

174 (
hód
)->
hh
.
tbl
->
log2_num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS_LOG2
; \

175 (
hód
)->
hh
.
tbl
->
hho
 = (*)(&(head)->hh) - (*)(head); \

176 (
hód
)->
hh
.
tbl
->
buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

177 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

178 i‡(! (
hód
)->
hh
.
tbl
->
buckës
Ë{ 
	`uthash_Áèl
( "out of memory"); } \

179 
	`mem£t
((
hód
)->
hh
.
tbl
->
buckës
, 0, \

180 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

181 
	`HASH_BLOOM_MAKE
((
hód
)->
hh
.
tbl
); \

182 (
hód
)->
hh
.
tbl
->
sig«tuª
 = 
HASH_SIGNATURE
; \

183 } 0)

	)

185 
	#HASH_REPLACE_BYHASHVALUE_INORDER
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
hashvÆ
,
add
,
ª∂a˚d
,
cmpf˙
) \

187 (
ª∂a˚d
Ë
NULL
; \

188 
	`HASH_FIND_BYHASHVALUE
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
, 
ª∂a˚d
); \

189 i‡(
ª∂a˚d
) { \

190 
	`HASH_DELETE
(
hh
,
hód
,
ª∂a˚d
); \

192 
	`HASH_ADD_KEYPTR_BYHASHVALUE_INORDER
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
,ádd, 
cmpf˙
); \

193 } 0)

	)

195 
	#HASH_REPLACE_BYHASHVALUE
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
hashvÆ
,
add
,
ª∂a˚d
) \

197 (
ª∂a˚d
Ë
NULL
; \

198 
	`HASH_FIND_BYHASHVALUE
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
, 
ª∂a˚d
); \

199 i‡(
ª∂a˚d
) { \

200 
	`HASH_DELETE
(
hh
, 
hód
, 
ª∂a˚d
); \

202 
	`HASH_ADD_KEYPTR_BYHASHVALUE
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
,ádd); \

203 } 0)

	)

205 
	#HASH_REPLACE
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
,
ª∂a˚d
) \

207 
_hr_hashv
; \

208 
	`HASH_VALUE
(&((
add
)->
fõld«me
), 
keyÀn_ö
, 
_hr_hashv
); \

209 
	`HASH_REPLACE_BYHASHVALUE
(
hh
, 
hód
, 
fõld«me
, 
keyÀn_ö
, 
_hr_hashv
, 
add
, 
ª∂a˚d
); \

210 } 0)

	)

212 
	#HASH_REPLACE_INORDER
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
,
ª∂a˚d
,
cmpf˙
) \

214 
_hr_hashv
; \

215 
	`HASH_VALUE
(&((
add
)->
fõld«me
), 
keyÀn_ö
, 
_hr_hashv
); \

216 
	`HASH_REPLACE_BYHASHVALUE_INORDER
(
hh
, 
hód
, 
fõld«me
, 
keyÀn_ö
, 
_hr_hashv
, 
add
, 
ª∂a˚d
, 
cmpf˙
); \

217 } 0)

	)

219 
	#HASH_APPEND_LIST
(
hh
, 
hód
, 
add
) \

221 (
add
)->
hh
.
√xt
 = 
NULL
; \

222 (
add
)->
hh
.
¥ev
 = 
	`ELMT_FROM_HH
((
hód
)->hh.
tbl
, (hód)->hh.tbl->
èû
); \

223 (
hód
)->
hh
.
tbl
->
èû
->
√xt
 = (
add
); \

224 (
hód
)->
hh
.
tbl
->
èû
 = &((
add
)->hh); \

225 } 0)

	)

227 
	#HASH_ADD_KEYPTR_BYHASHVALUE_INORDER
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
hashvÆ
,
add
,
cmpf˙
) \

229 
_ha_bkt
; \

230 (
add
)->
hh
.
hashv
 = (
hashvÆ
); \

231 (
add
)->
hh
.
key
 = (*Ë(
key±r
); \

232 (
add
)->
hh
.
keyÀn
 = (Ë(
keyÀn_ö
); \

233 i‡(!(
hód
)) { \

234 (
add
)->
hh
.
√xt
 = 
NULL
; \

235 (
add
)->
hh
.
¥ev
 = 
NULL
; \

236 (
hód
Ë(
add
); \

237 
	`HASH_MAKE_TABLE
(
hh
, 
hód
); \

239 
UT_hash_h™dÀ
 *
_hs_ôî
 = &(
hód
)->
hh
; \

240 (
add
)->
hh
.
tbl
 = (
hód
)->hh.tbl; \

242 i‡(
	`cmpf˙
(
	`DECLTYPE
(
hód
Ë
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
, 
_hs_ôî
), 
add
) > 0) \

244 } (
_hs_ôî
 = _hs_ôî->
√xt
)); \

245 i‡(
_hs_ôî
) { \

246 (
add
)->
hh
.
√xt
 = 
_hs_ôî
; \

247 i‡(((
add
)->
hh
.
¥ev
 = 
_hs_ôî
->prev)) { \

248 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hs_ôî
->
¥ev
)->
√xt
 = (
add
); \

250 (
hód
Ë(
add
); \

252 
_hs_ôî
->
¥ev
 = (
add
); \

254 
	`HASH_APPEND_LIST
(
hh
, 
hód
, 
add
); \

257 (
hód
)->
hh
.
tbl
->
num_ôems
++; \

258 
	`HASH_TO_BKT
(
hashvÆ
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_ha_bkt
); \

259 
	`HASH_ADD_TO_BKT
((
hód
)->
hh
.
tbl
->
buckës
[
_ha_bkt
], &(
add
)->hh); \

260 
	`HASH_BLOOM_ADD
((
hód
)->
hh
.
tbl
, 
hashvÆ
); \

261 
	`HASH_EMIT_KEY
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
); \

262 
	`HASH_FSCK
(
hh
, 
hód
); \

263 } 0)

	)

265 
	#HASH_ADD_KEYPTR_INORDER
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
add
,
cmpf˙
) \

267 
_hs_hashv
; \

268 
	`HASH_VALUE
(
key±r
, 
keyÀn_ö
, 
_hs_hashv
); \

269 
	`HASH_ADD_KEYPTR_BYHASHVALUE_INORDER
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
, 
_hs_hashv
, 
add
, 
cmpf˙
); \

270 } 0)

	)

272 
	#HASH_ADD_BYHASHVALUE_INORDER
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
hashvÆ
,
add
,
cmpf˙
) \

273 
	`HASH_ADD_KEYPTR_BYHASHVALUE_INORDER
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
,ádd, 
cmpf˙
)

	)

275 
	#HASH_ADD_INORDER
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
,
cmpf˙
) \

276 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
,ádd, 
cmpf˙
)

	)

278 
	#HASH_ADD_KEYPTR_BYHASHVALUE
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
hashvÆ
,
add
) \

280 
_ha_bkt
; \

281 (
add
)->
hh
.
hashv
 = (
hashvÆ
); \

282 (
add
)->
hh
.
key
 = (*)(
key±r
); \

283 (
add
)->
hh
.
keyÀn
 = ()(
keyÀn_ö
); \

284 i‡(!(
hód
)) { \

285 (
add
)->
hh
.
√xt
 = 
NULL
; \

286 (
add
)->
hh
.
¥ev
 = 
NULL
; \

287 (
hód
Ë(
add
); \

288 
	`HASH_MAKE_TABLE
(
hh
,
hód
); \

290 (
add
)->
hh
.
tbl
 = (
hód
)->hh.tbl; \

291 
	`HASH_APPEND_LIST
(
hh
, 
hód
, 
add
); \

293 (
hód
)->
hh
.
tbl
->
num_ôems
++; \

294 
	`HASH_TO_BKT
(
hashvÆ
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_ha_bkt
); \

295 
	`HASH_ADD_TO_BKT
((
hód
)->
hh
.
tbl
->
buckës
[
_ha_bkt
],&(
add
)->hh); \

296 
	`HASH_BLOOM_ADD
((
hód
)->
hh
.
tbl
, 
hashvÆ
); \

297 
	`HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
keyÀn_ö
); \

298 
	`HASH_FSCK
(
hh
,
hód
); \

299 } 0)

	)

301 
	#HASH_ADD_KEYPTR
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
add
) \

303 
_ha_hashv
; \

304 
	`HASH_VALUE
(
key±r
, 
keyÀn_ö
, 
_ha_hashv
); \

305 
	`HASH_ADD_KEYPTR_BYHASHVALUE
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
, 
_ha_hashv
, 
add
); \

306 } 0)

	)

308 
	#HASH_ADD_BYHASHVALUE
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
hashvÆ
,
add
) \

309 
	`HASH_ADD_KEYPTR_BYHASHVALUE
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
,ádd)

	)

311 
	#HASH_ADD
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
) \

312 
	`HASH_ADD_KEYPTR
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
,ádd)

	)

314 
	#HASH_TO_BKT
–
hashv
, 
num_bkts
, 
bkt
 ) \

316 
bkt
 = ((
hashv
Ë& ((
num_bkts
) - 1U)); \

317 } 0)

	)

331 
	#HASH_DELETE
(
hh
,
hód
,
dñ±r
) \

333 
UT_hash_h™dÀ
 *
_hd_hh_dñ
; \

334 i‡–((
dñ±r
)->
hh
.
¥ev
 =
NULL
Ë&& ((dñ±r)->hh.
√xt
 == NULL) ) { \

335 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

336 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
) ); \

337 
	`HASH_BLOOM_FREE
((
hód
)->
hh
.
tbl
); \

338 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

339 
hód
 = 
NULL
; \

341 
_hd_bkt
; \

342 
_hd_hh_dñ
 = &((
dñ±r
)->
hh
); \

343 i‡((
dñ±r
Ë=
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,(hód)->hh.tbl->
èû
)) { \

344 (
hód
)->
hh
.
tbl
->
èû
 = \

345 (
UT_hash_h™dÀ
*)((
±rdiff_t
)((
dñ±r
)->
hh
.
¥ev
) + \

346 (
hód
)->
hh
.
tbl
->
hho
); \

348 i‡((
dñ±r
)->
hh
.
¥ev
 !
NULL
) { \

349 ((
UT_hash_h™dÀ
*)((
±rdiff_t
)((
dñ±r
)->
hh
.
¥ev
) + \

350 (
hód
)->
hh
.
tbl
->
hho
))->
√xt
 = (
dñ±r
)->hh.next; \

352 
	`DECLTYPE_ASSIGN
(
hód
,(
dñ±r
)->
hh
.
√xt
); \

354 i‡(
_hd_hh_dñ
->
√xt
 !
NULL
) { \

355 ((
UT_hash_h™dÀ
*)((
±rdiff_t
)
_hd_hh_dñ
->
√xt
 + \

356 (
hód
)->
hh
.
tbl
->
hho
))->
¥ev
 = \

357 
_hd_hh_dñ
->
¥ev
; \

359 
	`HASH_TO_BKT
–
_hd_hh_dñ
->
hashv
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hd_bkt
); \

360 
	`HASH_DEL_IN_BKT
(
hh
,(
hód
)->hh.
tbl
->
buckës
[
_hd_bkt
], 
_hd_hh_dñ
); \

361 (
hód
)->
hh
.
tbl
->
num_ôems
--; \

363 
	`HASH_FSCK
(
hh
,
hód
); \

364 } 0)

	)

368 
	#HASH_FIND_STR
(
hód
,
föd°r
,
out
) \

369 
	`HASH_FIND
(
hh
,
hód
,
föd°r
,()
	`uthash_°æí
(föd°r),
out
)

	)

370 
	#HASH_ADD_STR
(
hód
,
°rfõld
,
add
) \

371 
	`HASH_ADD
(
hh
,
hód
,
°rfõld
[0],()
	`uthash_°æí
(
add
->°rfõld),add)

	)

372 
	#HASH_REPLACE_STR
(
hód
,
°rfõld
,
add
,
ª∂a˚d
) \

373 
	`HASH_REPLACE
(
hh
,
hód
,
°rfõld
[0],()
	`uthash_°æí
(
add
->°rfõld),add,
ª∂a˚d
)

	)

374 
	#HASH_FIND_INT
(
hód
,
födöt
,
out
) \

375 
	`HASH_FIND
(
hh
,
hód
,
födöt
,(),
out
)

	)

376 
	#HASH_ADD_INT
(
hód
,
ötfõld
,
add
) \

377 
	`HASH_ADD
(
hh
,
hód
,
ötfõld
,(),
add
)

	)

378 
	#HASH_REPLACE_INT
(
hód
,
ötfõld
,
add
,
ª∂a˚d
) \

379 
	`HASH_REPLACE
(
hh
,
hód
,
ötfõld
,(),
add
,
ª∂a˚d
)

	)

380 
	#HASH_FIND_PTR
(
hód
,
föd±r
,
out
) \

381 
	`HASH_FIND
(
hh
,
hód
,
föd±r
,(*),
out
)

	)

382 
	#HASH_ADD_PTR
(
hód
,
±rfõld
,
add
) \

383 
	`HASH_ADD
(
hh
,
hód
,
±rfõld
,(*),
add
)

	)

384 
	#HASH_REPLACE_PTR
(
hód
,
±rfõld
,
add
,
ª∂a˚d
) \

385 
	`HASH_REPLACE
(
hh
,
hód
,
±rfõld
,(*),
add
,
ª∂a˚d
)

	)

386 
	#HASH_DEL
(
hód
,
dñ±r
) \

387 
	`HASH_DELETE
(
hh
,
hód
,
dñ±r
)

	)

392 #ifde‡
HASH_DEBUG


393 
	#HASH_OOPS
(...Ëdÿ{ 
	`Ârötf
(
°dîr
,
__VA_ARGS__
); 
	`exô
(-1); } 0)

	)

394 
	#HASH_FSCK
(
hh
,
hód
) \

396 
UT_hash_h™dÀ
 *
_thh
; \

397 i‡(
hód
) { \

398 
_bkt_i
; \

399 
_cou¡
; \

400 *
_¥ev
; \

401 
_cou¡
 = 0; \

402  
_bkt_i
 = 0; _bkt_ò< (
hód
)->
hh
.
tbl
->
num_buckës
; _bkt_i++) { \

403 
_bkt_cou¡
 = 0; \

404 
_thh
 = (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
hh_hód
; \

405 
_¥ev
 = 
NULL
; \

406 
_thh
) { \

407 i‡(
_¥ev
 !(*)(
_thh
->
hh_¥ev
)) { \

408 
	`HASH_OOPS
("invalid hh_prev %p,áctual %p\n", \

409 
_thh
->
hh_¥ev
, 
_¥ev
 ); \

411 
_bkt_cou¡
++; \

412 
_¥ev
 = (*)(
_thh
); \

413 
_thh
 = _thh->
hh_√xt
; \

415 
_cou¡
 +
_bkt_cou¡
; \

416 i‡((
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
 !
_bkt_cou¡
) { \

417 
	`HASH_OOPS
("invalid bucket count %u,áctual %u\n", \

418 (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
, 
_bkt_cou¡
); \

421 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

422 
	`HASH_OOPS
("invalid hh item count %u,áctual %u\n", \

423 (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
 ); \

426 
_cou¡
 = 0; \

427 
_¥ev
 = 
NULL
; \

428 
_thh
 = &(
hód
)->
hh
; \

429 
_thh
) { \

430 
_cou¡
++; \

431 i‡(
_¥ev
 !=(*)(
_thh
->
¥ev
)) { \

432 
	`HASH_OOPS
("invalidÖrev %p,áctual %p\n", \

433 
_thh
->
¥ev
, 
_¥ev
 ); \

435 
_¥ev
 = (*)
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
, 
_thh
); \

436 
_thh
 = ( _thh->
√xt
 ? (
UT_hash_h™dÀ
*)((*)(_thh->next) + \

437 (
hód
)->
hh
.
tbl
->
hho
Ë: 
NULL
 ); \

439 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

440 
	`HASH_OOPS
("invalidápp item count %u,áctual %u\n", \

441 (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
 ); \

444 } 0)

	)

446 
	#HASH_FSCK
(
hh
,
hód
)

	)

452 #ifde‡
HASH_EMIT_KEYS


453 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
) \

455 
_kÀn
 = 
fõldÀn
; \

456 
	`wrôe
(
HASH_EMIT_KEYS
, &
_kÀn
, (_klen)); \

457 
	`wrôe
(
HASH_EMIT_KEYS
, 
key±r
, ()
fõldÀn
); \

458 } 0)

	)

460 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
)

	)

464 #ifde‡
HASH_FUNCTION


465 
	#HASH_FCN
 
HASH_FUNCTION


	)

467 
	#HASH_FCN
 
HASH_JEN


	)

471 
	#HASH_BER
(
key
,
keyÀn
,
hashv
) \

473 
_hb_keyÀn
=()
keyÀn
; \

474 c⁄° *
_hb_key
=(c⁄° *)(
key
); \

475 (
hashv
) = 0; \

476 
_hb_keyÀn
-- != 0U) { \

477 (
hashv
Ë(((hashvË<< 5Ë+ (hashv)Ë+ *
_hb_key
++; \

479 } 0)

	)

484 
	#HASH_SAX
(
key
,
keyÀn
,
hashv
) \

486 
_sx_i
; \

487 c⁄° *
_hs_key
=(c⁄° *)(
key
); \

488 
hashv
 = 0; \

489 
_sx_i
=0; _sx_ò< 
keyÀn
; _sx_i++) { \

490 
hashv
 ^(hashv << 5Ë+ (hashv >> 2Ë+ 
_hs_key
[
_sx_i
]; \

492 } 0)

	)

494 
	#HASH_FNV
(
key
,
keyÀn
,
hashv
) \

496 
_‚_i
; \

497 c⁄° *
_hf_key
=(c⁄° *)(
key
); \

498 
hashv
 = 2166136261U; \

499 
_‚_i
=0; _‚_ò< 
keyÀn
; _fn_i++) { \

500 
hashv
 = hashv ^ 
_hf_key
[
_‚_i
]; \

501 
hashv
 = hashv * 16777619U; \

503 } 0)

	)

505 
	#HASH_OAT
(
key
,
keyÀn
,
hashv
) \

507 
_ho_i
; \

508 c⁄° *
_ho_key
=(c⁄° *)(
key
); \

509 
hashv
 = 0; \

510 
_ho_i
=0; _ho_ò< 
keyÀn
; _ho_i++) { \

511 
hashv
 +
_ho_key
[
_ho_i
]; \

512 
hashv
 += (hashv << 10); \

513 
hashv
 ^= (hashv >> 6); \

515 
hashv
 += (hashv << 3); \

516 
hashv
 ^= (hashv >> 11); \

517 
hashv
 += (hashv << 15); \

518 } 0)

	)

520 
	#HASH_JEN_MIX
(
a
,
b
,
c
) \

522 
a
 -
b
;á -
c
;á ^= ( c >> 13 ); \

523 
b
 -
c
; b -
a
; b ^= (á << 8 ); \

524 
c
 -
a
; c -
b
; c ^= ( b >> 13 ); \

525 
a
 -
b
;á -
c
;á ^= ( c >> 12 ); \

526 
b
 -
c
; b -
a
; b ^= (á << 16 ); \

527 
c
 -
a
; c -
b
; c ^= ( b >> 5 ); \

528 
a
 -
b
;á -
c
;á ^= ( c >> 3 ); \

529 
b
 -
c
; b -
a
; b ^= (á << 10 ); \

530 
c
 -
a
; c -
b
; c ^= ( b >> 15 ); \

531 } 0)

	)

533 
	#HASH_JEN
(
key
,
keyÀn
,
hashv
) \

535 
_hj_i
,
_hj_j
,
_hj_k
; \

536 c⁄° *
_hj_key
=(c⁄° *)(
key
); \

537 
hashv
 = 0xfeedbeefu; \

538 
_hj_i
 = 
_hj_j
 = 0x9e3779b9u; \

539 
_hj_k
 = ()(
keyÀn
); \

540 
_hj_k
 >= 12U) { \

541 
_hj_i
 +(
_hj_key
[0] + ( ()_hj_key[1] << 8 ) \

542 + ( ()
_hj_key
[2] << 16 ) \

543 + ( ()
_hj_key
[3] << 24 ) ); \

544 
_hj_j
 +(
_hj_key
[4] + ( ()_hj_key[5] << 8 ) \

545 + ( ()
_hj_key
[6] << 16 ) \

546 + ( ()
_hj_key
[7] << 24 ) ); \

547 
hashv
 +(
_hj_key
[8] + ( ()_hj_key[9] << 8 ) \

548 + ( ()
_hj_key
[10] << 16 ) \

549 + ( ()
_hj_key
[11] << 24 ) ); \

551 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

553 
_hj_key
 += 12; \

554 
_hj_k
 -= 12U; \

556 
hashv
 +()(
keyÀn
); \

557  
_hj_k
 ) { \

558 11: 
hashv
 +–()
_hj_key
[10] << 24 ); \

559 10: 
hashv
 +–()
_hj_key
[9] << 16 ); \

560 9: 
hashv
 +–()
_hj_key
[8] << 8 ); \

561 8: 
_hj_j
 +–()
_hj_key
[7] << 24 ); \

562 7: 
_hj_j
 +–()
_hj_key
[6] << 16 ); \

563 6: 
_hj_j
 +–()
_hj_key
[5] << 8 ); \

564 5: 
_hj_j
 +
_hj_key
[4]; \

565 4: 
_hj_i
 +–()
_hj_key
[3] << 24 ); \

566 3: 
_hj_i
 +–()
_hj_key
[2] << 16 ); \

567 2: 
_hj_i
 +–()
_hj_key
[1] << 8 ); \

568 1: 
_hj_i
 +
_hj_key
[0]; \

570 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

571 } 0)

	)

574 #unde‡
gë16bôs


575 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
)Ë|| deföed(
__WATCOMC__
) \

576 || 
deföed
(
_MSC_VER
Ë|| deföed (
__BORLANDC__
Ë|| 
	$deföed
 (
__TURBOC__
)

577 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

580 #i‡!
	`deföed
 (
gë16bôs
)

581 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8) \

582 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

584 
	#HASH_SFH
(
key
,
keyÀn
,
hashv
) \

586 c⁄° *
_sfh_key
=(c⁄° *)(
key
); \

587 
uöt32_t
 
_sfh_tmp
, 
_sfh_Àn
 = (uöt32_t)
keyÀn
; \

589 
_sfh_ªm
 = 
_sfh_Àn
 & 3U; \

590 
_sfh_Àn
 >>= 2; \

591 
hashv
 = 0xcafebabeu; \

594 ;
_sfh_Àn
 > 0U; _sfh_len--) { \

595 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

596 
_sfh_tmp
 = ((
uöt32_t
)(
	`gë16bôs
 (
_sfh_key
+2)Ë<< 11Ë^ 
hashv
; \

597 
hashv
 = (hashv << 16Ë^ 
_sfh_tmp
; \

598 
_sfh_key
 +2U* (
uöt16_t
); \

599 
hashv
 += hashv >> 11; \

603 
_sfh_ªm
) { \

604 3: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

605 
hashv
 ^= hashv << 16; \

606 
hashv
 ^(
uöt32_t
)(
_sfh_key
[ (
uöt16_t
)]) << 18; \

607 
hashv
 += hashv >> 11; \

609 2: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

610 
hashv
 ^= hashv << 11; \

611 
hashv
 += hashv >> 17; \

613 1: 
hashv
 +*
_sfh_key
; \

614 
hashv
 ^= hashv << 10; \

615 
hashv
 += hashv >> 1; \

619 
hashv
 ^= hashv << 3; \

620 
hashv
 += hashv >> 5; \

621 
hashv
 ^= hashv << 4; \

622 
hashv
 += hashv >> 17; \

623 
hashv
 ^= hashv << 25; \

624 
hashv
 += hashv >> 6; \

625 
	}
} 0)

	)

627 #ifde‡
HASH_USING_NO_STRICT_ALIASING


637 #i‡(
deföed
(
__i386__
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_IX86
))

638 
	#MUR_GETBLOCK
(
p
,
i
Ëp[i]

	)

640 
	#MUR_PLUS0_ALIGNED
(
p
Ë(((Ì & 3ULË=0UL)

	)

641 
	#MUR_PLUS1_ALIGNED
(
p
Ë(((Ì & 3ULË=1UL)

	)

642 
	#MUR_PLUS2_ALIGNED
(
p
Ë(((Ì & 3ULË=2UL)

	)

643 
	#MUR_PLUS3_ALIGNED
(
p
Ë(((Ì & 3ULË=3UL)

	)

644 
	#WP
(
p
Ë((
uöt32_t
*)(()’Ë& ~3UL))

	)

645 #i‡(
deföed
(
__BIG_ENDIAN__
Ë|| deföed(
SPARC
Ë|| deföed(
__µc__
Ë|| deföed(
__µc64__
))

646 
	#MUR_THREE_ONE
(
p
Ë((((*
	`WP
’))&0x00ffffffË<< 8Ë| (((*(WP’)+1))&0xff000000Ë>> 24))

	)

647 
	#MUR_TWO_TWO
(
p
Ë((((*
	`WP
’))&0x0000ffffË<<16Ë| (((*(WP’)+1))&0xffff0000Ë>> 16))

	)

648 
	#MUR_ONE_THREE
(
p
Ë((((*
	`WP
’))&0x000000ffË<<24Ë| (((*(WP’)+1))&0xffffff00Ë>> 8))

	)

650 
	#MUR_THREE_ONE
(
p
Ë((((*
	`WP
’))&0xffffff00Ë>> 8Ë| (((*(WP’)+1))&0x000000ffË<< 24))

	)

651 
	#MUR_TWO_TWO
(
p
Ë((((*
	`WP
’))&0xffff0000Ë>>16Ë| (((*(WP’)+1))&0x0000ffffË<< 16))

	)

652 
	#MUR_ONE_THREE
(
p
Ë((((*
	`WP
’))&0xff000000Ë>>24Ë| (((*(WP’)+1))&0x00ffffffË<< 8))

	)

654 
	#MUR_GETBLOCK
(
p
,
i
Ë(
	`MUR_PLUS0_ALIGNED
(p) ? ((p)[i]) : \

655 (
	`MUR_PLUS1_ALIGNED
(
p
Ë? 
	`MUR_THREE_ONE
(p) : \

656 (
	`MUR_PLUS2_ALIGNED
(
p
Ë? 
	`MUR_TWO_TWO
(p) : \

657 
	`MUR_ONE_THREE
(
p
))))

	)

659 
	#MUR_ROTL32
(
x
,
r
Ë(((xË<< (r)Ë| ((xË>> (32 - (r))))

	)

660 
	#MUR_FMIX
(
_h
) \

662 
_h
 ^= _h >> 16; \

663 
_h
 *= 0x85ebca6bu; \

664 
_h
 ^= _h >> 13; \

665 
_h
 *= 0xc2b2ae35u; \

666 
_h
 ^= _h >> 16; \

667 } 0)

	)

669 
	#HASH_MUR
(
key
,
keyÀn
,
hashv
) \

671 c⁄° 
uöt8_t
 *
_mur_d©a
 = (c⁄° uöt8_t*)(
key
); \

672 c⁄° 
_mur_nblocks
 = ()(
keyÀn
) / 4; \

673 
uöt32_t
 
_mur_h1
 = 0xf88D5353u; \

674 
uöt32_t
 
_mur_c1
 = 0xcc9e2d51u; \

675 
uöt32_t
 
_mur_c2
 = 0x1b873593u; \

676 
uöt32_t
 
_mur_k1
 = 0; \

677 c⁄° 
uöt8_t
 *
_mur_èû
; \

678 c⁄° 
uöt32_t
 *
_mur_blocks
 = (c⁄° uöt32_t*)(
_mur_d©a
+(
_mur_nblocks
*4)); \

679 
_mur_i
; \

680 
_mur_i
 = -
_mur_nblocks
; _mur_i!=0; _mur_i++) { \

681 
_mur_k1
 = 
	`MUR_GETBLOCK
(
_mur_blocks
,
_mur_i
); \

682 
_mur_k1
 *
_mur_c1
; \

683 
_mur_k1
 = 
	`MUR_ROTL32
(_mur_k1,15); \

684 
_mur_k1
 *
_mur_c2
; \

686 
_mur_h1
 ^
_mur_k1
; \

687 
_mur_h1
 = 
	`MUR_ROTL32
(_mur_h1,13); \

688 
_mur_h1
 = (_mur_h1*5U) + 0xe6546b64u; \

690 
_mur_èû
 = (c⁄° 
uöt8_t
*)(
_mur_d©a
 + (
_mur_nblocks
*4)); \

691 
_mur_k1
=0; \

692 (
keyÀn
) & 3U) { \

693 3: 
_mur_k1
 ^(
uöt32_t
)
_mur_èû
[2] << 16; \

694 2: 
_mur_k1
 ^(
uöt32_t
)
_mur_èû
[1] << 8; \

695 1: 
_mur_k1
 ^(
uöt32_t
)
_mur_èû
[0]; \

696 
_mur_k1
 *
_mur_c1
; \

697 
_mur_k1
 = 
	`MUR_ROTL32
(_mur_k1,15); \

698 
_mur_k1
 *
_mur_c2
; \

699 
_mur_h1
 ^
_mur_k1
; \

701 
_mur_h1
 ^(
uöt32_t
)(
keyÀn
); \

702 
	`MUR_FMIX
(
_mur_h1
); \

703 
hashv
 = 
_mur_h1
; \

704 } 0)

	)

708 
	#HASH_FIND_IN_BKT
(
tbl
,
hh
,
hód
,
key±r
,
keyÀn_ö
,
hashvÆ
,
out
) \

710 i‡((
hód
).
hh_hód
 !
NULL
) { \

711 
	`DECLTYPE_ASSIGN
(
out
, 
	`ELMT_FROM_HH
(
tbl
, (
hód
).
hh_hód
)); \

713 (
out
Ë
NULL
; \

715 (
out
Ë!
NULL
) { \

716 i‡((
out
)->
hh
.
hashv
 =(
hashvÆ
Ë&& (out)->hh.
keyÀn
 =(
keyÀn_ö
)) { \

717 i‡(
	`uthash_memcmp
((
out
)->
hh
.
key
, 
key±r
, 
keyÀn_ö
) == 0) { \

721 i‡((
out
)->
hh
.
hh_√xt
 !
NULL
) { \

722 
	`DECLTYPE_ASSIGN
(
out
, 
	`ELMT_FROM_HH
(
tbl
, (out)->
hh
.
hh_√xt
)); \

724 (
out
Ë
NULL
; \

727 } 0)

	)

730 
	#HASH_ADD_TO_BKT
(
hód
,
addhh
) \

732 
hód
.
cou¡
++; \

733 (
addhh
)->
hh_√xt
 = 
hód
.
hh_hód
; \

734 (
addhh
)->
hh_¥ev
 = 
NULL
; \

735 i‡(
hód
.
hh_hód
 !
NULL
Ë{ (hód).hh_hód->
hh_¥ev
 = (
addhh
); } \

736 (
hód
).
hh_hód
=
addhh
; \

737 i‡((
hód
.
cou¡
 >((hód.
ex∑nd_mu…
+1UË* 
HASH_BKT_CAPACITY_THRESH
)) \

738 && ((
addhh
)->
tbl
->
n€x∑nd
 != 1U)) { \

739 
	`HASH_EXPAND_BUCKETS
((
addhh
)->
tbl
); \

741 } 0)

	)

744 
	#HASH_DEL_IN_BKT
(
hh
,
hód
,
hh_dñ
) \

745 (
hód
).
cou¡
--; \

746 i‡((
hód
).
hh_hód
 =
hh_dñ
) { \

747 (
hód
).
hh_hód
 = 
hh_dñ
->
hh_√xt
; \

749 i‡(
hh_dñ
->
hh_¥ev
) { \

750 
hh_dñ
->
hh_¥ev
->
hh_√xt
 = hh_del->hh_next; \

752 i‡(
hh_dñ
->
hh_√xt
) { \

753 
hh_dñ
->
hh_√xt
->
hh_¥ev
 = hh_del->hh_prev; \

754 }

	)

785 
	#HASH_EXPAND_BUCKETS
(
tbl
) \

787 
_he_bkt
; \

788 
_he_bkt_i
; \

789 
UT_hash_h™dÀ
 *
_he_thh
, *
_he_hh_nxt
; \

790 
UT_hash_buckë
 *
_he_√w_buckës
, *
_he_√wbkt
; \

791 
_he_√w_buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

792 2UL * 
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

793 i‡(!
_he_√w_buckës
Ë{ 
	`uthash_Áèl
( "out of memory"); } \

794 
	`mem£t
(
_he_√w_buckës
, 0, \

795 2UL * 
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

796 
tbl
->
idól_chaö_maxÀn
 = \

797 (
tbl
->
num_ôems
 >> (tbl->
log2_num_buckës
+1U)) + \

798 (((
tbl
->
num_ôems
 & (—bl->
num_buckës
*2U)-1U)) != 0U) ? 1U : 0U); \

799 
tbl
->
n⁄idól_ôems
 = 0; \

800 
_he_bkt_i
 = 0; _he_bkt_ò< 
tbl
->
num_buckës
; _he_bkt_i++) \

802 
_he_thh
 = 
tbl
->
buckës
[ 
_he_bkt_i
 ].
hh_hód
; \

803 
_he_thh
 !
NULL
) { \

804 
_he_hh_nxt
 = 
_he_thh
->
hh_√xt
; \

805 
	`HASH_TO_BKT
–
_he_thh
->
hashv
, 
tbl
->
num_buckës
*2U, 
_he_bkt
); \

806 
_he_√wbkt
 = &(
_he_√w_buckës
[ 
_he_bkt
 ]); \

807 i‡(++(
_he_√wbkt
->
cou¡
Ë> 
tbl
->
idól_chaö_maxÀn
) { \

808 
tbl
->
n⁄idól_ôems
++; \

809 
_he_√wbkt
->
ex∑nd_mu…
 = _he_√wbkt->
cou¡
 / \

810 
tbl
->
idól_chaö_maxÀn
; \

812 
_he_thh
->
hh_¥ev
 = 
NULL
; \

813 
_he_thh
->
hh_√xt
 = 
_he_√wbkt
->
hh_hód
; \

814 i‡(
_he_√wbkt
->
hh_hód
 !
NULL
Ë{ _he_√wbkt->hh_hód->
hh_¥ev
 = \

815 
_he_thh
; } \

816 
_he_√wbkt
->
hh_hód
 = 
_he_thh
; \

817 
_he_thh
 = 
_he_hh_nxt
; \

820 
	`uthash_‰ì
–
tbl
->
buckës
,Åbl->
num_buckës
*(
UT_hash_buckë
) ); \

821 
tbl
->
num_buckës
 *= 2U; \

822 
tbl
->
log2_num_buckës
++; \

823 
tbl
->
buckës
 = 
_he_√w_buckës
; \

824 
tbl
->
öeff_ex∑nds
 = (tbl->
n⁄idól_ôems
 > (tbl->
num_ôems
 >> 1)) ? \

825 (
tbl
->
öeff_ex∑nds
+1U) : 0U; \

826 i‡(
tbl
->
öeff_ex∑nds
 > 1U) { \

827 
tbl
->
n€x∑nd
=1; \

828 
	`uthash_n€x∑nd_fyi
(
tbl
); \

830 
	`uthash_ex∑nd_fyi
(
tbl
); \

831 } 0)

	)

837 
	#HASH_SORT
(
hód
,
cmpf˙
Ë
	`HASH_SRT
(
hh
,hód,cmpf˙)

	)

838 
	#HASH_SRT
(
hh
,
hód
,
cmpf˙
) \

840 
_hs_i
; \

841 
_hs_lo›ög
,
_hs_nmîges
,
_hs_ösize
,
_hs_psize
,
_hs_qsize
; \

842 
UT_hash_h™dÀ
 *
_hs_p
, *
_hs_q
, *
_hs_e
, *
_hs_li°
, *
_hs_èû
; \

843 i‡(
hód
 !
NULL
) { \

844 
_hs_ösize
 = 1; \

845 
_hs_lo›ög
 = 1; \

846 
_hs_li°
 = &((
hód
)->
hh
); \

847 
_hs_lo›ög
 != 0U) { \

848 
_hs_p
 = 
_hs_li°
; \

849 
_hs_li°
 = 
NULL
; \

850 
_hs_èû
 = 
NULL
; \

851 
_hs_nmîges
 = 0; \

852 
_hs_p
 !
NULL
) { \

853 
_hs_nmîges
++; \

854 
_hs_q
 = 
_hs_p
; \

855 
_hs_psize
 = 0; \

856  
_hs_i
 = 0; _hs_ò< 
_hs_ösize
; _hs_i++ ) { \

857 
_hs_psize
++; \

858 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
 !
NULL
) ? \

859 ((*)((*)(
_hs_q
->
√xt
) + \

860 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

861 i‡(! (
_hs_q
) ) { ; } \

863 
_hs_qsize
 = 
_hs_ösize
; \

864 (
_hs_psize
 > 0UË|| ((
_hs_qsize
 > 0UË&& (
_hs_q
 !
NULL
))) {\

865 i‡(
_hs_psize
 == 0U) { \

866 
_hs_e
 = 
_hs_q
; \

867 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
 !
NULL
) ? \

868 ((*)((*)(
_hs_q
->
√xt
) + \

869 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

870 
_hs_qsize
--; \

871 } i‡–(
_hs_qsize
 =0UË|| (
_hs_q
 =
NULL
) ) { \

872 
_hs_e
 = 
_hs_p
; \

873 i‡(
_hs_p
 !
NULL
){ \

874 
_hs_p
 = (
UT_hash_h™dÀ
*)((_hs_p->
√xt
 !
NULL
) ? \

875 ((*)((*)(
_hs_p
->
√xt
) + \

876 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

878 
_hs_psize
--; \

880 
	`cmpf˙
(
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
,
_hs_p
)), \

881 
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
,
_hs_q
))) \

883 
_hs_e
 = 
_hs_p
; \

884 i‡(
_hs_p
 !
NULL
){ \

885 
_hs_p
 = (
UT_hash_h™dÀ
*)((_hs_p->
√xt
 !
NULL
) ? \

886 ((*)((*)(
_hs_p
->
√xt
) + \

887 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

889 
_hs_psize
--; \

891 
_hs_e
 = 
_hs_q
; \

892 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
 !
NULL
) ? \

893 ((*)((*)(
_hs_q
->
√xt
) + \

894 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

895 
_hs_qsize
--; \

897 i‡–
_hs_èû
 !
NULL
 ) { \

898 
_hs_èû
->
√xt
 = ((
_hs_e
 !
NULL
) ? \

899 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,
_hs_e
Ë: 
NULL
); \

901 
_hs_li°
 = 
_hs_e
; \

903 i‡(
_hs_e
 !
NULL
) { \

904 
_hs_e
->
¥ev
 = ((
_hs_èû
 !
NULL
) ? \

905 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,
_hs_èû
Ë: 
NULL
); \

907 
_hs_èû
 = 
_hs_e
; \

909 
_hs_p
 = 
_hs_q
; \

911 i‡(
_hs_èû
 !
NULL
){ \

912 
_hs_èû
->
√xt
 = 
NULL
; \

914 i‡–
_hs_nmîges
 <= 1U ) { \

915 
_hs_lo›ög
=0; \

916 (
hód
)->
hh
.
tbl
->
èû
 = 
_hs_èû
; \

917 
	`DECLTYPE_ASSIGN
(
hód
,
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
, 
_hs_li°
)); \

919 
_hs_ösize
 *= 2U; \

921 
	`HASH_FSCK
(
hh
,
hód
); \

923 } 0)

	)

930 
	#HASH_SELECT
(
hh_d°
, 
d°
, 
hh_§c
, 
§c
, 
c⁄d
) \

932 
_§c_bkt
, 
_d°_bkt
; \

933 *
_œ°_ñt
=
NULL
, *
_ñt
; \

934 
UT_hash_h™dÀ
 *
_§c_hh
, *
_d°_hh
, *
_œ°_ñt_hh
=
NULL
; \

935 
±rdiff_t
 
_d°_hho
 = ((*)(&(
d°
)->
hh_d°
) - (*)(dst)); \

936 i‡(
§c
 !
NULL
) { \

937 
_§c_bkt
=0; _§c_bkà< (
§c
)->
hh_§c
.
tbl
->
num_buckës
; _src_bkt++) { \

938 
_§c_hh
 = (
§c
)->
hh_§c
.
tbl
->
buckës
[
_§c_bkt
].
hh_hód
; \

939 
_§c_hh
 !
NULL
; \

940 
_§c_hh
 = _§c_hh->
hh_√xt
) { \

941 
_ñt
 = 
	`ELMT_FROM_HH
((
§c
)->
hh_§c
.
tbl
, 
_§c_hh
); \

942 i‡(
	`c⁄d
(
_ñt
)) { \

943 
_d°_hh
 = (
UT_hash_h™dÀ
*)(((*)
_ñt
Ë+ 
_d°_hho
); \

944 
_d°_hh
->
key
 = 
_§c_hh
->key; \

945 
_d°_hh
->
keyÀn
 = 
_§c_hh
->keylen; \

946 
_d°_hh
->
hashv
 = 
_§c_hh
->hashv; \

947 
_d°_hh
->
¥ev
 = 
_œ°_ñt
; \

948 
_d°_hh
->
√xt
 = 
NULL
; \

949 i‡(
_œ°_ñt_hh
 !
NULL
Ë{ _œ°_ñt_hh->
√xt
 = 
_ñt
; } \

950 i‡(
d°
 =
NULL
) { \

951 
	`DECLTYPE_ASSIGN
(
d°
,
_ñt
); \

952 
	`HASH_MAKE_TABLE
(
hh_d°
,
d°
); \

954 
_d°_hh
->
tbl
 = (
d°
)->
hh_d°
.tbl; \

956 
	`HASH_TO_BKT
(
_d°_hh
->
hashv
, _d°_hh->
tbl
->
num_buckës
, 
_d°_bkt
); \

957 
	`HASH_ADD_TO_BKT
(
_d°_hh
->
tbl
->
buckës
[
_d°_bkt
],_dst_hh); \

958 (
d°
)->
hh_d°
.
tbl
->
num_ôems
++; \

959 
_œ°_ñt
 = 
_ñt
; \

960 
_œ°_ñt_hh
 = 
_d°_hh
; \

965 
	`HASH_FSCK
(
hh_d°
,
d°
); \

966 } 0)

	)

968 
	#HASH_CLEAR
(
hh
,
hód
) \

970 i‡(
hód
 !
NULL
) { \

971 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

972 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
)); \

973 
	`HASH_BLOOM_FREE
((
hód
)->
hh
.
tbl
); \

974 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

975 (
hód
)=
NULL
; \

977 } 0)

	)

979 
	#HASH_OVERHEAD
(
hh
,
hód
) \

980 ((
hód
 !
NULL
) ? ( \

981 (
size_t
)(((
hód
)->
hh
.
tbl
->
num_ôems
 * (
UT_hash_h™dÀ
)) + \

982 ((
hód
)->
hh
.
tbl
->
num_buckës
 * (
UT_hash_buckë
)) + \

983 (
UT_hash_èbÀ
) + \

984 (
HASH_BLOOM_BYTELEN
))Ë: 0U)

	)

986 #ifde‡
NO_DECLTYPE


987 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

988 ((
ñ
)=(
hód
)), ((*(**)(&(
tmp
)))=(*)((hód!=
NULL
)?(hód)->
hh
.
√xt
:NULL)); \

989 (
ñ
Ë!
NULL
; (”l)=(
tmp
)), ((*(**)(&—mp)))=(*)(—mp!=NULL)?—mp)->
hh
.
√xt
:NULL)))

	)

991 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

992 ((
ñ
)=(
hód
)), ((
tmp
)=
	`DECLTYPE
”l)((hód!=
NULL
)?(hód)->
hh
.
√xt
:NULL)); \

993 (
ñ
Ë!
NULL
; (”l)=(
tmp
)), (—mp)=
	`DECLTYPE
”l)(—mp!=NULL)?—mp)->
hh
.
√xt
:NULL)))

	)

997 
	#HASH_COUNT
(
hód
Ë
	`HASH_CNT
(
hh
,hód)

	)

998 
	#HASH_CNT
(
hh
,
hód
Ë((hód !
NULL
)?((hód)->hh.
tbl
->
num_ôems
):0U)

	)

1000 
	sUT_hash_buckë
 {

1001 
UT_hash_h™dÀ
 *
	mhh_hód
;

1002 
	mcou¡
;

1016 
	mex∑nd_mu…
;

1018 } 
	tUT_hash_buckë
;

1021 
	#HASH_SIGNATURE
 0xa0111„1u

	)

1022 
	#HASH_BLOOM_SIGNATURE
 0xb12220f2u

	)

1024 
	sUT_hash_èbÀ
 {

1025 
UT_hash_buckë
 *
	mbuckës
;

1026 
	mnum_buckës
, 
	mlog2_num_buckës
;

1027 
	mnum_ôems
;

1028 
UT_hash_h™dÀ
 *
	mèû
;

1029 
±rdiff_t
 
	mhho
;

1033 
	midól_chaö_maxÀn
;

1038 
	mn⁄idól_ôems
;

1046 
	möeff_ex∑nds
, 
	mn€x∑nd
;

1048 
uöt32_t
 
	msig«tuª
;

1049 #ifde‡
HASH_BLOOM


1050 
uöt32_t
 
	mbloom_sig
;

1051 
uöt8_t
 *
	mbloom_bv
;

1052 
uöt8_t
 
	mbloom_nbôs
;

1055 } 
	tUT_hash_èbÀ
;

1057 
	sUT_hash_h™dÀ
 {

1058 
UT_hash_èbÀ
 *
	mtbl
;

1059 *
	m¥ev
;

1060 *
	m√xt
;

1061 
UT_hash_h™dÀ
 *
	mhh_¥ev
;

1062 
UT_hash_h™dÀ
 *
	mhh_√xt
;

1063 *
	mkey
;

1064 
	mkeyÀn
;

1065 
	mhashv
;

1066 } 
	tUT_hash_h™dÀ
;

	@util.c

12 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<˘y≥.h
>

17 
	~<°d¨g.h
>

18 
	~<°rög.h
>

19 
	~<j™ss⁄.h
>

20 #ifde‡
HAVE_LIBCURL


21 
	~<cuæ/cuæ.h
>

23 
	~<time.h
>

24 
	~<î∫o.h
>

25 
	~<uni°d.h
>

26 
	~<sys/ty≥s.h
>

29 
	~<f˙é.h
>

31 #ifde‡
__löux


32 
	~<sys/¥˘l.h
>

35 
	~<sys/sockë.h
>

36 
	~<√töë/ö.h
>

37 
	~<√töë/t˝.h
>

38 
	~<√tdb.h
>

41 
	~<sched.h
>

43 
	~"möî.h
"

44 
	~"ñi°.h
"

45 
	~"com∑t.h
"

46 
	~"utû.h
"

48 
	#DEFAULT_SOCKWAIT
 60

	)

50 
boﬁ
 
	gsuc˚ssful_c⁄√˘
 = 
Ál£
;

52 
	$no_yõld
()

55 
	}
}

57 (*
£À˘ive_yõld
)(Ë&
no_yõld
;

59 
bô_sw≠_èbÀ
[256] =

93 
	}
};

95 
	$kìp_sockÆive
(
SOCKETTYPE
 
fd
)

97 c⁄° 
t˝_⁄e
 = 1;

98 c⁄° 
t˝_kìpidÀ
 = 45;

99 c⁄° 
t˝_kìpötvl
 = 30;

101 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

103 
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
 | 
Êags
);

106 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (c⁄° *)&
t˝_⁄e
, (tcp_one));

108 i‡(!
›t_dñay√t
)

110 
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
);

113 
	`£tsock›t
(
fd
, 
SOL_TCP
, 
TCP_NODELAY
, (c⁄° *)&
t˝_⁄e
, (tcp_one));

114 
	`£tsock›t
(
fd
, 
SOL_TCP
, 
TCP_KEEPCNT
, &
t˝_⁄e
, (tcp_one));

115 
	`£tsock›t
(
fd
, 
SOL_TCP
, 
TCP_KEEPIDLE
, &
t˝_kìpidÀ
, (tcp_keepidle));

116 
	`£tsock›t
(
fd
, 
SOL_TCP
, 
TCP_KEEPINTVL
, &
t˝_kìpötvl
, (tcp_keepintvl));

118 
	}
}

121 *
	$_cgmÆloc
(
uöt32_t
 
size
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

123 *
ªt
;

125 
	`Æign_Àn
(&
size
);

126 
ªt
 = 
	`mÆloc
(
size
);

128 i‡(
	`u∆ikñy
(!
ªt
)) {

129 
	`quô
(1, "FaûedÅÿmÆlo¯sizê%d from %†%s:%d", 
size
, 
fûe
, 
func
, 
löe
);

132  
ªt
;

133 
	}
}

135 *
	$_cgˇŒoc
(
memb
, 
size_t
 
size
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

137 *
ªt
;

139 
	`Æign_Àn
(&
size
);

140 
ªt
 = 
	`ˇŒoc
(
memb
, 
size
);

142 i‡(
	`u∆ikñy
(!
ªt
)) {

143 
	`quô
(1, "FaûedÅÿˇŒo¯memb %d sizê%d from %†%s:%d", 
memb
, 
size
, 
fûe
, 
func
, 
löe
);

146  
ªt
;

147 
	}
}

149 *
	$_cgªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

151 *
ªt
;

153 
	`Æign_Àn
(&
size
);

154 
ªt
 = 
	`ªÆloc
(
±r
, 
size
);

156 i‡(
	`u∆ikñy
(!
ªt
)) {

157 
	`quô
(1, "FaûedÅÿªÆlo¯sizê%d from %†%s:%d", 
size
, 
fûe
, 
func
, 
löe
);

160  
ªt
;

161 
	}
}

163 
	stq_ít
 {

165 *
	md©a
;

166 
li°_hód
 
	mq_node
;

170 #ifde‡
HAVE_LIBCURL


171 
timevÆ
 
	g√âime
;

173 
	sd©a_buf„r


175 *
	mbuf
;

176 
size_t
 
	mÀn
;

179 
	su∂ﬂd_buf„r


181 c⁄° *
	mbuf
;

182 
size_t
 
	mÀn
;

185 
	shódî_öfo


187 *
	mÕ_∑th
;

188 
	mrﬁ…ime
;

189 *
	mªas⁄
;

190 *
	m°øtum_uæ
;

191 
boﬁ
 
	mhadrﬁ…ime
;

192 
boﬁ
 
	mˇƒﬁl
;

193 
boﬁ
 
	mhadexpúe
;

196 
	$d©abuf_‰ì
(
d©a_buf„r
 *
db
)

198 i‡(!
db
)

201 
	`‰ì
(
db
->
buf
);

203 
	`mem£t
(
db
, 0, (*db));

204 
	}
}

206 
size_t
 
	$Æl_d©a_cb
(c⁄° *
±r
, 
size_t
 
size
, size_à
nmemb
,

207 *
u£r_d©a
)

209 
d©a_buf„r
 *
db
 = 
u£r_d©a
;

210 
size_t
 
Àn
 = 
size
 * 
nmemb
;

211 
size_t
 
ﬁdÀn
, 
√wÀn
;

212 *
√wmem
;

213 c⁄° 
zîo
 = 0;

215 
ﬁdÀn
 = 
db
->
Àn
;

216 
√wÀn
 = 
ﬁdÀn
 + 
Àn
;

218 
√wmem
 = 
	`cgªÆloc
(
db
->
buf
, 
√wÀn
 + 1);

219 
db
->
buf
 = 
√wmem
;

220 
db
->
Àn
 = 
√wÀn
;

221 
	`cg_mem˝y
(
db
->
buf
 + 
ﬁdÀn
, 
±r
, 
Àn
);

222 
	`cg_mem˝y
(
db
->
buf
 + 
√wÀn
, &
zîo
, 1);

224  
Àn
;

225 
	}
}

227 
size_t
 
	$u∂ﬂd_d©a_cb
(*
±r
, 
size_t
 
size
, size_à
nmemb
,

228 *
u£r_d©a
)

230 
u∂ﬂd_buf„r
 *
ub
 = 
u£r_d©a
;

231 
Àn
 = 
size
 * 
nmemb
;

233 i‡(
Àn
 > 
ub
->len)

234 
Àn
 = 
ub
->len;

236 i‡(
Àn
)

238 
	`cg_mem˝y
(
±r
, 
ub
->
buf
, 
Àn
);

239 
ub
->
buf
 +
Àn
;

240 
ub
->
Àn
 -=Üen;

243  
Àn
;

244 
	}
}

246 
size_t
 
	$ª•_hdr_cb
(*
±r
, 
size_t
 
size
, size_à
nmemb
, *
u£r_d©a
)

248 
hódî_öfo
 *
hi
 = 
u£r_d©a
;

249 
size_t
 
ªmÀn
, 
¶í
, 
±æí
 = 
size
 * 
nmemb
;

250 *
ªm
, *
vÆ
 = 
NULL
, *
key
 = NULL;

251 *
tmp
;

253 
vÆ
 = 
	`cgˇŒoc
(1, 
±æí
);

254 
key
 = 
	`cgˇŒoc
(1, 
±æí
);

256 
tmp
 = 
	`memchr
(
±r
, ':', 
±æí
);

257 i‡(!
tmp
 || (tm∞=
±r
))

258 
out
;

259 
¶í
 = 
tmp
 - 
±r
;

260 i‡((
¶í
 + 1Ë=
±æí
)

261 
out
;

262 
	`cg_mem˝y
(
key
, 
±r
, 
¶í
);

263 
key
[
¶í
] = 0;

265 
ªm
 = 
±r
 + 
¶í
 + 1;

266 
ªmÀn
 = 
±æí
 - 
¶í
 - 1;

267 (
ªmÀn
 > 0Ë&& (
	`is•a˚
(*
ªm
)))

269 
ªmÀn
--;

270 
ªm
++;

273 
	`cg_mem˝y
(
vÆ
, 
ªm
, 
ªmÀn
);

274 
vÆ
[
ªmÀn
] = 0;

275 (*
vÆ
Ë&& (
	`is•a˚
(vÆ[
	`°æí
(val) - 1])))

276 
vÆ
[
	`°æí
(val) - 1] = 0;

278 i‡(!*
vÆ
)

279 
out
;

281 i‡(
›t_¥Ÿocﬁ
)

282 
	`≠∂og
(
LOG_NOTICE
, "HTTP hdr(%s): %s", 
key
, 
vÆ
);

284 i‡(!
	`°rˇ£cmp
("X-Rﬁl-Ntime", 
key
))

286 
hi
->
hadrﬁ…ime
 = 
åue
;

287 i‡(!
	`°∫ˇ£cmp
("N", 
vÆ
, 1))

288 
	`≠∂og
(
LOG_DEBUG
, "X-Roll-Ntime: N found");

291 
hi
->
ˇƒﬁl
 = 
åue
;

295 i‡(
	`°æí
(
vÆ
Ë> 7 && !
	`°∫ˇ£cmp
("expire=", val, 7))

297 
	`ssˇnf
(
vÆ
 + 7, "%d", &
hi
->
rﬁ…ime
);

298 
hi
->
hadexpúe
 = 
åue
;

301 
hi
->
rﬁ…ime
 = 
max_sˇ¡ime
;

302 
	`≠∂og
(
LOG_DEBUG
, "X-Rﬁl-Ntimêexpúy sëÅÿ%d", 
hi
->
rﬁ…ime
);

306 i‡(!
	`°rˇ£cmp
("X-L⁄g-Pﬁlög", 
key
))

308 
hi
->
Õ_∑th
 = 
vÆ
;

309 
vÆ
 = 
NULL
;

312 i‡(!
	`°rˇ£cmp
("X-Reje˘-Rós⁄", 
key
))

314 
hi
->
ªas⁄
 = 
vÆ
;

315 
vÆ
 = 
NULL
;

318 i‡(!
	`°rˇ£cmp
("X-Så©um", 
key
))

320 
hi
->
°øtum_uæ
 = 
vÆ
;

321 
vÆ
 = 
NULL
;

324 
out
:

325 
	`‰ì
(
key
);

326 
	`‰ì
(
vÆ
);

327  
±æí
;

328 
	}
}

330 
	$œ°_√âime
(
timevÆ
 *
œ°
)

332 
	`rd_lock
(&
√ècc_lock
);

333 
œ°
->
tv_£c
 = 
√âime
.tv_sec;

334 
œ°
->
tv_u£c
 = 
√âime
.tv_usec;

335 
	`rd_u∆ock
(&
√ècc_lock
);

336 
	}
}

338 
	$£t_√âime
()

340 
	`wr_lock
(&
√ècc_lock
);

341 
	`cgtime
(&
√âime
);

342 
	`wr_u∆ock
(&
√ècc_lock
);

343 
	}
}

345 #i‡
CURL_HAS_KEEPALIVE


346 
	$kìp_cuæÆive
(
CURL
 *
cuæ
)

348 c⁄° 
t˝_kìpidÀ
 = 45;

349 c⁄° 
t˝_kìpötvl
 = 30;

350 c⁄° 
kì∑live
 = 1;

352 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TCP_KEEPALIVE
, 
kì∑live
);

353 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TCP_KEEPIDLE
, 
t˝_kìpidÀ
);

354 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TCP_KEEPINTVL
, 
t˝_kìpötvl
);

355 
	}
}

357 
	$kìp_cuæÆive
(
CURL
 *
cuæ
)

359 
SOCKETTYPE
 
sock
;

361 
	`cuæ_ósy_gëöfo
(
cuæ
, 
CURLINFO_LASTSOCKET
, (*)&
sock
);

362 
	`kìp_sockÆive
(
sock
);

363 
	}
}

366 
	$cuæ_debug_cb
(
__maybe_unu£d
 
CURL
 *
h™dÀ
, 
cuæ_öfŸy≥
 
ty≥
,

367 
__maybe_unu£d
 *
d©a
, 
size_t
 
size
, *
u£rd©a
)

369 
poﬁ
 *poﬁ = (poﬁ *)
u£rd©a
;

371 
ty≥
)

373 
CURLINFO_HEADER_IN
:

374 
CURLINFO_DATA_IN
:

375 
CURLINFO_SSL_DATA_IN
:

376 
poﬁ
->
cgmöî_poﬁ_°©s
.
√t_byãs_ª˚ived
 +
size
;

378 
CURLINFO_HEADER_OUT
:

379 
CURLINFO_DATA_OUT
:

380 
CURLINFO_SSL_DATA_OUT
:

381 
poﬁ
->
cgmöî_poﬁ_°©s
.
√t_byãs_£¡
 +
size
;

383 
CURLINFO_TEXT
:

388 
	}
}

390 
js⁄_t
 *
	$js⁄_web_c⁄fig
(c⁄° *
uæ
)

392 
d©a_buf„r
 
Æl_d©a
 = {
NULL
, 0};

393 
cuæ_îr_°r
[
CURL_ERROR_SIZE
];

394 
timeout
 = 60;

395 
js⁄_îr‹_t
 
îr
;

396 
js⁄_t
 *
vÆ
;

397 
CURL
 *
cuæ
;

398 
rc
;

400 
	`mem£t
(&
îr
, 0, (err));

402 
cuæ
 = 
	`cuæ_ósy_öô
();

403 i‡(
	`u∆ikñy
(!
cuæ
))

404 
	`quôhîe
(1, "CURL initialisation failed");

406 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TIMEOUT
, 
timeout
);

408 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_NOSIGNAL
, 1);

409 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_URL
, 
uæ
);

410 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_ENCODING
, "");

411 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_FAILONERROR
, 1);

413 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEFUNCTION
, 
Æl_d©a_cb
);

414 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEDATA
, &
Æl_d©a
);

415 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_ERRORBUFFER
, 
cuæ_îr_°r
);

416 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_FOLLOWLOCATION
, 1);

417 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_USE_SSL
, 
CURLUSESSL_TRY
);

419 
vÆ
 = 
NULL
;

420 
rc
 = 
	`cuæ_ósy_≥rf‹m
(
cuæ
);

421 
	`cuæ_ósy_˛ónup
(
cuæ
);

422 i‡(
rc
)

424 
	`≠∂og
(
LOG_ERR
, "HTTP c⁄figÑeque° o‡'%s' faûed: %s", 
uæ
, 
cuæ_îr_°r
);

425 
c_out
;

428 i‡(!
Æl_d©a
.
buf
)

430 
	`≠∂og
(
LOG_ERR
, "Em±y c⁄fig d©®ª˚ived from '%s'", 
uæ
);

431 
c_out
;

434 
vÆ
 = 
	`JSON_LOADS
(
Æl_d©a
.
buf
, &
îr
);

435 i‡(!
vÆ
)

437 
	`≠∂og
(
LOG_ERR
, "JSON c⁄fig decodêo‡'%s' faûed(%d): %s", 
uæ
,

438 
îr
.
löe
,Éº.
ãxt
);

440 
	`d©abuf_‰ì
(&
Æl_d©a
);

442 
c_out
:

443  
vÆ
;

444 
	}
}

446 
js⁄_t
 *
	$js⁄_Ωc_ˇŒ
(
CURL
 *
cuæ
, c⁄° *
uæ
,

447 c⁄° *
u£Ωass
, c⁄° *
Ωc_ªq
,

448 
boﬁ
 
¥obe
, boﬁ 
l⁄gpﬁl
, *
rﬁ…ime
,

449 
poﬁ
 *poﬁ, 
boﬁ
 
sh¨e
)

451 
timeout
 = 
l⁄gpﬁl
 ? (60 * 60) : 60;

452 
d©a_buf„r
 
Æl_d©a
 = {
NULL
, 0};

453 
hódî_öfo
 
hi
 = {
NULL
, 0, NULL, NULL, 
Ál£
, false, false};

454 
Àn_hdr
[64], 
u£r_agít_hdr
[128];

455 
cuæ_îr_°r
[
CURL_ERROR_SIZE
];

456 
cuæ_¶i°
 *
hódîs
 = 
NULL
;

457 
u∂ﬂd_buf„r
 
u∂ﬂd_d©a
;

458 
js⁄_t
 *
vÆ
, *
îr_vÆ
, *
ªs_vÆ
;

459 
boﬁ
 
¥obög
 = 
Ál£
;

460 
byã_cou¡
;

461 
js⁄_îr‹_t
 
îr
;

462 
rc
;

464 
	`mem£t
(&
îr
, 0, (err));

468 i‡(
¥obe
)

469 
¥obög
 = !
poﬁ
->
¥obed
;

470 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TIMEOUT
, 
timeout
);

473 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_DEBUGFUNCTION
, 
cuæ_debug_cb
);

474 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_DEBUGDATA
, (*)
poﬁ
);

475 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_VERBOSE
, 1);

477 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_NOSIGNAL
, 1);

478 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_URL
, 
uæ
);

479 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_ENCODING
, "");

480 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_FAILONERROR
, 1);

484 i‡(!
›t_dñay√t
 || 
sh¨e
)

485 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_TCP_NODELAY
, 1);

486 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEFUNCTION
, 
Æl_d©a_cb
);

487 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEDATA
, &
Æl_d©a
);

488 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_READFUNCTION
, 
u∂ﬂd_d©a_cb
);

489 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_READDATA
, &
u∂ﬂd_d©a
);

490 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_ERRORBUFFER
, 
cuæ_îr_°r
);

491 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_FOLLOWLOCATION
, 1);

492 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_HEADERFUNCTION
, 
ª•_hdr_cb
);

493 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_HEADERDATA
, &
hi
);

494 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_USE_SSL
, 
CURLUSESSL_TRY
);

495 i‡(
poﬁ
->
Ωc_¥oxy
)

497 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_PROXY
, 
poﬁ
->
Ωc_¥oxy
);

498 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_PROXYTYPE
, 
poﬁ
->
Ωc_¥oxyty≥
);

500 i‡(
›t_socks_¥oxy
)

502 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_PROXY
, 
›t_socks_¥oxy
);

503 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_PROXYTYPE
, 
CURLPROXY_SOCKS4
);

505 i‡(
u£Ωass
)

507 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_USERPWD
, 
u£Ωass
);

508 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_HTTPAUTH
, 
CURLAUTH_BASIC
);

510 i‡(
l⁄gpﬁl
)

511 
	`kìp_cuæÆive
(
cuæ
);

512 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_POST
, 1);

514 i‡(
›t_¥Ÿocﬁ
)

515 
	`≠∂og
(
LOG_NOTICE
, "JSONÖrŸocﬁÑeque°:\n%s", 
Ωc_ªq
);

517 
u∂ﬂd_d©a
.
buf
 = 
Ωc_ªq
;

518 
u∂ﬂd_d©a
.
Àn
 = 
	`°æí
(
Ωc_ªq
);

519 
	`•rötf
(
Àn_hdr
, "Content-Length: %lu",

520 (Ë
u∂ﬂd_d©a
.
Àn
);

521 
	`•rötf
(
u£r_agít_hdr
, "U£r-Agít: %s", 
PACKAGE_STRING
, 
›t_≠i_des¸ùti⁄
);

523 
hódîs
 = 
	`cuæ_¶i°_≠≥nd
(headers,

525 
hódîs
 = 
	`cuæ_¶i°_≠≥nd
(headers,

528 i‡(
	`likñy
(
globÆ_hashøã
))

530 
ghashøã
[255];

532 
	`•rötf
(
ghashøã
, "X-Möög-Hashøã: %Œu", 
globÆ_hashøã
);

533 
hódîs
 = 
	`cuæ_¶i°_≠≥nd
(hódîs, 
ghashøã
);

536 
hódîs
 = 
	`cuæ_¶i°_≠≥nd
(hódîs, 
Àn_hdr
);

537 
hódîs
 = 
	`cuæ_¶i°_≠≥nd
(hódîs, 
u£r_agít_hdr
);

538 
hódîs
 = 
	`cuæ_¶i°_≠≥nd
(headers, "Expect:");

540 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_HTTPHEADER
, 
hódîs
);

542 i‡(
›t_dñay√t
)

545 i‡(!
sh¨e
)

547 
now_m£cs
, 
œ°_m£cs
;

548 
timevÆ
 
now
, 
œ°
;

550 
	`cgtime
(&
now
);

551 
	`œ°_√âime
(&
œ°
);

552 
now_m£cs
 = ()
now
.
tv_£c
 * 1000;

553 
now_m£cs
 +
now
.
tv_u£c
 / 1000;

554 
œ°_m£cs
 = ()
œ°
.
tv_£c
 * 1000;

555 
œ°_m£cs
 +
œ°
.
tv_u£c
 / 1000;

556 i‡(
now_m£cs
 > 
œ°_m£cs
 &&Çow_msecs -Üast_msecs < 250)

558 
time•ec
 
rgç
;

560 
rgç
.
tv_£c
 = 0;

561 
rgç
.
tv_n£c
 = (250 - (
now_m£cs
 - 
œ°_m£cs
)) * 1000000;

562 
	`«no¶ìp
(&
rgç
, 
NULL
);

565 
	`£t_√âime
();

568 
rc
 = 
	`cuæ_ósy_≥rf‹m
(
cuæ
);

569 i‡(
rc
)

571 
	`≠∂og
(
LOG_INFO
, "HTTPÑeque° faûed: %s", 
cuæ_îr_°r
);

572 
îr_out
;

575 i‡(!
Æl_d©a
.
buf
)

577 
	`≠∂og
(
LOG_DEBUG
, "Empty dataÑeceived in json_rpc_call.");

578 
îr_out
;

581 
poﬁ
->
cgmöî_poﬁ_°©s
.
times_£¡
++;

582 i‡(
	`cuæ_ósy_gëöfo
(
cuæ
, 
CURLINFO_SIZE_UPLOAD
, &
byã_cou¡
Ë=
CURLE_OK
)

583 
poﬁ
->
cgmöî_poﬁ_°©s
.
byãs_£¡
 +
byã_cou¡
;

584 
poﬁ
->
cgmöî_poﬁ_°©s
.
times_ª˚ived
++;

585 i‡(
	`cuæ_ósy_gëöfo
(
cuæ
, 
CURLINFO_SIZE_DOWNLOAD
, &
byã_cou¡
Ë=
CURLE_OK
)

586 
poﬁ
->
cgmöî_poﬁ_°©s
.
byãs_ª˚ived
 +
byã_cou¡
;

588 i‡(
¥obög
)

590 
poﬁ
->
¥obed
 = 
åue
;

592 i‡(
hi
.
Õ_∑th
)

594 i‡(
poﬁ
->
hdr_∑th
 !
NULL
)

595 
	`‰ì
(
poﬁ
->
hdr_∑th
);

596 
poﬁ
->
hdr_∑th
 = 
hi
.
Õ_∑th
;

599 
poﬁ
->
hdr_∑th
 = 
NULL
;

600 i‡(
hi
.
°øtum_uæ
)

602 
poﬁ
->
°øtum_uæ
 = 
hi
.stratum_url;

603 
hi
.
°øtum_uæ
 = 
NULL
;

608 i‡(
hi
.
Õ_∑th
)

610 
	`‰ì
(
hi
.
Õ_∑th
);

611 
hi
.
Õ_∑th
 = 
NULL
;

613 i‡(
hi
.
°øtum_uæ
)

615 
	`‰ì
(
hi
.
°øtum_uæ
);

616 
hi
.
°øtum_uæ
 = 
NULL
;

620 *
rﬁ…ime
 = 
hi
.rolltime;

621 
poﬁ
->
cgmöî_poﬁ_°©s
.
rﬁ…ime
 = 
hi
.rolltime;

622 
poﬁ
->
cgmöî_poﬁ_°©s
.
hadrﬁ…ime
 = 
hi
.hadrolltime;

623 
poﬁ
->
cgmöî_poﬁ_°©s
.
ˇƒﬁl
 = 
hi
.canroll;

624 
poﬁ
->
cgmöî_poﬁ_°©s
.
hadexpúe
 = 
hi
.hadexpire;

626 
vÆ
 = 
	`JSON_LOADS
(
Æl_d©a
.
buf
, &
îr
);

627 i‡(!
vÆ
)

629 
	`≠∂og
(
LOG_INFO
, "JSON decodêÁûed(%d): %s", 
îr
.
löe
,Éº.
ãxt
);

631 i‡(
›t_¥Ÿocﬁ
)

632 
	`≠∂og
(
LOG_NOTICE
, "JSONÖrŸocﬁÑe•⁄£:\n%s", (*)(
Æl_d©a
.
buf
));

634 
îr_out
;

637 i‡(
›t_¥Ÿocﬁ
)

639 *
s
 = 
	`js⁄_dumps
(
vÆ
, 
	`JSON_INDENT
(3));

641 
	`≠∂og
(
LOG_NOTICE
, "JSONÖrŸocﬁÑe•⁄£:\n%s", 
s
);

642 
	`‰ì
(
s
);

648 
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

649 
îr_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "error");

651 i‡(!
ªs_vÆ
 ||(
îr_vÆ
 && !
	`js⁄_is_nuŒ
(err_val)))

653 *
s
;

655 i‡(
îr_vÆ
)

656 
s
 = 
	`js⁄_dumps
(
îr_vÆ
, 
	`JSON_INDENT
(3));

658 
s
 = 
	`°rdup
("(unknownÑeason)");

660 
	`≠∂og
(
LOG_INFO
, "JSON-RPC cÆ»Áûed: %s", 
s
);

662 
	`‰ì
(
s
);

664 
îr_out
;

667 i‡(
hi
.
ªas⁄
)

669 
	`js⁄_obje˘_£t_√w
(
vÆ
, "ªje˘-ªas⁄", 
	`js⁄_°rög
(
hi
.
ªas⁄
));

670 
	`‰ì
(
hi
.
ªas⁄
);

671 
hi
.
ªas⁄
 = 
NULL
;

673 
suc˚ssful_c⁄√˘
 = 
åue
;

674 
	`d©abuf_‰ì
(&
Æl_d©a
);

675 
	`cuæ_¶i°_‰ì_Æl
(
hódîs
);

676 
	`cuæ_ósy_ª£t
(
cuæ
);

677  
vÆ
;

679 
îr_out
:

680 
	`d©abuf_‰ì
(&
Æl_d©a
);

681 
	`cuæ_¶i°_‰ì_Æl
(
hódîs
);

682 
	`cuæ_ósy_ª£t
(
cuæ
);

683 i‡(!
suc˚ssful_c⁄√˘
)

684 
	`≠∂og
(
LOG_DEBUG
, "FailedÅo connect in json_rpc_call");

685 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_FRESH_CONNECT
, 1);

686  
NULL
;

687 
	}
}

688 
	#PROXY_HTTP
 
CURLPROXY_HTTP


	)

689 
	#PROXY_HTTP_1_0
 
CURLPROXY_HTTP_1_0


	)

690 
	#PROXY_SOCKS4
 
CURLPROXY_SOCKS4


	)

691 
	#PROXY_SOCKS5
 
CURLPROXY_SOCKS5


	)

692 
	#PROXY_SOCKS4A
 
CURLPROXY_SOCKS4A


	)

693 
	#PROXY_SOCKS5H
 
CURLPROXY_SOCKS5_HOSTNAME


	)

695 
	#PROXY_HTTP
 0

	)

696 
	#PROXY_HTTP_1_0
 1

	)

697 
	#PROXY_SOCKS4
 2

	)

698 
	#PROXY_SOCKS5
 3

	)

699 
	#PROXY_SOCKS4A
 4

	)

700 
	#PROXY_SOCKS5H
 5

	)

705 c⁄° *
	m«me
;

706 
¥oxyty≥s_t
 
	m¥oxyty≥
;

707 } 
	g¥oxy«mes
[] =

709 { "hâp:", 
PROXY_HTTP
 },

710 { "hâp0:", 
PROXY_HTTP_1_0
 },

711 { "socks4:", 
PROXY_SOCKS4
 },

712 { "socks5:", 
PROXY_SOCKS5
 },

713 { "socks4a:", 
PROXY_SOCKS4A
 },

714 { "socks5h:", 
PROXY_SOCKS5H
 },

715 { 
NULL
, 0 }

719 c⁄° *
	$¥oxyty≥
(
¥oxyty≥s_t
 
¥oxyty≥
)

721 
i
;

723 
i
 = 0; 
¥oxy«mes
[i].
«me
; i++) {

724 i‡(
¥oxy«mes
[
i
].
¥oxyty≥
 ==Öroxytype) {

725  
¥oxy«mes
[
i
].
«me
;

730 
	}
}

733 *
	$gë_¥oxy
(*
uæ
, 
poﬁ
 *pool)

735 
poﬁ
->
Ωc_¥oxy
 = 
NULL
;

737 *
•lô
;

738 
∂í
, 
Àn
, 
i
;

740 
i
 = 0; 
¥oxy«mes
[i].
«me
; i++)

742 
∂í
 = 
	`°æí
(
¥oxy«mes
[
i
].
«me
);

743 i‡(
	`°∫cmp
(
uæ
, 
¥oxy«mes
[
i
].
«me
, 
∂í
) == 0)

745 i‡(!(
•lô
 = 
	`°rchr
(
uæ
, '|')))

746  
uæ
;

748 *
•lô
 = '\0';

749 
Àn
 = (Ë(
•lô
 - 
uæ
);

750 
poﬁ
->
Ωc_¥oxy
 = 
	`cgmÆloc
((
size_t
Ë1 + 
Àn
 - 
∂í
);

751 
	`°r˝y
(
poﬁ
->
Ωc_¥oxy
, 
uæ
 + 
∂í
);

752 
	`exåa˘_sockaddr
(
poﬁ
->
Ωc_¥oxy
, &poﬁ->
sockaddr_¥oxy_uæ
, &poﬁ->
sockaddr_¥oxy_p‹t
);

753 
poﬁ
->
Ωc_¥oxyty≥
 = 
¥oxy«mes
[
i
].
¥oxyty≥
;

754 
uæ
 = 
•lô
 + 1;

758  
uæ
;

759 
	}
}

762 
	$__bö2hex
(*
s
, c⁄° *
p
, 
size_t
 
Àn
)

764 
i
;

765 c⁄° 
hex
[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};

767 
i
 = 0; i < ()(
Àn
 / 1); i++)

769 *
s
++ = 
hex
[
p
[
i
] >> 4];

770 *
s
++ = 
hex
[
p
[
i
] & 0xF];

772 *
s
++ = '\0';

773 
	}
}

778 *
	$bö2hex
(c⁄° *
p
, 
size_t
 
Àn
)

780 
ssize_t
 
¶í
;

781 *
s
;

783 
¶í
 = 
Àn
 * 2 + 1;

785 i‡(
¶í
 % 4) {

786 
¶í
 += 4 - (slen % 4);

789 
s
 = 
	`cgˇŒoc
(
¶í
, (
size_t
)1);

790 
	`__bö2hex
(
s
, 
p
, 
Àn
);

792  
s
;

793 
	}
}

795 c⁄° 
	ghex2bö_tbl
[256] =

817 
boﬁ
 
	$hex2bö
(*
p
, c⁄° *
hex°r
, 
size_t
 
Àn
)

819 
nibbÀ1
, 
nibbÀ2
;

820 
idx
;

821 
boﬁ
 
ªt
 = 
Ál£
;

823 *
hex°r
 && 
Àn
)

825 i‡(
	`u∆ikñy
(!
hex°r
[1]))

827 
	`≠∂og
(
LOG_ERR
, "hex2bin strÅruncated");

828  
ªt
;

831 
idx
 = (Ë*
hex°r
++;

832 
nibbÀ1
 = 
hex2bö_tbl
[
idx
];

833 
idx
 = (Ë*
hex°r
++;

834 
nibbÀ2
 = 
hex2bö_tbl
[
idx
];

836 i‡(
	`u∆ikñy
((
nibbÀ1
 < 0Ë|| (
nibbÀ2
 < 0)))

838 
	`≠∂og
(
LOG_ERR
, "hex2bin scan failed");

839  
ªt
;

842 *
p
++ = ((()
nibbÀ1
Ë<< 4Ë| (()
nibbÀ2
);

843 --
Àn
;

846 i‡(
	`likñy
(
Àn
 =0 && *
hex°r
 == 0))

847 
ªt
 = 
åue
;

848  
ªt
;

849 
	}
}

851 
boﬁ
 
	$_vÆid_hex
(*
s
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

853 
boﬁ
 
ªt
 = 
Ál£
;

854 
i
, 
Àn
;

856 i‡(
	`u∆ikñy
(!
s
))

858 
	`≠∂og
(
LOG_ERR
, "NuŒ såögÖas£dÅÿvÆid_hex from", 
IN_FMT_FFL
, 
fûe
, 
func
, 
löe
);

859  
ªt
;

861 
Àn
 = 
	`°æí
(
s
);

863 
i
 = 0; i < 
Àn
; i++)

865 
idx
 = (Ë
s
[
i
];

867 i‡(
	`u∆ikñy
(
hex2bö_tbl
[
idx
] < 0))

869 
	`≠∂og
(
LOG_ERR
, "InvÆid ch¨ 0x%xÖas£dÅÿvÆid_hex from", 
IN_FMT_FFL
, 
idx
, 
fûe
, 
func
, 
löe
);

870  
ªt
;

874 
ªt
 = 
åue
;

875  
ªt
;

876 
	}
}

878 
	#vÆid_hex
(
s
Ë
	`_vÆid_hex
(s, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

880 
boﬁ
 
	$_vÆid_ascii
(*
s
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

882 
boﬁ
 
ªt
 = 
Ál£
;

883 
i
, 
Àn
;

885 i‡(
	`u∆ikñy
(!
s
))

887 
	`≠∂og
(
LOG_ERR
, "NuŒ såögÖas£dÅÿvÆid_asciò‰om", 
IN_FMT_FFL
, 
fûe
, 
func
, 
löe
);

888  
ªt
;

891 
Àn
 = 
	`°æí
(
s
);

893 i‡(
	`u∆ikñy
(!
Àn
))

895 
	`≠∂og
(
LOG_ERR
, "ZîÿÀngth såögÖas£dÅÿvÆid_asciò‰om", 
IN_FMT_FFL
, 
fûe
, 
func
, 
löe
);

896  
ªt
;

899 
i
 = 0; i < 
Àn
; i++)

901 
idx
 = (Ë
s
[
i
];

903 i‡(
	`u∆ikñy
(
idx
 < 32 || idx > 126))

905 
	`≠∂og
(
LOG_ERR
, "InvÆid ch¨ 0x%xÖas£dÅÿvÆid_asciò‰om", 
IN_FMT_FFL
, 
idx
, 
fûe
, 
func
, 
löe
);

906  
ªt
;

909 
ªt
 = 
åue
;

910  
ªt
;

911 
	}
}

913 
	#vÆid_ascii
(
s
Ë
	`_vÆid_ascii
(s, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

915 c⁄° 
	gb58tobö_tbl
[] =

929 
	$b58tobö
(*
b58bö
, c⁄° *
b58
)

931 
uöt32_t
 
c
, 
bö32
[7];

932 
Àn
, 
i
, 
j
;

933 
uöt64_t
 
t
;

935 
	`mem£t
(
bö32
, 0, 7 * (
uöt32_t
));

936 
Àn
 = 
	`°æí
(
b58
);

938 
i
 = 0; i < 
Àn
; i++) {

939 
c
 = (
uöt32_t
Ë
b58
[
i
];

940 
c
 = (
uöt32_t
Ë
b58tobö_tbl
[c];

942 
j
 = 6; j >= 0; j--)

944 
t
 = ((
uöt64_t
)
bö32
[
j
]Ë* 58 + 
c
;

945 
c
 = (
t
 & 0x3f00000000ull) >> 32;

946 
bö32
[
j
] = 
t
 & 0xffffffffull;

949 *(
b58bö
++Ë(Ë(
bö32
[0] & 0xff);

950 
i
 = 1; i < 7; i++)

952 *((
uöt32_t
 *)
b58bö
Ë
	`htobe32
(
bö32
[
i
]);

953 
b58bö
 +(
uöt32_t
);

955 
	}
}

957 
	$addªss_to_pubkeyhash
(*
pkh
, c⁄° *
addr
)

959 
b58bö
[25];

961 
	`mem£t
(
b58bö
, 0, 25);

962 
	`b58tobö
(
b58bö
, 
addr
);

963 
pkh
[0] = 0x76;

964 
pkh
[1] = 0xa9;

965 
pkh
[2] = 0x14;

966 
	`cg_mem˝y
(&
pkh
[3], &
b58bö
[1], 20);

967 
pkh
[23] = 0x88;

968 
pkh
[24] = 0xac;

969 
	}
}

972 
	$£r_numbî
(*
s
, 
öt32_t
 
vÆ
)

974 
öt32_t
 *
i32
 = (öt32_à*)&
s
[1];

975 
Àn
;

977 i‡(
vÆ
 < 128)

978 
Àn
 = 1;

979 i‡(
vÆ
 < 16512)

980 
Àn
 = 2;

981 i‡(
vÆ
 < 2113664)

982 
Àn
 = 3;

984 
Àn
 = 4;

985 *
i32
 = 
	`htﬁe32
(
vÆ
);

986 
s
[0] = (Ë
Àn
++;

987  
Àn
;

988 
	}
}

991 *
	$£r_°rög
(*
s
, *
¶í
)

993 
size_t
 
Àn
 = 
	`°æí
(
s
);

994 *
ªt
;

996 
ªt
 = 
	`cgmÆloc
(1 + 
Àn
 + 8);

997 i‡(
Àn
 < 253)

999 
ªt
[0] = 
Àn
;

1000 
	`cg_mem˝y
(
ªt
 + 1, 
s
, ()(
Àn
/1));

1001 *
¶í
 = 
Àn
 + 1;

1003 i‡(
Àn
 < 0x10000)

1005 
uöt16_t
 *
u16
 = (uöt16_à*Ë&
ªt
[1];

1007 
ªt
[0] = 253;

1008 *
u16
 = 
	`htobe16
(
Àn
);

1009 
	`cg_mem˝y
(
ªt
 + 3, 
s
, ()(
Àn
/1));

1010 *
¶í
 = 
Àn
 + 3;

1015 
uöt32_t
 *
u32
 = (uöt32_à*)&
ªt
[1];

1017 
ªt
[0] = 254;

1018 *
u32
 = 
	`htobe32
(
Àn
);

1019 
	`cg_mem˝y
(
ªt
 + 5, 
s
, ()(
Àn
/1));

1020 *
¶í
 = 
Àn
 + 5;

1022  
ªt
;

1023 
	}
}

1025 
boﬁ
 
	$fuŒã°
(c⁄° *
hash
, c⁄° *
èrgë
)

1027 
uöt32_t
 *
hash32
 = (uöt32_à*)
hash
;

1028 
uöt32_t
 *
èrgë32
 = (uöt32_à*)
èrgë
;

1029 
boﬁ
 
rc
 = 
åue
;

1030 
i
;

1032 
i
 = 28 / 4; i >= 0; i--)

1034 
uöt32_t
 
h32tmp
 = 
	`À32toh
(
hash32
[
i
]);

1035 
uöt32_t
 
t32tmp
 = 
	`À32toh
(
èrgë32
[
i
]);

1037 i‡(
h32tmp
 > 
t32tmp
)

1039 
rc
 = 
Ál£
;

1043 i‡(
h32tmp
 < 
t32tmp
)

1045 
rc
 = 
åue
;

1050 i‡(
›t_debug
)

1052 
hash_sw≠
[32], 
èrgë_sw≠
[32];

1053 *
hash_°r
, *
èrgë_°r
;

1055 
	`swab256
(
hash_sw≠
, 
hash
);

1056 
	`swab256
(
èrgë_sw≠
, 
èrgë
);

1057 
hash_°r
 = 
	`bö2hex
(
hash_sw≠
, (
size_t
)32);

1058 
èrgë_°r
 = 
	`bö2hex
(
èrgë_sw≠
, (
size_t
)32);

1060 
	`≠∂og
(
LOG_DEBUG
, " Proof: %s\nTarget: %s\nTrgVal? %s",

1061 
hash_°r
,

1062 
èrgë_°r
,

1063 
rc
 ? "YES (hash <=Åarget)" :

1066 
	`‰ì
(
hash_°r
);

1067 
	`‰ì
(
èrgë_°r
);

1070  
rc
;

1071 
	}
}

1073 
thªad_q
 *
	$tq_√w
()

1075 
thªad_q
 *
tq
;

1077 
tq
 = 
	`cgˇŒoc
(1, (*tq));

1078 
	`INIT_LIST_HEAD
(&
tq
->
q
);

1079 
	`±hªad_muãx_öô
(&
tq
->
muãx
, 
NULL
);

1080 
	`±hªad_c⁄d_öô
(&
tq
->
c⁄d
, 
NULL
);

1082  
tq
;

1083 
	}
}

1085 
	$tq_‰ì
(
thªad_q
 *
tq
)

1087 
tq_ít
 *
ít
, *
ôî
;

1089 i‡(!
tq
) {

1093 
	`li°_f‹_óch_íåy_ß„
(
ít
, 
ôî
, &
tq
->
q
, 
q_node
)

1095 
	`li°_dñ
(&
ít
->
q_node
);

1096 
	`‰ì
(
ít
);

1099 
	`±hªad_c⁄d_de°roy
(&
tq
->
c⁄d
);

1100 
	`±hªad_muãx_de°roy
(&
tq
->
muãx
);

1102 
	`mem£t
(
tq
, 0, (*tq));

1103 
	`‰ì
(
tq
);

1104 
	}
}

1106 
	$tq_‰ìzëhaw
(
thªad_q
 *
tq
, 
boﬁ
 
‰ozí
)

1108 
	`muãx_lock
(&
tq
->
muãx
);

1109 
tq
->
‰ozí
 = frozen;

1110 
	`±hªad_c⁄d_sig«l
(&
tq
->
c⁄d
);

1111 
	`muãx_u∆ock
(&
tq
->
muãx
);

1112 
	}
}

1114 
	$tq_‰ìze
(
thªad_q
 *
tq
)

1116 
	`tq_‰ìzëhaw
(
tq
, 
åue
);

1117 
	}
}

1119 
	$tq_thaw
(
thªad_q
 *
tq
)

1121 
	`tq_‰ìzëhaw
(
tq
, 
Ál£
);

1122 
	}
}

1124 
boﬁ
 
	$tq_push
(
thªad_q
 *
tq
, *
d©a
)

1126 
tq_ít
 *
ít
;

1127 
boﬁ
 
rc
 = 
åue
;

1129 
ít
 = 
	`cgˇŒoc
(1, (*ent));

1130 
ít
->
d©a
 = data;

1131 
	`INIT_LIST_HEAD
(&
ít
->
q_node
);

1133 
	`muãx_lock
(&
tq
->
muãx
);

1135 i‡(!
tq
->
‰ozí
)

1137 
	`li°_add_èû
(&
ít
->
q_node
, &
tq
->
q
);

1141 
	`‰ì
(
ít
);

1142 
rc
 = 
Ál£
;

1145 
	`±hªad_c⁄d_sig«l
(&
tq
->
c⁄d
);

1146 
	`muãx_u∆ock
(&
tq
->
muãx
);

1148  
rc
;

1149 
	}
}

1152 *
	$tq_p›
(
thªad_q
 *
tq
, c⁄° 
time•ec
 *
ab°ime
)

1154 
tq_ít
 *
ít
;

1155 *
rvÆ
 = 
NULL
;

1156 
rc
;

1158 
	`muãx_lock
(&
tq
->
muãx
);

1159 i‡(!
	`li°_em±y
(&
tq
->
q
)) {

1160 
p›
;

1163 i‡(
ab°ime
) {

1164 
rc
 = 
	`±hªad_c⁄d_timedwaô
(&
tq
->
c⁄d
, &tq->
muãx
, 
ab°ime
);

1167 
rc
 = 
	`±hªad_c⁄d_waô
(&
tq
->
c⁄d
, &tq->
muãx
);

1170 i‡(
rc
) {

1171 
out
;

1174 i‡(
	`li°_em±y
(&
tq
->
q
)) {

1175 
out
;

1177 
p›
:

1178 
ít
 = 
	`li°_íåy
(
tq
->
q
.
√xt
, 
tq_ít
, 
q_node
);

1179 
rvÆ
 = 
ít
->
d©a
;

1181 
	`li°_dñ
(&
ít
->
q_node
);

1182 
	`‰ì
(
ít
);

1183 
out
:

1184 
	`muãx_u∆ock
(&
tq
->
muãx
);

1186  
rvÆ
;

1187 
	}
}

1189 
	$thr_öfo_¸óã
(
thr_öfo
 *
thr
, 
±hªad_©å_t
 *
©å
, *(*
°¨t
Ë(*), *
¨g
)

1191 
	`cg£m_öô
(&
thr
->
£m
);

1192  
	`±hªad_¸óã
(&
thr
->
±h
, 
©å
, 
°¨t
, 
¨g
);

1193 
	}
}

1195 
	$thr_öfo_ˇn˚l
(
thr_öfo
 *
thr
)

1197 i‡(!
thr
) {

1201 i‡(
	`PTH
(
thr
) != 0L)

1203 
	`±hªad_ˇn˚l
(
thr
->
±h
);

1204 
	`PTH
(
thr
) = 0L;

1207 
	`cg£m_de°roy
(&
thr
->
£m
);

1208 
	}
}

1210 
	$thr_öfo_joö
(
thr_öfo
 *
thr
)

1212 i‡(!
thr
)

1215 i‡(
	`PTH
(
thr
) != 0L)

1217 
	`±hªad_joö
(
thr
->
±h
, 
NULL
);

1218 
	`PTH
(
thr
) = 0L;

1220 
	`cg£m_de°roy
(&
thr
->
£m
);

1221 
	}
}

1224 
	$subtime
(
timevÆ
 *
a
, timevÆ *
b
)

1226 
	`timîsub
(
a
, 
b
, b);

1227 
	}
}

1230 
	$addtime
(
timevÆ
 *
a
, timevÆ *
b
)

1232 
	`timîadd
(
a
, 
b
, b);

1233 
	}
}

1236 
boﬁ
 
	$time_m‹e
(
timevÆ
 *
a
, timevÆ *
b
)

1238  
	`timîcmp
(
a
, 
b
, >);

1239 
	}
}

1242 
boﬁ
 
	$time_Àss
(
timevÆ
 *
a
, timevÆ *
b
)

1244  
	`timîcmp
(
a
, 
b
, <);

1245 
	}
}

1248 
	$c›y_time
(
timevÆ
 *
de°
, c⁄° timevÆ *
§c
)

1250 
	`cg_mem˝y
(
de°
, 
§c
, (
timevÆ
));

1251 
	}
}

1254 
	$time•ec_to_vÆ
(
timevÆ
 *
vÆ
, c⁄° 
time•ec
 *
•ec
)

1256 
vÆ
->
tv_£c
 = 
•ec
->tv_sec;

1257 
vÆ
->
tv_u£c
 = 
•ec
->
tv_n£c
 / 1000;

1258 
	}
}

1261 
	$timevÆ_to_•ec
(
time•ec
 *
•ec
, c⁄° 
timevÆ
 *
vÆ
)

1263 
•ec
->
tv_£c
 = 
vÆ
->tv_sec;

1264 
•ec
->
tv_n£c
 = 
vÆ
->
tv_u£c
 * 1000;

1265 
	}
}

1268 
	$us_to_timevÆ
(
timevÆ
 *
vÆ
, 
öt64_t
 
us
)

1270 
Œdiv_t
 
tvdiv
 = 
	`Œdiv
(
us
, 1000000);

1272 
vÆ
->
tv_£c
 = 
tvdiv
.
quŸ
;

1273 
vÆ
->
tv_u£c
 = 
tvdiv
.
ªm
;

1274 
	}
}

1277 
	$us_to_time•ec
(
time•ec
 *
•ec
, 
öt64_t
 
us
)

1279 
Œdiv_t
 
tvdiv
 = 
	`Œdiv
(
us
, 1000000);

1281 
•ec
->
tv_£c
 = 
tvdiv
.
quŸ
;

1282 
•ec
->
tv_n£c
 = 
tvdiv
.
ªm
 * 1000;

1283 
	}
}

1286 
	$ms_to_time•ec
(
time•ec
 *
•ec
, 
öt64_t
 
ms
)

1288 
Œdiv_t
 
tvdiv
 = 
	`Œdiv
(
ms
, 1000);

1290 
•ec
->
tv_£c
 = 
tvdiv
.
quŸ
;

1291 
•ec
->
tv_n£c
 = 
tvdiv
.
ªm
 * 1000000;

1292 
	}
}

1295 
	$ms_to_timevÆ
(
timevÆ
 *
vÆ
, 
öt64_t
 
ms
)

1297 
Œdiv_t
 
tvdiv
 = 
	`Œdiv
(
ms
, 1000);

1299 
vÆ
->
tv_£c
 = 
tvdiv
.
quŸ
;

1300 
vÆ
->
tv_u£c
 = 
tvdiv
.
ªm
 * 1000;

1301 
	}
}

1304 
	$•ec_nscheck
(
time•ec
 *
ts
)

1306 
ts
->
tv_n£c
 >= 1000000000)

1308 
ts
->
tv_n£c
 -= 1000000000;

1309 
ts
->
tv_£c
++;

1312 
ts
->
tv_n£c
 < 0)

1314 
ts
->
tv_n£c
 += 1000000000;

1315 
ts
->
tv_£c
--;

1317 
	}
}

1319 
	$timîadd•ec
(
time•ec
 *
a
, c⁄° time•e¯*
b
)

1321 
a
->
tv_£c
 +
b
->tv_sec;

1322 
a
->
tv_n£c
 +
b
->tv_nsec;

1323 
	`•ec_nscheck
(
a
);

1324 
	}
}

1326 
__maybe_unu£d
 
	$time•ec_to_ms
(
time•ec
 *
ts
)

1328  
ts
->
tv_£c
 * 1000 +Ås->
tv_n£c
 / 1000000;

1329 
	}
}

1333 
__maybe_unu£d
 
	$timîsub•ec
(
time•ec
 *
a
, c⁄° time•e¯*
b
)

1335 
a
->
tv_£c
 -
b
->tv_sec;

1336 
a
->
tv_n£c
 -
b
->tv_nsec;

1337 
	`•ec_nscheck
(
a
);

1338 
	}
}

1340 *
	$Såˇ£°r
(*
hay°ack
, c⁄° *
√edÀ
)

1342 *
lowhay
, *
low√edÀ
, *
ªt
;

1343 
hÀn
, 
∆í
, 
i
, 
ofs
;

1345 i‡(
	`u∆ikñy
(!
hay°ack
 || !
√edÀ
)) {

1346  
NULL
;

1349 
hÀn
 = 
	`°æí
(
hay°ack
);

1350 
∆í
 = 
	`°æí
(
√edÀ
);

1352 i‡(!
hÀn
 || !
∆í
) {

1353  
NULL
;

1356 
lowhay
 = 
	`Æloˇ
((
size_t
Ë
hÀn
);

1357 
low√edÀ
 = 
	`Æloˇ
((
size_t
Ë
∆í
);

1359 
i
 = 0; i < 
hÀn
; i++) {

1360 
lowhay
[
i
] = 
	`tﬁowî
(
hay°ack
[i]);

1363 
i
 = 0; i < 
∆í
; i++) {

1364 
low√edÀ
[
i
] = 
	`tﬁowî
(
√edÀ
[i]);

1367 
ªt
 = 
	`°r°r
(
lowhay
, 
low√edÀ
);

1369 i‡(!
ªt
) {

1370  
ªt
;

1373 
ofs
 = (Ë(
ªt
 - 
lowhay
);

1374  
hay°ack
 + 
ofs
;

1375 
	}
}

1377 *
	$Så£p
(**
°rögp
, c⁄° *
dñim
)

1379 *
ªt
 = *
°rögp
;

1380 *
p
;

1382 
p
 = (
ªt
 !
NULL
Ë? 
	`°Ωbrk
‘ë, 
dñim
) : NULL;

1384 i‡(
p
 =
NULL
) {

1385 *
°rögp
 = 
NULL
;

1389 *
p
 = '\0';

1390 *
°rögp
 = 
p
 + 1;

1393  
ªt
;

1394 
	}
}

1397 
	$cgtime
(
timevÆ
 *
tv
)

1399 
	`gëtimeofday
(
tv
, 
NULL
);

1400 
	}
}

1403 
	$cgtimî_to_ms
(
cgtimî_t
 *
cgt
)

1405  
	`time•ec_to_ms
(
cgt
);

1406 
	}
}

1410 
	$cgtimî_sub
(
cgtimî_t
 *
a
, cgtimî_à*
b
, cgtimî_à*
ªs
)

1412 
ªs
->
tv_£c
 = 
a
->tv_£¯- 
b
->tv_sec;

1413 
ªs
->
tv_n£c
 = 
a
->tv_n£¯- 
b
->tv_nsec;

1414 i‡(
ªs
->
tv_n£c
 < 0)

1416 
ªs
->
tv_n£c
 += 1000000000;

1417 
ªs
->
tv_£c
--;

1419 
	}
}

1422 #i‡
deföed
(
CLOCK_MONOTONIC
Ë&& !deföed(
__FªeBSD__
)

1424 
	$cgtimî_time
(
cgtimî_t
 *
ts_°¨t
)

1426 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, 
ts_°¨t
);

1427 
	}
}

1429 
	$«no¶ìp_ab°ime
(
time•ec
 *
ts_íd
)

1431 
ªt
;

1435 
ªt
 = 
	`˛ock_«no¶ìp
(
CLOCK_MONOTONIC
, 
TIMER_ABSTIME
, 
ts_íd
, 
NULL
);

1437 
ªt
 =
EINTR
);

1438 
	}
}

1443 
	$cg¶ìp_ms_r
(
cgtimî_t
 *
ts_°¨t
, 
ms
)

1445 
time•ec
 
ts_íd
;

1447 
	`ms_to_time•ec
(&
ts_íd
, 
ms
);

1448 
	`timîadd•ec
(&
ts_íd
, 
ts_°¨t
);

1449 
	`«no¶ìp_ab°ime
(&
ts_íd
);

1450 
	}
}

1452 
	$cg¶ìp_us_r
(
cgtimî_t
 *
ts_°¨t
, 
öt64_t
 
us
)

1454 
time•ec
 
ts_íd
;

1456 
	`us_to_time•ec
(&
ts_íd
, 
us
);

1457 
	`timîadd•ec
(&
ts_íd
, 
ts_°¨t
);

1458 
	`«no¶ìp_ab°ime
(&
ts_íd
);

1459 
	}
}

1461 #ifde‡
__MACH__


1462 
	~<mach/˛ock.h
>

1463 
	~<mach/mach.h
>

1464 
	$cgtimî_time
(
cgtimî_t
 *
ts_°¨t
)

1466 
˛ock_£rv_t
 
c˛ock
;

1467 
mach_time•ec_t
 
mts
;

1469 
	`ho°_gë_˛ock_£rvi˚
(
	`mach_ho°_£lf
(), 
SYSTEM_CLOCK
, &
c˛ock
);

1470 
	`˛ock_gë_time
(
c˛ock
, &
mts
);

1471 
	`mach_p‹t_dóŒoˇã
(
	`mach_èsk_£lf
(), 
c˛ock
);

1472 
ts_°¨t
->
tv_£c
 = 
mts
.tv_sec;

1473 
ts_°¨t
->
tv_n£c
 = 
mts
.tv_nsec;

1474 
	}
}

1475 #ñi‡!
deföed
(
WIN32
)

1476 
	$cgtimî_time
(
cgtimî_t
 *
ts_°¨t
)

1478 
timevÆ
 
tv
;

1480 
	`cgtime
(&
tv
);

1481 
ts_°¨t
->
tv_£c
 = 
tv
.tv_sec;

1482 
ts_°¨t
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

1483 
	}
}

1487 
	$cg¶ìp_•ec
(
time•ec
 *
ts_diff
, c⁄° time•e¯*
ts_°¨t
)

1489 
time•ec
 
now
;

1491 
	`timîadd•ec
(
ts_diff
, 
ts_°¨t
);

1492 
	`cgtimî_time
(&
now
);

1493 
	`timîsub•ec
(
ts_diff
, &
now
);

1494 i‡(
	`u∆ikñy
(
ts_diff
->
tv_£c
 < 0))

1496 
	`«no¶ìp
(
ts_diff
, 
NULL
);

1497 
	}
}

1499 
	$cg¶ìp_ms_r
(
cgtimî_t
 *
ts_°¨t
, 
ms
)

1501 
time•ec
 
ts_diff
;

1503 
	`ms_to_time•ec
(&
ts_diff
, (
öt64_t
Ë
ms
);

1504 
	`cg¶ìp_•ec
(&
ts_diff
, 
ts_°¨t
);

1505 
	}
}

1507 
	$cg¶ìp_us_r
(
cgtimî_t
 *
ts_°¨t
, 
öt64_t
 
us
)

1509 
time•ec
 
ts_diff
;

1511 
	`us_to_time•ec
(&
ts_diff
, 
us
);

1512 
	`cg¶ìp_•ec
(&
ts_diff
, 
ts_°¨t
);

1513 
	}
}

1517 
	$cg¶ìp_ms
(
ms
)

1519 
cgtimî_t
 
ts_°¨t
;

1521 
	`cg¶ìp_¥ï¨e_r
(&
ts_°¨t
);

1522 
	`cg¶ìp_ms_r
(&
ts_°¨t
, 
ms
);

1523 
	}
}

1525 
	$cg¶ìp_us
(
öt64_t
 
us
)

1527 
cgtimî_t
 
ts_°¨t
;

1529 
	`cg¶ìp_¥ï¨e_r
(&
ts_°¨t
);

1530 
	`cg¶ìp_us_r
(&
ts_°¨t
, 
us
);

1531 
	}
}

1534 
	$us_tdiff
(
timevÆ
 *
íd
, timevÆ *
°¨t
)

1538 i‡(
	`u∆ikñy
(
íd
->
tv_£c
 - 
°¨t
->tv_sec > 60))

1540  (
íd
->
tv_£c
 - 
°¨t
->tv_£cË* 1000000 + (íd->
tv_u£c
 - start->tv_usec);

1541 
	}
}

1544 
	$ms_tdiff
(
timevÆ
 *
íd
, timevÆ *
°¨t
)

1547 i‡(
	`u∆ikñy
(
íd
->
tv_£c
 - 
°¨t
->tv_sec > 3600))

1549  (
íd
->
tv_£c
 - 
°¨t
->tv_£cË* 1000 + (íd->
tv_u£c
 - start->tv_usec) / 1000;

1550 
	}
}

1553 
	$tdiff
(
timevÆ
 *
íd
, timevÆ *
°¨t
)

1555  
íd
->
tv_£c
 - 
°¨t
->tv_£¯+ (íd->
tv_u£c
 - start->tv_usec) / 1000000.0;

1556 
	}
}

1559 
boﬁ
 
	$exåa˘_sockaddr
(*
uæ
, **
sockaddr_uæ
, **
sockaddr_p‹t
)

1561 *
uæ_begö
, *
uæ_íd
, *
ùv6_begö
, *
ùv6_íd
, *
p‹t_°¨t
 = 
NULL
;

1562 
uæ_addªss
[256], 
p‹t
[6];

1563 
uæ_Àn
, 
p‹t_Àn
 = 0;

1565 *
sockaddr_uæ
 = 
uæ
;

1566 
uæ_begö
 = 
	`°r°r
(
uæ
, "//");

1567 i‡(!
uæ_begö
) {

1568 
uæ_begö
 = 
uæ
;

1571 
uæ_begö
 += 2;

1575 
ùv6_begö
 = 
	`°r°r
(
uæ_begö
, "[");

1576 
ùv6_íd
 = 
	`°r°r
(
uæ_begö
, "]");

1578 i‡(
ùv6_begö
 && 
ùv6_íd
 && ipv6_end > ipv6_begin) {

1579 
uæ_íd
 = 
	`°r°r
(
ùv6_íd
, ":");

1582 
uæ_íd
 = 
	`°r°r
(
uæ_begö
, ":");

1585 i‡(
uæ_íd
)

1587 
uæ_Àn
 = (Ë(
uæ_íd
 - 
uæ_begö
);

1588 
p‹t_Àn
 = 
	`°æí
(
uæ_begö
Ë- 
uæ_Àn
 - 1;

1590 i‡(
p‹t_Àn
 < 1) {

1591  
Ál£
;

1594 
p‹t_°¨t
 = 
uæ_íd
 + 1;

1597 
uæ_Àn
 = 
	`°æí
(
uæ_begö
);

1599 i‡(
uæ_Àn
 < 1) {

1600  
Ál£
;

1604 i‡(
ùv6_begö
 && 
ùv6_íd
 && ipv6_end > ipv6_begin)

1606 
uæ_Àn
 -= 2;

1607 
uæ_begö
++;

1610 
	`¢¥ötf
(
uæ_addªss
, 254, "%.*s", 
uæ_Àn
, 
uæ_begö
);

1612 i‡(
p‹t_Àn
)

1614 *
¶ash
;

1616 
	`¢¥ötf
(
p‹t
, 6, "%.*s", 
p‹t_Àn
, 
p‹t_°¨t
);

1617 
¶ash
 = 
	`°Ωbrk
(
p‹t
, "/#");

1618 i‡(
¶ash
)

1619 *
¶ash
 = '\0';

1622 
	`°r˝y
(
p‹t
, "80");

1625 *
sockaddr_p‹t
 = 
	`°rdup
(
p‹t
);

1626 *
sockaddr_uæ
 = 
	`°rdup
(
uæ_addªss
);

1628  
åue
;

1629 
	}
}

1631 
	e£nd_ªt


1633 
	mSEND_OK
,

1634 
	mSEND_SELECTFAIL
,

1635 
	mSEND_SENDFAIL
,

1636 
	mSEND_INACTIVE


1641 
£nd_ªt
 
	$__°øtum_£nd
(
poﬁ
 *poﬁ, *
s
, 
ssize_t
 
Àn
)

1643 
SOCKETTYPE
 
sock
 = 
poﬁ
->sock;

1644 
ssize_t
 
s£¡
 = 0;

1646 i‡(
›t_¥Ÿocﬁ
) {

1647 
	`≠∂og
(
LOG_NOTICE
, "SEND: %s", 
s
);

1650 
	`°rˇt
(
s
, "\n");

1651 
Àn
++;

1653 
Àn
 > 0 )

1655 
timevÆ
 
timeout
 = {1, 0};

1656 
ssize_t
 
£¡
;

1657 
fd_£t
 
wd
;

1658 
ªåy
:

1659 
	`FD_ZERO
(&
wd
);

1660 
	`FD_SET
(
sock
, &
wd
);

1662 i‡(
	`£À˘
(
sock
 + 1, 
NULL
, &
wd
, NULL, &
timeout
) < 1)

1664 i‡(
	`öãºu±ed
()) {

1665 
ªåy
;

1668  
SEND_SELECTFAIL
;

1671 #ifde‡
__APPLE__


1672 
£¡
 = 
	`£nd
(
poﬁ
->
sock
, 
s
 + 
s£¡
, 
Àn
, 
SO_NOSIGPIPE
);

1673 #ñi‡
WIN32


1674 
£¡
 = 
	`£nd
(
poﬁ
->
sock
, 
s
 + 
s£¡
, 
Àn
, 0);

1676 
£¡
 = 
	`£nd
(
poﬁ
->
sock
, 
s
 + 
s£¡
, 
Àn
, 
MSG_NOSIGNAL
);

1678 i‡(
£¡
 < 0)

1680 i‡(!
	`sock_blocks
())

1681  
SEND_SENDFAIL
;

1682 
£¡
 = 0;

1684 
s£¡
 +
£¡
;

1685 
Àn
 -
£¡
;

1688 
poﬁ
->
cgmöî_poﬁ_°©s
.
times_£¡
++;

1689 
poﬁ
->
cgmöî_poﬁ_°©s
.
byãs_£¡
 +
s£¡
;

1690 
poﬁ
->
cgmöî_poﬁ_°©s
.
√t_byãs_£¡
 +
s£¡
;

1691  
SEND_OK
;

1692 
	}
}

1694 
boﬁ
 
	$°øtum_£nd
(
poﬁ
 *poﬁ, *
s
, 
ssize_t
 
Àn
)

1696 
£nd_ªt
 
ªt
 = 
SEND_INACTIVE
;

1698 i‡(
›t_¥Ÿocﬁ
) {

1699 
	`≠∂og
(
LOG_NOTICE
, "SEND: %s", 
s
);

1702 
	`muãx_lock
(&
poﬁ
->
°øtum_lock
);

1704 i‡(
poﬁ
->
°øtum_a˘ive
) {

1705 
ªt
 = 
	`__°øtum_£nd
(
poﬁ
, 
s
, 
Àn
);

1708 
	`muãx_u∆ock
(&
poﬁ
->
°øtum_lock
);

1711 
ªt
)

1714 
SEND_OK
:

1717 
SEND_SELECTFAIL
:

1718 
	`≠∂og
(
LOG_DEBUG
, "Wrôê£À˘ faûed o¿poﬁ %d sock", 
poﬁ
->
poﬁ_no
);

1719 
	`su•íd_°øtum
(
poﬁ
);

1722 
SEND_SENDFAIL
:

1723 
	`≠∂og
(
LOG_DEBUG
, "FailedÅo send in stratum_send");

1724 
	`su•íd_°øtum
(
poﬁ
);

1727 
SEND_INACTIVE
:

1728 
	`≠∂og
(
LOG_DEBUG
, "Stratum send failed dueÅoÇoÖool stratum_active");

1732  (
ªt
 =
SEND_OK
);

1733 
	}
}

1736 
boﬁ
 
	$sockë_fuŒ
(
poﬁ
 *poﬁ, 
waô
)

1738 
SOCKETTYPE
 
sock
 = 
poﬁ
->sock;

1739 
timevÆ
 
timeout
;

1740 
fd_£t
 
rd
;

1742 i‡(
	`u∆ikñy
(
waô
 < 0)) {

1743 
waô
 = 0;

1746 
	`FD_ZERO
(&
rd
);

1747 
	`FD_SET
(
sock
, &
rd
);

1748 
timeout
.
tv_u£c
 = 0;

1749 
timeout
.
tv_£c
 = 
waô
;

1751 i‡(
	`£À˘
(
sock
 + 1, &
rd
, 
NULL
, NULL, &
timeout
) > 0) {

1752  
åue
;

1755  
Ál£
;

1756 
	}
}

1759 
boﬁ
 
	$sock_fuŒ
(
poﬁ
 *pool)

1761 i‡(
	`°æí
(
poﬁ
->
sockbuf
)) {

1762  
åue
;

1765  (
	`sockë_fuŒ
(
poﬁ
, 0));

1766 
	}
}

1768 
	$˛ór_sockbuf
(
poﬁ
 *pool)

1770 i‡(
	`likñy
(
poﬁ
->
sockbuf
)) {

1771 
	`°r˝y
(
poﬁ
->
sockbuf
, "");

1773 
	}
}

1775 
	$˛ór_sock
(
poﬁ
 *pool)

1777 
ssize_t
 
n
;

1779 
	`muãx_lock
(&
poﬁ
->
°øtum_lock
);

1782 i‡(
poﬁ
->
sock
)

1783 
n
 = 
	`ªcv
(
poﬁ
->
sock
,Öoﬁ->
sockbuf
, 
RECVSIZE
, 0);

1785 
n
 = 0;

1787 
n
 > 0);

1788 
	`muãx_u∆ock
(&
poﬁ
->
°øtum_lock
);

1790 
	`˛ór_sockbuf
(
poﬁ
);

1791 
	}
}

1794 
	$_ªˇŒoc
(**
±r
, 
size_t
 
ﬁd
, size_à
√ws
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

1796 i‡(
√ws
 =
ﬁd
)

1798 *
±r
 = 
	`_cgªÆloc
(*±r, 
√ws
, 
fûe
, 
func
, 
löe
);

1799 i‡(
√ws
 > 
ﬁd
)

1800 
	`mem£t
(*
±r
 + 
ﬁd
, 0, 
√ws
 - old);

1801 
	}
}

1806 
	$ªˇŒoc_sock
(
poﬁ
 *poﬁ, 
size_t
 
Àn
)

1808 
size_t
 
ﬁd
, 
√ws
;

1810 
ﬁd
 = 
	`°æí
(
poﬁ
->
sockbuf
);

1811 
√ws
 = 
ﬁd
 + 
Àn
 + 1;

1812 i‡(
√ws
 < 
poﬁ
->
sockbuf_size
)

1814 
√ws
 =Çew†+ (
RBUFSIZE
 - (news % RBUFSIZE));

1817 
poﬁ
->
sockbuf
 = 
	`cgªÆloc
’oﬁ->sockbuf, 
√ws
);

1818 
	`mem£t
(
poﬁ
->
sockbuf
 + 
ﬁd
, 0, 
√ws
 - old);

1819 
poﬁ
->
sockbuf_size
 = 
√ws
;

1820 
	}
}

1824 *
	$ªcv_löe
(
poﬁ
 *pool)

1826 *
tok
, *
§ë
 = 
NULL
;

1827 
ssize_t
 
Àn
, 
buÊí
;

1828 
waôed
 = 0;

1830 i‡(!
	`°r°r
(
poﬁ
->
sockbuf
, "\n"))

1832 
timevÆ
 
r°¨t
, 
now
;

1834 
	`cgtime
(&
r°¨t
);

1835 i‡(!
	`sockë_fuŒ
(
poﬁ
, 
DEFAULT_SOCKWAIT
))

1837 
	`≠∂og
(
LOG_DEBUG
, "Timed out waiting for data on socket_full");

1838 
out
;

1843 
s
[
RBUFSIZE
];

1844 
size_t
 
¶í
;

1845 
ssize_t
 
n
;

1847 
	`mem£t
(
s
, 0, 
RBUFSIZE
);

1848 
n
 = 
	`ªcv
(
poﬁ
->
sock
, 
s
, 
RECVSIZE
, 0);

1849 i‡(!
n
)

1851 
	`≠∂og
(
LOG_DEBUG
, "Socket closed waiting inÑecv_line");

1852 
	`su•íd_°øtum
(
poﬁ
);

1855 
	`cgtime
(&
now
);

1856 
waôed
 = (Ë
	`tdiff
(&
now
, &
r°¨t
);

1857 i‡(
n
 < 0)

1859 i‡(!
	`sock_blocks
(Ë|| !
	`sockë_fuŒ
(
poﬁ
, 
DEFAULT_SOCKWAIT
 - 
waôed
))

1861 
	`≠∂og
(
LOG_DEBUG
, "FailedÅoÑecv sock inÑecv_line");

1862 
	`su•íd_°øtum
(
poﬁ
);

1868 
¶í
 = 
	`°æí
(
s
);

1869 
	`ªˇŒoc_sock
(
poﬁ
, 
¶í
);

1870 
	`°rˇt
(
poﬁ
->
sockbuf
, 
s
);

1873 
waôed
 < 
DEFAULT_SOCKWAIT
 && !
	`°r°r
(
poﬁ
->
sockbuf
, "\n"));

1876 
buÊí
 = 
	`°æí
(
poﬁ
->
sockbuf
);

1877 
tok
 = 
	`°πok
(
poﬁ
->
sockbuf
, "\n");

1878 i‡(!
tok
)

1880 
	`≠∂og
(
LOG_DEBUG
, "FailedÅoÖarseá \\nÅerminated string inÑecv_line");

1881 
out
;

1883 
§ë
 = 
	`°rdup
(
tok
);

1884 
Àn
 = 
	`°æí
(
§ë
);

1888 i‡(
buÊí
 > 
Àn
 + 1)

1889 
	`memmove
(
poﬁ
->
sockbuf
,Öoﬁ->sockbu‡+ 
Àn
 + 1, 
buÊí
 -Üen + 1);

1891 
	`°r˝y
(
poﬁ
->
sockbuf
, "");

1893 
poﬁ
->
cgmöî_poﬁ_°©s
.
times_ª˚ived
++;

1894 
poﬁ
->
cgmöî_poﬁ_°©s
.
byãs_ª˚ived
 +
Àn
;

1895 
poﬁ
->
cgmöî_poﬁ_°©s
.
√t_byãs_ª˚ived
 +
Àn
;

1896 
out
:

1897 i‡(!
§ë
)

1898 
	`˛ór_sock
(
poﬁ
);

1899 i‡(
›t_¥Ÿocﬁ
)

1900 
	`≠∂og
(
LOG_NOTICE
, "RECVD: %s", 
§ë
);

1901  
§ë
;

1902 
	}
}

1907 *
	$__js⁄_¨øy_°rög
(
js⁄_t
 *
vÆ
, 
íåy
)

1909 
js⁄_t
 *
¨r_íåy
;

1911 i‡(
	`js⁄_is_nuŒ
(
vÆ
))

1912  
NULL
;

1913 i‡(!
	`js⁄_is_¨øy
(
vÆ
))

1914  
NULL
;

1915 i‡(
íåy
 > 
	`js⁄_¨øy_size
(
vÆ
))

1916  
NULL
;

1917 
¨r_íåy
 = 
	`js⁄_¨øy_gë
(
vÆ
, 
íåy
);

1918 i‡(!
	`js⁄_is_°rög
(
¨r_íåy
))

1919  
NULL
;

1921  (*)
	`js⁄_°rög_vÆue
(
¨r_íåy
);

1922 
	}
}

1925 *
	$js⁄_¨øy_°rög
(
js⁄_t
 *
vÆ
, 
íåy
)

1927 *
buf
 = 
	`__js⁄_¨øy_°rög
(
vÆ
, 
íåy
);

1929 i‡(
buf
)

1930  
	`°rdup
(
buf
);

1931  
NULL
;

1932 
	}
}

1934 *
	gbœnk_mîkÀ
 = "0000000000000000000000000000000000000000000000000000000000000000";

1936 
boﬁ
 
	$∑r£_nŸify
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

1938 *
job_id
, *
¥ev_hash
, *
coöba£1
, *
coöba£2
, *
bbvîsi⁄
, *
nbô
,

1939 *
¡ime
, 
hódî
[228];

1940 *
cb1
 = 
NULL
, *
cb2
 = NULL;

1941 
size_t
 
cb1_Àn
, 
cb2_Àn
, 
Æloc_Àn
;

1942 
boﬁ
 
˛ón
, 
ªt
 = 
Ál£
;

1943 
mîkÀs
, 
i
;

1944 
js⁄_t
 *
¨r
;

1946 
¨r
 = 
	`js⁄_¨øy_gë
(
vÆ
, 4);

1947 i‡(!
¨r
 || !
	`js⁄_is_¨øy
(arr))

1948 
out
;

1950 
mîkÀs
 = 
	`js⁄_¨øy_size
(
¨r
);

1952 
job_id
 = 
	`js⁄_¨øy_°rög
(
vÆ
, 0);

1953 
¥ev_hash
 = 
	`__js⁄_¨øy_°rög
(
vÆ
, 1);

1954 
coöba£1
 = 
	`js⁄_¨øy_°rög
(
vÆ
, 2);

1955 
coöba£2
 = 
	`js⁄_¨øy_°rög
(
vÆ
, 3);

1956 
bbvîsi⁄
 = 
	`__js⁄_¨øy_°rög
(
vÆ
, 5);

1957 
nbô
 = 
	`__js⁄_¨øy_°rög
(
vÆ
, 6);

1958 
¡ime
 = 
	`__js⁄_¨øy_°rög
(
vÆ
, 7);

1959 
˛ón
 = 
	`js⁄_is_åue
(
	`js⁄_¨øy_gë
(
vÆ
, 8));

1961 i‡(!
	`vÆid_ascii
(
job_id
Ë|| !
	`vÆid_hex
(
¥ev_hash
Ë|| !vÆid_hex(
coöba£1
) ||

1962 !
	`vÆid_hex
(
coöba£2
Ë|| !vÆid_hex(
bbvîsi⁄
Ë|| !vÆid_hex(
nbô
) ||

1963 !
	`vÆid_hex
(
¡ime
))

1966 
	`‰ì
(
job_id
);

1967 
	`‰ì
(
coöba£1
);

1968 
	`‰ì
(
coöba£2
);

1969 
out
;

1972 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

1973 
	`‰ì
(
poﬁ
->
sw‹k
.
job_id
);

1974 
poﬁ
->
sw‹k
.
job_id
 = job_id;

1975 
	`¢¥ötf
(
poﬁ
->
¥ev_hash
, 65, "%s",Örev_hash);

1976 
cb1_Àn
 = 
	`°æí
(
coöba£1
) / 2;

1977 
cb2_Àn
 = 
	`°æí
(
coöba£2
) / 2;

1978 
	`¢¥ötf
(
poﬁ
->
bbvîsi⁄
, 9, "%s", bbversion);

1979 
	`¢¥ötf
(
poﬁ
->
nbô
, 9, "%s",Çbit);

1980 
	`¢¥ötf
(
poﬁ
->
¡ime
, 9, "%s",Çtime);

1981 
poﬁ
->
sw‹k
.
˛ón
 = clean;

1982 i‡(
poﬁ
->
√xt_diff
 > 0) {

1983 
poﬁ
->
sdiff
 =Öoﬁ->
√xt_diff
;

1985 
Æloc_Àn
 = 
poﬁ
->
coöba£_Àn
 = 
cb1_Àn
 +Öoﬁ->
n1_Àn
 +Öoﬁ->
n2size
 + 
cb2_Àn
;

1986 
poﬁ
->
n⁄˚2_off£t
 = 
cb1_Àn
 +Öoﬁ->
n1_Àn
;

1988 
i
 = 0; i < 
poﬁ
->
mîkÀs
; i++)

1989 
	`‰ì
(
poﬁ
->
sw‹k
.
mîkÀ_bö
[
i
]);

1990 i‡(
mîkÀs
)

1992 
poﬁ
->
sw‹k
.
mîkÀ_bö
 = 
	`cgªÆloc
(pool->swork.merkle_bin,

1993 (*Ë* 
mîkÀs
 + 1);

1994 
i
 = 0; i < 
mîkÀs
; i++)

1996 *
mîkÀ
 = 
	`js⁄_¨øy_°rög
(
¨r
, (Ë
i
);

1998 
poﬁ
->
sw‹k
.
mîkÀ_bö
[
i
] = 
	`cgmÆloc
((
size_t
)32);

1999 i‡(
›t_¥Ÿocﬁ
)

2000 
	`≠∂og
(
LOG_NOTICE
, "mîkÀ %d: %s", 
i
, 
mîkÀ
);

2001 
ªt
 = 
	`hex2bö
(
poﬁ
->
sw‹k
.
mîkÀ_bö
[
i
], 
mîkÀ
, (
size_t
)32);

2002 
	`‰ì
(
mîkÀ
);

2003 i‡(
	`u∆ikñy
(!
ªt
))

2005 
	`≠∂og
(
LOG_ERR
, "FailedÅo convert merkleÅo merkle_bin inÖarse_notify");

2006 
out_u∆ock
;

2010 
poﬁ
->
mîkÀs
 = merkles;

2011 i‡(
poﬁ
->
mîkÀs
 < 2)

2012 
poﬁ
->
bad_w‹k
++;

2013 i‡(
˛ón
)

2014 
poﬁ
->
n⁄˚2
 = 0;

2016 
hódî_Àn
 = 
	`°æí
(
poﬁ
->
bbvîsi⁄
) +

2017 
	`°æí
(
poﬁ
->
¥ev_hash
);

2019 
	`°æí
(
poﬁ
->
¡ime
) +

2020 
	`°æí
(
poﬁ
->
nbô
) +

2024 
	`¢¥ötf
(
hódî
, 225,

2026 
poﬁ
->
bbvîsi⁄
,

2027 
poﬁ
->
¥ev_hash
,

2028 
bœnk_mîkÀ
,

2029 
poﬁ
->
¡ime
,

2030 
poﬁ
->
nbô
,

2032 
w‹k∑ddög
);

2033 
ªt
 = 
	`hex2bö
(
poﬁ
->
hódî_bö
, 
hódî
, (
size_t
)112);

2034 i‡(
	`u∆ikñy
(!
ªt
))

2036 
	`≠∂og
(
LOG_ERR
, "FailedÅo convert headerÅo header_bin inÖarse_notify");

2037 
out_u∆ock
;

2040 
cb1
 = 
	`Æloˇ
(
cb1_Àn
);

2041 
ªt
 = 
	`hex2bö
(
cb1
, 
coöba£1
, 
cb1_Àn
);

2042 i‡(
	`u∆ikñy
(!
ªt
))

2044 
	`≠∂og
(
LOG_ERR
, "FailedÅo convert cb1Åo cb1_bin inÖarse_notify");

2045 
out_u∆ock
;

2047 
cb2
 = 
	`Æloˇ
(
cb2_Àn
);

2048 
ªt
 = 
	`hex2bö
(
cb2
, 
coöba£2
, 
cb2_Àn
);

2049 i‡(
	`u∆ikñy
(!
ªt
))

2051 
	`≠∂og
(
LOG_ERR
, "FailedÅo convert cb2Åo cb2_bin inÖarse_notify");

2052 
out_u∆ock
;

2054 
	`‰ì
(
poﬁ
->
coöba£
);

2055 
poﬁ
->
coöba£
 = 
	`cgˇŒoc
(
Æloc_Àn
, (
size_t
)1);

2056 
	`cg_mem˝y
(
poﬁ
->
coöba£
, 
cb1
, (
size_t
)
cb1_Àn
);

2057 i‡(
poﬁ
->
n1_Àn
)

2058 
	`cg_mem˝y
(
poﬁ
->
coöba£
 + 
cb1_Àn
,Öoﬁ->
n⁄˚1bö
, (
size_t
Ìoﬁ->
n1_Àn
);

2059 
	`cg_mem˝y
(
poﬁ
->
coöba£
 + 
cb1_Àn
 +Öoﬁ->
n1_Àn
 +Öoﬁ->
n2size
, 
cb2
, (
size_t
)
cb2_Àn
);

2060 i‡(
›t_debug
)

2062 *
cb
 = 
	`bö2hex
(
poﬁ
->
coöba£
, (
size_t
Ìoﬁ->
coöba£_Àn
);

2064 
	`≠∂og
(
LOG_DEBUG
, "Poﬁ %d coöba£ %s", 
poﬁ
->
poﬁ_no
, 
cb
);

2065 
	`‰ì
(
cb
);

2067 
out_u∆ock
:

2068 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

2070 i‡(
›t_¥Ÿocﬁ
)

2072 
	`≠∂og
(
LOG_NOTICE
, "job_id: %s", 
job_id
);

2073 
	`≠∂og
(
LOG_NOTICE
, "¥ev_hash: %s", 
¥ev_hash
);

2074 
	`≠∂og
(
LOG_NOTICE
, "coöba£1: %s", 
coöba£1
);

2075 
	`≠∂og
(
LOG_NOTICE
, "coöba£2: %s", 
coöba£2
);

2076 
	`≠∂og
(
LOG_NOTICE
, "bbvîsi⁄: %s", 
bbvîsi⁄
);

2077 
	`≠∂og
(
LOG_NOTICE
, "nbô: %s", 
nbô
);

2078 
	`≠∂og
(
LOG_NOTICE
, "¡ime: %s", 
¡ime
);

2079 
	`≠∂og
(
LOG_NOTICE
, "˛ón: %s", 
˛ón
 ? "yes" : "no");

2081 
	`‰ì
(
coöba£1
);

2082 
	`‰ì
(
coöba£2
);

2085 
poﬁ
->
gëw‹k_ªque°ed
++;

2086 
tŸÆ_gëw‹ks
++;

2087 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

2088 
›t_w‹k_upd©e
 = 
åue
;

2089 
out
:

2090  
ªt
;

2091 
	}
}

2093 
boﬁ
 
	$∑r£_nŸify_btm
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

2095 
js⁄_t
 *
job_id
, *
vîsi⁄
, *
height
, *
¥ev_hash
, *
mîkÀ_roŸ
,*
°©us_hash
, *
£ed
, *
nbô
,

2096 *
¡ime
, *
n⁄˚
, *
èrgë
;

2098 
hódî
[274],
£ed_hex
[66];

2099 
uöt8_t
 
tmp_£ed
[32] = {0};

2100 
uöt32_t
 
btm_èrgë
;

2101 
boﬁ
 
ªt
;

2103 
job_id
 = 
	`js⁄_obje˘_gë
(
vÆ
, "job_id");

2104 
vîsi⁄
 = 
	`js⁄_obje˘_gë
(
vÆ
, "version");

2105 
height
 = 
	`js⁄_obje˘_gë
(
vÆ
, "height");

2106 
¥ev_hash
 = 
	`js⁄_obje˘_gë
(
vÆ
, "previous_block_hash");

2107 
mîkÀ_roŸ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "transactions_merkle_root");

2108 
°©us_hash
 = 
	`js⁄_obje˘_gë
(
vÆ
, "transaction_status_hash");

2109 
£ed
 = 
	`js⁄_obje˘_gë
(
vÆ
, "seed");

2110 
nbô
 = 
	`js⁄_obje˘_gë
(
vÆ
, "bits");

2111 
¡ime
 = 
	`js⁄_obje˘_gë
(
vÆ
, "timestamp");

2112 
n⁄˚
 = 
	`js⁄_obje˘_gë
(
vÆ
, "nonce");

2113 
èrgë
 = 
	`js⁄_obje˘_gë
(
vÆ
, "target");

2115 
	`hex2bö
(&
btm_èrgë
, 
	`js⁄_°rög_vÆue
(
èrgë
), 4);

2116 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

2117 i‡(
poﬁ
->
sw‹k
.
job_id
 !
NULL
)

2119 
	`‰ì
(
poﬁ
->
sw‹k
.
job_id
);

2121 i‡(
job_id
 !
NULL
)

2123 
poﬁ
->
sw‹k
.
job_id
 = 
	`°rdup
(
	`js⁄_°rög_vÆue
(job_id));

2124 
	`≠∂og
(
LOG_NOTICE
,"%†%s",
	`js⁄_°rög_vÆue
(
job_id
),
poﬁ
->
sw‹k
.job_id);

2126 
poﬁ
->
btm_tgt
 = 
btm_èrgë
;

2127 
	`¢¥ötf
(
hódî
, 273,

2129 
	`js⁄_°rög_vÆue
(
vîsi⁄
),

2130 
	`js⁄_°rög_vÆue
(
height
),

2131 
	`js⁄_°rög_vÆue
(
¥ev_hash
),

2132 
	`js⁄_°rög_vÆue
(
¡ime
),

2133 
	`js⁄_°rög_vÆue
(
mîkÀ_roŸ
),

2134 
	`js⁄_°rög_vÆue
(
°©us_hash
),

2135 
	`js⁄_°rög_vÆue
(
nbô
),

2136 
	`js⁄_°rög_vÆue
(
n⁄˚
)

2138 
ªt
 = 
	`hex2bö
(
poﬁ
->
hódî_bö
, 
hódî
, (
size_t
)136);

2139 i‡(
	`u∆ikñy
(!
ªt
))

2141 
	`≠∂og
(
LOG_ERR
, "FaûedÅÿc⁄vîàhódîÅÿhódî_bö i¿∑r£_nŸify_btm %s",
hódî
);

2142 
out_u∆ock
;

2144 
	`¢¥ötf
(
£ed_hex
, 65, "%s", 
	`js⁄_°rög_vÆue
(
£ed
));

2146 
ªt
 = 
	`hex2bö
(
tmp_£ed
, 
	`js⁄_°rög_vÆue
(
£ed
), (
size_t
)32);

2147 if(
	`memcmp
(
poﬁ
->
btm_£ed
,
tmp_£ed
,32) != 0)

2148 
poﬁ
->
upd©e_£ed
 = 
åue
;

2149 
ªt
 = 
	`hex2bö
(
poﬁ
->
btm_£ed
, 
	`js⁄_°rög_vÆue
(
£ed
), (
size_t
)32);

2150 i‡(
	`u∆ikñy
(!
ªt
))

2152 
	`≠∂og
(
LOG_ERR
, "FailedÅo convert seedÅo seed_bin inÖarse_notify_btm");

2153 
out_u∆ock
;

2156 
out_u∆ock
:

2157 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

2159 i‡(
›t_¥Ÿocﬁ
)

2165 
poﬁ
->
gëw‹k_ªque°ed
++;

2166 
tŸÆ_gëw‹ks
++;

2167 i‡(
poﬁ
 =
	`cuºít_poﬁ
())

2168 
›t_w‹k_upd©e
 = 
åue
;

2169 
out
:

2170  
ªt
;

2171 
	}
}

2174 
boﬁ
 
	$∑r£_vîsi⁄
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

2176 
i
;

2177 
i
 = 0; i < 
	`js⁄_¨øy_size
(
vÆ
); i++)

2179 
poﬁ
->
vîsi⁄
[
i
] = 
	`js⁄_öãgî_vÆue
(
	`js⁄_¨øy_gë
(
vÆ
, i));

2181 
	}
}

2183 
boﬁ
 
	$∑r£_diff
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

2185 
ﬁd_diff
, 
diff
;

2187 
diff
 = 
	`js⁄_numbî_vÆue
(
	`js⁄_¨øy_gë
(
vÆ
, 0));

2188 i‡(
diff
 == 0)

2189  
Ál£
;

2191 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

2193 i‡(
poﬁ
->
√xt_diff
 > 0)

2195 
ﬁd_diff
 = 
poﬁ
->
√xt_diff
;

2196 
poﬁ
->
√xt_diff
 = 
diff
;

2200 
ﬁd_diff
 = 
poﬁ
->
sdiff
;

2201 
poﬁ
->
√xt_diff
 =Öoﬁ->
sdiff
 = 
diff
;

2204 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

2206 i‡(
ﬁd_diff
 !
diff
)

2208 
idiff
 = (Ë
diff
;

2210 i‡(()
idiff
 =
diff
)

2212 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d difficu…y ch™gedÅÿ%d", 
poﬁ
->
poﬁ_no
, 
idiff
);

2216 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d difficu…y ch™gedÅÿ%.1f", 
poﬁ
->
poﬁ_no
, 
diff
);

2222 
	`≠∂og
(
LOG_DEBUG
, "Poﬁ %d difficu…y sëÅÿ%f", 
poﬁ
->
poﬁ_no
, 
diff
);

2225  
åue
;

2226 
	}
}

2228 
boﬁ
 
	$∑r£_exå™⁄˚
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

2230 
n2size
;

2231 *
n⁄˚1
;

2232 
s
[
RBUFSIZE
];

2234 
n⁄˚1
 = 
	`js⁄_¨øy_°rög
(
vÆ
, 0);

2235 i‡(!
	`vÆid_hex
(
n⁄˚1
))

2237 
	`≠∂og
(
LOG_INFO
, "FailedÅo get validÇonce1 inÖarse_extranonce");

2238  
Ál£
;

2240 
n2size
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_¨øy_gë
(
vÆ
, 1));

2241 i‡(!
n2size
) {

2242 
	`≠∂og
(
LOG_INFO
, "FailedÅo get validÇ2size inÖarse_extranonce");

2243 
	`‰ì
(
n⁄˚1
);

2244  
Ál£
;

2247 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

2248 
	`‰ì
(
poﬁ
->
n⁄˚1
);

2249 
poﬁ
->
n⁄˚1
 =Çonce1;

2250 
poﬁ
->
n1_Àn
 = 
	`°æí
(
n⁄˚1
) / 2;

2251 
	`‰ì
(
poﬁ
->
n⁄˚1bö
);

2252 
poﬁ
->
n⁄˚1bö
 = 
	`cgˇŒoc
’oﬁ->
n1_Àn
, (
size_t
)1);

2253 i‡(
	`u∆ikñy
(!
poﬁ
->
n⁄˚1bö
))

2254 
	`quôhîe
(1, "FailedÅo callocÖool->nonce1bin");

2255 
	`hex2bö
(
poﬁ
->
n⁄˚1bö
,Öoﬁ->
n⁄˚1
,Öoﬁ->
n1_Àn
);

2256 
poﬁ
->
n2size
 =Ç2size;

2257 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

2259 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %dÉxå™⁄˚ ch™gêªque°ed", 
poﬁ
->
poﬁ_no
);

2260  
åue
;

2262 
	}
}

2264 
	$__su•íd_°øtum
(
poﬁ
 *pool)

2266 
	`˛ór_sockbuf
(
poﬁ
);

2267 
poﬁ
->
°øtum_a˘ive
 =Öoﬁ->
°øtum_nŸify
 = 
Ál£
;

2268 i‡(
poﬁ
->
sock
)

2269 
	`CLOSESOCKET
(
poﬁ
->
sock
);

2270 
poﬁ
->
sock
 = 0;

2271 
	}
}

2273 
boﬁ
 
	$∑r£_ªc⁄√˘
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

2275 *
sockaddr_uæ
, *
°øtum_p‹t
, *
tmp
;

2276 *
uæ
, *
p‹t
, 
addªss
[256];

2277 
p‹t_no
;

2279 
	`mem£t
(
addªss
, 0, 255);

2280 
uæ
 = (*)
	`js⁄_°rög_vÆue
(
	`js⁄_¨øy_gë
(
vÆ
, 0));

2281 i‡(!
uæ
)

2282 
uæ
 = 
poﬁ
->
sockaddr_uæ
;

2285 *
dŸ_poﬁ
, *
dŸ_ªc⁄√˘
;

2286 
dŸ_poﬁ
 = 
	`°rchr
(
poﬁ
->
sockaddr_uæ
, '.');

2287 i‡(!
dŸ_poﬁ
)

2289 
	`≠∂og
(
LOG_ERR
, "Denied stratumÑeconnectÑequest forÖool without domain '%s'",

2290 
poﬁ
->
sockaddr_uæ
);

2291  
Ál£
;

2293 
dŸ_ªc⁄√˘
 = 
	`°rchr
(
uæ
, '.');

2294 i‡(!
dŸ_ªc⁄√˘
)

2296 
	`≠∂og
(
LOG_ERR
, "Denied stratumÑeconnectÑequestÅo url without domain '%s'",

2297 
uæ
);

2298  
Ál£
;

2300 i‡(
	`°rcmp
(
dŸ_poﬁ
, 
dŸ_ªc⁄√˘
))

2302 
	`≠∂og
(
LOG_ERR
, "Denied stratumÑeconnectÑequestÅoÇon-matching domain url '%s'",

2303 
poﬁ
->
sockaddr_uæ
);

2304  
Ál£
;

2308 
p‹t_no
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_¨øy_gë
(
vÆ
, 1));

2309 i‡(
p‹t_no
) {

2310 
p‹t
 = 
	`Æloˇ
((
size_t
)(256));

2311 
	`•rötf
(
p‹t
, "%d", 
p‹t_no
);

2313 
p‹t
 = (*)
	`js⁄_°rög_vÆue
(
	`js⁄_¨øy_gë
(
vÆ
, 1));

2314 i‡(!
p‹t
)

2315 
p‹t
 = 
poﬁ
->
°øtum_p‹t
;

2318 
	`¢¥ötf
(
addªss
, 254, "%s:%s", 
uæ
, 
p‹t
);

2320 i‡(!
	`exåa˘_sockaddr
(
addªss
, &
sockaddr_uæ
, &
°øtum_p‹t
))

2321  
Ál£
;

2323 
	`≠∂og
(
LOG_WARNING
, "Så©umÑec⁄√˘Ñeque°ed fromÖoﬁ %dÅÿ%s", 
poﬁ
->
poﬁ_no
, 
addªss
);

2325 
	`˛ór_poﬁ_w‹k
(
poﬁ
);

2327 
	`muãx_lock
(&
poﬁ
->
°øtum_lock
);

2328 
	`__su•íd_°øtum
(
poﬁ
);

2329 
tmp
 = 
poﬁ
->
sockaddr_uæ
;

2330 
poﬁ
->
sockaddr_uæ
 = sockaddr_url;

2331 
poﬁ
->
°øtum_uæ
 =Öoﬁ->
sockaddr_uæ
;

2332 
	`‰ì
(
tmp
);

2333 
tmp
 = 
poﬁ
->
°øtum_p‹t
;

2334 
poﬁ
->
°øtum_p‹t
 = stratum_port;

2335 
	`‰ì
(
tmp
);

2336 
	`muãx_u∆ock
(&
poﬁ
->
°øtum_lock
);

2338  
	`ª°¨t_°øtum
(
poﬁ
);

2339 
	}
}

2341 
boﬁ
 
	$£nd_vîsi⁄
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

2343 
js⁄_t
 *
id_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "id");

2344 
s
[
RBUFSIZE
];

2345 
id
;

2347 i‡(!
id_vÆ
)

2348  
Ál£
;

2349 
id
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
vÆ
, "id"));

2351 
	`•rötf
(
s
, "{\"id\": %d, \"ªsu…\": \""
PACKAGE
"/"
VERSION
"\", \"îr‹\":ÇuŒ}", 
id
);

2352 i‡(!
	`°øtum_£nd
(
poﬁ
, 
s
, 
	`°æí
(s)))

2353  
Ál£
;

2355  
åue
;

2356 
	}
}

2358 
boﬁ
 
	$£nd_p⁄g
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

2360 
js⁄_t
 *
id_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "id");

2361 
s
[
RBUFSIZE
];

2362 
id
;

2364 i‡(!
id_vÆ
)

2365  
Ál£
;

2366 
id
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_obje˘_gë
(
vÆ
, "id"));

2368 
	`•rötf
(
s
, "{\"id\": %d, \"ªsu…\": \"p⁄g\", \"îr‹\":ÇuŒ}", 
id
);

2369 i‡(!
	`°øtum_£nd
(
poﬁ
, 
s
, 
	`°æí
(s)))

2370  
Ál£
;

2372  
åue
;

2373 
	}
}

2375 
boﬁ
 
	$show_mesßge
(
poﬁ
 *poﬁ, 
js⁄_t
 *
vÆ
)

2377 *
msg
;

2379 i‡(!
	`js⁄_is_¨øy
(
vÆ
))

2380  
Ál£
;

2381 
msg
 = (*)
	`js⁄_°rög_vÆue
(
	`js⁄_¨øy_gë
(
vÆ
, 0));

2382 i‡(!
msg
)

2383  
Ál£
;

2384 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d mesßge: %s", 
poﬁ
->
poﬁ_no
, 
msg
);

2385  
åue
;

2386 
	}
}

2388 
boﬁ
 
	$∑r£_mëhod
(
poﬁ
 *poﬁ, *
s
)

2390 
js⁄_t
 *
vÆ
 = 
NULL
, *
mëhod
, *
îr_vÆ
, *
∑øms
;

2391 
js⁄_îr‹_t
 
îr
;

2392 
boﬁ
 
ªt
 = 
Ál£
;

2393 *
buf
;

2395 i‡(!
s
)

2396 
out
;

2398 
vÆ
 = 
	`JSON_LOADS
(
s
, &
îr
);

2399 i‡(!
vÆ
)

2401 
	`≠∂og
(
LOG_INFO
, "JSON decodêÁûed(%d): %s", 
îr
.
löe
,Éº.
ãxt
);

2402 
out
;

2405 
mëhod
 = 
	`js⁄_obje˘_gë
(
vÆ
, "method");

2406 i‡(!
mëhod
)

2407 
out_de¸ef
;

2408 
îr_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "error");

2409 
∑øms
 = 
	`js⁄_obje˘_gë
(
vÆ
, "params");

2411 i‡(
îr_vÆ
 && !
	`js⁄_is_nuŒ
(err_val))

2413 *
ss
;

2415 i‡(
îr_vÆ
)

2416 
ss
 = 
	`js⁄_dumps
(
îr_vÆ
, 
	`JSON_INDENT
(3));

2418 
ss
 = 
	`°rdup
("(unknownÑeason)");

2420 
	`≠∂og
(
LOG_INFO
, "JSON-RPC mëhod decodêÁûed: %s", 
ss
);

2421 
	`‰ì
(
ss
);

2422 
out_de¸ef
;

2425 
buf
 = (*)
	`js⁄_°rög_vÆue
(
mëhod
);

2426 i‡(!
buf
)

2427 
out_de¸ef
;

2429 i‡(!
	`°∫ˇ£cmp
(
buf
, "mining.multi_version", 20))

2431 
poﬁ
->
suµ‹t_vû
 = 
åue
;

2432 
	`≠∂og
(
LOG_INFO
,"Pool support multi version");

2433 
ªt
 = 
	`∑r£_vîsi⁄
(
poﬁ
, 
∑øms
);

2434 
out_de¸ef
;

2437 i‡(!
	`°∫ˇ£cmp
(
buf
, "mining.notify", 13))

2439 i‡(
	`∑r£_nŸify
(
poﬁ
, 
∑øms
))

2440 
poﬁ
->
°øtum_nŸify
 = 
ªt
 = 
åue
;

2442 
poﬁ
->
°øtum_nŸify
 = 
ªt
 = 
Ál£
;

2443 
out_de¸ef
;

2448 i‡(!
	`°∫ˇ£cmp
(
buf
, "job", 3))

2450 i‡(
	`∑r£_nŸify_btm
(
poﬁ
, 
∑øms
))

2452 
poﬁ
->
°øtum_nŸify
 = 
ªt
 = 
åue
;

2456 
poﬁ
->
°øtum_nŸify
 = 
ªt
 = 
Ál£
;

2459 
out_de¸ef
;

2462 i‡(!
	`°∫ˇ£cmp
(
buf
, "mining.set_difficulty", 21))

2464 
ªt
 = 
	`∑r£_diff
(
poﬁ
, 
∑øms
);

2465 
out_de¸ef
;

2468 i‡(!
	`°∫ˇ£cmp
(
buf
, "mining.set_extranonce", 21))

2470 
ªt
 = 
	`∑r£_exå™⁄˚
(
poﬁ
, 
∑øms
);

2471 
out_de¸ef
;

2474 i‡(!
	`°∫ˇ£cmp
(
buf
, "client.reconnect", 16))

2476 
ªt
 = 
	`∑r£_ªc⁄√˘
(
poﬁ
, 
∑øms
);

2477 
out_de¸ef
;

2480 i‡(!
	`°∫ˇ£cmp
(
buf
, "client.get_version", 18))

2482 
ªt
 = 
	`£nd_vîsi⁄
(
poﬁ
, 
vÆ
);

2483 
out_de¸ef
;

2486 i‡(!
	`°∫ˇ£cmp
(
buf
, "client.show_message", 19))

2488 
ªt
 = 
	`show_mesßge
(
poﬁ
, 
∑øms
);

2489 
out_de¸ef
;

2492 i‡(!
	`°∫ˇ£cmp
(
buf
, "mining.ping", 11))

2494 
	`≠∂og
(
LOG_INFO
, "Poﬁ %dÖög", 
poﬁ
->
poﬁ_no
);

2495 
ªt
 = 
	`£nd_p⁄g
(
poﬁ
, 
vÆ
);

2496 
out_de¸ef
;

2498 
out_de¸ef
:

2499 
	`js⁄_de¸ef
(
vÆ
);

2500 
out
:

2501  
ªt
;

2502 
	}
}

2504 
boﬁ
 
	$subs¸ibe_exå™⁄˚
(
poﬁ
 *pool)

2506 
js⁄_t
 *
vÆ
 = 
NULL
, *
ªs_vÆ
, *
îr_vÆ
;

2507 
s
[
RBUFSIZE
], *
§ë
 = 
NULL
;

2508 
js⁄_îr‹_t
 
îr
;

2509 
boﬁ
 
ªt
 = 
Ál£
;

2511 
	`•rötf
(
s
, "{\"id\": %d, \"method\": \"mining.extranonce.subscribe\", \"params\": []}",

2512 
sw‹k_id
++);

2514 i‡(!
	`°øtum_£nd
(
poﬁ
, 
s
, 
	`°æí
(s)))

2515  
ªt
;

2519 i‡(!
	`sockë_fuŒ
(
poﬁ
, 
DEFAULT_SOCKWAIT
 / 30)) {

2520 
	`≠∂og
(
LOG_DEBUG
, "Timed out waiting forÑesponseÉxtranonce.subscribe");

2522 
ªt
 = 
åue
;

2523 
out
;

2526 
§ë
 = 
	`ªcv_löe
(
poﬁ
);

2527 i‡(!
§ë
)

2528  
ªt
;

2529 i‡(
	`∑r£_mëhod
(
poﬁ
, 
§ë
))

2530 
	`‰ì
(
§ë
);

2535 
vÆ
 = 
	`JSON_LOADS
(
§ë
, &
îr
);

2536 
	`‰ì
(
§ë
);

2537 
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

2538 
îr_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "error");

2540 i‡(!
ªs_vÆ
 || 
	`js⁄_is_Ál£
‘es_vÆË|| (
îr_vÆ
 && !
	`js⁄_is_nuŒ
(err_val))) {

2541 *
ss
;

2543 i‡(
îr_vÆ
) {

2544 
ss
 = 
	`__js⁄_¨øy_°rög
(
îr_vÆ
, 1);

2545 i‡(!
ss
)

2546 
ss
 = (*)
	`js⁄_°rög_vÆue
(
îr_vÆ
);

2547 i‡(
ss
 && (
	`°rcmp
(ss, "Method 'subscribe'Çot found for service 'mining.extranonce'") == 0)) {

2548 
	`≠∂og
(
LOG_INFO
, "C™nŸ subs¸ibêtÿmöög.exå™⁄˚ f‹Öoﬁ %d", 
poﬁ
->
poﬁ_no
);

2549 
ªt
 = 
åue
;

2550 
out
;

2552 i‡(
ss
 && (
	`°rcmp
(ss, "UnrecognizedÑequestÖrovided") == 0)) {

2553 
	`≠∂og
(
LOG_INFO
, "C™nŸ subs¸ibêtÿmöög.exå™⁄˚ f‹Öoﬁ %d", 
poﬁ
->
poﬁ_no
);

2554 
ªt
 = 
åue
;

2555 
out
;

2557 
ss
 = 
	`js⁄_dumps
(
îr_vÆ
, 
	`JSON_INDENT
(3));

2560 
ss
 = 
	`°rdup
("(unknownÑeason)");

2561 
	`≠∂og
(
LOG_INFO
, "Poﬁ %d JSONÉxå™⁄˚ subs¸ibêÁûed: %s", 
poﬁ
->
poﬁ_no
, 
ss
);

2562 
	`‰ì
(
ss
);

2564 
out
;

2567 
ªt
 = 
åue
;

2568 
	`≠∂og
(
LOG_INFO
, "Så©umÉxå™⁄˚ subs¸ibêf‹Öoﬁ %d", 
poﬁ
->
poﬁ_no
);

2570 
out
:

2571 
	`js⁄_de¸ef
(
vÆ
);

2572  
ªt
;

2573 
	}
}

2576 
boﬁ
 
	$auth_°øtum
(
poﬁ
 *pool)

2578 
js⁄_t
 *
vÆ
 = 
NULL
, *
ªs_vÆ
, *
îr_vÆ
, *
ªs_job
, *
ªs_id
;

2579 
s
[
RBUFSIZE
], *
§ë
 = 
NULL
;

2580 
js⁄_îr‹_t
 
îr
;

2581 
boﬁ
 
ªt
 = 
Ál£
;

2583 
	`•rötf
(
s
, "{\"id\": %d, \"method\": \"mining.authorize\", \"params\": [\"%s\", \"%s\"]}",

2584 
sw‹k_id
++, 
poﬁ
->
Ωc_u£r
,Öoﬁ->
Ωc_∑ss
);

2586 
	`•rötf
(
s
, "{\"method\": \"login\", \"params\": {\"login\": \"%s\", \"pass\": \"%s\", \"agent\": \"%s/%s\"}, \"id\": 1}",

2587 
poﬁ
->
Ωc_u£r
,Öoﬁ->
Ωc_∑ss
, 
PACKAGE
, 
VERSION
);

2589 i‡(!
	`°øtum_£nd
(
poﬁ
, 
s
, 
	`°æí
(s)))

2590  
ªt
;

2595 
§ë
 = 
	`ªcv_löe
(
poﬁ
);

2596 i‡(!
§ë
)

2597  
ªt
;

2598 i‡(
	`∑r£_mëhod
(
poﬁ
, 
§ë
))

2599 
	`‰ì
(
§ë
);

2604 
vÆ
 = 
	`JSON_LOADS
(
§ë
, &
îr
);

2605 
	`‰ì
(
§ë
);

2606 
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

2607 
îr_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "error");

2609 i‡(!
ªs_vÆ
 || 
	`js⁄_is_Ál£
‘es_vÆË|| (
îr_vÆ
 && !
	`js⁄_is_nuŒ
(err_val)))

2611 *
ss
;

2613 i‡(
îr_vÆ
)

2614 
ss
 = 
	`js⁄_dumps
(
îr_vÆ
, 
	`JSON_INDENT
(3));

2616 
ss
 = 
	`°rdup
("(unknownÑeason)");

2617 
	`≠∂og
(
LOG_INFO
, "poﬁ %d JSON så©umáuth faûed: %s", 
poﬁ
->
poﬁ_no
, 
ss
);

2618 
	`‰ì
(
ss
);

2620 
	`su•íd_°øtum
(
poﬁ
);

2622 
out
;

2627 i‡((
ªs_id
 = 
	`js⁄_obje˘_gë
(
ªs_vÆ
, "id")))

2629 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

2630 
	`°r˝y
(
poﬁ
->
BTMAuthID
, 
	`js⁄_°rög_vÆue
(
ªs_id
));

2631 
	`≠∂og
(
LOG_DEBUG
, "BTM AuthID: %s", 
poﬁ
->
BTMAuthID
);

2632 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

2635 i‡((
ªs_job
 = 
	`js⁄_obje˘_gë
(
ªs_vÆ
, "job")))

2637 i‡(
	`∑r£_nŸify_btm
(
poﬁ
, 
ªs_job
))

2639 
poﬁ
->
°øtum_nŸify
 = 
åue
;

2643 
out
;

2649 
ªt
 = 
åue
;

2650 
	`≠∂og
(
LOG_INFO
, "Så©umáuth‹ißti⁄ suc˚s†f‹Öoﬁ %d", 
poﬁ
->
poﬁ_no
);

2651 
poﬁ
->
¥obed
 = 
åue
;

2652 
suc˚ssful_c⁄√˘
 = 
åue
;

2653 
out
:

2654 
	`js⁄_de¸ef
(
vÆ
);

2655  
ªt
;

2656 
	}
}

2658 
	$ªcv_byã
(
sockd
)

2660 
c
;

2662 i‡(
	`ªcv
(
sockd
, &
c
, 1, 0) != -1)

2663  
c
;

2666 
	}
}

2668 
boﬁ
 
	$hâp_√gŸüã
(
poﬁ
 *poﬁ, 
sockd
, 
boﬁ
 
hâp0
)

2670 
buf
[1024];

2671 
i
, 
Àn
;

2673 i‡(
hâp0
)

2675 
	`¢¥ötf
(
buf
, 1024, "CONNECT %s:%s HTTP/1.0\r\n\r\n",

2676 
poﬁ
->
sockaddr_uæ
,Öoﬁ->
°øtum_p‹t
);

2680 
	`¢¥ötf
(
buf
, 1024, "CONNECT %s:%s HTTP/1.1\r\nHost: %s:%s\r\n\r\n",

2681 
poﬁ
->
sockaddr_uæ
,Öoﬁ->
°øtum_p‹t
,Öool->sockaddr_url,

2682 
poﬁ
->
°øtum_p‹t
);

2684 
	`≠∂og
(
LOG_DEBUG
, "SendingÖroxy %s:%s - %s",

2685 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
, 
buf
);

2686 
	`£nd
(
sockd
, 
buf
, 
	`°æí
(buf), 0);

2687 
Àn
 = 
	`ªcv
(
sockd
, 
buf
, 12, 0);

2688 i‡(
Àn
 <= 0)

2690 
	`≠∂og
(
LOG_WARNING
, "Couldn'tÑead fromÖroxy %s:%sáfter sending CONNECT",

2691 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
);

2692  
Ál£
;

2694 
buf
[
Àn
] = '\0';

2695 
	`≠∂og
(
LOG_DEBUG
, "Received fromÖroxy %s:%s - %s",

2696 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
, 
buf
);

2697 i‡(
	`°rcmp
(
buf
, "HTTP/1.1 200") && strcmp(buf, "HTTP/1.0 200"))

2699 
	`≠∂og
(
LOG_WARNING
, "HTTP Error fromÖroxy %s:%s - %s",

2700 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
, 
buf
);

2701  
Ál£
;

2705 
i
 = 0; i < 4; i++)

2707 
buf
[
i
] = (Ë
	`ªcv_byã
(
sockd
);

2708 i‡(
buf
[
i
] == ()-1)

2710 
	`≠∂og
(
LOG_WARNING
, "Couldn'tÑead HTTP byte fromÖroxy %s:%s",

2711 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
);

2712  
Ál£
;

2715 
	`°∫cmp
(
buf
, "\r\n\r\n", 4))

2717 
i
 = 0; i < 3; i++)

2718 
buf
[
i
] = buf[i + 1];

2719 
buf
[3] = (Ë
	`ªcv_byã
(
sockd
);

2720 i‡(
buf
[3] == ()-1)

2722 
	`≠∂og
(
LOG_WARNING
, "Couldn'tÑead HTTP byte fromÖroxy %s:%s",

2723 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
);

2724  
Ál£
;

2728 
	`≠∂og
(
LOG_DEBUG
, "SuccessÇegotiating with %s:%s HTTPÖroxy",

2729 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
);

2730  
åue
;

2731 
	}
}

2733 
boﬁ
 
	$socks5_√gŸüã
(
poﬁ
 *poﬁ, 
sockd
)

2735 
©yp
, 
u˛í
;

2736 
p‹t
;

2737 
buf
[515];

2738 
i
, 
Àn
;

2740 
buf
[0] = 0x05;

2741 
buf
[1] = 0x01;

2742 
buf
[2] = 0x00;

2743 
	`≠∂og
(
LOG_DEBUG
, "AttemptingÅoÇegotiate with %s:%s SOCKS5Öroxy",

2744 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
 );

2745 
	`£nd
(
sockd
, 
buf
, 3, 0);

2746 i‡(
	`ªcv_byã
(
sockd
Ë!0x05 ||Ñecv_byã(sockdË!
buf
[2])

2748 
	`≠∂og
(
LOG_WARNING
, "BadÑesponse from %s:%s SOCKS5 server",

2749 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
 );

2750  
Ál£
;

2753 
buf
[0] = 0x05;

2754 
buf
[1] = 0x01;

2755 
buf
[2] = 0x00;

2756 
buf
[3] = 0x03;

2757 
Àn
 = (
	`°æí
(
poﬁ
->
sockaddr_uæ
));

2758 i‡(
Àn
 > 255)

2759 
Àn
 = 255;

2760 
u˛í
 = (Ë
Àn
;

2761 
buf
[4] = (Ë(
u˛í
 & 0xff);

2762 
	`cg_mem˝y
(
buf
 + 5, 
poﬁ
->
sockaddr_uæ
, ()
Àn
);

2763 
p‹t
 = 
	`©oi
(
poﬁ
->
°øtum_p‹t
);

2764 
buf
[5 + 
Àn
] = (Ë(
p‹t
 >> 8);

2765 
buf
[6 + 
Àn
] = (Ë(
p‹t
 & 0xff);

2766 
	`£nd
(
sockd
, 
buf
, (7 + 
Àn
), 0);

2767 i‡(
	`ªcv_byã
(
sockd
) != 0x05 ||Ñecv_byte(sockd) != 0x00)

2769 
	`≠∂og
(
LOG_WARNING
, "BadÑesponse from %s:%s SOCKS5 server",

2770 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
 );

2771  
Ál£
;

2774 
	`ªcv_byã
(
sockd
);

2775 
©yp
 = (Ë
	`ªcv_byã
(
sockd
);

2776 i‡(
©yp
 == 0x01)

2778 
i
 = 0; i < 4; i++)

2779 
	`ªcv_byã
(
sockd
);

2781 i‡(
©yp
 == 0x03)

2783 
Àn
 = 
	`ªcv_byã
(
sockd
);

2784 
i
 = 0; i < 
Àn
; i++)

2785 
	`ªcv_byã
(
sockd
);

2789 
	`≠∂og
(
LOG_WARNING
, "BadÑesponse from %s:%s SOCKS5 server",

2790 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
 );

2791  
Ál£
;

2793 
i
 = 0; i < 2; i++)

2794 
	`ªcv_byã
(
sockd
);

2796 
	`≠∂og
(
LOG_DEBUG
, "SuccessÇegotiating with %s:%s SOCKS5Öroxy",

2797 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
);

2798  
åue
;

2799 
	}
}

2801 
boﬁ
 
	$socks4_√gŸüã
(
poﬁ
 *poﬁ, 
sockd
, 
boﬁ
 
socks4a
)

2803 
p‹t
;

2804 
ö_addr_t
 
öp
;

2805 
buf
[515];

2806 
i
, 
Àn
;

2808 
buf
[0] = 0x04;

2809 
buf
[1] = 0x01;

2810 
p‹t
 = 
	`©oi
(
poﬁ
->
°øtum_p‹t
);

2811 
buf
[2] = (Ë(
p‹t
 >> 8);

2812 
buf
[3] = (Ë(
p‹t
 & 0xff);

2813 
	`•rötf
(&
buf
[8], "CGMINER");

2817 
öp
 = 
	`öë_addr
(
poﬁ
->
sockaddr_uæ
);

2818 
öp
 = 
	`¡ohl
(inp);

2819 i‡((
ö_addr_t
)
öp
 != -1)

2820 
socks4a
 = 
Ál£
;

2824 
addröfo
 
£rvöfoba£
, *
£rvöfo
, 
höts
;

2826 
£rvöfo
 = (
addröfo
 *Ë&
£rvöfoba£
;

2827 
	`mem£t
(&
höts
, 0, (
addröfo
));

2828 
höts
.
ai_Ámûy
 = 
AF_INET
;

2829 i‡(!
	`gëaddröfo
(
poﬁ
->
sockaddr_uæ
, 
NULL
, &
höts
, &
£rvöfo
))

2831 
sockaddr_ö
 *
ßddr_ö
 = (sockaddr_ö *)
£rvöfo
->
ai_addr
;

2833 
öp
 = 
	`¡ohl
(
ßddr_ö
->
sö_addr
.
s_addr
);

2834 
socks4a
 = 
Ál£
;

2835 
	`‰ìaddröfo
(
£rvöfo
);

2839 i‡(!
socks4a
)

2841 i‡((
ö_addr_t
)
öp
 == -1)

2843 
	`≠∂og
(
LOG_WARNING
, "Invalid IPáddress specified for socks4Öroxy: %s",

2844 
poﬁ
->
sockaddr_uæ
);

2845  
Ál£
;

2847 
buf
[4] = (
öp
 >> 24) & 0xFF;

2848 
buf
[5] = (
öp
 >> 16) & 0xFF;

2849 
buf
[6] = (
öp
 >> 8) & 0xFF;

2850 
buf
[7] = (
öp
 >> 0) & 0xFF;

2851 
	`£nd
(
sockd
, 
buf
, 16, 0);

2857 
buf
[4] = 0;

2858 
buf
[5] = 0;

2859 
buf
[6] = 0;

2860 
buf
[7] = 1;

2861 
Àn
 = 
	`°æí
(
poﬁ
->
sockaddr_uæ
);

2862 i‡(
Àn
 > 255)

2863 
Àn
 = 255;

2864 
	`cg_mem˝y
(&
buf
[16], 
poﬁ
->
sockaddr_uæ
, ()
Àn
);

2865 
Àn
 += 16;

2866 
buf
[
Àn
++] = '\0';

2867 
	`£nd
(
sockd
, 
buf
, 
Àn
, 0);

2870 i‡(
	`ªcv_byã
(
sockd
) != 0x00 ||Ñecv_byte(sockd) != 0x5a)

2872 
	`≠∂og
(
LOG_WARNING
, "BadÑesponse from %s:%s SOCKS4 server",

2873 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
);

2874  
Ál£
;

2877 
i
 = 0; i < 6; i++)

2878 
	`ªcv_byã
(
sockd
);

2880  
åue
;

2881 
	}
}

2883 
	$noblock_sockë
(
SOCKETTYPE
 
fd
)

2886 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

2887 
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
 | 
Êags
);

2889 
	}
}

2891 
	$block_sockë
(
SOCKETTYPE
 
fd
)

2894 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

2895 
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
);

2897 
	}
}

2899 
boﬁ
 
	$sock_c⁄√˘ög
()

2902  
î∫o
 =
EINPROGRESS
;

2904 
	}
}

2905 
boﬁ
 
	$£tup_°øtum_sockë
(
poﬁ
 *pool)

2907 
addröfo
 *
£rvöfo
, 
höts
, *
p
;

2908 *
sockaddr_uæ
, *
sockaddr_p‹t
;

2909 
sockd
;

2911 
	`muãx_lock
(&
poﬁ
->
°øtum_lock
);

2912 
poﬁ
->
°øtum_a˘ive
 = 
Ál£
;

2913 i‡(
poﬁ
->
sock
)

2914 
	`CLOSESOCKET
(
poﬁ
->
sock
);

2915 
poﬁ
->
sock
 = 0;

2916 
	`muãx_u∆ock
(&
poﬁ
->
°øtum_lock
);

2918 
	`mem£t
(&
höts
, 0, (
addröfo
));

2919 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

2920 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

2922 i‡(!
poﬁ
->
Ωc_¥oxy
 && 
›t_socks_¥oxy
)

2924 
poﬁ
->
Ωc_¥oxy
 = 
›t_socks_¥oxy
;

2925 
	`exåa˘_sockaddr
(
poﬁ
->
Ωc_¥oxy
, &poﬁ->
sockaddr_¥oxy_uæ
, &poﬁ->
sockaddr_¥oxy_p‹t
);

2926 
poﬁ
->
Ωc_¥oxyty≥
 = 
PROXY_SOCKS5
;

2929 i‡(
poﬁ
->
Ωc_¥oxy
)

2931 
sockaddr_uæ
 = 
poﬁ
->
sockaddr_¥oxy_uæ
;

2932 
sockaddr_p‹t
 = 
poﬁ
->
sockaddr_¥oxy_p‹t
;

2936 
sockaddr_uæ
 = 
poﬁ
->sockaddr_url;

2937 
sockaddr_p‹t
 = 
poﬁ
->
°øtum_p‹t
;

2939 i‡(
	`gëaddröfo
(
sockaddr_uæ
, 
sockaddr_p‹t
, &
höts
, &
£rvöfo
) != 0)

2941 i‡(!
poﬁ
->
¥obed
)

2943 
	`≠∂og
(
LOG_WARNING
, "FailedÅoÑesolve (?wrong URL) %s:%s",

2944 
sockaddr_uæ
, 
sockaddr_p‹t
);

2945 
poﬁ
->
¥obed
 = 
åue
;

2949 
	`≠∂og
(
LOG_INFO
, "FailedÅo getaddrinfo for %s:%s",

2950 
sockaddr_uæ
, 
sockaddr_p‹t
);

2952  
Ál£
;

2955 
p
 = 
£rvöfo
;Ö !
NULL
;Ö =Ö->
ai_√xt
)

2957 
sockd
 = 
	`sockë
(
p
->
ai_Ámûy
,Ö->
ai_sockty≥
,Ö->
ai_¥Ÿocﬁ
);

2958 i‡(
sockd
 == -1)

2960 
	`≠∂og
(
LOG_DEBUG
, "Failed socket");

2967 
	`noblock_sockë
(
sockd
);

2968 i‡(
	`c⁄√˘
(
sockd
, 
p
->
ai_addr
,Ö->
ai_addæí
) == -1)

2970 
timevÆ
 
tv_timeout
 = {1, 0};

2971 
£Ãë
;

2972 
fd_£t
 
rw
;

2974 i‡(!
	`sock_c⁄√˘ög
())

2976 
	`CLOSESOCKET
(
sockd
);

2977 
	`≠∂og
(
LOG_DEBUG
, "Failed sock connect");

2980 
ªåy
:

2981 
	`FD_ZERO
(&
rw
);

2982 
	`FD_SET
(
sockd
, &
rw
);

2983 
£Ãë
 = 
	`£À˘
(
sockd
 + 1, 
NULL
, &
rw
, NULL, &
tv_timeout
);

2984 i‡(
£Ãë
 > 0 && 
	`FD_ISSET
(
sockd
, &
rw
))

2986 
sockÀn_t
 
Àn
;

2987 
îr
, 
n
;

2989 
Àn
 = (
îr
);

2990 
n
 = 
	`gësock›t
(
sockd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
);

2991 i‡(!
n
 && !
îr
)

2993 
	`≠∂og
(
LOG_DEBUG
, "Succeeded delayed connect");

2994 
	`block_sockë
(
sockd
);

2998 i‡(
£Ãë
 < 0 && 
	`öãºu±ed
())

2999 
ªåy
;

3000 
	`CLOSESOCKET
(
sockd
);

3001 
	`≠∂og
(
LOG_DEBUG
, "SelectÅimeout/failed connect");

3004 
	`≠∂og
(
LOG_WARNING
, "Succeeded immediate connect");

3005 
	`block_sockë
(
sockd
);

3009 i‡(
p
 =
NULL
)

3011 
	`≠∂og
(
LOG_INFO
, "FailedÅo connectÅo stratum on %s:%s",

3012 
sockaddr_uæ
, 
sockaddr_p‹t
);

3013 
	`‰ìaddröfo
(
£rvöfo
);

3014  
Ál£
;

3016 
	`‰ìaddröfo
(
£rvöfo
);

3018 i‡(
poﬁ
->
Ωc_¥oxy
)

3020 
poﬁ
->
Ωc_¥oxyty≥
)

3022 
PROXY_HTTP_1_0
:

3023 i‡(!
	`hâp_√gŸüã
(
poﬁ
, 
sockd
, 
åue
))

3024  
Ál£
;

3026 
PROXY_HTTP
:

3027 i‡(!
	`hâp_√gŸüã
(
poﬁ
, 
sockd
, 
Ál£
))

3028  
Ál£
;

3030 
PROXY_SOCKS5
:

3031 
PROXY_SOCKS5H
:

3032 i‡(!
	`socks5_√gŸüã
(
poﬁ
, 
sockd
))

3033  
Ál£
;

3035 
PROXY_SOCKS4
:

3036 i‡(!
	`socks4_√gŸüã
(
poﬁ
, 
sockd
, 
Ál£
))

3037  
Ál£
;

3039 
PROXY_SOCKS4A
:

3040 i‡(!
	`socks4_√gŸüã
(
poﬁ
, 
sockd
, 
åue
))

3041  
Ál£
;

3044 
	`≠∂og
(
LOG_WARNING
, "UnsupportedÖroxyÅype for %s:%s",

3045 
poﬁ
->
sockaddr_¥oxy_uæ
,Öoﬁ->
sockaddr_¥oxy_p‹t
);

3046  
Ál£
;

3051 i‡(!
poﬁ
->
sockbuf
)

3053 
poﬁ
->
sockbuf
 = 
	`cgˇŒoc
(
RBUFSIZE
, 1);

3054 
poﬁ
->
sockbuf_size
 = 
RBUFSIZE
;

3057 
poﬁ
->
sock
 = 
sockd
;

3058 
	`kìp_sockÆive
(
sockd
);

3059  
åue
;

3060 
	}
}

3062 *
	$gë_£ssi⁄id
(
js⁄_t
 *
vÆ
)

3064 *
ªt
 = 
NULL
;

3065 
js⁄_t
 *
¨r_vÆ
;

3066 
¨rsize
, 
i
;

3068 
¨r_vÆ
 = 
	`js⁄_¨øy_gë
(
vÆ
, 0);

3069 i‡(!
¨r_vÆ
 || !
	`js⁄_is_¨øy
(arr_val))

3070 
out
;

3071 
¨rsize
 = 
	`js⁄_¨øy_size
(
¨r_vÆ
);

3072 
i
 = 0; i < 
¨rsize
; i++)

3074 
js⁄_t
 *
¨r
 = 
	`js⁄_¨øy_gë
(
¨r_vÆ
, 
i
);

3075 *
nŸify
;

3077 i‡(!
¨r
 | !
	`js⁄_is_¨øy
(arr))

3079 
nŸify
 = 
	`__js⁄_¨øy_°rög
(
¨r
, 0);

3080 i‡(!
nŸify
)

3082 i‡(!
	`°∫ˇ£cmp
(
nŸify
, "mining.notify", 13))

3084 
ªt
 = 
	`js⁄_¨øy_°rög
(
¨r
, 1);

3088 
out
:

3089  
ªt
;

3090 
	}
}

3092 
	$su•íd_°øtum
(
poﬁ
 *pool)

3094 
	`≠∂og
(
LOG_INFO
, "Closög sockë f‹ så©umÖoﬁ %d", 
poﬁ
->
poﬁ_no
);

3096 
	`muãx_lock
(&
poﬁ
->
°øtum_lock
);

3097 
	`__su•íd_°øtum
(
poﬁ
);

3098 
	`muãx_u∆ock
(&
poﬁ
->
°øtum_lock
);

3099 
	}
}

3101 
boﬁ
 
	$öôüã_°øtum
(
poﬁ
 *pool)

3103 
boﬁ
 
ªt
 = 
Ál£
, 
ªcvd
 = fÆ£, 
n‹esume
 = fÆ£, 
sockd
 = false;

3104 
s
[
RBUFSIZE
], *
§ë
 = 
NULL
, *
n⁄˚1
, *
£ssi⁄id
;

3105 
js⁄_t
 *
vÆ
 = 
NULL
, *
ªs_vÆ
, *
îr_vÆ
;

3106 
js⁄_îr‹_t
 
îr
;

3107 
n2size
;

3109 
ª£nd
:

3110 i‡(!
	`£tup_°øtum_sockë
(
poﬁ
))

3112 
sockd
 = 
Ál£
;

3113 
out
;

3118 i‡(!
poﬁ
->
°øtum_uæ
)

3120 
poﬁ
->
°øtum_uæ
 =Öoﬁ->
sockaddr_uæ
;

3123 
poﬁ
->
°øtum_a˘ive
 = 
åue
;

3124 
poﬁ
->
√xt_diff
 = 0;

3125 
poﬁ
->
sw‹k
.
diff
 = 1;

3127 
poﬁ
->
£ssi⁄id
 = 
NULL
;

3128 
poﬁ
->
n⁄˚1
 = 
NULL
;

3129 
poﬁ
->
n1_Àn
 = 0;

3131 
	`js⁄_de¸ef
(
vÆ
);

3132  
åue
;

3136 
sockd
 = 
åue
;

3138 i‡(
ªcvd
)

3141 
	`˛ór_sock
(
poﬁ
);

3142 
	`•rötf
(
s
, "{\"id\": %d, \"mëhod\": \"möög.subs¸ibe\", \"∑øms\": []}", 
sw‹k_id
++);

3146 i‡(
poﬁ
->
£ssi⁄id
)

3147 
	`•rötf
(
s
, "{\"id\": %d, \"mëhod\": \"möög.subs¸ibe\", \"∑øms\": [\""
PACKAGE
"/"
VERSION
"\", \"%s\"]}", 
sw‹k_id
++, 
poﬁ
->
£ssi⁄id
);

3149 
	`•rötf
(
s
, "{\"id\": %d, \"mëhod\": \"möög.subs¸ibe\", \"∑øms\": [\""
PACKAGE
"/"
VERSION
"\"]}", 
sw‹k_id
++);

3152 i‡(
	`__°øtum_£nd
(
poﬁ
, 
s
, 
	`°æí
(s)Ë!
SEND_OK
)

3154 
	`≠∂og
(
LOG_DEBUG
, "FailedÅo send s in initiate_stratum");

3155 
out
;

3158 i‡(!
	`sockë_fuŒ
(
poﬁ
, 
DEFAULT_SOCKWAIT
))

3160 
	`≠∂og
(
LOG_DEBUG
, "Timed out waiting forÑesponse in initiate_stratum");

3161 
out
;

3164 
§ë
 = 
	`ªcv_löe
(
poﬁ
);

3165 i‡(!
§ë
)

3166 
out
;

3168 
ªcvd
 = 
åue
;

3170 
vÆ
 = 
	`JSON_LOADS
(
§ë
, &
îr
);

3171 
	`‰ì
(
§ë
);

3172 i‡(!
vÆ
)

3174 
	`≠∂og
(
LOG_INFO
, "JSON decodêÁûed(%d): %s", 
îr
.
löe
,Éº.
ãxt
);

3175 
out
;

3178 
ªs_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "result");

3179 
îr_vÆ
 = 
	`js⁄_obje˘_gë
(
vÆ
, "error");

3181 i‡(!
ªs_vÆ
 || 
	`js⁄_is_nuŒ
(res_val) ||

3182 (
îr_vÆ
 && !
	`js⁄_is_nuŒ
(err_val)))

3184 *
ss
;

3186 i‡(
îr_vÆ
)

3187 
ss
 = 
	`js⁄_dumps
(
îr_vÆ
, 
	`JSON_INDENT
(3));

3189 
ss
 = 
	`°rdup
("(unknownÑeason)");

3191 
	`≠∂og
(
LOG_INFO
, "JSON-RPC decodêÁûed: %s", 
ss
);

3193 
	`‰ì
(
ss
);

3195 
out
;

3198 
£ssi⁄id
 = 
	`gë_£ssi⁄id
(
ªs_vÆ
);

3199 i‡(!
£ssi⁄id
)

3200 
	`≠∂og
(
LOG_DEBUG
, "FailedÅo get sessionid in initiate_stratum");

3201 
n⁄˚1
 = 
	`js⁄_¨øy_°rög
(
ªs_vÆ
, 1);

3202 i‡(!
	`vÆid_hex
(
n⁄˚1
))

3204 
	`≠∂og
(
LOG_INFO
, "FailedÅo get validÇonce1 in initiate_stratum");

3205 
	`‰ì
(
£ssi⁄id
);

3206 
out
;

3208 
n2size
 = 
	`js⁄_öãgî_vÆue
(
	`js⁄_¨øy_gë
(
ªs_vÆ
, 2));

3209 i‡(
n2size
 < 2 ||Ç2size > 16)

3211 
	`≠∂og
(
LOG_INFO
, "FailedÅo get validÇ2size in initiate_stratum");

3212 
	`‰ì
(
£ssi⁄id
);

3213 
	`‰ì
(
n⁄˚1
);

3214 
out
;

3217 i‡(
£ssi⁄id
 && 
poﬁ
->£ssi⁄id && !
	`°rcmp
(sessionid,Öool->sessionid)) {

3218 
	`≠∂og
(
LOG_NOTICE
, "Pool %d successfullyÇegotiatedÑesume withÅhe same session ID",

3219 
poﬁ
->
poﬁ_no
);

3222 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

3223 
	`‰ì
(
poﬁ
->
n⁄˚1
);

3224 
	`‰ì
(
poﬁ
->
£ssi⁄id
);

3225 
poﬁ
->
£ssi⁄id
 = sessionid;

3226 
poﬁ
->
n⁄˚1
 =Çonce1;

3227 
poﬁ
->
n1_Àn
 = 
	`°æí
(
n⁄˚1
) / 2;

3228 
	`‰ì
(
poﬁ
->
n⁄˚1bö
);

3229 
poﬁ
->
n⁄˚1bö
 = 
	`cgˇŒoc
’oﬁ->
n1_Àn
, (
size_t
)1);

3230 
	`hex2bö
(
poﬁ
->
n⁄˚1bö
,Öoﬁ->
n⁄˚1
,Öoﬁ->
n1_Àn
);

3231 
poﬁ
->
n2size
 =Ç2size;

3232 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

3234 i‡(
£ssi⁄id
)

3235 
	`≠∂og
(
LOG_DEBUG
, "Poﬁ %d så©um sessi⁄ id: %s", 
poﬁ
->
poﬁ_no
,Öoﬁ->
£ssi⁄id
);

3237 
ªt
 = 
åue
;

3238 
out
:

3239 i‡(
ªt
)

3241 i‡(!
poﬁ
->
°øtum_uæ
)

3243 
poﬁ
->
°øtum_uæ
 =Öoﬁ->
sockaddr_uæ
;

3245 
poﬁ
->
°øtum_a˘ive
 = 
åue
;

3246 
poﬁ
->
√xt_diff
 = 0;

3247 
poﬁ
->
sdiff
 = 1;

3248 i‡(
›t_¥Ÿocﬁ
)

3250 
	`≠∂og
(
LOG_NOTICE
, "Poﬁ %d c⁄fúmed möög.subs¸ibêwôhÉxå™⁄˚1 %†exå™2sizê%d", 
poﬁ
->
poﬁ_no
,Öoﬁ->
n⁄˚1
,Öoﬁ->
n2size
);

3255 i‡(
ªcvd
 && !
n‹esume
)

3260 
	`cg_wlock
(&
poﬁ
->
d©a_lock
);

3261 
	`‰ì
(
poﬁ
->
£ssi⁄id
);

3262 
	`‰ì
(
poﬁ
->
n⁄˚1
);

3263 
poﬁ
->
£ssi⁄id
 =Öoﬁ->
n⁄˚1
 = 
NULL
;

3264 
	`cg_wu∆ock
(&
poﬁ
->
d©a_lock
);

3266 
	`≠∂og
(
LOG_DEBUG
, "FailedÅoÑesume stratum,Åryingáfresh");

3267 
n‹esume
 = 
åue
;

3268 
	`js⁄_de¸ef
(
vÆ
);

3269 
ª£nd
;

3271 
	`≠∂og
(
LOG_DEBUG
, "Initiate stratum failed");

3272 i‡(
sockd
)

3273 
	`su•íd_°øtum
(
poﬁ
);

3276 
	`js⁄_de¸ef
(
vÆ
);

3277  
ªt
;

3278 
	}
}

3280 
boﬁ
 
	$ª°¨t_°øtum
(
poﬁ
 *pool)

3282 
boﬁ
 
ªt
 = 
Ál£
;

3284 i‡(
poﬁ
->
°øtum_a˘ive
)

3285 
	`su•íd_°øtum
(
poﬁ
);

3286 i‡(!
	`öôüã_°øtum
(
poﬁ
))

3287 
out
;

3288 i‡(
poﬁ
->
exå™⁄˚_subs¸ibe
 && !
	`subs¸ibe_exå™⁄˚
(pool))

3289 
out
;

3290 i‡(!
	`auth_°øtum
(
poﬁ
))

3291 
out
;

3293 
ªt
 = 
åue
;

3294 
out
:

3295 i‡(!
ªt
)

3296 
	`poﬁ_dõd
(
poﬁ
);

3298 
	`°øtum_ªsumed
(
poﬁ
);

3299  
ªt
;

3300 
	}
}

3302 
	$dev_îr‹
(
cgpu_öfo
 *
dev
, 
dev_ªas⁄
 
ªas⁄
)

3304 
dev
->
devi˚_œ°_nŸ_wñl
 = 
	`time
(
NULL
);

3305 
dev
->
devi˚_nŸ_wñl_ªas⁄
 = 
ªas⁄
;

3307 
ªas⁄
)

3309 
REASON_THREAD_FAIL_INIT
:

3310 
dev
->
thªad_Áû_öô_cou¡
++;

3312 
REASON_THREAD_ZERO_HASH
:

3313 
dev
->
thªad_zîo_hash_cou¡
++;

3315 
REASON_THREAD_FAIL_QUEUE
:

3316 
dev
->
thªad_Áû_queue_cou¡
++;

3318 
REASON_DEV_SICK_IDLE_60
:

3319 
dev
->
dev_sick_idÀ_60_cou¡
++;

3321 
REASON_DEV_DEAD_IDLE_600
:

3322 
dev
->
dev_dód_idÀ_600_cou¡
++;

3324 
REASON_DEV_NOSTART
:

3325 
dev
->
dev_no°¨t_cou¡
++;

3327 
REASON_DEV_OVER_HEAT
:

3328 
dev
->
dev_ovî_hót_cou¡
++;

3330 
REASON_DEV_THERMAL_CUTOFF
:

3331 
dev
->
dev_thîmÆ_cutoff_cou¡
++;

3333 
REASON_DEV_COMMS_ERROR
:

3334 
dev
->
dev_comms_îr‹_cou¡
++;

3336 
REASON_DEV_THROTTLE
:

3337 
dev
->
dev_thrŸée_cou¡
++;

3340 
	}
}

3343 *
	$ªÆloc_°rˇt
(*
±r
, *
s
)

3345 
size_t
 
ﬁd
 = 0, 
Àn
 = 
	`°æí
(
s
);

3346 *
ªt
;

3348 i‡(!
Àn
)

3349  
±r
;

3350 i‡(
±r
)

3351 
ﬁd
 = 
	`°æí
(
±r
);

3353 
Àn
 +
ﬁd
 + 1;

3354 
	`Æign_Àn
(&
Àn
);

3356 
ªt
 = 
	`cgmÆloc
(
Àn
);

3358 i‡(
±r
)

3360 
	`•rötf
(
ªt
, "%s%s", 
±r
, 
s
);

3361 
	`‰ì
(
±r
);

3364 
	`•rötf
(
ªt
, "%s", 
s
);

3365  
ªt
;

3366 
	}
}

3371 *
	$°r_ãxt
(*
±r
)

3373 *
u±r
;

3374 *
ªt
, *
txt
;

3376 i‡(
±r
 =
NULL
)

3378 
ªt
 = 
	`°rdup
("(null)");

3380 i‡(
	`u∆ikñy
(!
ªt
))

3381 
	`quôhîe
(1, "FailedÅo mallocÇull");

3384 
u±r
 = (*)
±r
;

3386 
ªt
 = 
txt
 = 
	`cgmÆloc
(
	`°æí
(
±r
) * 4 + 5);

3390 i‡(*
u±r
 < ' ' || *uptr > '~')

3392 
	`•rötf
(
txt
, "0x%02x", *
u±r
);

3393 
txt
 += 4;

3396 *(
txt
++Ë*
u±r
;

3398 *(
u±r
++));

3400 *
txt
 = '\0';

3402  
ªt
;

3403 
	}
}

3405 
	$RíameThªad
(c⁄° * 
«me
)

3407 
buf
[16];

3409 
	`¢¥ötf
(
buf
, (buf), "cg@%s", 
«me
);

3410 #i‡
	`deföed
(
PR_SET_NAME
)

3412 
	`¥˘l
(
PR_SET_NAME
, 
buf
, 0, 0, 0);

3413 #ñi‡(
	`deföed
(
__FªeBSD__
Ë|| deföed(
__O≥nBSD__
))

3414 
	`±hªad_£t_«me_≈
(
	`±hªad_£lf
(), 
buf
);

3415 #ñi‡
	`deföed
(
MAC_OSX
)

3416 
	`±hªad_£äame_≈
(
buf
);

3419 ()
buf
;

3421 
	}
}

3426 #ifde‡
__APPLE__


3427 
	$_cg£m_öô
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3429 
Êags
, 
fd
, 
i
;

3431 i‡(
	`pùe
(
cg£m
->
pùefd
) == -1)

3432 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÖùêî∫o=%d", 
î∫o
);

3436 
i
 = 0; i < 2; i++)

3438 
fd
 = 
cg£m
->
pùefd
[
i
];

3439 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFD
, 0);

3440 
Êags
 |
FD_CLOEXEC
;

3441 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
Êags
) == -1)

3442 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÅÿf˙éÉºno=%d", 
î∫o
);

3444 
	}
}

3446 
	$_cg£m_po°
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3448 c⁄° 
buf
 = 1;

3449 
ªt
;

3451 
ªåy
:

3452 
ªt
 = 
	`wrôe
(
cg£m
->
pùefd
[1], &
buf
, 1);

3453 i‡(
	`u∆ikñy
(
ªt
 == 0))

3454 
	`≠∂og
(
LOG_WARNING
, "FaûedÅÿwrôêî∫o=%d" 
IN_FMT_FFL
, 
î∫o
, 
fûe
, 
func
, 
löe
);

3455 i‡(
	`u∆ikñy
(
ªt
 < 0 && 
öãºu±ed
))

3456 
ªåy
;

3457 
	}
}

3459 
	$_cg£m_waô
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3461 
buf
;

3462 
ªt
;

3463 
ªåy
:

3464 
ªt
 = 
	`ªad
(
cg£m
->
pùefd
[0], &
buf
, 1);

3465 i‡(
	`u∆ikñy
(
ªt
 == 0))

3466 
	`≠∂og
(
LOG_WARNING
, "FaûedÅÿªadÉºno=%d" 
IN_FMT_FFL
, 
î∫o
, 
fûe
, 
func
, 
löe
);

3467 i‡(
	`u∆ikñy
(
ªt
 < 0 && 
öãºu±ed
))

3468 
ªåy
;

3469 
	}
}

3471 
	$cg£m_de°roy
(
cg£m_t
 *
cg£m
)

3473 
	`˛o£
(
cg£m
->
pùefd
[1]);

3474 
	`˛o£
(
cg£m
->
pùefd
[0]);

3475 
	}
}

3478 
	$_cg£m_mswaô
(
cg£m_t
 *
cg£m
, 
ms
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3480 
timevÆ
 
timeout
;

3481 
ªt
, 
fd
;

3482 
fd_£t
 
rd
;

3483 
buf
;

3485 
ªåy
:

3486 
fd
 = 
cg£m
->
pùefd
[0];

3487 
	`FD_ZERO
(&
rd
);

3488 
	`FD_SET
(
fd
, &
rd
);

3489 
	`ms_to_timevÆ
(&
timeout
, 
ms
);

3490 
ªt
 = 
	`£À˘
(
fd
 + 1, &
rd
, 
NULL
, NULL, &
timeout
);

3492 i‡(
ªt
 > 0)

3494 
ªt
 = 
	`ªad
(
fd
, &
buf
, 1);

3497 i‡(
	`likñy
(!
ªt
))

3498  
ETIMEDOUT
;

3499 i‡(
	`öãºu±ed
())

3500 
ªåy
;

3501 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÅÿ£m_timedwaôÉºno=%d cg£m=0x%p", 
î∫o
, 
cg£m
);

3504 
	}
}

3507 
	$cg£m_ª£t
(
cg£m_t
 *
cg£m
)

3509 
ªt
, 
fd
;

3510 
fd_£t
 
rd
;

3511 
buf
;

3513 
fd
 = 
cg£m
->
pùefd
[0];

3514 
	`FD_ZERO
(&
rd
);

3515 
	`FD_SET
(
fd
, &
rd
);

3518 
timevÆ
 
timeout
 = {0, 0};

3520 
ªt
 = 
	`£À˘
(
fd
 + 1, &
rd
, 
NULL
, NULL, &
timeout
);

3521 i‡(
ªt
 > 0)

3522 
ªt
 = 
	`ªad
(
fd
, &
buf
, 1);

3523 i‡(
	`u∆ikñy
(
ªt
 < 0 && 
	`öãºu±ed
()))

3524 
ªt
 = 1;

3526 
ªt
 > 0);

3527 
	}
}

3529 
	$_cg£m_öô
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3531 
ªt
;

3532 i‡((
ªt
 = 
	`£m_öô
(
cg£m
, 0, 0)))

3533 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÅÿ£m_öôÑë=%dÉºno=%d", 
ªt
, 
î∫o
);

3534 
	}
}

3536 
	$_cg£m_po°
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3538 i‡(
	`u∆ikñy
(
	`£m_po°
(
cg£m
)))

3539 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÅÿ£m_po°Éºno=%d cg£m=0x%p", 
î∫o
, 
cg£m
);

3540 
	}
}

3542 
	$_cg£m_waô
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3544 
ªåy
:

3545 i‡(
	`u∆ikñy
(
	`£m_waô
(
cg£m
)))

3547 i‡(
	`öãºu±ed
())

3548 
ªåy
;

3549 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÅÿ£m_waôÉºno=%d cg£m=0x%p", 
î∫o
, 
cg£m
);

3551 
	}
}

3553 
	$_cg£m_mswaô
(
cg£m_t
 *
cg£m
, 
ms
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3555 
time•ec
 
abs_timeout
, 
ts_now
;

3556 
timevÆ
 
tv_now
;

3557 
ªt
;

3559 
	`cgtime
(&
tv_now
);

3560 
	`timevÆ_to_•ec
(&
ts_now
, &
tv_now
);

3561 
	`ms_to_time•ec
(&
abs_timeout
, (
öt64_t
)
ms
);

3562 
ªåy
:

3563 
	`timîadd•ec
(&
abs_timeout
, &
ts_now
);

3564 
ªt
 = 
	`£m_timedwaô
(
cg£m
, &
abs_timeout
);

3566 i‡(
ªt
)

3568 i‡(
	`likñy
(
	`sock_timeout
()))

3569  
ETIMEDOUT
;

3570 i‡(
	`öãºu±ed
())

3571 
ªåy
;

3572 
	`quô‰om
(1, 
fûe
, 
func
, 
löe
, "FaûedÅÿ£m_timedwaôÉºno=%d cg£m=0x%p", 
î∫o
, 
cg£m
);

3575 
	}
}

3577 
	$cg£m_ª£t
(
cg£m_t
 *
cg£m
)

3579 
ªt
;

3583 
ªt
 = 
	`£m_åywaô
(
cg£m
);

3584 i‡(
	`u∆ikñy
(
ªt
 < 0 && 
	`öãºu±ed
()))

3585 
ªt
 = 0;

3587 !
ªt
);

3588 
	}
}

3590 
	$cg£m_de°roy
(
cg£m_t
 *
cg£m
)

3592 
	`£m_de°roy
(
cg£m
);

3593 
	}
}

3599 
	scg_com∂ëi⁄


3601 
cg£m_t
 
	mcg£m
;

3602 (*
	m‚
)(*
	m‚¨g
);

3603 *
	m‚¨g
;

3606 *
	$com∂ëi⁄_thªad
(*
¨g
)

3608 
cg_com∂ëi⁄
 *
cgc
 = (cg_com∂ëi⁄ *)
¨g
;

3610 
	`±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, 
NULL
);

3611 
cgc
->
	`‚
(cgc->
‚¨g
);

3612 
	`cg£m_po°
(&
cgc
->
cg£m
);

3614  
NULL
;

3615 
	}
}

3617 
boﬁ
 
	$cg_com∂ëi⁄_timeout
(*
‚
, *
‚¨g
, 
timeout
)

3619 
cg_com∂ëi⁄
 *
cgc
;

3620 
±hªad_t
 
±hªad
;

3621 
boﬁ
 
ªt
 = 
Ál£
;

3623 
cgc
 = 
	`cgmÆloc
((
cg_com∂ëi⁄
));

3624 
	`cg£m_öô
(&
cgc
->
cg£m
);

3625 
cgc
->
‚
 = fn;

3626 
cgc
->
‚¨g
 = fnarg;

3628 
	`±hªad_¸óã
(&
±hªad
, 
NULL
, 
com∂ëi⁄_thªad
, (*)
cgc
);

3630 
ªt
 = 
	`cg£m_mswaô
(&
cgc
->
cg£m
, 
timeout
);

3631 i‡(!
ªt
)

3633 
	`±hªad_joö
(
±hªad
, 
NULL
);

3634 
	`‰ì
(
cgc
);

3637 
	`±hªad_ˇn˚l
(
±hªad
);

3638  !
ªt
;

3639 
	}
}

3641 
	$_cg_mem˝y
(*
de°
, c⁄° *
§c
, 
n
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
)

3643 i‡(
	`u∆ikñy
(
n
 < 1 ||Ç > (1ul << 31)))

3645 
	`≠∂og
(
LOG_ERR
, "ERR: AskedÅo memcpy %u bytes from %s %s():%d",

3646 
n
, 
fûe
, 
func
, 
löe
);

3649 i‡(
	`u∆ikñy
(!
de°
)) {

3650 
	`≠∂og
(
LOG_ERR
, "ERR: AskedÅo memcpy %u bytesÅo NULL from %s %s():%d",

3651 
n
, 
fûe
, 
func
, 
löe
);

3654 i‡(
	`u∆ikñy
(!
§c
)) {

3655 
	`≠∂og
(
LOG_ERR
, "ERR: AskedÅo memcpy %u bytes from NULL from %s %s():%d",

3656 
n
, 
fûe
, 
func
, 
löe
);

3659 
	`mem˝y
(
de°
, 
§c
, 
n
);

3660 
	}
}

3662 
	$cg_timevÆ_subåa˘
(
timevÆ
* 
ªsu…
, timevÆ* 
x
, timevÆ* 
y
)

3664 
n£c
 = 0;

3665 if(
x
->
tv_£c
 > 
y
->tv_sec)

3668 if((
x
->
tv_£c
 =
y
->tv_£cË&& (x->
tv_u£c
 > y->tv_usec))

3671 
ªsu…
->
tv_£c
 = (
y
->tv_£¯- 
x
->tv_sec);

3672 
ªsu…
->
tv_u£c
 = (
y
->tv_u£¯- 
x
->tv_usec);

3674 if(
ªsu…
->
tv_u£c
 < 0)

3676 
ªsu…
->
tv_£c
--;

3677 
ªsu…
->
tv_u£c
 += 1000000;

3680 
	}
}

3682 
	$ªv
(*
s
, 
size_t
 
l
)

3684 
size_t
 
i
, 
j
;

3685 
t
;

3687 
i
 = 0, 
j
 = 
l
 - 1; i < j; i++, j--) {

3688 
t
 = 
s
[
i
];

3689 
s
[
i
] = s[
j
];

3690 
s
[
j
] = 
t
;

3692 
	}
}

3694 
	$check_asi˙um
(
asic_num
, 
n⁄˚
)

3696 
asic_num
)

3701 
n⁄˚
 & 0x80)

3707 
n⁄˚
 & 0xC0)

3715 
n⁄˚
 & 0xE0)

3727 
n⁄˚
 & 0xF0)

3747 
n⁄˚
 & 0xF8)

3783 
n⁄˚
 & 0xFC)

3853 
	}
}

3855 
	$cg_logw‹k
(
w‹k
 *w‹k, *
n⁄˚_bö
, 
boﬁ
 
ok
)

3857 if(
›t_logw‹k_∑th
)

3859 
szmsg
[1024] = {0};

3860 
mid°©e_tmp
[32] = {0};

3861 
d©a_tmp
[32] = {0};

3862 
hash_tmp
[32] = {0};

3863 * 
szw‹kd©a
 = 
NULL
;

3864 * 
szmid°©e
 = 
NULL
;

3865 * 
szd©a
 = 
NULL
;

3866 * 
szn⁄˚4
 = 
NULL
;

3867 * 
szn⁄˚5
 = 
NULL
;

3868 * 
szhash
 = 
NULL
;

3869 
asi˙um
 = 0;

3870 
uöt64_t
 
w‹ksh¨ediff
 = 0;

3871 
	`mem˝y
(
mid°©e_tmp
, 
w‹k
->
mid°©e
, 32);

3872 
	`mem˝y
(
d©a_tmp
, 
w‹k
->
d©a
+64, 12);

3873 
	`mem˝y
(
hash_tmp
, 
w‹k
->
hash
, 32);

3874 
	`ªv
((*)
mid°©e_tmp
, (
size_t
)32);

3875 
	`ªv
((*)
d©a_tmp
, (
size_t
)12);

3876 
	`ªv
((*)
hash_tmp
, (
size_t
)32);

3877 
szw‹kd©a
 = 
	`bö2hex
((*)
w‹k
->
d©a
, (
size_t
)128);

3878 
szmid°©e
 = 
	`bö2hex
((*)
mid°©e_tmp
, (
size_t
)32);

3879 
szd©a
 = 
	`bö2hex
((*)
d©a_tmp
, (
size_t
)12);

3880 
szn⁄˚4
 = 
	`bö2hex
((*)
n⁄˚_bö
, (
size_t
)4);

3881 
szn⁄˚5
 = 
	`bö2hex
((*)
n⁄˚_bö
, (
size_t
)5);

3882 
szhash
 = 
	`bö2hex
((*)
hash_tmp
, (
size_t
)32);

3883 
w‹ksh¨ediff
 = 
	`sh¨e_ndiff
(
w‹k
);

3884 
	`•rötf
(
szmsg
, "%†%08x mid°©ê%†d©®%†n⁄˚ %†hash %†dif‡%I64d", 
ok
?"o":"x", 
w‹k
->
id
, 
szmid°©e
, 
szd©a
, 
szn⁄˚5
, 
szhash
, 
w‹ksh¨ediff
);

3885 if(
	`°rcmp
(
›t_logw‹k_∑th
, "screen") == 0)

3887 
	`≠∂og
(
LOG_ERR
, 
szmsg
);

3891 
	`≠∂og
(
LOG_ERR
, 
szmsg
);

3892 if(
g_logw‹k_fûe
)

3894 
	`•rötf
(
szmsg
, "%†%08x w‹k %†mid°©ê%†d©®%†n⁄˚ %†hash %†dif‡%I64d", 
ok
?"o":"x", 
w‹k
->
id
, 
szw‹kd©a
, 
szmid°©e
, 
szd©a
, 
szn⁄˚5
, 
szhash
, 
w‹ksh¨ediff
);

3896 
	`fwrôe
(
szmsg
, 
	`°æí
(szmsg), 1, 
g_logw‹k_fûe
);

3897 
	`fwrôe
("\n", 1, 1, 
g_logw‹k_fûe
);

3898 
	`fÊush
(
g_logw‹k_fûe
);

3900 if(
ok
)

3902 if(
g_logw‹k_asi˙um
 == 1)

3904 
	`•rötf
(
szmsg
, "mid°©ê%†d©®%†n⁄˚ %†hash %s", 
szmid°©e
, 
szd©a
, 
szn⁄˚4
, 
szhash
);

3905 
	`fwrôe
(
szmsg
, 
	`°æí
(szmsg), 1, 
g_logw‹k_fûes
[0]);

3906 
	`fwrôe
("\n", 1, 1, 
g_logw‹k_fûes
[0]);

3907 
	`fÊush
(
g_logw‹k_fûes
[0]);

3909 if(
g_logw‹k_asi˙um
 == 32 || g_logwork_asicnum == 64)

3911 
	`•rötf
(
szmsg
, "mid°©ê%†d©®%†n⁄˚ %†hash %s", 
szmid°©e
, 
szd©a
, 
szn⁄˚4
, 
szhash
);

3912 
asi˙um
 = 
	`check_asi˙um
(
g_logw‹k_asi˙um
, 
n⁄˚_bö
[0]);

3913 
	`fwrôe
(
szmsg
, 
	`°æí
(szmsg), 1, 
g_logw‹k_fûes
[
asi˙um
]);

3914 
	`fwrôe
("\n", 1, 1, 
g_logw‹k_fûes
[
asi˙um
]);

3915 
	`fÊush
(
g_logw‹k_fûes
[
asi˙um
]);

3918 if(
›t_logw‹k_diff
)

3920 
dif‚um
 = 0;

3921 
uöt64_t
 
dif·mp
 = 
w‹ksh¨ediff
;

3924 
dif·mp
 = difftmp >> 1;

3925 if(
dif·mp
 > 0)

3927 
dif‚um
++;

3928 if(
dif‚um
 >= 64)

3938 
	`≠∂og
(
LOG_DEBUG
, "w‹k dif‡%I64d dif‚um %d", 
w‹ksh¨ediff
, 
dif‚um
);

3939 
	`•rötf
(
szmsg
, "mid°©ê%†d©®%†n⁄˚ %†hash %s", 
szmid°©e
, 
szd©a
, 
szn⁄˚4
, 
szhash
);

3940 
	`fwrôe
(
szmsg
, 
	`°æí
(szmsg), 1, 
g_logw‹k_diffs
[
dif‚um
]);

3941 
	`fwrôe
("\n", 1, 1, 
g_logw‹k_diffs
[
dif‚um
]);

3942 
	`fÊush
(
g_logw‹k_diffs
[
dif‚um
]);

3947 if(
szw‹kd©a
Ë
	`‰ì
(szworkdata);

3948 if(
szmid°©e
Ë
	`‰ì
(szmidstate);

3949 if(
szd©a
Ë
	`‰ì
(szdata);

3950 if(
szn⁄˚4
Ë
	`‰ì
(sznonce4);

3951 if(
szn⁄˚5
Ë
	`‰ì
(sznonce5);

3952 if(
szhash
Ë
	`‰ì
(szhash);

3954 
	}
}

3956 
	$cg_logw‹k_uöt32
(
w‹k
 *w‹k, 
uöt32_t
 
n⁄˚
, 
boﬁ
 
ok
)

3958 if(
›t_logw‹k_∑th
)

3960 
n⁄˚_bö
[5] = {0};

3961 
	`mem˝y
(
n⁄˚_bö
, &
n⁄˚
, 4);

3962 
	`cg_logw‹k
(
w‹k
, 
n⁄˚_bö
, 
ok
);

3964 
	}
}

	@util.h

1 #i‚de‡
__UTIL_H__


2 
	#__UTIL_H__


	)

4 
	~<£m≠h‹e.h
>

6 #i‡
deföed
(
unix
Ë|| deföed(
__APPLE__
)

7 
	~<î∫o.h
>

8 
	~<sys/sockë.h
>

9 
	~<√töë/ö.h
>

10 
	~<¨∑/öë.h
>

12 
	#SOCKETTYPE
 

	)

13 
	#SOCKETFAIL
(
a
Ë(◊Ë< 0)

	)

14 
	#INVSOCK
 -1

	)

15 
	#INVINETADDR
 -1

	)

16 
	#CLOSESOCKET
 
˛o£


	)

17 
	#INET_PTON
 
öë_±⁄


	)

19 
	#SOCKERRMSG
 
	`°ªº‹
(
î∫o
)

	)

20 
ölöe
 
boﬁ
 
	$sock_blocks
()

22  (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
);

23 
	}
}

24 
ölöe
 
boﬁ
 
	$sock_timeout
()

26  (
î∫o
 =
ETIMEDOUT
);

27 
	}
}

28 
ölöe
 
boﬁ
 
	$öãºu±ed
()

30  (
î∫o
 =
EINTR
);

31 
	}
}

32 #ñi‡
deföed
 
WIN32


33 
	~<wösock2.h
>

34 
	~<ws2t˝ù.h
>

36 
	#SOCKETTYPE
 
SOCKET


	)

37 
	#SOCKETFAIL
(
a
Ë(()◊Ë=
SOCKET_ERROR
)

	)

38 
	#INVSOCK
 
INVALID_SOCKET


	)

39 
	#INVINETADDR
 
INADDR_NONE


	)

40 
	#CLOSESOCKET
 
˛o£sockë


	)

42 
I√t_Pt⁄
(
af
, c⁄° *
§c
, *
d°
);

43 
	#INET_PTON
 
I√t_Pt⁄


	)

45 *
WSAEº‹Msg
();

46 
	#SOCKERRMSG
 
	`WSAEº‹Msg
()

	)

50 
ölöe
 
boﬁ
 
	$sock_blocks
()

52  (
	`WSAGëLa°Eº‹
(Ë=
WSAEWOULDBLOCK
 || 
î∫o
 =
EAGAIN
);

53 
	}
}

54 
ölöe
 
boﬁ
 
	$sock_timeout
()

56  (
	`WSAGëLa°Eº‹
(Ë=
WSAETIMEDOUT
 || 
î∫o
 =
ETIMEDOUT
);

57 
	}
}

58 
ölöe
 
boﬁ
 
	$öãºu±ed
()

60  (
	`WSAGëLa°Eº‹
(Ë=
WSAEINTR
 || 
î∫o
 =
EINTR
);

61 
	}
}

62 #i‚de‡
SHUT_RDWR


63 
	#SHUT_RDWR
 
SD_BOTH


	)

66 #i‚de‡
ö_addr_t


67 
	#ö_addr_t
 
uöt32_t


	)

71 
	#JSON_LOADS
(
°r
, 
îr_±r
Ë
	`js⁄_lﬂds
((°r), 0, (îr_±r))

	)

73 #ifde‡
HAVE_LIBCURL


74 
	~<cuæ/cuæ.h
>

75 
cuæ_¥oxyty≥
 
	t¥oxyty≥s_t
;

77 
	t¥oxyty≥s_t
;

81 
	scglock
 {

82 
±hªad_muãx_t
 
	mmuãx
;

83 
±hªad_rwlock_t
 
	mrwlock
;

86 
cglock
 
	tcglock_t
;

90 #ifde‡
__APPLE__


91 
	scg£m
 {

92 
	mpùefd
[2];

95 
cg£m
 
	tcg£m_t
;

97 
£m_t
 
	tcg£m_t
;

99 #ifde‡
WIN32


100 
LARGE_INTEGER
 
	tcgtimî_t
;

102 
time•ec
 
	tcgtimî_t
;

105 
no_yõld
();

106 (*
£À˘ive_yõld
)();

107 *
	`_cgmÆloc
(
size
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

108 *
	`_cgˇŒoc
(
memb
, 
size_t
 
size
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

109 *
	`_cgªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

110 
	#cgmÆloc
(
_size
Ë
	`_cgmÆloc
(_size, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

111 
	#cgˇŒoc
(
_memb
, 
_size
Ë
	`_cgˇŒoc
(_memb, _size, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

112 
	#cgªÆloc
(
_±r
, 
_size
Ë
	`_cgªÆloc
(_±r, _size, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

113 
thr_öfo
;

114 
poﬁ
;

115 
dev_ªas⁄
;

116 
cgpu_öfo
;

117 
	`b58tobö
(*
b58bö
, c⁄° *
b58
);

118 
	`addªss_to_pubkeyhash
(*
pkh
, c⁄° *
addr
);

119 
	`£r_numbî
(*
s
, 
öt32_t
 
vÆ
);

120 *
	`£r_°rög
(*
s
, *
¶í
);

121 
	`thr_öfo_¸óã
(
thr_öfo
 *
thr
, 
±hªad_©å_t
 *
©å
, *(*
°¨t
Ë(*), *
¨g
);

122 
	`thr_öfo_ˇn˚l
(
thr_öfo
 *
thr
);

123 
	`cgtime
(
timevÆ
 *
tv
);

124 
	`subtime
(
timevÆ
 *
a
, timevÆ *
b
);

125 
	`addtime
(
timevÆ
 *
a
, timevÆ *
b
);

126 
boﬁ
 
	`time_m‹e
(
timevÆ
 *
a
, timevÆ *
b
);

127 
boﬁ
 
	`time_Àss
(
timevÆ
 *
a
, timevÆ *
b
);

128 
	`c›y_time
(
timevÆ
 *
de°
, c⁄° timevÆ *
§c
);

129 
	`time•ec_to_vÆ
(
timevÆ
 *
vÆ
, c⁄° 
time•ec
 *
•ec
);

130 
	`timevÆ_to_•ec
(
time•ec
 *
•ec
, c⁄° 
timevÆ
 *
vÆ
);

131 
	`us_to_timevÆ
(
timevÆ
 *
vÆ
, 
öt64_t
 
us
);

132 
	`us_to_time•ec
(
time•ec
 *
•ec
, 
öt64_t
 
us
);

133 
	`ms_to_time•ec
(
time•ec
 *
•ec
, 
öt64_t
 
ms
);

134 
	`timîadd•ec
(
time•ec
 *
a
, c⁄° time•e¯*
b
);

135 *
	`Såˇ£°r
(*
hay°ack
, c⁄° *
√edÀ
);

136 *
	`Så£p
(**
°rögp
, c⁄° *
dñim
);

137 
	`cg¶ìp_ms
(
ms
);

138 
	`cg¶ìp_us
(
öt64_t
 
us
);

139 
	`cgtimî_time
(
cgtimî_t
 *
ts_°¨t
);

140 
	#cg¶ìp_¥ï¨e_r
(
ts_°¨t
Ë
	`cgtimî_time
—s_°¨t)

	)

141 
	`cg¶ìp_ms_r
(
cgtimî_t
 *
ts_°¨t
, 
ms
);

142 
	`cg¶ìp_us_r
(
cgtimî_t
 *
ts_°¨t
, 
öt64_t
 
us
);

143 
	`cgtimî_to_ms
(
cgtimî_t
 *
cgt
);

144 
	`cgtimî_sub
(
cgtimî_t
 *
a
, cgtimî_à*
b
, cgtimî_à*
ªs
);

145 
	`us_tdiff
(
timevÆ
 *
íd
, timevÆ *
°¨t
);

146 
	`ms_tdiff
(
timevÆ
 *
íd
, timevÆ *
°¨t
);

147 
	`tdiff
(
timevÆ
 *
íd
, timevÆ *
°¨t
);

148 
boﬁ
 
	`°øtum_£nd
(
poﬁ
 *poﬁ, *
s
, 
ssize_t
 
Àn
);

149 
boﬁ
 
	`sock_fuŒ
(
poﬁ
 *pool);

150 
	`_ªˇŒoc
(**
±r
, 
size_t
 
ﬁd
, size_à
√ws
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

151 
	#ªˇŒoc
(
±r
, 
ﬁd
, 
√w
Ë
	`_ªˇŒoc
((*)&’å), old,Çew, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

152 *
	`ªcv_löe
(
poﬁ
 *pool);

153 
boﬁ
 
	`∑r£_mëhod
(
poﬁ
 *poﬁ, *
s
);

154 
	`check_exå™⁄˚_›ti⁄
(
poﬁ
 *poﬁ, * 
uæ
);

155 
boﬁ
 
	`exåa˘_sockaddr
(*
uæ
, **
sockaddr_uæ
, **
sockaddr_p‹t
);

156 
	`exå™⁄˚_subs¸ibe_°øtum
(
poﬁ
 *pool);

157 
boﬁ
 
	`auth_°øtum
(
poﬁ
 *pool);

158 
boﬁ
 
	`öôüã_°øtum
(
poﬁ
 *pool);

159 
boﬁ
 
	`ª°¨t_°øtum
(
poﬁ
 *pool);

160 
	`su•íd_°øtum
(
poﬁ
 *pool);

161 
	`dev_îr‹
(
cgpu_öfo
 *
dev
, 
dev_ªas⁄
 
ªas⁄
);

162 *
	`ªÆloc_°rˇt
(*
±r
, *
s
);

163 *
	`°r_ãxt
(*
±r
);

164 
	`RíameThªad
(c⁄° * 
«me
);

165 
	`_cg£m_öô
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

166 
	`_cg£m_po°
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

167 
	`_cg£m_waô
(
cg£m_t
 *
cg£m
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

168 
	`_cg£m_mswaô
(
cg£m_t
 *
cg£m
, 
ms
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

169 
	`cg£m_ª£t
(
cg£m_t
 *
cg£m
);

170 
	`cg£m_de°roy
(
cg£m_t
 *
cg£m
);

171 
boﬁ
 
	`cg_com∂ëi⁄_timeout
(*
‚
, *
‚¨g
, 
timeout
);

172 
	`_cg_mem˝y
(*
de°
, c⁄° *
§c
, 
n
, c⁄° *
fûe
, c⁄° *
func
, c⁄° 
löe
);

174 
	#cg£m_öô
(
_£m
Ë
	`_cg£m_öô
(_£m, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

175 
	#cg£m_po°
(
_£m
Ë
	`_cg£m_po°
(_£m, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

176 
	#cg£m_waô
(
_£m
Ë
	`_cg£m_waô
(_£m, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

177 
	#cg£m_mswaô
(
_£m
, 
_timeout
Ë
	`_cg£m_mswaô
(_£m, _timeout, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

178 
	#cg_mem˝y
(
de°
, 
§c
, 
n
Ë
	`_cg_mem˝y
(de°, src,Ç, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

181 
ölöe
 
	$Æign_Àn
(
size_t
 *
Àn
)

183 i‡(*
Àn
 % 4)

184 *
Àn
 += 4 - (*len % 4);

185 
	}
}

	@warn-on-use.h

64 #i‚de‡
_GL_WARN_ON_USE


66 #i‡4 < 
__GNUC__
 || (__GNUC__ =4 && 3 <
__GNUC_MINOR__
)

68 
	#_GL_WARN_ON_USE
(
fun˘i⁄
, 
mesßge
) \

69 
	`__ty≥of__
 (
fun˘i⁄
Ëfun˘i⁄ 
	`__©åibuã__
 ((
	`__w¨nög__
 (
mesßge
)))

	)

70 #ñi‡
__GNUC__
 >3 && 
GNULIB_STRICT_CHECKING


72 
	#_GL_WARN_ON_USE
(
fun˘i⁄
, 
mesßge
) \

73 
	`__ty≥of__
 (
fun˘i⁄
Ë
	)
function

75 
	#_GL_WARN_ON_USE
(
fun˘i⁄
, 
mesßge
) \

76 
_GL_WARN_EXTERN_C
 
_gl_w¨n_⁄_u£


	)

86 #i‚de‡
_GL_WARN_ON_USE_CXX


87 #i‡4 < 
__GNUC__
 || (__GNUC__ =4 && 3 <
__GNUC_MINOR__
)

88 
	#_GL_WARN_ON_USE_CXX
(
fun˘i⁄
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
msg
) \

89 
ªây≥
 
fun˘i⁄
 
∑ømëîs_™d_©åibuãs
 \

90 
	`__©åibuã__
 ((
	`__w¨nög__
 (
msg
)))

	)

91 #ñi‡
__GNUC__
 >3 && 
GNULIB_STRICT_CHECKING


93 
	#_GL_WARN_ON_USE_CXX
(
fun˘i⁄
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
msg
) \

94 
ªây≥
 
fun˘i⁄
 
∑ømëîs_™d_©åibuãs


	)

96 
	#_GL_WARN_ON_USE_CXX
(
fun˘i⁄
,
ªây≥
,
∑ømëîs_™d_©åibuãs
,
msg
) \

97 
_GL_WARN_EXTERN_C
 
_gl_w¨n_⁄_u£


	)

103 #i‚de‡
_GL_WARN_EXTERN_C


104 #i‡
deföed
 
__˝lu•lus


105 
	#_GL_WARN_EXTERN_C
 "C"

	)

107 
	#_GL_WARN_EXTERN_C
 

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/byteswap.h

18 #i‚de‡
_BYTESWAP_H


19 
	#_BYTESWAP_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/byãsw≠.h
>

31 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

34 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #ifde‡
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #ifde‡
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #ifde‡
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/i2c-dev.h

23 #i‚de‡
_LINUX_I2C_DEV_H


24 
	#_LINUX_I2C_DEV_H


	)

26 
	~<löux/ty≥s.h
>

35 
	#I2C_RETRIES
 0x0701

	)

37 
	#I2C_TIMEOUT
 0x0702

	)

42 
	#I2C_SLAVE
 0x0703

	)

43 
	#I2C_SLAVE_FORCE
 0x0706

	)

45 
	#I2C_TENBIT
 0x0704

	)

47 
	#I2C_FUNCS
 0x0705

	)

49 
	#I2C_RDWR
 0x0707

	)

51 
	#I2C_PEC
 0x0708

	)

52 
	#I2C_SMBUS
 0x0720

	)

56 
	si2c_smbus_io˘l_d©a
 {

57 
__u8
 
	mªad_wrôe
;

58 
__u8
 
	mcomm™d
;

59 
__u32
 
	msize
;

60 
i2c_smbus_d©a
 *
	md©a
;

64 
	si2c_rdwr_io˘l_d©a
 {

65 
i2c_msg
 *
	mmsgs
;

66 
__u32
 
	mnmsgs
;

69 
	#I2C_RDWR_IOCTL_MAX_MSGS
 42

	)

71 
	#I2C_RDRW_IOCTL_MAX_MSGS
 
I2C_RDWR_IOCTL_MAX_MSGS


	)

	@/usr/include/linux/spi/spidev.h

22 #i‚de‡
SPIDEV_H


23 
	#SPIDEV_H


	)

25 
	~<löux/ty≥s.h
>

26 
	~<löux/io˘l.h
>

32 
	#SPI_CPHA
 0x01

	)

33 
	#SPI_CPOL
 0x02

	)

35 
	#SPI_MODE_0
 (0|0)

	)

36 
	#SPI_MODE_1
 (0|
SPI_CPHA
)

	)

37 
	#SPI_MODE_2
 (
SPI_CPOL
|0)

	)

38 
	#SPI_MODE_3
 (
SPI_CPOL
|
SPI_CPHA
)

	)

40 
	#SPI_CS_HIGH
 0x04

	)

41 
	#SPI_LSB_FIRST
 0x08

	)

42 
	#SPI_3WIRE
 0x10

	)

43 
	#SPI_LOOP
 0x20

	)

44 
	#SPI_NO_CS
 0x40

	)

45 
	#SPI_READY
 0x80

	)

46 
	#SPI_TX_DUAL
 0x100

	)

47 
	#SPI_TX_QUAD
 0x200

	)

48 
	#SPI_RX_DUAL
 0x400

	)

49 
	#SPI_RX_QUAD
 0x800

	)

55 
	#SPI_IOC_MAGIC
 'k'

	)

90 
	s•i_ioc_å™s„r
 {

91 
__u64
 
	mtx_buf
;

92 
__u64
 
	mrx_buf
;

94 
__u32
 
	mÀn
;

95 
__u32
 
	m•ìd_hz
;

97 
__u16
 
	mdñay_u£cs
;

98 
__u8
 
	mbôs_≥r_w‹d
;

99 
__u8
 
	mcs_ch™ge
;

100 
__u8
 
	mtx_nbôs
;

101 
__u8
 
	mrx_nbôs
;

102 
__u16
 
	m∑d
;

114 
	#SPI_MSGSIZE
(
N
) \

115 ((((
N
)*( (
•i_ioc_å™s„r
))Ë< (1 << 
_IOC_SIZEBITS
)) \

116 ? ((
N
)*( (
•i_ioc_å™s„r
))Ë: 0)

	)

117 
	#SPI_IOC_MESSAGE
(
N
Ë
	`_IOW
(
SPI_IOC_MAGIC
, 0, [
	`SPI_MSGSIZE
(N)])

	)

121 
	#SPI_IOC_RD_MODE
 
	`_IOR
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

122 
	#SPI_IOC_WR_MODE
 
	`_IOW
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

125 
	#SPI_IOC_RD_LSB_FIRST
 
	`_IOR
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

126 
	#SPI_IOC_WR_LSB_FIRST
 
	`_IOW
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

129 
	#SPI_IOC_RD_BITS_PER_WORD
 
	`_IOR
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

130 
	#SPI_IOC_WR_BITS_PER_WORD
 
	`_IOW
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

133 
	#SPI_IOC_RD_MAX_SPEED_HZ
 
	`_IOR
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

134 
	#SPI_IOC_WR_MAX_SPEED_HZ
 
	`_IOW
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

137 
	#SPI_IOC_RD_MODE32
 
	`_IOR
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

138 
	#SPI_IOC_WR_MODE32
 
	`_IOW
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

73 #ifde‡
__USE_MISC


74 
	~<sys/ty≥s.h
>

75 
	~<sys/sockë.h
>

77 
u_öt32_t
 
	tt˝_£q
;

82 
	st˝hdr


84 
__exãnsi⁄__
 union

88 
u_öt16_t
 
	mth_•‹t
;

89 
u_öt16_t
 
	mth_dp‹t
;

90 
t˝_£q
 
	mth_£q
;

91 
t˝_£q
 
	mth_ack
;

92 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


93 
u_öt8_t
 
	mth_x2
:4;

94 
u_öt8_t
 
	mth_off
:4;

96 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


97 
u_öt8_t
 
	mth_off
:4;

98 
u_öt8_t
 
	mth_x2
:4;

100 
u_öt8_t
 
	mth_Êags
;

101 
	#TH_FIN
 0x01

	)

102 
	#TH_SYN
 0x02

	)

103 
	#TH_RST
 0x04

	)

104 
	#TH_PUSH
 0x08

	)

105 
	#TH_ACK
 0x10

	)

106 
	#TH_URG
 0x20

	)

107 
u_öt16_t
 
	mth_wö
;

108 
u_öt16_t
 
	mth_sum
;

109 
u_öt16_t
 
	mth_uΩ
;

113 
u_öt16_t
 
	msour˚
;

114 
u_öt16_t
 
	mde°
;

115 
u_öt32_t
 
	m£q
;

116 
u_öt32_t
 
	mack_£q
;

117 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


118 
u_öt16_t
 
	mªs1
:4;

119 
u_öt16_t
 
	mdoff
:4;

120 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	msyn
:1;

122 
u_öt16_t
 
	mr°
:1;

123 
u_öt16_t
 
	mpsh
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	murg
:1;

126 
u_öt16_t
 
	mªs2
:2;

127 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


128 
u_öt16_t
 
	mdoff
:4;

129 
u_öt16_t
 
	mªs1
:4;

130 
u_öt16_t
 
	mªs2
:2;

131 
u_öt16_t
 
	murg
:1;

132 
u_öt16_t
 
	mack
:1;

133 
u_öt16_t
 
	mpsh
:1;

134 
u_öt16_t
 
	mr°
:1;

135 
u_öt16_t
 
	msyn
:1;

136 
u_öt16_t
 
	mfö
:1;

140 
u_öt16_t
 
	mwödow
;

141 
u_öt16_t
 
	mcheck
;

142 
u_öt16_t
 
	murg_±r
;

149 
	mTCP_ESTABLISHED
 = 1,

150 
	mTCP_SYN_SENT
,

151 
	mTCP_SYN_RECV
,

152 
	mTCP_FIN_WAIT1
,

153 
	mTCP_FIN_WAIT2
,

154 
	mTCP_TIME_WAIT
,

155 
	mTCP_CLOSE
,

156 
	mTCP_CLOSE_WAIT
,

157 
	mTCP_LAST_ACK
,

158 
	mTCP_LISTEN
,

159 
	mTCP_CLOSING


162 
	#TCPOPT_EOL
 0

	)

163 
	#TCPOPT_NOP
 1

	)

164 
	#TCPOPT_MAXSEG
 2

	)

165 
	#TCPOLEN_MAXSEG
 4

	)

166 
	#TCPOPT_WINDOW
 3

	)

167 
	#TCPOLEN_WINDOW
 3

	)

168 
	#TCPOPT_SACK_PERMITTED
 4

	)

169 
	#TCPOLEN_SACK_PERMITTED
 2

	)

170 
	#TCPOPT_SACK
 5

	)

171 
	#TCPOPT_TIMESTAMP
 8

	)

172 
	#TCPOLEN_TIMESTAMP
 10

	)

173 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

175 
	#TCPOPT_TSTAMP_HDR
 \

176 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

184 
	#TCP_MSS
 512

	)

186 
	#TCP_MAXWIN
 65535

	)

188 
	#TCP_MAX_WINSHIFT
 14

	)

190 
	#SOL_TCP
 6

	)

193 
	#TCPI_OPT_TIMESTAMPS
 1

	)

194 
	#TCPI_OPT_SACK
 2

	)

195 
	#TCPI_OPT_WSCALE
 4

	)

196 
	#TCPI_OPT_ECN
 8

	)

197 
	#TCPI_OPT_ECN_SEEN
 16

	)

198 
	#TCPI_OPT_SYN_DATA
 32

	)

201 
	et˝_ˇ_°©e


203 
	mTCP_CA_O≥n
 = 0,

204 
	mTCP_CA_Dis‹dî
 = 1,

205 
	mTCP_CA_CWR
 = 2,

206 
	mTCP_CA_Recovîy
 = 3,

207 
	mTCP_CA_Loss
 = 4

210 
	st˝_öfo


212 
u_öt8_t
 
	mt˝i_°©e
;

213 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

214 
u_öt8_t
 
	mt˝i_ªå™smôs
;

215 
u_öt8_t
 
	mt˝i_¥obes
;

216 
u_öt8_t
 
	mt˝i_backoff
;

217 
u_öt8_t
 
	mt˝i_›ti⁄s
;

218 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

220 
u_öt32_t
 
	mt˝i_πo
;

221 
u_öt32_t
 
	mt˝i_©o
;

222 
u_öt32_t
 
	mt˝i_¢d_mss
;

223 
u_öt32_t
 
	mt˝i_rcv_mss
;

225 
u_öt32_t
 
	mt˝i_u«cked
;

226 
u_öt32_t
 
	mt˝i_ßcked
;

227 
u_öt32_t
 
	mt˝i_lo°
;

228 
u_öt32_t
 
	mt˝i_ªå™s
;

229 
u_öt32_t
 
	mt˝i_Áckës
;

232 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

233 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

234 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

235 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

238 
u_öt32_t
 
	mt˝i_pmtu
;

239 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

240 
u_öt32_t
 
	mt˝i_πt
;

241 
u_öt32_t
 
	mt˝i_πtv¨
;

242 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

243 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

244 
u_öt32_t
 
	mt˝i_advmss
;

245 
u_öt32_t
 
	mt˝i_ª‹dîög
;

247 
u_öt32_t
 
	mt˝i_rcv_πt
;

248 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

250 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

255 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

257 
	st˝_md5sig


259 
sockaddr_°‹age
 
	mt˝m_addr
;

260 
u_öt16_t
 
	m__t˝m_∑d1
;

261 
u_öt16_t
 
	mt˝m_keyÀn
;

262 
u_öt32_t
 
	m__t˝m_∑d2
;

263 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

267 
	st˝_ª∑ú_›t


269 
u_öt32_t
 
	m›t_code
;

270 
u_öt32_t
 
	m›t_vÆ
;

276 
	mTCP_NO_QUEUE
,

277 
	mTCP_RECV_QUEUE
,

278 
	mTCP_SEND_QUEUE
,

279 
	mTCP_QUEUES_NR
,

283 
	#TCP_COOKIE_MIN
 8

	)

284 
	#TCP_COOKIE_MAX
 16

	)

285 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

288 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

289 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

293 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

294 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

296 
	#TCP_MSS_DEFAULT
 536U

	)

297 
	#TCP_MSS_DESIRED
 1220U

	)

299 
	st˝_cookõ_å™ß˘i⁄s


301 
u_öt16_t
 
	mt˝˘_Êags
;

302 
u_öt8_t
 
	m__t˝˘_∑d1
;

303 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

304 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

305 
u_öt16_t
 
	mt˝˘_u£d
;

306 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/stddef.h

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
83
1504
A1-board-selector.h
A1-common.h
A1-trimpot-mcp4x.h
api-btm.c
arg-nonnull.h
bench_block.h
c++defs.h
cgminer.c
compat.h
config.h
crc.h
crc16.c
driver-btm-soc.c
driver-btm-soc.h
elist.h
fpgautils.h
hf_protocol.h
hf_protocol_be.h
i2c-context.h
klist.c
klist.h
logging.c
logging.h
miner.h
miner_type.h
noncedup.c
sha2-soc.c
sha2-soc.h
sha2.c
sha2.h
spi-context.h
usbutils.h
uthash.h
util.c
util.h
warn-on-use.h
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/byteswap.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/linux/i2c-dev.h
/usr/include/linux/spi/spidev.h
/usr/include/linux/types.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/net/if.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syslog.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/posix_types.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/linux/stddef.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
